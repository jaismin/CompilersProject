
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xf2\xc5\xb4\x0c\xb5\xe1Q\xcfFb\xd6\xc8\x08W-S'
    
_lr_action_items = {'INT_CONST':([0,2,3,10,11,12,13,14,],[1,1,1,1,1,1,1,1,]),'DIVIDE':([1,5,6,7,8,9,15,16,17,18,19,20,],[-9,-10,12,-10,12,-7,-8,12,12,-6,12,-5,]),')':([1,7,8,9,15,17,18,19,20,],[-9,-10,15,-7,-8,-3,-6,-4,-5,]),'(':([0,2,3,10,11,12,13,14,],[2,2,2,2,2,2,2,2,]),'ASSIGN':([5,],[10,]),'-':([0,2,3,10,11,12,13,14,],[3,3,3,3,3,3,3,3,]),'TIMES':([1,5,6,7,8,9,15,16,17,18,19,20,],[-9,-10,14,-10,14,-7,-8,14,14,-6,14,-5,]),'PLUS':([1,5,6,7,8,9,15,16,17,18,19,20,],[-9,-10,11,-10,11,-7,-8,11,-3,-6,-4,-5,]),'IDENTIFIER':([0,2,3,10,11,12,13,14,],[5,7,7,7,7,7,7,7,]),'MINUS':([1,5,6,7,8,9,15,16,17,18,19,20,],[-9,-10,13,-10,13,-7,-8,13,-3,-6,-4,-5,]),'$end':([1,4,5,6,7,9,15,16,17,18,19,20,],[-9,0,-10,-2,-10,-7,-8,-1,-3,-6,-4,-5,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,3,10,11,12,13,14,],[6,8,9,16,17,18,19,20,]),'statement':([0,],[4,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> IDENTIFIER ASSIGN expression','statement',3,'p_statement_assign','parser.py',22),
  ('statement -> expression','statement',1,'p_statement_expr','parser.py',27),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',31),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',32),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',33),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',34),
  ('expression -> - expression','expression',2,'p_expression_uminus','parser.py',41),
  ('expression -> ( expression )','expression',3,'p_expression_group','parser.py',45),
  ('expression -> INT_CONST','expression',1,'p_expression_number','parser.py',49),
  ('expression -> IDENTIFIER','expression',1,'p_expression_name','parser.py',53),
]
