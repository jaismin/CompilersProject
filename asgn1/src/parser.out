Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    KWRD_TYPE
    LOWER_BOUND
    KWRD_ARRAY
    KWRD_LAZY
    VIEWABLE
    KWRD_THIS
    KWRD_WITH
    KWRD_FORSOME
    KWRD_DEF
    FUNTYPE
    KWRD_TRY
    NIL
    KWRD_SUPER
    KWRD_UNTIL
    VIEW
    KWRD_PACKAGE
    KWRD_CASE
    EXACTEQ
    KWRD_ABST
    KWRD_FOREACH
    KWRD_STATIC
    KWRD_NEW
    UNDER
    UPPER_BOUND
    INNER_CLASS
    KWRD_THROW
    KWRD_MACRO
    KWRD_CLASS
    KWRD_PUBLIC
    KWRD_MATCH
    KWRD_FINAL
    COMM
    KWRD_IMPLICIT
    KWRD_SEALED
    CHOOSE
    KWRD_FINALLY
    SUBTYPE
    KWRD_FOR
    QUESTION
    KWRD_IMPORT
    KWRD_YIELD
    KWRD_OVERRIDE
    newline
    AT
    KWRD_TRAIT
    KWRD_CATCH

Grammar

Rule 0     S' -> ProgramStructure
Rule 1     ProgramStructure -> ObjectDef
Rule 2     ObjectDef -> ObjectDeclare block
Rule 3     ObjectDeclare -> KWRD_OBJECT IDENTIFIER
Rule 4     ObjectDeclare -> KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
Rule 5     expression -> assignment_expression
Rule 6     expression_optional -> expression
Rule 7     expression_optional -> empty
Rule 8     assignment_expression -> assignment
Rule 9     assignment_expression -> conditional_or_expression
Rule 10    assignment -> valid_variable assignment_operator assignment_expression
Rule 11    assignment_operator -> ASSIGN
Rule 12    assignment_operator -> TIMES_ASSIGN
Rule 13    assignment_operator -> DIVIDE_ASSIGN
Rule 14    assignment_operator -> REMAINDER_ASSIGN
Rule 15    assignment_operator -> PLUS_ASSIGN
Rule 16    assignment_operator -> MINUS_ASSIGN
Rule 17    assignment_operator -> LSHIFT_ASSIGN
Rule 18    assignment_operator -> RSHIFT_ASSIGN
Rule 19    assignment_operator -> AND_ASSIGN
Rule 20    assignment_operator -> OR_ASSIGN
Rule 21    assignment_operator -> XOR_ASSIGN
Rule 22    conditional_or_expression -> conditional_and_expression
Rule 23    conditional_or_expression -> conditional_or_expression OR conditional_and_expression
Rule 24    conditional_and_expression -> inclusive_or_expression
Rule 25    conditional_and_expression -> conditional_and_expression AND inclusive_or_expression
Rule 26    inclusive_or_expression -> exclusive_or_expression
Rule 27    inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression
Rule 28    exclusive_or_expression -> and_expression
Rule 29    exclusive_or_expression -> exclusive_or_expression XOR and_expression
Rule 30    and_expression -> equality_expression
Rule 31    and_expression -> and_expression AND_BITWISE equality_expression
Rule 32    equality_expression -> relational_expression
Rule 33    equality_expression -> equality_expression EQUAL relational_expression
Rule 34    equality_expression -> equality_expression NEQUAL relational_expression
Rule 35    relational_expression -> shift_expression
Rule 36    relational_expression -> relational_expression GREATER shift_expression
Rule 37    relational_expression -> relational_expression LESS shift_expression
Rule 38    relational_expression -> relational_expression GEQ shift_expression
Rule 39    relational_expression -> relational_expression LEQ shift_expression
Rule 40    shift_expression -> additive_expression
Rule 41    shift_expression -> shift_expression LSHIFT additive_expression
Rule 42    shift_expression -> shift_expression RSHIFT additive_expression
Rule 43    additive_expression -> multiplicative_expression
Rule 44    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 45    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 46    multiplicative_expression -> unary_expression
Rule 47    multiplicative_expression -> multiplicative_expression TIMES unary_expression
Rule 48    multiplicative_expression -> multiplicative_expression DIVIDE unary_expression
Rule 49    multiplicative_expression -> multiplicative_expression REMAINDER unary_expression
Rule 50    unary_expression -> PLUS unary_expression
Rule 51    unary_expression -> MINUS unary_expression
Rule 52    unary_expression -> unary_expression_not_plus_minus
Rule 53    unary_expression_not_plus_minus -> variable_literal
Rule 54    unary_expression_not_plus_minus -> TILDA unary_expression
Rule 55    unary_expression_not_plus_minus -> NOT unary_expression
Rule 56    unary_expression_not_plus_minus -> LPAREN expression RPAREN
Rule 57    primary -> literal
Rule 58    primary -> method_invocation
Rule 59    literal -> int_float
Rule 60    literal -> CHARACTER
Rule 61    literal -> STRING_CONST
Rule 62    literal -> BOOL_CONSTT
Rule 63    literal -> BOOL_CONSTF
Rule 64    literal -> KWRD_NULL
Rule 65    int_float -> FLOAT_CONST
Rule 66    int_float -> INT_CONST
Rule 67    method_invocation -> name LPAREN argument_list_opt RPAREN
Rule 68    array_access -> name LBPAREN expression RBPAREN
Rule 69    argument_list_opt -> argument_list
Rule 70    argument_list_opt -> empty
Rule 71    argument_list -> expression
Rule 72    argument_list -> argument_list COMMA expression
Rule 73    name -> simple_name
Rule 74    name -> qualified_name
Rule 75    simple_name -> IDENTIFIER
Rule 76    qualified_name -> name DOT simple_name
Rule 77    valid_variable -> name
Rule 78    valid_variable -> array_access
Rule 79    variable_literal -> valid_variable
Rule 80    variable_literal -> primary
Rule 81    block -> BLOCK_BEGIN block_statements_opt BLOCK_END
Rule 82    block_statements_opt -> block_statements
Rule 83    block_statements_opt -> empty
Rule 84    block_statements -> block_statement
Rule 85    block_statements -> block_statements block_statement
Rule 86    block_statement -> local_variable_declaration_statement
Rule 87    block_statement -> statement
Rule 88    modifier_opts -> modifier
Rule 89    modifier_opts -> empty
Rule 90    declaration_keyword -> KWRD_VAR
Rule 91    declaration_keyword -> KWRD_VAL
Rule 92    local_variable_declaration_statement -> local_variable_declaration STATE_END
Rule 93    local_variable_declaration -> modifier_opts declaration_keyword variable_declaration_body
Rule 94    variable_declaration_body -> variable_declarator ASSIGN expression
Rule 95    variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN argument_list RPAREN
Rule 96    variable_declarators -> variable_declarator
Rule 97    variable_declarators -> variable_declarators COMMA variable_declarator
Rule 98    variable_declarator -> variable_declarator_id
Rule 99    variable_declarator_id -> IDENTIFIER COLON primitive_type
Rule 100   statement -> normal_statement
Rule 101   statement -> if_then_statement
Rule 102   statement -> if_then_else_statement
Rule 103   statement -> while_statement
Rule 104   statement -> do_while_statement
Rule 105   normal_statement -> block
Rule 106   normal_statement -> expression_statement
Rule 107   normal_statement -> empty_statement
Rule 108   normal_statement -> return_statement
Rule 109   expression_statement -> statement_expression STATE_END
Rule 110   statement_expression -> assignment
Rule 111   statement_expression -> method_invocation
Rule 112   if_then_statement -> KWRD_IF LPAREN expression RPAREN statement
Rule 113   if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
Rule 114   if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
Rule 115   if_then_else_intermediate -> normal_statement
Rule 116   if_then_else_intermediate -> if_then_else_statement_precedence
Rule 117   while_statement -> KWRD_WHILE LPAREN expression RPAREN statement
Rule 118   do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
Rule 119   empty_statement -> STATE_END
Rule 120   return_statement -> KWRD_RETURN expression_optional STATE_END
Rule 121   modifier -> KWRD_PROTECTED
Rule 122   modifier -> KWRD_PRIVATE
Rule 123   type -> primitive_type
Rule 124   primitive_type -> TYPE_INT
Rule 125   primitive_type -> TYPE_FLOAT
Rule 126   primitive_type -> TYPE_CHAR
Rule 127   primitive_type -> TYPE_STRING
Rule 128   primitive_type -> TYPE_BOOLEAN
Rule 129   print_st -> IDENTIFIER LPAREN IDENTIFIER RPAREN
Rule 130   empty -> <empty>

Terminals, with rules where they appear

AND                  : 25
AND_ASSIGN           : 19
AND_BITWISE          : 31
ASSIGN               : 11 94 95
AT                   : 
BLOCK_BEGIN          : 81
BLOCK_END            : 81
BOOL_CONSTF          : 63
BOOL_CONSTT          : 62
CHARACTER            : 60
CHOOSE               : 
COLON                : 99
COMM                 : 
COMMA                : 72 97
DIVIDE               : 48
DIVIDE_ASSIGN        : 13
DOT                  : 76
EQUAL                : 33
EXACTEQ              : 
FLOAT_CONST          : 65
FUNTYPE              : 
GEQ                  : 38
GREATER              : 36
IDENTIFIER           : 3 4 4 75 99 129 129
INNER_CLASS          : 
INT_CONST            : 66
KWRD_ABST            : 
KWRD_ARRAY           : 
KWRD_CASE            : 
KWRD_CATCH           : 
KWRD_CLASS           : 
KWRD_DEF             : 
KWRD_DO              : 118
KWRD_ELSE            : 113 114
KWRD_EXTNDS          : 4
KWRD_FINAL           : 
KWRD_FINALLY         : 
KWRD_FOR             : 
KWRD_FOREACH         : 
KWRD_FORSOME         : 
KWRD_IF              : 112 113 114
KWRD_IMPLICIT        : 
KWRD_IMPORT          : 
KWRD_LAZY            : 
KWRD_MACRO           : 
KWRD_MATCH           : 
KWRD_NEW             : 
KWRD_NULL            : 64
KWRD_OBJECT          : 3 4
KWRD_OVERRIDE        : 
KWRD_PACKAGE         : 
KWRD_PRIVATE         : 122
KWRD_PROTECTED       : 121
KWRD_PUBLIC          : 
KWRD_RETURN          : 120
KWRD_SEALED          : 
KWRD_STATIC          : 
KWRD_SUPER           : 
KWRD_THIS            : 
KWRD_THROW           : 
KWRD_TRAIT           : 
KWRD_TRY             : 
KWRD_TYPE            : 
KWRD_UNTIL           : 
KWRD_VAL             : 91
KWRD_VAR             : 90
KWRD_WHILE           : 117 118
KWRD_WITH            : 
KWRD_YIELD           : 
LBPAREN              : 68
LEQ                  : 39
LESS                 : 37
LOWER_BOUND          : 
LPAREN               : 56 67 95 95 112 113 114 117 118 129
LSHIFT               : 41
LSHIFT_ASSIGN        : 17
MINUS                : 45 51
MINUS_ASSIGN         : 16
NEQUAL               : 34
NIL                  : 
NOT                  : 55
OR                   : 23
OR_ASSIGN            : 20
OR_BITWISE           : 27
PLUS                 : 44 50
PLUS_ASSIGN          : 15
QUESTION             : 
RBPAREN              : 68
REMAINDER            : 49
REMAINDER_ASSIGN     : 14
RPAREN               : 56 67 95 95 112 113 114 117 118 129
RSHIFT               : 42
RSHIFT_ASSIGN        : 18
STATE_END            : 92 109 118 119 120
STRING_CONST         : 61
SUBTYPE              : 
TILDA                : 54
TIMES                : 47
TIMES_ASSIGN         : 12
TYPE_BOOLEAN         : 128
TYPE_CHAR            : 126
TYPE_FLOAT           : 125
TYPE_INT             : 124
TYPE_STRING          : 127
UNDER                : 
UPPER_BOUND          : 
VIEW                 : 
VIEWABLE             : 
XOR                  : 29
XOR_ASSIGN           : 21
error                : 
newline              : 

Nonterminals, with rules where they appear

ObjectDeclare        : 2
ObjectDef            : 1
ProgramStructure     : 0
additive_expression  : 40 41 42 44 45
and_expression       : 28 29 31
argument_list        : 69 72 95
argument_list_opt    : 67
array_access         : 78
assignment           : 8 110
assignment_expression : 5 10
assignment_operator  : 10
block                : 2 105
block_statement      : 84 85
block_statements     : 82 85
block_statements_opt : 81
conditional_and_expression : 22 23 25
conditional_or_expression : 9 23
declaration_keyword  : 93
do_while_statement   : 104
empty                : 7 70 83 89
empty_statement      : 107
equality_expression  : 30 31 33 34
exclusive_or_expression : 26 27 29
expression           : 6 56 68 71 72 94 112 113 114 117 118
expression_optional  : 120
expression_statement : 106
if_then_else_intermediate : 113 114 114
if_then_else_statement : 102
if_then_else_statement_precedence : 116
if_then_statement    : 101
inclusive_or_expression : 24 25 27
int_float            : 59
literal              : 57
local_variable_declaration : 92
local_variable_declaration_statement : 86
method_invocation    : 58 111
modifier             : 88
modifier_opts        : 93
multiplicative_expression : 43 44 45 47 48 49
name                 : 67 68 76 77
normal_statement     : 100 115
primary              : 80
primitive_type       : 99 123
print_st             : 
qualified_name       : 74
relational_expression : 32 33 34 36 37 38 39
return_statement     : 108
shift_expression     : 35 36 37 38 39 41 42
simple_name          : 73 76
statement            : 87 112 113 117 118
statement_expression : 109
type                 : 
unary_expression     : 46 47 48 49 50 51 54 55
unary_expression_not_plus_minus : 52
valid_variable       : 10 79
variable_declaration_body : 93
variable_declarator  : 94 96 97
variable_declarator_id : 98
variable_declarators : 95 97
variable_literal     : 53
while_statement      : 103

Parsing method: LALR

state 0

    (0) S' -> . ProgramStructure
    (1) ProgramStructure -> . ObjectDef
    (2) ObjectDef -> . ObjectDeclare block
    (3) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (4) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER

    KWRD_OBJECT     shift and go to state 4

    ProgramStructure               shift and go to state 2
    ObjectDeclare                  shift and go to state 3
    ObjectDef                      shift and go to state 1

state 1

    (1) ProgramStructure -> ObjectDef .

    $end            reduce using rule 1 (ProgramStructure -> ObjectDef .)


state 2

    (0) S' -> ProgramStructure .



state 3

    (2) ObjectDef -> ObjectDeclare . block
    (81) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 5

    block                          shift and go to state 6

state 4

    (3) ObjectDeclare -> KWRD_OBJECT . IDENTIFIER
    (4) ObjectDeclare -> KWRD_OBJECT . IDENTIFIER KWRD_EXTNDS IDENTIFIER

    IDENTIFIER      shift and go to state 7


state 5

    (81) block -> BLOCK_BEGIN . block_statements_opt BLOCK_END
    (82) block_statements_opt -> . block_statements
    (83) block_statements_opt -> . empty
    (84) block_statements -> . block_statement
    (85) block_statements -> . block_statements block_statement
    (130) empty -> .
    (86) block_statement -> . local_variable_declaration_statement
    (87) block_statement -> . statement
    (92) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (100) statement -> . normal_statement
    (101) statement -> . if_then_statement
    (102) statement -> . if_then_else_statement
    (103) statement -> . while_statement
    (104) statement -> . do_while_statement
    (93) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (105) normal_statement -> . block
    (106) normal_statement -> . expression_statement
    (107) normal_statement -> . empty_statement
    (108) normal_statement -> . return_statement
    (112) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (113) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (117) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (118) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (88) modifier_opts -> . modifier
    (89) modifier_opts -> . empty
    (81) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (109) expression_statement -> . statement_expression STATE_END
    (119) empty_statement -> . STATE_END
    (120) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (121) modifier -> . KWRD_PROTECTED
    (122) modifier -> . KWRD_PRIVATE
    (110) statement_expression -> . assignment
    (111) statement_expression -> . method_invocation
    (10) assignment -> . valid_variable assignment_operator assignment_expression
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name

    BLOCK_END       reduce using rule 130 (empty -> .)
    KWRD_VAR        reduce using rule 130 (empty -> .)
    KWRD_VAL        reduce using rule 130 (empty -> .)
    KWRD_IF         shift and go to state 33
    KWRD_WHILE      shift and go to state 24
    KWRD_DO         shift and go to state 30
    BLOCK_BEGIN     shift and go to state 5
    STATE_END       shift and go to state 8
    KWRD_RETURN     shift and go to state 31
    KWRD_PROTECTED  shift and go to state 11
    KWRD_PRIVATE    shift and go to state 36
    IDENTIFIER      shift and go to state 34

    expression_statement           shift and go to state 9
    normal_statement               shift and go to state 10
    if_then_statement              shift and go to state 12
    array_access                   shift and go to state 13
    block_statements_opt           shift and go to state 14
    qualified_name                 shift and go to state 15
    valid_variable                 shift and go to state 16
    block_statement                shift and go to state 17
    return_statement               shift and go to state 18
    while_statement                shift and go to state 19
    statement                      shift and go to state 20
    statement_expression           shift and go to state 21
    method_invocation              shift and go to state 22
    simple_name                    shift and go to state 23
    empty                          shift and go to state 25
    block_statements               shift and go to state 26
    local_variable_declaration_statement shift and go to state 27
    do_while_statement             shift and go to state 28
    assignment                     shift and go to state 29
    modifier_opts                  shift and go to state 32
    name                           shift and go to state 35
    empty_statement                shift and go to state 37
    local_variable_declaration     shift and go to state 38
    modifier                       shift and go to state 39
    block                          shift and go to state 40
    if_then_else_statement         shift and go to state 41

state 6

    (2) ObjectDef -> ObjectDeclare block .

    $end            reduce using rule 2 (ObjectDef -> ObjectDeclare block .)


state 7

    (3) ObjectDeclare -> KWRD_OBJECT IDENTIFIER .
    (4) ObjectDeclare -> KWRD_OBJECT IDENTIFIER . KWRD_EXTNDS IDENTIFIER

    BLOCK_BEGIN     reduce using rule 3 (ObjectDeclare -> KWRD_OBJECT IDENTIFIER .)
    KWRD_EXTNDS     shift and go to state 42


state 8

    (119) empty_statement -> STATE_END .

    KWRD_IF         reduce using rule 119 (empty_statement -> STATE_END .)
    KWRD_WHILE      reduce using rule 119 (empty_statement -> STATE_END .)
    KWRD_DO         reduce using rule 119 (empty_statement -> STATE_END .)
    BLOCK_BEGIN     reduce using rule 119 (empty_statement -> STATE_END .)
    STATE_END       reduce using rule 119 (empty_statement -> STATE_END .)
    KWRD_RETURN     reduce using rule 119 (empty_statement -> STATE_END .)
    KWRD_PROTECTED  reduce using rule 119 (empty_statement -> STATE_END .)
    KWRD_PRIVATE    reduce using rule 119 (empty_statement -> STATE_END .)
    IDENTIFIER      reduce using rule 119 (empty_statement -> STATE_END .)
    KWRD_VAR        reduce using rule 119 (empty_statement -> STATE_END .)
    KWRD_VAL        reduce using rule 119 (empty_statement -> STATE_END .)
    BLOCK_END       reduce using rule 119 (empty_statement -> STATE_END .)
    KWRD_ELSE       reduce using rule 119 (empty_statement -> STATE_END .)


state 9

    (106) normal_statement -> expression_statement .

    KWRD_IF         reduce using rule 106 (normal_statement -> expression_statement .)
    KWRD_WHILE      reduce using rule 106 (normal_statement -> expression_statement .)
    KWRD_DO         reduce using rule 106 (normal_statement -> expression_statement .)
    BLOCK_BEGIN     reduce using rule 106 (normal_statement -> expression_statement .)
    STATE_END       reduce using rule 106 (normal_statement -> expression_statement .)
    KWRD_RETURN     reduce using rule 106 (normal_statement -> expression_statement .)
    KWRD_PROTECTED  reduce using rule 106 (normal_statement -> expression_statement .)
    KWRD_PRIVATE    reduce using rule 106 (normal_statement -> expression_statement .)
    IDENTIFIER      reduce using rule 106 (normal_statement -> expression_statement .)
    KWRD_VAR        reduce using rule 106 (normal_statement -> expression_statement .)
    KWRD_VAL        reduce using rule 106 (normal_statement -> expression_statement .)
    BLOCK_END       reduce using rule 106 (normal_statement -> expression_statement .)
    KWRD_ELSE       reduce using rule 106 (normal_statement -> expression_statement .)


state 10

    (100) statement -> normal_statement .

    KWRD_IF         reduce using rule 100 (statement -> normal_statement .)
    KWRD_WHILE      reduce using rule 100 (statement -> normal_statement .)
    KWRD_DO         reduce using rule 100 (statement -> normal_statement .)
    BLOCK_BEGIN     reduce using rule 100 (statement -> normal_statement .)
    STATE_END       reduce using rule 100 (statement -> normal_statement .)
    KWRD_RETURN     reduce using rule 100 (statement -> normal_statement .)
    KWRD_PROTECTED  reduce using rule 100 (statement -> normal_statement .)
    KWRD_PRIVATE    reduce using rule 100 (statement -> normal_statement .)
    IDENTIFIER      reduce using rule 100 (statement -> normal_statement .)
    KWRD_VAR        reduce using rule 100 (statement -> normal_statement .)
    KWRD_VAL        reduce using rule 100 (statement -> normal_statement .)
    BLOCK_END       reduce using rule 100 (statement -> normal_statement .)


state 11

    (121) modifier -> KWRD_PROTECTED .

    KWRD_VAR        reduce using rule 121 (modifier -> KWRD_PROTECTED .)
    KWRD_VAL        reduce using rule 121 (modifier -> KWRD_PROTECTED .)


state 12

    (101) statement -> if_then_statement .

    KWRD_IF         reduce using rule 101 (statement -> if_then_statement .)
    KWRD_WHILE      reduce using rule 101 (statement -> if_then_statement .)
    KWRD_DO         reduce using rule 101 (statement -> if_then_statement .)
    BLOCK_BEGIN     reduce using rule 101 (statement -> if_then_statement .)
    STATE_END       reduce using rule 101 (statement -> if_then_statement .)
    KWRD_RETURN     reduce using rule 101 (statement -> if_then_statement .)
    KWRD_PROTECTED  reduce using rule 101 (statement -> if_then_statement .)
    KWRD_PRIVATE    reduce using rule 101 (statement -> if_then_statement .)
    IDENTIFIER      reduce using rule 101 (statement -> if_then_statement .)
    KWRD_VAR        reduce using rule 101 (statement -> if_then_statement .)
    KWRD_VAL        reduce using rule 101 (statement -> if_then_statement .)
    BLOCK_END       reduce using rule 101 (statement -> if_then_statement .)


state 13

    (78) valid_variable -> array_access .

    ASSIGN          reduce using rule 78 (valid_variable -> array_access .)
    TIMES_ASSIGN    reduce using rule 78 (valid_variable -> array_access .)
    DIVIDE_ASSIGN   reduce using rule 78 (valid_variable -> array_access .)
    REMAINDER_ASSIGN reduce using rule 78 (valid_variable -> array_access .)
    PLUS_ASSIGN     reduce using rule 78 (valid_variable -> array_access .)
    MINUS_ASSIGN    reduce using rule 78 (valid_variable -> array_access .)
    LSHIFT_ASSIGN   reduce using rule 78 (valid_variable -> array_access .)
    RSHIFT_ASSIGN   reduce using rule 78 (valid_variable -> array_access .)
    AND_ASSIGN      reduce using rule 78 (valid_variable -> array_access .)
    OR_ASSIGN       reduce using rule 78 (valid_variable -> array_access .)
    XOR_ASSIGN      reduce using rule 78 (valid_variable -> array_access .)
    TIMES           reduce using rule 78 (valid_variable -> array_access .)
    DIVIDE          reduce using rule 78 (valid_variable -> array_access .)
    REMAINDER       reduce using rule 78 (valid_variable -> array_access .)
    PLUS            reduce using rule 78 (valid_variable -> array_access .)
    MINUS           reduce using rule 78 (valid_variable -> array_access .)
    LSHIFT          reduce using rule 78 (valid_variable -> array_access .)
    RSHIFT          reduce using rule 78 (valid_variable -> array_access .)
    GREATER         reduce using rule 78 (valid_variable -> array_access .)
    LESS            reduce using rule 78 (valid_variable -> array_access .)
    GEQ             reduce using rule 78 (valid_variable -> array_access .)
    LEQ             reduce using rule 78 (valid_variable -> array_access .)
    EQUAL           reduce using rule 78 (valid_variable -> array_access .)
    NEQUAL          reduce using rule 78 (valid_variable -> array_access .)
    AND_BITWISE     reduce using rule 78 (valid_variable -> array_access .)
    XOR             reduce using rule 78 (valid_variable -> array_access .)
    OR_BITWISE      reduce using rule 78 (valid_variable -> array_access .)
    AND             reduce using rule 78 (valid_variable -> array_access .)
    OR              reduce using rule 78 (valid_variable -> array_access .)
    RPAREN          reduce using rule 78 (valid_variable -> array_access .)
    STATE_END       reduce using rule 78 (valid_variable -> array_access .)
    COMMA           reduce using rule 78 (valid_variable -> array_access .)
    RBPAREN         reduce using rule 78 (valid_variable -> array_access .)


state 14

    (81) block -> BLOCK_BEGIN block_statements_opt . BLOCK_END

    BLOCK_END       shift and go to state 43


state 15

    (74) name -> qualified_name .

    LBPAREN         reduce using rule 74 (name -> qualified_name .)
    LPAREN          reduce using rule 74 (name -> qualified_name .)
    DOT             reduce using rule 74 (name -> qualified_name .)
    TIMES           reduce using rule 74 (name -> qualified_name .)
    DIVIDE          reduce using rule 74 (name -> qualified_name .)
    REMAINDER       reduce using rule 74 (name -> qualified_name .)
    PLUS            reduce using rule 74 (name -> qualified_name .)
    MINUS           reduce using rule 74 (name -> qualified_name .)
    LSHIFT          reduce using rule 74 (name -> qualified_name .)
    RSHIFT          reduce using rule 74 (name -> qualified_name .)
    GREATER         reduce using rule 74 (name -> qualified_name .)
    LESS            reduce using rule 74 (name -> qualified_name .)
    GEQ             reduce using rule 74 (name -> qualified_name .)
    LEQ             reduce using rule 74 (name -> qualified_name .)
    EQUAL           reduce using rule 74 (name -> qualified_name .)
    NEQUAL          reduce using rule 74 (name -> qualified_name .)
    AND_BITWISE     reduce using rule 74 (name -> qualified_name .)
    XOR             reduce using rule 74 (name -> qualified_name .)
    OR_BITWISE      reduce using rule 74 (name -> qualified_name .)
    AND             reduce using rule 74 (name -> qualified_name .)
    OR              reduce using rule 74 (name -> qualified_name .)
    STATE_END       reduce using rule 74 (name -> qualified_name .)
    RPAREN          reduce using rule 74 (name -> qualified_name .)
    COMMA           reduce using rule 74 (name -> qualified_name .)
    RBPAREN         reduce using rule 74 (name -> qualified_name .)
    ASSIGN          reduce using rule 74 (name -> qualified_name .)
    TIMES_ASSIGN    reduce using rule 74 (name -> qualified_name .)
    DIVIDE_ASSIGN   reduce using rule 74 (name -> qualified_name .)
    REMAINDER_ASSIGN reduce using rule 74 (name -> qualified_name .)
    PLUS_ASSIGN     reduce using rule 74 (name -> qualified_name .)
    MINUS_ASSIGN    reduce using rule 74 (name -> qualified_name .)
    LSHIFT_ASSIGN   reduce using rule 74 (name -> qualified_name .)
    RSHIFT_ASSIGN   reduce using rule 74 (name -> qualified_name .)
    AND_ASSIGN      reduce using rule 74 (name -> qualified_name .)
    OR_ASSIGN       reduce using rule 74 (name -> qualified_name .)
    XOR_ASSIGN      reduce using rule 74 (name -> qualified_name .)


state 16

    (10) assignment -> valid_variable . assignment_operator assignment_expression
    (11) assignment_operator -> . ASSIGN
    (12) assignment_operator -> . TIMES_ASSIGN
    (13) assignment_operator -> . DIVIDE_ASSIGN
    (14) assignment_operator -> . REMAINDER_ASSIGN
    (15) assignment_operator -> . PLUS_ASSIGN
    (16) assignment_operator -> . MINUS_ASSIGN
    (17) assignment_operator -> . LSHIFT_ASSIGN
    (18) assignment_operator -> . RSHIFT_ASSIGN
    (19) assignment_operator -> . AND_ASSIGN
    (20) assignment_operator -> . OR_ASSIGN
    (21) assignment_operator -> . XOR_ASSIGN

    ASSIGN          shift and go to state 54
    TIMES_ASSIGN    shift and go to state 44
    DIVIDE_ASSIGN   shift and go to state 51
    REMAINDER_ASSIGN shift and go to state 47
    PLUS_ASSIGN     shift and go to state 53
    MINUS_ASSIGN    shift and go to state 46
    LSHIFT_ASSIGN   shift and go to state 49
    RSHIFT_ASSIGN   shift and go to state 45
    AND_ASSIGN      shift and go to state 50
    OR_ASSIGN       shift and go to state 48
    XOR_ASSIGN      shift and go to state 55

    assignment_operator            shift and go to state 52

state 17

    (84) block_statements -> block_statement .

    KWRD_IF         reduce using rule 84 (block_statements -> block_statement .)
    KWRD_WHILE      reduce using rule 84 (block_statements -> block_statement .)
    KWRD_DO         reduce using rule 84 (block_statements -> block_statement .)
    BLOCK_BEGIN     reduce using rule 84 (block_statements -> block_statement .)
    STATE_END       reduce using rule 84 (block_statements -> block_statement .)
    KWRD_RETURN     reduce using rule 84 (block_statements -> block_statement .)
    KWRD_PROTECTED  reduce using rule 84 (block_statements -> block_statement .)
    KWRD_PRIVATE    reduce using rule 84 (block_statements -> block_statement .)
    IDENTIFIER      reduce using rule 84 (block_statements -> block_statement .)
    KWRD_VAR        reduce using rule 84 (block_statements -> block_statement .)
    KWRD_VAL        reduce using rule 84 (block_statements -> block_statement .)
    BLOCK_END       reduce using rule 84 (block_statements -> block_statement .)


state 18

    (108) normal_statement -> return_statement .

    KWRD_IF         reduce using rule 108 (normal_statement -> return_statement .)
    KWRD_WHILE      reduce using rule 108 (normal_statement -> return_statement .)
    KWRD_DO         reduce using rule 108 (normal_statement -> return_statement .)
    BLOCK_BEGIN     reduce using rule 108 (normal_statement -> return_statement .)
    STATE_END       reduce using rule 108 (normal_statement -> return_statement .)
    KWRD_RETURN     reduce using rule 108 (normal_statement -> return_statement .)
    KWRD_PROTECTED  reduce using rule 108 (normal_statement -> return_statement .)
    KWRD_PRIVATE    reduce using rule 108 (normal_statement -> return_statement .)
    IDENTIFIER      reduce using rule 108 (normal_statement -> return_statement .)
    KWRD_VAR        reduce using rule 108 (normal_statement -> return_statement .)
    KWRD_VAL        reduce using rule 108 (normal_statement -> return_statement .)
    BLOCK_END       reduce using rule 108 (normal_statement -> return_statement .)
    KWRD_ELSE       reduce using rule 108 (normal_statement -> return_statement .)


state 19

    (103) statement -> while_statement .

    KWRD_IF         reduce using rule 103 (statement -> while_statement .)
    KWRD_WHILE      reduce using rule 103 (statement -> while_statement .)
    KWRD_DO         reduce using rule 103 (statement -> while_statement .)
    BLOCK_BEGIN     reduce using rule 103 (statement -> while_statement .)
    STATE_END       reduce using rule 103 (statement -> while_statement .)
    KWRD_RETURN     reduce using rule 103 (statement -> while_statement .)
    KWRD_PROTECTED  reduce using rule 103 (statement -> while_statement .)
    KWRD_PRIVATE    reduce using rule 103 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 103 (statement -> while_statement .)
    KWRD_VAR        reduce using rule 103 (statement -> while_statement .)
    KWRD_VAL        reduce using rule 103 (statement -> while_statement .)
    BLOCK_END       reduce using rule 103 (statement -> while_statement .)


state 20

    (87) block_statement -> statement .

    KWRD_IF         reduce using rule 87 (block_statement -> statement .)
    KWRD_WHILE      reduce using rule 87 (block_statement -> statement .)
    KWRD_DO         reduce using rule 87 (block_statement -> statement .)
    BLOCK_BEGIN     reduce using rule 87 (block_statement -> statement .)
    STATE_END       reduce using rule 87 (block_statement -> statement .)
    KWRD_RETURN     reduce using rule 87 (block_statement -> statement .)
    KWRD_PROTECTED  reduce using rule 87 (block_statement -> statement .)
    KWRD_PRIVATE    reduce using rule 87 (block_statement -> statement .)
    IDENTIFIER      reduce using rule 87 (block_statement -> statement .)
    KWRD_VAR        reduce using rule 87 (block_statement -> statement .)
    KWRD_VAL        reduce using rule 87 (block_statement -> statement .)
    BLOCK_END       reduce using rule 87 (block_statement -> statement .)


state 21

    (109) expression_statement -> statement_expression . STATE_END

    STATE_END       shift and go to state 56


state 22

    (111) statement_expression -> method_invocation .

    STATE_END       reduce using rule 111 (statement_expression -> method_invocation .)


state 23

    (73) name -> simple_name .

    LBPAREN         reduce using rule 73 (name -> simple_name .)
    LPAREN          reduce using rule 73 (name -> simple_name .)
    DOT             reduce using rule 73 (name -> simple_name .)
    TIMES           reduce using rule 73 (name -> simple_name .)
    DIVIDE          reduce using rule 73 (name -> simple_name .)
    REMAINDER       reduce using rule 73 (name -> simple_name .)
    PLUS            reduce using rule 73 (name -> simple_name .)
    MINUS           reduce using rule 73 (name -> simple_name .)
    LSHIFT          reduce using rule 73 (name -> simple_name .)
    RSHIFT          reduce using rule 73 (name -> simple_name .)
    GREATER         reduce using rule 73 (name -> simple_name .)
    LESS            reduce using rule 73 (name -> simple_name .)
    GEQ             reduce using rule 73 (name -> simple_name .)
    LEQ             reduce using rule 73 (name -> simple_name .)
    EQUAL           reduce using rule 73 (name -> simple_name .)
    NEQUAL          reduce using rule 73 (name -> simple_name .)
    AND_BITWISE     reduce using rule 73 (name -> simple_name .)
    XOR             reduce using rule 73 (name -> simple_name .)
    OR_BITWISE      reduce using rule 73 (name -> simple_name .)
    AND             reduce using rule 73 (name -> simple_name .)
    OR              reduce using rule 73 (name -> simple_name .)
    STATE_END       reduce using rule 73 (name -> simple_name .)
    RPAREN          reduce using rule 73 (name -> simple_name .)
    COMMA           reduce using rule 73 (name -> simple_name .)
    RBPAREN         reduce using rule 73 (name -> simple_name .)
    ASSIGN          reduce using rule 73 (name -> simple_name .)
    TIMES_ASSIGN    reduce using rule 73 (name -> simple_name .)
    DIVIDE_ASSIGN   reduce using rule 73 (name -> simple_name .)
    REMAINDER_ASSIGN reduce using rule 73 (name -> simple_name .)
    PLUS_ASSIGN     reduce using rule 73 (name -> simple_name .)
    MINUS_ASSIGN    reduce using rule 73 (name -> simple_name .)
    LSHIFT_ASSIGN   reduce using rule 73 (name -> simple_name .)
    RSHIFT_ASSIGN   reduce using rule 73 (name -> simple_name .)
    AND_ASSIGN      reduce using rule 73 (name -> simple_name .)
    OR_ASSIGN       reduce using rule 73 (name -> simple_name .)
    XOR_ASSIGN      reduce using rule 73 (name -> simple_name .)


state 24

    (117) while_statement -> KWRD_WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 57


state 25

    (83) block_statements_opt -> empty .
    (89) modifier_opts -> empty .

    BLOCK_END       reduce using rule 83 (block_statements_opt -> empty .)
    KWRD_VAR        reduce using rule 89 (modifier_opts -> empty .)
    KWRD_VAL        reduce using rule 89 (modifier_opts -> empty .)


state 26

    (82) block_statements_opt -> block_statements .
    (85) block_statements -> block_statements . block_statement
    (86) block_statement -> . local_variable_declaration_statement
    (87) block_statement -> . statement
    (92) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (100) statement -> . normal_statement
    (101) statement -> . if_then_statement
    (102) statement -> . if_then_else_statement
    (103) statement -> . while_statement
    (104) statement -> . do_while_statement
    (93) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (105) normal_statement -> . block
    (106) normal_statement -> . expression_statement
    (107) normal_statement -> . empty_statement
    (108) normal_statement -> . return_statement
    (112) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (113) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (117) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (118) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (88) modifier_opts -> . modifier
    (89) modifier_opts -> . empty
    (81) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (109) expression_statement -> . statement_expression STATE_END
    (119) empty_statement -> . STATE_END
    (120) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (121) modifier -> . KWRD_PROTECTED
    (122) modifier -> . KWRD_PRIVATE
    (130) empty -> .
    (110) statement_expression -> . assignment
    (111) statement_expression -> . method_invocation
    (10) assignment -> . valid_variable assignment_operator assignment_expression
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name

    BLOCK_END       reduce using rule 82 (block_statements_opt -> block_statements .)
    KWRD_IF         shift and go to state 33
    KWRD_WHILE      shift and go to state 24
    KWRD_DO         shift and go to state 30
    BLOCK_BEGIN     shift and go to state 5
    STATE_END       shift and go to state 8
    KWRD_RETURN     shift and go to state 31
    KWRD_PROTECTED  shift and go to state 11
    KWRD_PRIVATE    shift and go to state 36
    KWRD_VAR        reduce using rule 130 (empty -> .)
    KWRD_VAL        reduce using rule 130 (empty -> .)
    IDENTIFIER      shift and go to state 34

    expression_statement           shift and go to state 9
    normal_statement               shift and go to state 10
    if_then_statement              shift and go to state 12
    array_access                   shift and go to state 13
    qualified_name                 shift and go to state 15
    valid_variable                 shift and go to state 16
    block_statement                shift and go to state 58
    return_statement               shift and go to state 18
    while_statement                shift and go to state 19
    statement                      shift and go to state 20
    statement_expression           shift and go to state 21
    method_invocation              shift and go to state 22
    simple_name                    shift and go to state 23
    empty                          shift and go to state 59
    local_variable_declaration_statement shift and go to state 27
    do_while_statement             shift and go to state 28
    assignment                     shift and go to state 29
    modifier_opts                  shift and go to state 32
    name                           shift and go to state 35
    empty_statement                shift and go to state 37
    local_variable_declaration     shift and go to state 38
    modifier                       shift and go to state 39
    block                          shift and go to state 40
    if_then_else_statement         shift and go to state 41

state 27

    (86) block_statement -> local_variable_declaration_statement .

    KWRD_IF         reduce using rule 86 (block_statement -> local_variable_declaration_statement .)
    KWRD_WHILE      reduce using rule 86 (block_statement -> local_variable_declaration_statement .)
    KWRD_DO         reduce using rule 86 (block_statement -> local_variable_declaration_statement .)
    BLOCK_BEGIN     reduce using rule 86 (block_statement -> local_variable_declaration_statement .)
    STATE_END       reduce using rule 86 (block_statement -> local_variable_declaration_statement .)
    KWRD_RETURN     reduce using rule 86 (block_statement -> local_variable_declaration_statement .)
    KWRD_PROTECTED  reduce using rule 86 (block_statement -> local_variable_declaration_statement .)
    KWRD_PRIVATE    reduce using rule 86 (block_statement -> local_variable_declaration_statement .)
    IDENTIFIER      reduce using rule 86 (block_statement -> local_variable_declaration_statement .)
    KWRD_VAR        reduce using rule 86 (block_statement -> local_variable_declaration_statement .)
    KWRD_VAL        reduce using rule 86 (block_statement -> local_variable_declaration_statement .)
    BLOCK_END       reduce using rule 86 (block_statement -> local_variable_declaration_statement .)


state 28

    (104) statement -> do_while_statement .

    KWRD_IF         reduce using rule 104 (statement -> do_while_statement .)
    KWRD_WHILE      reduce using rule 104 (statement -> do_while_statement .)
    KWRD_DO         reduce using rule 104 (statement -> do_while_statement .)
    BLOCK_BEGIN     reduce using rule 104 (statement -> do_while_statement .)
    STATE_END       reduce using rule 104 (statement -> do_while_statement .)
    KWRD_RETURN     reduce using rule 104 (statement -> do_while_statement .)
    KWRD_PROTECTED  reduce using rule 104 (statement -> do_while_statement .)
    KWRD_PRIVATE    reduce using rule 104 (statement -> do_while_statement .)
    IDENTIFIER      reduce using rule 104 (statement -> do_while_statement .)
    KWRD_VAR        reduce using rule 104 (statement -> do_while_statement .)
    KWRD_VAL        reduce using rule 104 (statement -> do_while_statement .)
    BLOCK_END       reduce using rule 104 (statement -> do_while_statement .)


state 29

    (110) statement_expression -> assignment .

    STATE_END       reduce using rule 110 (statement_expression -> assignment .)


state 30

    (118) do_while_statement -> KWRD_DO . statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (100) statement -> . normal_statement
    (101) statement -> . if_then_statement
    (102) statement -> . if_then_else_statement
    (103) statement -> . while_statement
    (104) statement -> . do_while_statement
    (105) normal_statement -> . block
    (106) normal_statement -> . expression_statement
    (107) normal_statement -> . empty_statement
    (108) normal_statement -> . return_statement
    (112) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (113) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (117) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (118) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (81) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (109) expression_statement -> . statement_expression STATE_END
    (119) empty_statement -> . STATE_END
    (120) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (110) statement_expression -> . assignment
    (111) statement_expression -> . method_invocation
    (10) assignment -> . valid_variable assignment_operator assignment_expression
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name

    KWRD_IF         shift and go to state 33
    KWRD_WHILE      shift and go to state 24
    KWRD_DO         shift and go to state 30
    BLOCK_BEGIN     shift and go to state 5
    STATE_END       shift and go to state 8
    KWRD_RETURN     shift and go to state 31
    IDENTIFIER      shift and go to state 34

    expression_statement           shift and go to state 9
    normal_statement               shift and go to state 10
    if_then_statement              shift and go to state 12
    array_access                   shift and go to state 13
    qualified_name                 shift and go to state 15
    valid_variable                 shift and go to state 16
    return_statement               shift and go to state 18
    while_statement                shift and go to state 19
    statement                      shift and go to state 60
    statement_expression           shift and go to state 21
    method_invocation              shift and go to state 22
    simple_name                    shift and go to state 23
    do_while_statement             shift and go to state 28
    assignment                     shift and go to state 29
    name                           shift and go to state 35
    empty_statement                shift and go to state 37
    block                          shift and go to state 40
    if_then_else_statement         shift and go to state 41

state 31

    (120) return_statement -> KWRD_RETURN . expression_optional STATE_END
    (6) expression_optional -> . expression
    (7) expression_optional -> . empty
    (5) expression -> . assignment_expression
    (130) empty -> .
    (8) assignment_expression -> . assignment
    (9) assignment_expression -> . conditional_or_expression
    (10) assignment -> . valid_variable assignment_operator assignment_expression
    (22) conditional_or_expression -> . conditional_and_expression
    (23) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (24) conditional_and_expression -> . inclusive_or_expression
    (25) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (26) inclusive_or_expression -> . exclusive_or_expression
    (27) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (28) exclusive_or_expression -> . and_expression
    (29) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (30) and_expression -> . equality_expression
    (31) and_expression -> . and_expression AND_BITWISE equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQUAL relational_expression
    (34) equality_expression -> . equality_expression NEQUAL relational_expression
    (35) relational_expression -> . shift_expression
    (36) relational_expression -> . relational_expression GREATER shift_expression
    (37) relational_expression -> . relational_expression LESS shift_expression
    (38) relational_expression -> . relational_expression GEQ shift_expression
    (39) relational_expression -> . relational_expression LEQ shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    STATE_END       reduce using rule 130 (empty -> .)
    IDENTIFIER      shift and go to state 34
    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    unary_expression               shift and go to state 61
    exclusive_or_expression        shift and go to state 62
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    array_access                   shift and go to state 13
    additive_expression            shift and go to state 87
    simple_name                    shift and go to state 23
    expression_optional            shift and go to state 68
    valid_variable                 shift and go to state 69
    inclusive_or_expression        shift and go to state 70
    literal                        shift and go to state 71
    and_expression                 shift and go to state 74
    relational_expression          shift and go to state 78
    method_invocation              shift and go to state 75
    conditional_or_expression      shift and go to state 76
    empty                          shift and go to state 77
    assignment_expression          shift and go to state 81
    qualified_name                 shift and go to state 15
    assignment                     shift and go to state 83
    multiplicative_expression      shift and go to state 84
    shift_expression               shift and go to state 89
    equality_expression            shift and go to state 90
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 93
    expression                     shift and go to state 96
    conditional_and_expression     shift and go to state 94

state 32

    (93) local_variable_declaration -> modifier_opts . declaration_keyword variable_declaration_body
    (90) declaration_keyword -> . KWRD_VAR
    (91) declaration_keyword -> . KWRD_VAL

    KWRD_VAR        shift and go to state 99
    KWRD_VAL        shift and go to state 97

    declaration_keyword            shift and go to state 98

state 33

    (112) if_then_statement -> KWRD_IF . LPAREN expression RPAREN statement
    (113) if_then_else_statement -> KWRD_IF . LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement

    LPAREN          shift and go to state 100


state 34

    (75) simple_name -> IDENTIFIER .

    LPAREN          reduce using rule 75 (simple_name -> IDENTIFIER .)
    LBPAREN         reduce using rule 75 (simple_name -> IDENTIFIER .)
    DOT             reduce using rule 75 (simple_name -> IDENTIFIER .)
    ASSIGN          reduce using rule 75 (simple_name -> IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 75 (simple_name -> IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 75 (simple_name -> IDENTIFIER .)
    REMAINDER_ASSIGN reduce using rule 75 (simple_name -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 75 (simple_name -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 75 (simple_name -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 75 (simple_name -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 75 (simple_name -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 75 (simple_name -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 75 (simple_name -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 75 (simple_name -> IDENTIFIER .)
    TIMES           reduce using rule 75 (simple_name -> IDENTIFIER .)
    DIVIDE          reduce using rule 75 (simple_name -> IDENTIFIER .)
    REMAINDER       reduce using rule 75 (simple_name -> IDENTIFIER .)
    PLUS            reduce using rule 75 (simple_name -> IDENTIFIER .)
    MINUS           reduce using rule 75 (simple_name -> IDENTIFIER .)
    LSHIFT          reduce using rule 75 (simple_name -> IDENTIFIER .)
    RSHIFT          reduce using rule 75 (simple_name -> IDENTIFIER .)
    GREATER         reduce using rule 75 (simple_name -> IDENTIFIER .)
    LESS            reduce using rule 75 (simple_name -> IDENTIFIER .)
    GEQ             reduce using rule 75 (simple_name -> IDENTIFIER .)
    LEQ             reduce using rule 75 (simple_name -> IDENTIFIER .)
    EQUAL           reduce using rule 75 (simple_name -> IDENTIFIER .)
    NEQUAL          reduce using rule 75 (simple_name -> IDENTIFIER .)
    AND_BITWISE     reduce using rule 75 (simple_name -> IDENTIFIER .)
    XOR             reduce using rule 75 (simple_name -> IDENTIFIER .)
    OR_BITWISE      reduce using rule 75 (simple_name -> IDENTIFIER .)
    AND             reduce using rule 75 (simple_name -> IDENTIFIER .)
    OR              reduce using rule 75 (simple_name -> IDENTIFIER .)
    STATE_END       reduce using rule 75 (simple_name -> IDENTIFIER .)
    RPAREN          reduce using rule 75 (simple_name -> IDENTIFIER .)
    COMMA           reduce using rule 75 (simple_name -> IDENTIFIER .)
    RBPAREN         reduce using rule 75 (simple_name -> IDENTIFIER .)


state 35

    (67) method_invocation -> name . LPAREN argument_list_opt RPAREN
    (77) valid_variable -> name .
    (68) array_access -> name . LBPAREN expression RBPAREN
    (76) qualified_name -> name . DOT simple_name

    LPAREN          shift and go to state 101
    ASSIGN          reduce using rule 77 (valid_variable -> name .)
    TIMES_ASSIGN    reduce using rule 77 (valid_variable -> name .)
    DIVIDE_ASSIGN   reduce using rule 77 (valid_variable -> name .)
    REMAINDER_ASSIGN reduce using rule 77 (valid_variable -> name .)
    PLUS_ASSIGN     reduce using rule 77 (valid_variable -> name .)
    MINUS_ASSIGN    reduce using rule 77 (valid_variable -> name .)
    LSHIFT_ASSIGN   reduce using rule 77 (valid_variable -> name .)
    RSHIFT_ASSIGN   reduce using rule 77 (valid_variable -> name .)
    AND_ASSIGN      reduce using rule 77 (valid_variable -> name .)
    OR_ASSIGN       reduce using rule 77 (valid_variable -> name .)
    XOR_ASSIGN      reduce using rule 77 (valid_variable -> name .)
    LBPAREN         shift and go to state 102
    DOT             shift and go to state 103


state 36

    (122) modifier -> KWRD_PRIVATE .

    KWRD_VAR        reduce using rule 122 (modifier -> KWRD_PRIVATE .)
    KWRD_VAL        reduce using rule 122 (modifier -> KWRD_PRIVATE .)


state 37

    (107) normal_statement -> empty_statement .

    KWRD_IF         reduce using rule 107 (normal_statement -> empty_statement .)
    KWRD_WHILE      reduce using rule 107 (normal_statement -> empty_statement .)
    KWRD_DO         reduce using rule 107 (normal_statement -> empty_statement .)
    BLOCK_BEGIN     reduce using rule 107 (normal_statement -> empty_statement .)
    STATE_END       reduce using rule 107 (normal_statement -> empty_statement .)
    KWRD_RETURN     reduce using rule 107 (normal_statement -> empty_statement .)
    KWRD_PROTECTED  reduce using rule 107 (normal_statement -> empty_statement .)
    KWRD_PRIVATE    reduce using rule 107 (normal_statement -> empty_statement .)
    IDENTIFIER      reduce using rule 107 (normal_statement -> empty_statement .)
    KWRD_VAR        reduce using rule 107 (normal_statement -> empty_statement .)
    KWRD_VAL        reduce using rule 107 (normal_statement -> empty_statement .)
    BLOCK_END       reduce using rule 107 (normal_statement -> empty_statement .)
    KWRD_ELSE       reduce using rule 107 (normal_statement -> empty_statement .)


state 38

    (92) local_variable_declaration_statement -> local_variable_declaration . STATE_END

    STATE_END       shift and go to state 104


state 39

    (88) modifier_opts -> modifier .

    KWRD_VAR        reduce using rule 88 (modifier_opts -> modifier .)
    KWRD_VAL        reduce using rule 88 (modifier_opts -> modifier .)


state 40

    (105) normal_statement -> block .

    KWRD_IF         reduce using rule 105 (normal_statement -> block .)
    KWRD_WHILE      reduce using rule 105 (normal_statement -> block .)
    KWRD_DO         reduce using rule 105 (normal_statement -> block .)
    BLOCK_BEGIN     reduce using rule 105 (normal_statement -> block .)
    STATE_END       reduce using rule 105 (normal_statement -> block .)
    KWRD_RETURN     reduce using rule 105 (normal_statement -> block .)
    KWRD_PROTECTED  reduce using rule 105 (normal_statement -> block .)
    KWRD_PRIVATE    reduce using rule 105 (normal_statement -> block .)
    IDENTIFIER      reduce using rule 105 (normal_statement -> block .)
    KWRD_VAR        reduce using rule 105 (normal_statement -> block .)
    KWRD_VAL        reduce using rule 105 (normal_statement -> block .)
    BLOCK_END       reduce using rule 105 (normal_statement -> block .)
    KWRD_ELSE       reduce using rule 105 (normal_statement -> block .)


state 41

    (102) statement -> if_then_else_statement .

    KWRD_IF         reduce using rule 102 (statement -> if_then_else_statement .)
    KWRD_WHILE      reduce using rule 102 (statement -> if_then_else_statement .)
    KWRD_DO         reduce using rule 102 (statement -> if_then_else_statement .)
    BLOCK_BEGIN     reduce using rule 102 (statement -> if_then_else_statement .)
    STATE_END       reduce using rule 102 (statement -> if_then_else_statement .)
    KWRD_RETURN     reduce using rule 102 (statement -> if_then_else_statement .)
    KWRD_PROTECTED  reduce using rule 102 (statement -> if_then_else_statement .)
    KWRD_PRIVATE    reduce using rule 102 (statement -> if_then_else_statement .)
    IDENTIFIER      reduce using rule 102 (statement -> if_then_else_statement .)
    KWRD_VAR        reduce using rule 102 (statement -> if_then_else_statement .)
    KWRD_VAL        reduce using rule 102 (statement -> if_then_else_statement .)
    BLOCK_END       reduce using rule 102 (statement -> if_then_else_statement .)


state 42

    (4) ObjectDeclare -> KWRD_OBJECT IDENTIFIER KWRD_EXTNDS . IDENTIFIER

    IDENTIFIER      shift and go to state 105


state 43

    (81) block -> BLOCK_BEGIN block_statements_opt BLOCK_END .

    KWRD_WHILE      reduce using rule 81 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_IF         reduce using rule 81 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_DO         reduce using rule 81 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 81 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    STATE_END       reduce using rule 81 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_RETURN     reduce using rule 81 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_PROTECTED  reduce using rule 81 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_PRIVATE    reduce using rule 81 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    IDENTIFIER      reduce using rule 81 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_VAR        reduce using rule 81 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_VAL        reduce using rule 81 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    BLOCK_END       reduce using rule 81 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_ELSE       reduce using rule 81 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    $end            reduce using rule 81 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)


state 44

    (12) assignment_operator -> TIMES_ASSIGN .

    IDENTIFIER      reduce using rule 12 (assignment_operator -> TIMES_ASSIGN .)
    PLUS            reduce using rule 12 (assignment_operator -> TIMES_ASSIGN .)
    MINUS           reduce using rule 12 (assignment_operator -> TIMES_ASSIGN .)
    TILDA           reduce using rule 12 (assignment_operator -> TIMES_ASSIGN .)
    NOT             reduce using rule 12 (assignment_operator -> TIMES_ASSIGN .)
    LPAREN          reduce using rule 12 (assignment_operator -> TIMES_ASSIGN .)
    CHARACTER       reduce using rule 12 (assignment_operator -> TIMES_ASSIGN .)
    STRING_CONST    reduce using rule 12 (assignment_operator -> TIMES_ASSIGN .)
    BOOL_CONSTT     reduce using rule 12 (assignment_operator -> TIMES_ASSIGN .)
    BOOL_CONSTF     reduce using rule 12 (assignment_operator -> TIMES_ASSIGN .)
    KWRD_NULL       reduce using rule 12 (assignment_operator -> TIMES_ASSIGN .)
    FLOAT_CONST     reduce using rule 12 (assignment_operator -> TIMES_ASSIGN .)
    INT_CONST       reduce using rule 12 (assignment_operator -> TIMES_ASSIGN .)


state 45

    (18) assignment_operator -> RSHIFT_ASSIGN .

    IDENTIFIER      reduce using rule 18 (assignment_operator -> RSHIFT_ASSIGN .)
    PLUS            reduce using rule 18 (assignment_operator -> RSHIFT_ASSIGN .)
    MINUS           reduce using rule 18 (assignment_operator -> RSHIFT_ASSIGN .)
    TILDA           reduce using rule 18 (assignment_operator -> RSHIFT_ASSIGN .)
    NOT             reduce using rule 18 (assignment_operator -> RSHIFT_ASSIGN .)
    LPAREN          reduce using rule 18 (assignment_operator -> RSHIFT_ASSIGN .)
    CHARACTER       reduce using rule 18 (assignment_operator -> RSHIFT_ASSIGN .)
    STRING_CONST    reduce using rule 18 (assignment_operator -> RSHIFT_ASSIGN .)
    BOOL_CONSTT     reduce using rule 18 (assignment_operator -> RSHIFT_ASSIGN .)
    BOOL_CONSTF     reduce using rule 18 (assignment_operator -> RSHIFT_ASSIGN .)
    KWRD_NULL       reduce using rule 18 (assignment_operator -> RSHIFT_ASSIGN .)
    FLOAT_CONST     reduce using rule 18 (assignment_operator -> RSHIFT_ASSIGN .)
    INT_CONST       reduce using rule 18 (assignment_operator -> RSHIFT_ASSIGN .)


state 46

    (16) assignment_operator -> MINUS_ASSIGN .

    IDENTIFIER      reduce using rule 16 (assignment_operator -> MINUS_ASSIGN .)
    PLUS            reduce using rule 16 (assignment_operator -> MINUS_ASSIGN .)
    MINUS           reduce using rule 16 (assignment_operator -> MINUS_ASSIGN .)
    TILDA           reduce using rule 16 (assignment_operator -> MINUS_ASSIGN .)
    NOT             reduce using rule 16 (assignment_operator -> MINUS_ASSIGN .)
    LPAREN          reduce using rule 16 (assignment_operator -> MINUS_ASSIGN .)
    CHARACTER       reduce using rule 16 (assignment_operator -> MINUS_ASSIGN .)
    STRING_CONST    reduce using rule 16 (assignment_operator -> MINUS_ASSIGN .)
    BOOL_CONSTT     reduce using rule 16 (assignment_operator -> MINUS_ASSIGN .)
    BOOL_CONSTF     reduce using rule 16 (assignment_operator -> MINUS_ASSIGN .)
    KWRD_NULL       reduce using rule 16 (assignment_operator -> MINUS_ASSIGN .)
    FLOAT_CONST     reduce using rule 16 (assignment_operator -> MINUS_ASSIGN .)
    INT_CONST       reduce using rule 16 (assignment_operator -> MINUS_ASSIGN .)


state 47

    (14) assignment_operator -> REMAINDER_ASSIGN .

    IDENTIFIER      reduce using rule 14 (assignment_operator -> REMAINDER_ASSIGN .)
    PLUS            reduce using rule 14 (assignment_operator -> REMAINDER_ASSIGN .)
    MINUS           reduce using rule 14 (assignment_operator -> REMAINDER_ASSIGN .)
    TILDA           reduce using rule 14 (assignment_operator -> REMAINDER_ASSIGN .)
    NOT             reduce using rule 14 (assignment_operator -> REMAINDER_ASSIGN .)
    LPAREN          reduce using rule 14 (assignment_operator -> REMAINDER_ASSIGN .)
    CHARACTER       reduce using rule 14 (assignment_operator -> REMAINDER_ASSIGN .)
    STRING_CONST    reduce using rule 14 (assignment_operator -> REMAINDER_ASSIGN .)
    BOOL_CONSTT     reduce using rule 14 (assignment_operator -> REMAINDER_ASSIGN .)
    BOOL_CONSTF     reduce using rule 14 (assignment_operator -> REMAINDER_ASSIGN .)
    KWRD_NULL       reduce using rule 14 (assignment_operator -> REMAINDER_ASSIGN .)
    FLOAT_CONST     reduce using rule 14 (assignment_operator -> REMAINDER_ASSIGN .)
    INT_CONST       reduce using rule 14 (assignment_operator -> REMAINDER_ASSIGN .)


state 48

    (20) assignment_operator -> OR_ASSIGN .

    IDENTIFIER      reduce using rule 20 (assignment_operator -> OR_ASSIGN .)
    PLUS            reduce using rule 20 (assignment_operator -> OR_ASSIGN .)
    MINUS           reduce using rule 20 (assignment_operator -> OR_ASSIGN .)
    TILDA           reduce using rule 20 (assignment_operator -> OR_ASSIGN .)
    NOT             reduce using rule 20 (assignment_operator -> OR_ASSIGN .)
    LPAREN          reduce using rule 20 (assignment_operator -> OR_ASSIGN .)
    CHARACTER       reduce using rule 20 (assignment_operator -> OR_ASSIGN .)
    STRING_CONST    reduce using rule 20 (assignment_operator -> OR_ASSIGN .)
    BOOL_CONSTT     reduce using rule 20 (assignment_operator -> OR_ASSIGN .)
    BOOL_CONSTF     reduce using rule 20 (assignment_operator -> OR_ASSIGN .)
    KWRD_NULL       reduce using rule 20 (assignment_operator -> OR_ASSIGN .)
    FLOAT_CONST     reduce using rule 20 (assignment_operator -> OR_ASSIGN .)
    INT_CONST       reduce using rule 20 (assignment_operator -> OR_ASSIGN .)


state 49

    (17) assignment_operator -> LSHIFT_ASSIGN .

    IDENTIFIER      reduce using rule 17 (assignment_operator -> LSHIFT_ASSIGN .)
    PLUS            reduce using rule 17 (assignment_operator -> LSHIFT_ASSIGN .)
    MINUS           reduce using rule 17 (assignment_operator -> LSHIFT_ASSIGN .)
    TILDA           reduce using rule 17 (assignment_operator -> LSHIFT_ASSIGN .)
    NOT             reduce using rule 17 (assignment_operator -> LSHIFT_ASSIGN .)
    LPAREN          reduce using rule 17 (assignment_operator -> LSHIFT_ASSIGN .)
    CHARACTER       reduce using rule 17 (assignment_operator -> LSHIFT_ASSIGN .)
    STRING_CONST    reduce using rule 17 (assignment_operator -> LSHIFT_ASSIGN .)
    BOOL_CONSTT     reduce using rule 17 (assignment_operator -> LSHIFT_ASSIGN .)
    BOOL_CONSTF     reduce using rule 17 (assignment_operator -> LSHIFT_ASSIGN .)
    KWRD_NULL       reduce using rule 17 (assignment_operator -> LSHIFT_ASSIGN .)
    FLOAT_CONST     reduce using rule 17 (assignment_operator -> LSHIFT_ASSIGN .)
    INT_CONST       reduce using rule 17 (assignment_operator -> LSHIFT_ASSIGN .)


state 50

    (19) assignment_operator -> AND_ASSIGN .

    IDENTIFIER      reduce using rule 19 (assignment_operator -> AND_ASSIGN .)
    PLUS            reduce using rule 19 (assignment_operator -> AND_ASSIGN .)
    MINUS           reduce using rule 19 (assignment_operator -> AND_ASSIGN .)
    TILDA           reduce using rule 19 (assignment_operator -> AND_ASSIGN .)
    NOT             reduce using rule 19 (assignment_operator -> AND_ASSIGN .)
    LPAREN          reduce using rule 19 (assignment_operator -> AND_ASSIGN .)
    CHARACTER       reduce using rule 19 (assignment_operator -> AND_ASSIGN .)
    STRING_CONST    reduce using rule 19 (assignment_operator -> AND_ASSIGN .)
    BOOL_CONSTT     reduce using rule 19 (assignment_operator -> AND_ASSIGN .)
    BOOL_CONSTF     reduce using rule 19 (assignment_operator -> AND_ASSIGN .)
    KWRD_NULL       reduce using rule 19 (assignment_operator -> AND_ASSIGN .)
    FLOAT_CONST     reduce using rule 19 (assignment_operator -> AND_ASSIGN .)
    INT_CONST       reduce using rule 19 (assignment_operator -> AND_ASSIGN .)


state 51

    (13) assignment_operator -> DIVIDE_ASSIGN .

    IDENTIFIER      reduce using rule 13 (assignment_operator -> DIVIDE_ASSIGN .)
    PLUS            reduce using rule 13 (assignment_operator -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 13 (assignment_operator -> DIVIDE_ASSIGN .)
    TILDA           reduce using rule 13 (assignment_operator -> DIVIDE_ASSIGN .)
    NOT             reduce using rule 13 (assignment_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 13 (assignment_operator -> DIVIDE_ASSIGN .)
    CHARACTER       reduce using rule 13 (assignment_operator -> DIVIDE_ASSIGN .)
    STRING_CONST    reduce using rule 13 (assignment_operator -> DIVIDE_ASSIGN .)
    BOOL_CONSTT     reduce using rule 13 (assignment_operator -> DIVIDE_ASSIGN .)
    BOOL_CONSTF     reduce using rule 13 (assignment_operator -> DIVIDE_ASSIGN .)
    KWRD_NULL       reduce using rule 13 (assignment_operator -> DIVIDE_ASSIGN .)
    FLOAT_CONST     reduce using rule 13 (assignment_operator -> DIVIDE_ASSIGN .)
    INT_CONST       reduce using rule 13 (assignment_operator -> DIVIDE_ASSIGN .)


state 52

    (10) assignment -> valid_variable assignment_operator . assignment_expression
    (8) assignment_expression -> . assignment
    (9) assignment_expression -> . conditional_or_expression
    (10) assignment -> . valid_variable assignment_operator assignment_expression
    (22) conditional_or_expression -> . conditional_and_expression
    (23) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (24) conditional_and_expression -> . inclusive_or_expression
    (25) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (26) inclusive_or_expression -> . exclusive_or_expression
    (27) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (28) exclusive_or_expression -> . and_expression
    (29) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (30) and_expression -> . equality_expression
    (31) and_expression -> . and_expression AND_BITWISE equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQUAL relational_expression
    (34) equality_expression -> . equality_expression NEQUAL relational_expression
    (35) relational_expression -> . shift_expression
    (36) relational_expression -> . relational_expression GREATER shift_expression
    (37) relational_expression -> . relational_expression LESS shift_expression
    (38) relational_expression -> . relational_expression GEQ shift_expression
    (39) relational_expression -> . relational_expression LEQ shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 34
    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    unary_expression               shift and go to state 61
    exclusive_or_expression        shift and go to state 62
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    array_access                   shift and go to state 13
    additive_expression            shift and go to state 87
    simple_name                    shift and go to state 23
    valid_variable                 shift and go to state 69
    inclusive_or_expression        shift and go to state 70
    literal                        shift and go to state 71
    and_expression                 shift and go to state 74
    relational_expression          shift and go to state 78
    method_invocation              shift and go to state 75
    conditional_or_expression      shift and go to state 76
    assignment_expression          shift and go to state 106
    qualified_name                 shift and go to state 15
    assignment                     shift and go to state 83
    multiplicative_expression      shift and go to state 84
    shift_expression               shift and go to state 89
    equality_expression            shift and go to state 90
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 93
    conditional_and_expression     shift and go to state 94

state 53

    (15) assignment_operator -> PLUS_ASSIGN .

    IDENTIFIER      reduce using rule 15 (assignment_operator -> PLUS_ASSIGN .)
    PLUS            reduce using rule 15 (assignment_operator -> PLUS_ASSIGN .)
    MINUS           reduce using rule 15 (assignment_operator -> PLUS_ASSIGN .)
    TILDA           reduce using rule 15 (assignment_operator -> PLUS_ASSIGN .)
    NOT             reduce using rule 15 (assignment_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 15 (assignment_operator -> PLUS_ASSIGN .)
    CHARACTER       reduce using rule 15 (assignment_operator -> PLUS_ASSIGN .)
    STRING_CONST    reduce using rule 15 (assignment_operator -> PLUS_ASSIGN .)
    BOOL_CONSTT     reduce using rule 15 (assignment_operator -> PLUS_ASSIGN .)
    BOOL_CONSTF     reduce using rule 15 (assignment_operator -> PLUS_ASSIGN .)
    KWRD_NULL       reduce using rule 15 (assignment_operator -> PLUS_ASSIGN .)
    FLOAT_CONST     reduce using rule 15 (assignment_operator -> PLUS_ASSIGN .)
    INT_CONST       reduce using rule 15 (assignment_operator -> PLUS_ASSIGN .)


state 54

    (11) assignment_operator -> ASSIGN .

    IDENTIFIER      reduce using rule 11 (assignment_operator -> ASSIGN .)
    PLUS            reduce using rule 11 (assignment_operator -> ASSIGN .)
    MINUS           reduce using rule 11 (assignment_operator -> ASSIGN .)
    TILDA           reduce using rule 11 (assignment_operator -> ASSIGN .)
    NOT             reduce using rule 11 (assignment_operator -> ASSIGN .)
    LPAREN          reduce using rule 11 (assignment_operator -> ASSIGN .)
    CHARACTER       reduce using rule 11 (assignment_operator -> ASSIGN .)
    STRING_CONST    reduce using rule 11 (assignment_operator -> ASSIGN .)
    BOOL_CONSTT     reduce using rule 11 (assignment_operator -> ASSIGN .)
    BOOL_CONSTF     reduce using rule 11 (assignment_operator -> ASSIGN .)
    KWRD_NULL       reduce using rule 11 (assignment_operator -> ASSIGN .)
    FLOAT_CONST     reduce using rule 11 (assignment_operator -> ASSIGN .)
    INT_CONST       reduce using rule 11 (assignment_operator -> ASSIGN .)


state 55

    (21) assignment_operator -> XOR_ASSIGN .

    IDENTIFIER      reduce using rule 21 (assignment_operator -> XOR_ASSIGN .)
    PLUS            reduce using rule 21 (assignment_operator -> XOR_ASSIGN .)
    MINUS           reduce using rule 21 (assignment_operator -> XOR_ASSIGN .)
    TILDA           reduce using rule 21 (assignment_operator -> XOR_ASSIGN .)
    NOT             reduce using rule 21 (assignment_operator -> XOR_ASSIGN .)
    LPAREN          reduce using rule 21 (assignment_operator -> XOR_ASSIGN .)
    CHARACTER       reduce using rule 21 (assignment_operator -> XOR_ASSIGN .)
    STRING_CONST    reduce using rule 21 (assignment_operator -> XOR_ASSIGN .)
    BOOL_CONSTT     reduce using rule 21 (assignment_operator -> XOR_ASSIGN .)
    BOOL_CONSTF     reduce using rule 21 (assignment_operator -> XOR_ASSIGN .)
    KWRD_NULL       reduce using rule 21 (assignment_operator -> XOR_ASSIGN .)
    FLOAT_CONST     reduce using rule 21 (assignment_operator -> XOR_ASSIGN .)
    INT_CONST       reduce using rule 21 (assignment_operator -> XOR_ASSIGN .)


state 56

    (109) expression_statement -> statement_expression STATE_END .

    KWRD_WHILE      reduce using rule 109 (expression_statement -> statement_expression STATE_END .)
    KWRD_IF         reduce using rule 109 (expression_statement -> statement_expression STATE_END .)
    KWRD_DO         reduce using rule 109 (expression_statement -> statement_expression STATE_END .)
    BLOCK_BEGIN     reduce using rule 109 (expression_statement -> statement_expression STATE_END .)
    STATE_END       reduce using rule 109 (expression_statement -> statement_expression STATE_END .)
    KWRD_RETURN     reduce using rule 109 (expression_statement -> statement_expression STATE_END .)
    KWRD_PROTECTED  reduce using rule 109 (expression_statement -> statement_expression STATE_END .)
    KWRD_PRIVATE    reduce using rule 109 (expression_statement -> statement_expression STATE_END .)
    IDENTIFIER      reduce using rule 109 (expression_statement -> statement_expression STATE_END .)
    KWRD_VAR        reduce using rule 109 (expression_statement -> statement_expression STATE_END .)
    KWRD_VAL        reduce using rule 109 (expression_statement -> statement_expression STATE_END .)
    BLOCK_END       reduce using rule 109 (expression_statement -> statement_expression STATE_END .)
    KWRD_ELSE       reduce using rule 109 (expression_statement -> statement_expression STATE_END .)


state 57

    (117) while_statement -> KWRD_WHILE LPAREN . expression RPAREN statement
    (5) expression -> . assignment_expression
    (8) assignment_expression -> . assignment
    (9) assignment_expression -> . conditional_or_expression
    (10) assignment -> . valid_variable assignment_operator assignment_expression
    (22) conditional_or_expression -> . conditional_and_expression
    (23) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (24) conditional_and_expression -> . inclusive_or_expression
    (25) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (26) inclusive_or_expression -> . exclusive_or_expression
    (27) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (28) exclusive_or_expression -> . and_expression
    (29) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (30) and_expression -> . equality_expression
    (31) and_expression -> . and_expression AND_BITWISE equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQUAL relational_expression
    (34) equality_expression -> . equality_expression NEQUAL relational_expression
    (35) relational_expression -> . shift_expression
    (36) relational_expression -> . relational_expression GREATER shift_expression
    (37) relational_expression -> . relational_expression LESS shift_expression
    (38) relational_expression -> . relational_expression GEQ shift_expression
    (39) relational_expression -> . relational_expression LEQ shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 34
    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    unary_expression               shift and go to state 61
    exclusive_or_expression        shift and go to state 62
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    array_access                   shift and go to state 13
    additive_expression            shift and go to state 87
    simple_name                    shift and go to state 23
    valid_variable                 shift and go to state 69
    inclusive_or_expression        shift and go to state 70
    literal                        shift and go to state 71
    and_expression                 shift and go to state 74
    relational_expression          shift and go to state 78
    method_invocation              shift and go to state 75
    conditional_or_expression      shift and go to state 76
    assignment_expression          shift and go to state 81
    qualified_name                 shift and go to state 15
    assignment                     shift and go to state 83
    multiplicative_expression      shift and go to state 84
    shift_expression               shift and go to state 89
    equality_expression            shift and go to state 90
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 93
    expression                     shift and go to state 107
    conditional_and_expression     shift and go to state 94

state 58

    (85) block_statements -> block_statements block_statement .

    KWRD_IF         reduce using rule 85 (block_statements -> block_statements block_statement .)
    KWRD_WHILE      reduce using rule 85 (block_statements -> block_statements block_statement .)
    KWRD_DO         reduce using rule 85 (block_statements -> block_statements block_statement .)
    BLOCK_BEGIN     reduce using rule 85 (block_statements -> block_statements block_statement .)
    STATE_END       reduce using rule 85 (block_statements -> block_statements block_statement .)
    KWRD_RETURN     reduce using rule 85 (block_statements -> block_statements block_statement .)
    KWRD_PROTECTED  reduce using rule 85 (block_statements -> block_statements block_statement .)
    KWRD_PRIVATE    reduce using rule 85 (block_statements -> block_statements block_statement .)
    IDENTIFIER      reduce using rule 85 (block_statements -> block_statements block_statement .)
    KWRD_VAR        reduce using rule 85 (block_statements -> block_statements block_statement .)
    KWRD_VAL        reduce using rule 85 (block_statements -> block_statements block_statement .)
    BLOCK_END       reduce using rule 85 (block_statements -> block_statements block_statement .)


state 59

    (89) modifier_opts -> empty .

    KWRD_VAR        reduce using rule 89 (modifier_opts -> empty .)
    KWRD_VAL        reduce using rule 89 (modifier_opts -> empty .)


state 60

    (118) do_while_statement -> KWRD_DO statement . KWRD_WHILE LPAREN expression RPAREN STATE_END

    KWRD_WHILE      shift and go to state 108


state 61

    (46) multiplicative_expression -> unary_expression .

    TIMES           reduce using rule 46 (multiplicative_expression -> unary_expression .)
    DIVIDE          reduce using rule 46 (multiplicative_expression -> unary_expression .)
    REMAINDER       reduce using rule 46 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 46 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 46 (multiplicative_expression -> unary_expression .)
    LSHIFT          reduce using rule 46 (multiplicative_expression -> unary_expression .)
    RSHIFT          reduce using rule 46 (multiplicative_expression -> unary_expression .)
    GREATER         reduce using rule 46 (multiplicative_expression -> unary_expression .)
    LESS            reduce using rule 46 (multiplicative_expression -> unary_expression .)
    GEQ             reduce using rule 46 (multiplicative_expression -> unary_expression .)
    LEQ             reduce using rule 46 (multiplicative_expression -> unary_expression .)
    EQUAL           reduce using rule 46 (multiplicative_expression -> unary_expression .)
    NEQUAL          reduce using rule 46 (multiplicative_expression -> unary_expression .)
    AND_BITWISE     reduce using rule 46 (multiplicative_expression -> unary_expression .)
    XOR             reduce using rule 46 (multiplicative_expression -> unary_expression .)
    OR_BITWISE      reduce using rule 46 (multiplicative_expression -> unary_expression .)
    AND             reduce using rule 46 (multiplicative_expression -> unary_expression .)
    OR              reduce using rule 46 (multiplicative_expression -> unary_expression .)
    STATE_END       reduce using rule 46 (multiplicative_expression -> unary_expression .)
    RPAREN          reduce using rule 46 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 46 (multiplicative_expression -> unary_expression .)
    RBPAREN         reduce using rule 46 (multiplicative_expression -> unary_expression .)


state 62

    (26) inclusive_or_expression -> exclusive_or_expression .
    (29) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR_BITWISE      reduce using rule 26 (inclusive_or_expression -> exclusive_or_expression .)
    AND             reduce using rule 26 (inclusive_or_expression -> exclusive_or_expression .)
    OR              reduce using rule 26 (inclusive_or_expression -> exclusive_or_expression .)
    RBPAREN         reduce using rule 26 (inclusive_or_expression -> exclusive_or_expression .)
    STATE_END       reduce using rule 26 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 26 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 26 (inclusive_or_expression -> exclusive_or_expression .)
    XOR             shift and go to state 109


state 63

    (60) literal -> CHARACTER .

    TIMES           reduce using rule 60 (literal -> CHARACTER .)
    DIVIDE          reduce using rule 60 (literal -> CHARACTER .)
    REMAINDER       reduce using rule 60 (literal -> CHARACTER .)
    PLUS            reduce using rule 60 (literal -> CHARACTER .)
    MINUS           reduce using rule 60 (literal -> CHARACTER .)
    LSHIFT          reduce using rule 60 (literal -> CHARACTER .)
    RSHIFT          reduce using rule 60 (literal -> CHARACTER .)
    GREATER         reduce using rule 60 (literal -> CHARACTER .)
    LESS            reduce using rule 60 (literal -> CHARACTER .)
    GEQ             reduce using rule 60 (literal -> CHARACTER .)
    LEQ             reduce using rule 60 (literal -> CHARACTER .)
    EQUAL           reduce using rule 60 (literal -> CHARACTER .)
    NEQUAL          reduce using rule 60 (literal -> CHARACTER .)
    AND_BITWISE     reduce using rule 60 (literal -> CHARACTER .)
    XOR             reduce using rule 60 (literal -> CHARACTER .)
    OR_BITWISE      reduce using rule 60 (literal -> CHARACTER .)
    AND             reduce using rule 60 (literal -> CHARACTER .)
    OR              reduce using rule 60 (literal -> CHARACTER .)
    STATE_END       reduce using rule 60 (literal -> CHARACTER .)
    RPAREN          reduce using rule 60 (literal -> CHARACTER .)
    COMMA           reduce using rule 60 (literal -> CHARACTER .)
    RBPAREN         reduce using rule 60 (literal -> CHARACTER .)


state 64

    (52) unary_expression -> unary_expression_not_plus_minus .

    TIMES           reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)
    DIVIDE          reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)
    REMAINDER       reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)
    PLUS            reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)
    MINUS           reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)
    LSHIFT          reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)
    RSHIFT          reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)
    GREATER         reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)
    LESS            reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)
    GEQ             reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)
    LEQ             reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)
    EQUAL           reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)
    NEQUAL          reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)
    AND_BITWISE     reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)
    XOR             reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)
    OR_BITWISE      reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)
    AND             reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)
    OR              reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)
    STATE_END       reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)
    RPAREN          reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)
    COMMA           reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)
    RBPAREN         reduce using rule 52 (unary_expression -> unary_expression_not_plus_minus .)


state 65

    (65) int_float -> FLOAT_CONST .

    TIMES           reduce using rule 65 (int_float -> FLOAT_CONST .)
    DIVIDE          reduce using rule 65 (int_float -> FLOAT_CONST .)
    REMAINDER       reduce using rule 65 (int_float -> FLOAT_CONST .)
    PLUS            reduce using rule 65 (int_float -> FLOAT_CONST .)
    MINUS           reduce using rule 65 (int_float -> FLOAT_CONST .)
    LSHIFT          reduce using rule 65 (int_float -> FLOAT_CONST .)
    RSHIFT          reduce using rule 65 (int_float -> FLOAT_CONST .)
    GREATER         reduce using rule 65 (int_float -> FLOAT_CONST .)
    LESS            reduce using rule 65 (int_float -> FLOAT_CONST .)
    GEQ             reduce using rule 65 (int_float -> FLOAT_CONST .)
    LEQ             reduce using rule 65 (int_float -> FLOAT_CONST .)
    EQUAL           reduce using rule 65 (int_float -> FLOAT_CONST .)
    NEQUAL          reduce using rule 65 (int_float -> FLOAT_CONST .)
    AND_BITWISE     reduce using rule 65 (int_float -> FLOAT_CONST .)
    XOR             reduce using rule 65 (int_float -> FLOAT_CONST .)
    OR_BITWISE      reduce using rule 65 (int_float -> FLOAT_CONST .)
    AND             reduce using rule 65 (int_float -> FLOAT_CONST .)
    OR              reduce using rule 65 (int_float -> FLOAT_CONST .)
    STATE_END       reduce using rule 65 (int_float -> FLOAT_CONST .)
    RPAREN          reduce using rule 65 (int_float -> FLOAT_CONST .)
    COMMA           reduce using rule 65 (int_float -> FLOAT_CONST .)
    RBPAREN         reduce using rule 65 (int_float -> FLOAT_CONST .)


state 66

    (51) unary_expression -> MINUS . unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    qualified_name                 shift and go to state 15
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 112
    unary_expression               shift and go to state 110
    valid_variable                 shift and go to state 111
    array_access                   shift and go to state 13
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    literal                        shift and go to state 71
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 23

state 67

    (62) literal -> BOOL_CONSTT .

    TIMES           reduce using rule 62 (literal -> BOOL_CONSTT .)
    DIVIDE          reduce using rule 62 (literal -> BOOL_CONSTT .)
    REMAINDER       reduce using rule 62 (literal -> BOOL_CONSTT .)
    PLUS            reduce using rule 62 (literal -> BOOL_CONSTT .)
    MINUS           reduce using rule 62 (literal -> BOOL_CONSTT .)
    LSHIFT          reduce using rule 62 (literal -> BOOL_CONSTT .)
    RSHIFT          reduce using rule 62 (literal -> BOOL_CONSTT .)
    GREATER         reduce using rule 62 (literal -> BOOL_CONSTT .)
    LESS            reduce using rule 62 (literal -> BOOL_CONSTT .)
    GEQ             reduce using rule 62 (literal -> BOOL_CONSTT .)
    LEQ             reduce using rule 62 (literal -> BOOL_CONSTT .)
    EQUAL           reduce using rule 62 (literal -> BOOL_CONSTT .)
    NEQUAL          reduce using rule 62 (literal -> BOOL_CONSTT .)
    AND_BITWISE     reduce using rule 62 (literal -> BOOL_CONSTT .)
    XOR             reduce using rule 62 (literal -> BOOL_CONSTT .)
    OR_BITWISE      reduce using rule 62 (literal -> BOOL_CONSTT .)
    AND             reduce using rule 62 (literal -> BOOL_CONSTT .)
    OR              reduce using rule 62 (literal -> BOOL_CONSTT .)
    STATE_END       reduce using rule 62 (literal -> BOOL_CONSTT .)
    RPAREN          reduce using rule 62 (literal -> BOOL_CONSTT .)
    COMMA           reduce using rule 62 (literal -> BOOL_CONSTT .)
    RBPAREN         reduce using rule 62 (literal -> BOOL_CONSTT .)


state 68

    (120) return_statement -> KWRD_RETURN expression_optional . STATE_END

    STATE_END       shift and go to state 113


state 69

    (10) assignment -> valid_variable . assignment_operator assignment_expression
    (79) variable_literal -> valid_variable .
    (11) assignment_operator -> . ASSIGN
    (12) assignment_operator -> . TIMES_ASSIGN
    (13) assignment_operator -> . DIVIDE_ASSIGN
    (14) assignment_operator -> . REMAINDER_ASSIGN
    (15) assignment_operator -> . PLUS_ASSIGN
    (16) assignment_operator -> . MINUS_ASSIGN
    (17) assignment_operator -> . LSHIFT_ASSIGN
    (18) assignment_operator -> . RSHIFT_ASSIGN
    (19) assignment_operator -> . AND_ASSIGN
    (20) assignment_operator -> . OR_ASSIGN
    (21) assignment_operator -> . XOR_ASSIGN

    TIMES           reduce using rule 79 (variable_literal -> valid_variable .)
    DIVIDE          reduce using rule 79 (variable_literal -> valid_variable .)
    REMAINDER       reduce using rule 79 (variable_literal -> valid_variable .)
    PLUS            reduce using rule 79 (variable_literal -> valid_variable .)
    MINUS           reduce using rule 79 (variable_literal -> valid_variable .)
    LSHIFT          reduce using rule 79 (variable_literal -> valid_variable .)
    RSHIFT          reduce using rule 79 (variable_literal -> valid_variable .)
    GREATER         reduce using rule 79 (variable_literal -> valid_variable .)
    LESS            reduce using rule 79 (variable_literal -> valid_variable .)
    GEQ             reduce using rule 79 (variable_literal -> valid_variable .)
    LEQ             reduce using rule 79 (variable_literal -> valid_variable .)
    EQUAL           reduce using rule 79 (variable_literal -> valid_variable .)
    NEQUAL          reduce using rule 79 (variable_literal -> valid_variable .)
    AND_BITWISE     reduce using rule 79 (variable_literal -> valid_variable .)
    XOR             reduce using rule 79 (variable_literal -> valid_variable .)
    OR_BITWISE      reduce using rule 79 (variable_literal -> valid_variable .)
    AND             reduce using rule 79 (variable_literal -> valid_variable .)
    OR              reduce using rule 79 (variable_literal -> valid_variable .)
    COMMA           reduce using rule 79 (variable_literal -> valid_variable .)
    RPAREN          reduce using rule 79 (variable_literal -> valid_variable .)
    STATE_END       reduce using rule 79 (variable_literal -> valid_variable .)
    RBPAREN         reduce using rule 79 (variable_literal -> valid_variable .)
    ASSIGN          shift and go to state 54
    TIMES_ASSIGN    shift and go to state 44
    DIVIDE_ASSIGN   shift and go to state 51
    REMAINDER_ASSIGN shift and go to state 47
    PLUS_ASSIGN     shift and go to state 53
    MINUS_ASSIGN    shift and go to state 46
    LSHIFT_ASSIGN   shift and go to state 49
    RSHIFT_ASSIGN   shift and go to state 45
    AND_ASSIGN      shift and go to state 50
    OR_ASSIGN       shift and go to state 48
    XOR_ASSIGN      shift and go to state 55

    assignment_operator            shift and go to state 52

state 70

    (24) conditional_and_expression -> inclusive_or_expression .
    (27) inclusive_or_expression -> inclusive_or_expression . OR_BITWISE exclusive_or_expression

    AND             reduce using rule 24 (conditional_and_expression -> inclusive_or_expression .)
    OR              reduce using rule 24 (conditional_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 24 (conditional_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 24 (conditional_and_expression -> inclusive_or_expression .)
    STATE_END       reduce using rule 24 (conditional_and_expression -> inclusive_or_expression .)
    RBPAREN         reduce using rule 24 (conditional_and_expression -> inclusive_or_expression .)
    OR_BITWISE      shift and go to state 114


state 71

    (57) primary -> literal .

    TIMES           reduce using rule 57 (primary -> literal .)
    DIVIDE          reduce using rule 57 (primary -> literal .)
    REMAINDER       reduce using rule 57 (primary -> literal .)
    PLUS            reduce using rule 57 (primary -> literal .)
    MINUS           reduce using rule 57 (primary -> literal .)
    LSHIFT          reduce using rule 57 (primary -> literal .)
    RSHIFT          reduce using rule 57 (primary -> literal .)
    GREATER         reduce using rule 57 (primary -> literal .)
    LESS            reduce using rule 57 (primary -> literal .)
    GEQ             reduce using rule 57 (primary -> literal .)
    LEQ             reduce using rule 57 (primary -> literal .)
    EQUAL           reduce using rule 57 (primary -> literal .)
    NEQUAL          reduce using rule 57 (primary -> literal .)
    AND_BITWISE     reduce using rule 57 (primary -> literal .)
    XOR             reduce using rule 57 (primary -> literal .)
    OR_BITWISE      reduce using rule 57 (primary -> literal .)
    AND             reduce using rule 57 (primary -> literal .)
    OR              reduce using rule 57 (primary -> literal .)
    RPAREN          reduce using rule 57 (primary -> literal .)
    STATE_END       reduce using rule 57 (primary -> literal .)
    COMMA           reduce using rule 57 (primary -> literal .)
    RBPAREN         reduce using rule 57 (primary -> literal .)


state 72

    (54) unary_expression_not_plus_minus -> TILDA . unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    qualified_name                 shift and go to state 15
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 112
    unary_expression               shift and go to state 115
    valid_variable                 shift and go to state 111
    array_access                   shift and go to state 13
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    literal                        shift and go to state 71
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 23

state 73

    (50) unary_expression -> PLUS . unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    qualified_name                 shift and go to state 15
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 112
    unary_expression               shift and go to state 116
    valid_variable                 shift and go to state 111
    array_access                   shift and go to state 13
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    literal                        shift and go to state 71
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 23

state 74

    (28) exclusive_or_expression -> and_expression .
    (31) and_expression -> and_expression . AND_BITWISE equality_expression

    XOR             reduce using rule 28 (exclusive_or_expression -> and_expression .)
    OR_BITWISE      reduce using rule 28 (exclusive_or_expression -> and_expression .)
    AND             reduce using rule 28 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 28 (exclusive_or_expression -> and_expression .)
    RBPAREN         reduce using rule 28 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 28 (exclusive_or_expression -> and_expression .)
    STATE_END       reduce using rule 28 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 28 (exclusive_or_expression -> and_expression .)
    AND_BITWISE     shift and go to state 117


state 75

    (58) primary -> method_invocation .

    TIMES           reduce using rule 58 (primary -> method_invocation .)
    DIVIDE          reduce using rule 58 (primary -> method_invocation .)
    REMAINDER       reduce using rule 58 (primary -> method_invocation .)
    PLUS            reduce using rule 58 (primary -> method_invocation .)
    MINUS           reduce using rule 58 (primary -> method_invocation .)
    LSHIFT          reduce using rule 58 (primary -> method_invocation .)
    RSHIFT          reduce using rule 58 (primary -> method_invocation .)
    GREATER         reduce using rule 58 (primary -> method_invocation .)
    LESS            reduce using rule 58 (primary -> method_invocation .)
    GEQ             reduce using rule 58 (primary -> method_invocation .)
    LEQ             reduce using rule 58 (primary -> method_invocation .)
    EQUAL           reduce using rule 58 (primary -> method_invocation .)
    NEQUAL          reduce using rule 58 (primary -> method_invocation .)
    AND_BITWISE     reduce using rule 58 (primary -> method_invocation .)
    XOR             reduce using rule 58 (primary -> method_invocation .)
    OR_BITWISE      reduce using rule 58 (primary -> method_invocation .)
    AND             reduce using rule 58 (primary -> method_invocation .)
    OR              reduce using rule 58 (primary -> method_invocation .)
    RPAREN          reduce using rule 58 (primary -> method_invocation .)
    STATE_END       reduce using rule 58 (primary -> method_invocation .)
    COMMA           reduce using rule 58 (primary -> method_invocation .)
    RBPAREN         reduce using rule 58 (primary -> method_invocation .)


state 76

    (9) assignment_expression -> conditional_or_expression .
    (23) conditional_or_expression -> conditional_or_expression . OR conditional_and_expression

    STATE_END       reduce using rule 9 (assignment_expression -> conditional_or_expression .)
    RPAREN          reduce using rule 9 (assignment_expression -> conditional_or_expression .)
    COMMA           reduce using rule 9 (assignment_expression -> conditional_or_expression .)
    RBPAREN         reduce using rule 9 (assignment_expression -> conditional_or_expression .)
    OR              shift and go to state 118


state 77

    (7) expression_optional -> empty .

    STATE_END       reduce using rule 7 (expression_optional -> empty .)


state 78

    (32) equality_expression -> relational_expression .
    (36) relational_expression -> relational_expression . GREATER shift_expression
    (37) relational_expression -> relational_expression . LESS shift_expression
    (38) relational_expression -> relational_expression . GEQ shift_expression
    (39) relational_expression -> relational_expression . LEQ shift_expression

    EQUAL           reduce using rule 32 (equality_expression -> relational_expression .)
    NEQUAL          reduce using rule 32 (equality_expression -> relational_expression .)
    AND_BITWISE     reduce using rule 32 (equality_expression -> relational_expression .)
    XOR             reduce using rule 32 (equality_expression -> relational_expression .)
    OR_BITWISE      reduce using rule 32 (equality_expression -> relational_expression .)
    AND             reduce using rule 32 (equality_expression -> relational_expression .)
    OR              reduce using rule 32 (equality_expression -> relational_expression .)
    STATE_END       reduce using rule 32 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 32 (equality_expression -> relational_expression .)
    RBPAREN         reduce using rule 32 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 32 (equality_expression -> relational_expression .)
    GREATER         shift and go to state 120
    LESS            shift and go to state 121
    GEQ             shift and go to state 119
    LEQ             shift and go to state 122


state 79

    (64) literal -> KWRD_NULL .

    TIMES           reduce using rule 64 (literal -> KWRD_NULL .)
    DIVIDE          reduce using rule 64 (literal -> KWRD_NULL .)
    REMAINDER       reduce using rule 64 (literal -> KWRD_NULL .)
    PLUS            reduce using rule 64 (literal -> KWRD_NULL .)
    MINUS           reduce using rule 64 (literal -> KWRD_NULL .)
    LSHIFT          reduce using rule 64 (literal -> KWRD_NULL .)
    RSHIFT          reduce using rule 64 (literal -> KWRD_NULL .)
    GREATER         reduce using rule 64 (literal -> KWRD_NULL .)
    LESS            reduce using rule 64 (literal -> KWRD_NULL .)
    GEQ             reduce using rule 64 (literal -> KWRD_NULL .)
    LEQ             reduce using rule 64 (literal -> KWRD_NULL .)
    EQUAL           reduce using rule 64 (literal -> KWRD_NULL .)
    NEQUAL          reduce using rule 64 (literal -> KWRD_NULL .)
    AND_BITWISE     reduce using rule 64 (literal -> KWRD_NULL .)
    XOR             reduce using rule 64 (literal -> KWRD_NULL .)
    OR_BITWISE      reduce using rule 64 (literal -> KWRD_NULL .)
    AND             reduce using rule 64 (literal -> KWRD_NULL .)
    OR              reduce using rule 64 (literal -> KWRD_NULL .)
    STATE_END       reduce using rule 64 (literal -> KWRD_NULL .)
    RPAREN          reduce using rule 64 (literal -> KWRD_NULL .)
    COMMA           reduce using rule 64 (literal -> KWRD_NULL .)
    RBPAREN         reduce using rule 64 (literal -> KWRD_NULL .)


state 80

    (61) literal -> STRING_CONST .

    TIMES           reduce using rule 61 (literal -> STRING_CONST .)
    DIVIDE          reduce using rule 61 (literal -> STRING_CONST .)
    REMAINDER       reduce using rule 61 (literal -> STRING_CONST .)
    PLUS            reduce using rule 61 (literal -> STRING_CONST .)
    MINUS           reduce using rule 61 (literal -> STRING_CONST .)
    LSHIFT          reduce using rule 61 (literal -> STRING_CONST .)
    RSHIFT          reduce using rule 61 (literal -> STRING_CONST .)
    GREATER         reduce using rule 61 (literal -> STRING_CONST .)
    LESS            reduce using rule 61 (literal -> STRING_CONST .)
    GEQ             reduce using rule 61 (literal -> STRING_CONST .)
    LEQ             reduce using rule 61 (literal -> STRING_CONST .)
    EQUAL           reduce using rule 61 (literal -> STRING_CONST .)
    NEQUAL          reduce using rule 61 (literal -> STRING_CONST .)
    AND_BITWISE     reduce using rule 61 (literal -> STRING_CONST .)
    XOR             reduce using rule 61 (literal -> STRING_CONST .)
    OR_BITWISE      reduce using rule 61 (literal -> STRING_CONST .)
    AND             reduce using rule 61 (literal -> STRING_CONST .)
    OR              reduce using rule 61 (literal -> STRING_CONST .)
    STATE_END       reduce using rule 61 (literal -> STRING_CONST .)
    RPAREN          reduce using rule 61 (literal -> STRING_CONST .)
    COMMA           reduce using rule 61 (literal -> STRING_CONST .)
    RBPAREN         reduce using rule 61 (literal -> STRING_CONST .)


state 81

    (5) expression -> assignment_expression .

    RBPAREN         reduce using rule 5 (expression -> assignment_expression .)
    RPAREN          reduce using rule 5 (expression -> assignment_expression .)
    COMMA           reduce using rule 5 (expression -> assignment_expression .)
    STATE_END       reduce using rule 5 (expression -> assignment_expression .)


state 82

    (63) literal -> BOOL_CONSTF .

    TIMES           reduce using rule 63 (literal -> BOOL_CONSTF .)
    DIVIDE          reduce using rule 63 (literal -> BOOL_CONSTF .)
    REMAINDER       reduce using rule 63 (literal -> BOOL_CONSTF .)
    PLUS            reduce using rule 63 (literal -> BOOL_CONSTF .)
    MINUS           reduce using rule 63 (literal -> BOOL_CONSTF .)
    LSHIFT          reduce using rule 63 (literal -> BOOL_CONSTF .)
    RSHIFT          reduce using rule 63 (literal -> BOOL_CONSTF .)
    GREATER         reduce using rule 63 (literal -> BOOL_CONSTF .)
    LESS            reduce using rule 63 (literal -> BOOL_CONSTF .)
    GEQ             reduce using rule 63 (literal -> BOOL_CONSTF .)
    LEQ             reduce using rule 63 (literal -> BOOL_CONSTF .)
    EQUAL           reduce using rule 63 (literal -> BOOL_CONSTF .)
    NEQUAL          reduce using rule 63 (literal -> BOOL_CONSTF .)
    AND_BITWISE     reduce using rule 63 (literal -> BOOL_CONSTF .)
    XOR             reduce using rule 63 (literal -> BOOL_CONSTF .)
    OR_BITWISE      reduce using rule 63 (literal -> BOOL_CONSTF .)
    AND             reduce using rule 63 (literal -> BOOL_CONSTF .)
    OR              reduce using rule 63 (literal -> BOOL_CONSTF .)
    STATE_END       reduce using rule 63 (literal -> BOOL_CONSTF .)
    RPAREN          reduce using rule 63 (literal -> BOOL_CONSTF .)
    COMMA           reduce using rule 63 (literal -> BOOL_CONSTF .)
    RBPAREN         reduce using rule 63 (literal -> BOOL_CONSTF .)


state 83

    (8) assignment_expression -> assignment .

    STATE_END       reduce using rule 8 (assignment_expression -> assignment .)
    RPAREN          reduce using rule 8 (assignment_expression -> assignment .)
    COMMA           reduce using rule 8 (assignment_expression -> assignment .)
    RBPAREN         reduce using rule 8 (assignment_expression -> assignment .)


state 84

    (43) additive_expression -> multiplicative_expression .
    (47) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (48) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (49) multiplicative_expression -> multiplicative_expression . REMAINDER unary_expression

    PLUS            reduce using rule 43 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 43 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 43 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 43 (additive_expression -> multiplicative_expression .)
    GREATER         reduce using rule 43 (additive_expression -> multiplicative_expression .)
    LESS            reduce using rule 43 (additive_expression -> multiplicative_expression .)
    GEQ             reduce using rule 43 (additive_expression -> multiplicative_expression .)
    LEQ             reduce using rule 43 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 43 (additive_expression -> multiplicative_expression .)
    NEQUAL          reduce using rule 43 (additive_expression -> multiplicative_expression .)
    AND_BITWISE     reduce using rule 43 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 43 (additive_expression -> multiplicative_expression .)
    OR_BITWISE      reduce using rule 43 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 43 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 43 (additive_expression -> multiplicative_expression .)
    STATE_END       reduce using rule 43 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 43 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 43 (additive_expression -> multiplicative_expression .)
    RBPAREN         reduce using rule 43 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 125
    DIVIDE          shift and go to state 124
    REMAINDER       shift and go to state 123


state 85

    (66) int_float -> INT_CONST .

    TIMES           reduce using rule 66 (int_float -> INT_CONST .)
    DIVIDE          reduce using rule 66 (int_float -> INT_CONST .)
    REMAINDER       reduce using rule 66 (int_float -> INT_CONST .)
    PLUS            reduce using rule 66 (int_float -> INT_CONST .)
    MINUS           reduce using rule 66 (int_float -> INT_CONST .)
    LSHIFT          reduce using rule 66 (int_float -> INT_CONST .)
    RSHIFT          reduce using rule 66 (int_float -> INT_CONST .)
    GREATER         reduce using rule 66 (int_float -> INT_CONST .)
    LESS            reduce using rule 66 (int_float -> INT_CONST .)
    GEQ             reduce using rule 66 (int_float -> INT_CONST .)
    LEQ             reduce using rule 66 (int_float -> INT_CONST .)
    EQUAL           reduce using rule 66 (int_float -> INT_CONST .)
    NEQUAL          reduce using rule 66 (int_float -> INT_CONST .)
    AND_BITWISE     reduce using rule 66 (int_float -> INT_CONST .)
    XOR             reduce using rule 66 (int_float -> INT_CONST .)
    OR_BITWISE      reduce using rule 66 (int_float -> INT_CONST .)
    AND             reduce using rule 66 (int_float -> INT_CONST .)
    OR              reduce using rule 66 (int_float -> INT_CONST .)
    STATE_END       reduce using rule 66 (int_float -> INT_CONST .)
    RPAREN          reduce using rule 66 (int_float -> INT_CONST .)
    COMMA           reduce using rule 66 (int_float -> INT_CONST .)
    RBPAREN         reduce using rule 66 (int_float -> INT_CONST .)


state 86

    (80) variable_literal -> primary .

    TIMES           reduce using rule 80 (variable_literal -> primary .)
    DIVIDE          reduce using rule 80 (variable_literal -> primary .)
    REMAINDER       reduce using rule 80 (variable_literal -> primary .)
    PLUS            reduce using rule 80 (variable_literal -> primary .)
    MINUS           reduce using rule 80 (variable_literal -> primary .)
    LSHIFT          reduce using rule 80 (variable_literal -> primary .)
    RSHIFT          reduce using rule 80 (variable_literal -> primary .)
    GREATER         reduce using rule 80 (variable_literal -> primary .)
    LESS            reduce using rule 80 (variable_literal -> primary .)
    GEQ             reduce using rule 80 (variable_literal -> primary .)
    LEQ             reduce using rule 80 (variable_literal -> primary .)
    EQUAL           reduce using rule 80 (variable_literal -> primary .)
    NEQUAL          reduce using rule 80 (variable_literal -> primary .)
    AND_BITWISE     reduce using rule 80 (variable_literal -> primary .)
    XOR             reduce using rule 80 (variable_literal -> primary .)
    OR_BITWISE      reduce using rule 80 (variable_literal -> primary .)
    AND             reduce using rule 80 (variable_literal -> primary .)
    OR              reduce using rule 80 (variable_literal -> primary .)
    STATE_END       reduce using rule 80 (variable_literal -> primary .)
    RPAREN          reduce using rule 80 (variable_literal -> primary .)
    COMMA           reduce using rule 80 (variable_literal -> primary .)
    RBPAREN         reduce using rule 80 (variable_literal -> primary .)


state 87

    (40) shift_expression -> additive_expression .
    (44) additive_expression -> additive_expression . PLUS multiplicative_expression
    (45) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 40 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 40 (shift_expression -> additive_expression .)
    GREATER         reduce using rule 40 (shift_expression -> additive_expression .)
    LESS            reduce using rule 40 (shift_expression -> additive_expression .)
    GEQ             reduce using rule 40 (shift_expression -> additive_expression .)
    LEQ             reduce using rule 40 (shift_expression -> additive_expression .)
    EQUAL           reduce using rule 40 (shift_expression -> additive_expression .)
    NEQUAL          reduce using rule 40 (shift_expression -> additive_expression .)
    AND_BITWISE     reduce using rule 40 (shift_expression -> additive_expression .)
    XOR             reduce using rule 40 (shift_expression -> additive_expression .)
    OR_BITWISE      reduce using rule 40 (shift_expression -> additive_expression .)
    AND             reduce using rule 40 (shift_expression -> additive_expression .)
    OR              reduce using rule 40 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 40 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 40 (shift_expression -> additive_expression .)
    STATE_END       reduce using rule 40 (shift_expression -> additive_expression .)
    RBPAREN         reduce using rule 40 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127


state 88

    (56) unary_expression_not_plus_minus -> LPAREN . expression RPAREN
    (5) expression -> . assignment_expression
    (8) assignment_expression -> . assignment
    (9) assignment_expression -> . conditional_or_expression
    (10) assignment -> . valid_variable assignment_operator assignment_expression
    (22) conditional_or_expression -> . conditional_and_expression
    (23) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (24) conditional_and_expression -> . inclusive_or_expression
    (25) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (26) inclusive_or_expression -> . exclusive_or_expression
    (27) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (28) exclusive_or_expression -> . and_expression
    (29) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (30) and_expression -> . equality_expression
    (31) and_expression -> . and_expression AND_BITWISE equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQUAL relational_expression
    (34) equality_expression -> . equality_expression NEQUAL relational_expression
    (35) relational_expression -> . shift_expression
    (36) relational_expression -> . relational_expression GREATER shift_expression
    (37) relational_expression -> . relational_expression LESS shift_expression
    (38) relational_expression -> . relational_expression GEQ shift_expression
    (39) relational_expression -> . relational_expression LEQ shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 34
    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    unary_expression               shift and go to state 61
    exclusive_or_expression        shift and go to state 62
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    array_access                   shift and go to state 13
    additive_expression            shift and go to state 87
    simple_name                    shift and go to state 23
    valid_variable                 shift and go to state 69
    inclusive_or_expression        shift and go to state 70
    literal                        shift and go to state 71
    and_expression                 shift and go to state 74
    relational_expression          shift and go to state 78
    method_invocation              shift and go to state 75
    conditional_or_expression      shift and go to state 76
    assignment_expression          shift and go to state 81
    qualified_name                 shift and go to state 15
    assignment                     shift and go to state 83
    multiplicative_expression      shift and go to state 84
    shift_expression               shift and go to state 89
    equality_expression            shift and go to state 90
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 93
    expression                     shift and go to state 128
    conditional_and_expression     shift and go to state 94

state 89

    (35) relational_expression -> shift_expression .
    (41) shift_expression -> shift_expression . LSHIFT additive_expression
    (42) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 35 (relational_expression -> shift_expression .)
    LESS            reduce using rule 35 (relational_expression -> shift_expression .)
    GEQ             reduce using rule 35 (relational_expression -> shift_expression .)
    LEQ             reduce using rule 35 (relational_expression -> shift_expression .)
    EQUAL           reduce using rule 35 (relational_expression -> shift_expression .)
    NEQUAL          reduce using rule 35 (relational_expression -> shift_expression .)
    AND_BITWISE     reduce using rule 35 (relational_expression -> shift_expression .)
    XOR             reduce using rule 35 (relational_expression -> shift_expression .)
    OR_BITWISE      reduce using rule 35 (relational_expression -> shift_expression .)
    AND             reduce using rule 35 (relational_expression -> shift_expression .)
    OR              reduce using rule 35 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 35 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 35 (relational_expression -> shift_expression .)
    STATE_END       reduce using rule 35 (relational_expression -> shift_expression .)
    RBPAREN         reduce using rule 35 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 130
    RSHIFT          shift and go to state 129


state 90

    (30) and_expression -> equality_expression .
    (33) equality_expression -> equality_expression . EQUAL relational_expression
    (34) equality_expression -> equality_expression . NEQUAL relational_expression

    AND_BITWISE     reduce using rule 30 (and_expression -> equality_expression .)
    XOR             reduce using rule 30 (and_expression -> equality_expression .)
    OR_BITWISE      reduce using rule 30 (and_expression -> equality_expression .)
    AND             reduce using rule 30 (and_expression -> equality_expression .)
    OR              reduce using rule 30 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 30 (and_expression -> equality_expression .)
    RBPAREN         reduce using rule 30 (and_expression -> equality_expression .)
    STATE_END       reduce using rule 30 (and_expression -> equality_expression .)
    COMMA           reduce using rule 30 (and_expression -> equality_expression .)
    EQUAL           shift and go to state 132
    NEQUAL          shift and go to state 131


state 91

    (59) literal -> int_float .

    TIMES           reduce using rule 59 (literal -> int_float .)
    DIVIDE          reduce using rule 59 (literal -> int_float .)
    REMAINDER       reduce using rule 59 (literal -> int_float .)
    PLUS            reduce using rule 59 (literal -> int_float .)
    MINUS           reduce using rule 59 (literal -> int_float .)
    LSHIFT          reduce using rule 59 (literal -> int_float .)
    RSHIFT          reduce using rule 59 (literal -> int_float .)
    GREATER         reduce using rule 59 (literal -> int_float .)
    LESS            reduce using rule 59 (literal -> int_float .)
    GEQ             reduce using rule 59 (literal -> int_float .)
    LEQ             reduce using rule 59 (literal -> int_float .)
    EQUAL           reduce using rule 59 (literal -> int_float .)
    NEQUAL          reduce using rule 59 (literal -> int_float .)
    AND_BITWISE     reduce using rule 59 (literal -> int_float .)
    XOR             reduce using rule 59 (literal -> int_float .)
    OR_BITWISE      reduce using rule 59 (literal -> int_float .)
    AND             reduce using rule 59 (literal -> int_float .)
    OR              reduce using rule 59 (literal -> int_float .)
    STATE_END       reduce using rule 59 (literal -> int_float .)
    RPAREN          reduce using rule 59 (literal -> int_float .)
    COMMA           reduce using rule 59 (literal -> int_float .)
    RBPAREN         reduce using rule 59 (literal -> int_float .)


state 92

    (53) unary_expression_not_plus_minus -> variable_literal .

    TIMES           reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)
    DIVIDE          reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)
    REMAINDER       reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)
    PLUS            reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)
    MINUS           reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)
    LSHIFT          reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)
    RSHIFT          reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)
    GREATER         reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)
    LESS            reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)
    GEQ             reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)
    LEQ             reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)
    EQUAL           reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)
    NEQUAL          reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)
    AND_BITWISE     reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)
    XOR             reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)
    OR_BITWISE      reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)
    AND             reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)
    OR              reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)
    STATE_END       reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)
    RPAREN          reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)
    COMMA           reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)
    RBPAREN         reduce using rule 53 (unary_expression_not_plus_minus -> variable_literal .)


state 93

    (77) valid_variable -> name .
    (68) array_access -> name . LBPAREN expression RBPAREN
    (76) qualified_name -> name . DOT simple_name
    (67) method_invocation -> name . LPAREN argument_list_opt RPAREN

    ASSIGN          reduce using rule 77 (valid_variable -> name .)
    TIMES_ASSIGN    reduce using rule 77 (valid_variable -> name .)
    DIVIDE_ASSIGN   reduce using rule 77 (valid_variable -> name .)
    REMAINDER_ASSIGN reduce using rule 77 (valid_variable -> name .)
    PLUS_ASSIGN     reduce using rule 77 (valid_variable -> name .)
    MINUS_ASSIGN    reduce using rule 77 (valid_variable -> name .)
    LSHIFT_ASSIGN   reduce using rule 77 (valid_variable -> name .)
    RSHIFT_ASSIGN   reduce using rule 77 (valid_variable -> name .)
    AND_ASSIGN      reduce using rule 77 (valid_variable -> name .)
    OR_ASSIGN       reduce using rule 77 (valid_variable -> name .)
    XOR_ASSIGN      reduce using rule 77 (valid_variable -> name .)
    TIMES           reduce using rule 77 (valid_variable -> name .)
    DIVIDE          reduce using rule 77 (valid_variable -> name .)
    REMAINDER       reduce using rule 77 (valid_variable -> name .)
    PLUS            reduce using rule 77 (valid_variable -> name .)
    MINUS           reduce using rule 77 (valid_variable -> name .)
    LSHIFT          reduce using rule 77 (valid_variable -> name .)
    RSHIFT          reduce using rule 77 (valid_variable -> name .)
    GREATER         reduce using rule 77 (valid_variable -> name .)
    LESS            reduce using rule 77 (valid_variable -> name .)
    GEQ             reduce using rule 77 (valid_variable -> name .)
    LEQ             reduce using rule 77 (valid_variable -> name .)
    EQUAL           reduce using rule 77 (valid_variable -> name .)
    NEQUAL          reduce using rule 77 (valid_variable -> name .)
    AND_BITWISE     reduce using rule 77 (valid_variable -> name .)
    XOR             reduce using rule 77 (valid_variable -> name .)
    OR_BITWISE      reduce using rule 77 (valid_variable -> name .)
    AND             reduce using rule 77 (valid_variable -> name .)
    OR              reduce using rule 77 (valid_variable -> name .)
    RPAREN          reduce using rule 77 (valid_variable -> name .)
    STATE_END       reduce using rule 77 (valid_variable -> name .)
    COMMA           reduce using rule 77 (valid_variable -> name .)
    RBPAREN         reduce using rule 77 (valid_variable -> name .)
    LBPAREN         shift and go to state 102
    DOT             shift and go to state 103
    LPAREN          shift and go to state 101


state 94

    (22) conditional_or_expression -> conditional_and_expression .
    (25) conditional_and_expression -> conditional_and_expression . AND inclusive_or_expression

    OR              reduce using rule 22 (conditional_or_expression -> conditional_and_expression .)
    STATE_END       reduce using rule 22 (conditional_or_expression -> conditional_and_expression .)
    RPAREN          reduce using rule 22 (conditional_or_expression -> conditional_and_expression .)
    COMMA           reduce using rule 22 (conditional_or_expression -> conditional_and_expression .)
    RBPAREN         reduce using rule 22 (conditional_or_expression -> conditional_and_expression .)
    AND             shift and go to state 133


state 95

    (55) unary_expression_not_plus_minus -> NOT . unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    qualified_name                 shift and go to state 15
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 112
    unary_expression               shift and go to state 134
    valid_variable                 shift and go to state 111
    array_access                   shift and go to state 13
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    literal                        shift and go to state 71
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 23

state 96

    (6) expression_optional -> expression .

    STATE_END       reduce using rule 6 (expression_optional -> expression .)


state 97

    (91) declaration_keyword -> KWRD_VAL .

    LPAREN          reduce using rule 91 (declaration_keyword -> KWRD_VAL .)
    IDENTIFIER      reduce using rule 91 (declaration_keyword -> KWRD_VAL .)


state 98

    (93) local_variable_declaration -> modifier_opts declaration_keyword . variable_declaration_body
    (94) variable_declaration_body -> . variable_declarator ASSIGN expression
    (95) variable_declaration_body -> . LPAREN variable_declarators RPAREN ASSIGN LPAREN argument_list RPAREN
    (98) variable_declarator -> . variable_declarator_id
    (99) variable_declarator_id -> . IDENTIFIER COLON primitive_type

    LPAREN          shift and go to state 138
    IDENTIFIER      shift and go to state 139

    variable_declaration_body      shift and go to state 135
    variable_declarator            shift and go to state 136
    variable_declarator_id         shift and go to state 137

state 99

    (90) declaration_keyword -> KWRD_VAR .

    LPAREN          reduce using rule 90 (declaration_keyword -> KWRD_VAR .)
    IDENTIFIER      reduce using rule 90 (declaration_keyword -> KWRD_VAR .)


state 100

    (112) if_then_statement -> KWRD_IF LPAREN . expression RPAREN statement
    (113) if_then_else_statement -> KWRD_IF LPAREN . expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (5) expression -> . assignment_expression
    (8) assignment_expression -> . assignment
    (9) assignment_expression -> . conditional_or_expression
    (10) assignment -> . valid_variable assignment_operator assignment_expression
    (22) conditional_or_expression -> . conditional_and_expression
    (23) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (24) conditional_and_expression -> . inclusive_or_expression
    (25) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (26) inclusive_or_expression -> . exclusive_or_expression
    (27) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (28) exclusive_or_expression -> . and_expression
    (29) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (30) and_expression -> . equality_expression
    (31) and_expression -> . and_expression AND_BITWISE equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQUAL relational_expression
    (34) equality_expression -> . equality_expression NEQUAL relational_expression
    (35) relational_expression -> . shift_expression
    (36) relational_expression -> . relational_expression GREATER shift_expression
    (37) relational_expression -> . relational_expression LESS shift_expression
    (38) relational_expression -> . relational_expression GEQ shift_expression
    (39) relational_expression -> . relational_expression LEQ shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 34
    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    unary_expression               shift and go to state 61
    exclusive_or_expression        shift and go to state 62
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    array_access                   shift and go to state 13
    additive_expression            shift and go to state 87
    simple_name                    shift and go to state 23
    valid_variable                 shift and go to state 69
    inclusive_or_expression        shift and go to state 70
    literal                        shift and go to state 71
    and_expression                 shift and go to state 74
    relational_expression          shift and go to state 78
    method_invocation              shift and go to state 75
    conditional_or_expression      shift and go to state 76
    assignment_expression          shift and go to state 81
    qualified_name                 shift and go to state 15
    assignment                     shift and go to state 83
    multiplicative_expression      shift and go to state 84
    shift_expression               shift and go to state 89
    equality_expression            shift and go to state 90
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 93
    expression                     shift and go to state 140
    conditional_and_expression     shift and go to state 94

state 101

    (67) method_invocation -> name LPAREN . argument_list_opt RPAREN
    (69) argument_list_opt -> . argument_list
    (70) argument_list_opt -> . empty
    (71) argument_list -> . expression
    (72) argument_list -> . argument_list COMMA expression
    (130) empty -> .
    (5) expression -> . assignment_expression
    (8) assignment_expression -> . assignment
    (9) assignment_expression -> . conditional_or_expression
    (10) assignment -> . valid_variable assignment_operator assignment_expression
    (22) conditional_or_expression -> . conditional_and_expression
    (23) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (24) conditional_and_expression -> . inclusive_or_expression
    (25) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (26) inclusive_or_expression -> . exclusive_or_expression
    (27) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (28) exclusive_or_expression -> . and_expression
    (29) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (30) and_expression -> . equality_expression
    (31) and_expression -> . and_expression AND_BITWISE equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQUAL relational_expression
    (34) equality_expression -> . equality_expression NEQUAL relational_expression
    (35) relational_expression -> . shift_expression
    (36) relational_expression -> . relational_expression GREATER shift_expression
    (37) relational_expression -> . relational_expression LESS shift_expression
    (38) relational_expression -> . relational_expression GEQ shift_expression
    (39) relational_expression -> . relational_expression LEQ shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    RPAREN          reduce using rule 130 (empty -> .)
    IDENTIFIER      shift and go to state 34
    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    and_expression                 shift and go to state 74
    exclusive_or_expression        shift and go to state 62
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    array_access                   shift and go to state 13
    additive_expression            shift and go to state 87
    simple_name                    shift and go to state 23
    unary_expression               shift and go to state 61
    valid_variable                 shift and go to state 69
    inclusive_or_expression        shift and go to state 70
    literal                        shift and go to state 71
    relational_expression          shift and go to state 78
    method_invocation              shift and go to state 75
    conditional_or_expression      shift and go to state 76
    empty                          shift and go to state 142
    argument_list                  shift and go to state 141
    assignment_expression          shift and go to state 81
    qualified_name                 shift and go to state 15
    assignment                     shift and go to state 83
    multiplicative_expression      shift and go to state 84
    shift_expression               shift and go to state 89
    equality_expression            shift and go to state 90
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 93
    argument_list_opt              shift and go to state 143
    expression                     shift and go to state 144
    conditional_and_expression     shift and go to state 94

state 102

    (68) array_access -> name LBPAREN . expression RBPAREN
    (5) expression -> . assignment_expression
    (8) assignment_expression -> . assignment
    (9) assignment_expression -> . conditional_or_expression
    (10) assignment -> . valid_variable assignment_operator assignment_expression
    (22) conditional_or_expression -> . conditional_and_expression
    (23) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (24) conditional_and_expression -> . inclusive_or_expression
    (25) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (26) inclusive_or_expression -> . exclusive_or_expression
    (27) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (28) exclusive_or_expression -> . and_expression
    (29) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (30) and_expression -> . equality_expression
    (31) and_expression -> . and_expression AND_BITWISE equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQUAL relational_expression
    (34) equality_expression -> . equality_expression NEQUAL relational_expression
    (35) relational_expression -> . shift_expression
    (36) relational_expression -> . relational_expression GREATER shift_expression
    (37) relational_expression -> . relational_expression LESS shift_expression
    (38) relational_expression -> . relational_expression GEQ shift_expression
    (39) relational_expression -> . relational_expression LEQ shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 34
    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    unary_expression               shift and go to state 61
    exclusive_or_expression        shift and go to state 62
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    array_access                   shift and go to state 13
    additive_expression            shift and go to state 87
    simple_name                    shift and go to state 23
    valid_variable                 shift and go to state 69
    inclusive_or_expression        shift and go to state 70
    literal                        shift and go to state 71
    and_expression                 shift and go to state 74
    relational_expression          shift and go to state 78
    method_invocation              shift and go to state 75
    conditional_or_expression      shift and go to state 76
    assignment_expression          shift and go to state 81
    qualified_name                 shift and go to state 15
    assignment                     shift and go to state 83
    multiplicative_expression      shift and go to state 84
    shift_expression               shift and go to state 89
    equality_expression            shift and go to state 90
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 93
    expression                     shift and go to state 145
    conditional_and_expression     shift and go to state 94

state 103

    (76) qualified_name -> name DOT . simple_name
    (75) simple_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 34

    simple_name                    shift and go to state 146

state 104

    (92) local_variable_declaration_statement -> local_variable_declaration STATE_END .

    KWRD_IF         reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_WHILE      reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_DO         reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    BLOCK_BEGIN     reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    STATE_END       reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_RETURN     reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_PROTECTED  reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_PRIVATE    reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    IDENTIFIER      reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_VAR        reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_VAL        reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    BLOCK_END       reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)


state 105

    (4) ObjectDeclare -> KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER .

    BLOCK_BEGIN     reduce using rule 4 (ObjectDeclare -> KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER .)


state 106

    (10) assignment -> valid_variable assignment_operator assignment_expression .

    RPAREN          reduce using rule 10 (assignment -> valid_variable assignment_operator assignment_expression .)
    STATE_END       reduce using rule 10 (assignment -> valid_variable assignment_operator assignment_expression .)
    COMMA           reduce using rule 10 (assignment -> valid_variable assignment_operator assignment_expression .)
    RBPAREN         reduce using rule 10 (assignment -> valid_variable assignment_operator assignment_expression .)


state 107

    (117) while_statement -> KWRD_WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 147


state 108

    (118) do_while_statement -> KWRD_DO statement KWRD_WHILE . LPAREN expression RPAREN STATE_END

    LPAREN          shift and go to state 148


state 109

    (29) exclusive_or_expression -> exclusive_or_expression XOR . and_expression
    (30) and_expression -> . equality_expression
    (31) and_expression -> . and_expression AND_BITWISE equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQUAL relational_expression
    (34) equality_expression -> . equality_expression NEQUAL relational_expression
    (35) relational_expression -> . shift_expression
    (36) relational_expression -> . relational_expression GREATER shift_expression
    (37) relational_expression -> . relational_expression LESS shift_expression
    (38) relational_expression -> . relational_expression GEQ shift_expression
    (39) relational_expression -> . relational_expression LEQ shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    qualified_name                 shift and go to state 15
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    unary_expression               shift and go to state 61
    and_expression                 shift and go to state 149
    valid_variable                 shift and go to state 111
    multiplicative_expression      shift and go to state 84
    array_access                   shift and go to state 13
    primary                        shift and go to state 86
    name                           shift and go to state 112
    unary_expression_not_plus_minus shift and go to state 64
    literal                        shift and go to state 71
    equality_expression            shift and go to state 90
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 23
    shift_expression               shift and go to state 89
    additive_expression            shift and go to state 87
    relational_expression          shift and go to state 78

state 110

    (51) unary_expression -> MINUS unary_expression .

    TIMES           reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    REMAINDER       reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    LSHIFT          reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    RSHIFT          reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    GREATER         reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    LESS            reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    GEQ             reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    LEQ             reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    EQUAL           reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    NEQUAL          reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    AND_BITWISE     reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    XOR             reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    OR_BITWISE      reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    AND             reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    OR              reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    STATE_END       reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    RBPAREN         reduce using rule 51 (unary_expression -> MINUS unary_expression .)


state 111

    (79) variable_literal -> valid_variable .

    TIMES           reduce using rule 79 (variable_literal -> valid_variable .)
    DIVIDE          reduce using rule 79 (variable_literal -> valid_variable .)
    REMAINDER       reduce using rule 79 (variable_literal -> valid_variable .)
    PLUS            reduce using rule 79 (variable_literal -> valid_variable .)
    MINUS           reduce using rule 79 (variable_literal -> valid_variable .)
    LSHIFT          reduce using rule 79 (variable_literal -> valid_variable .)
    RSHIFT          reduce using rule 79 (variable_literal -> valid_variable .)
    GREATER         reduce using rule 79 (variable_literal -> valid_variable .)
    LESS            reduce using rule 79 (variable_literal -> valid_variable .)
    GEQ             reduce using rule 79 (variable_literal -> valid_variable .)
    LEQ             reduce using rule 79 (variable_literal -> valid_variable .)
    EQUAL           reduce using rule 79 (variable_literal -> valid_variable .)
    NEQUAL          reduce using rule 79 (variable_literal -> valid_variable .)
    AND_BITWISE     reduce using rule 79 (variable_literal -> valid_variable .)
    XOR             reduce using rule 79 (variable_literal -> valid_variable .)
    OR_BITWISE      reduce using rule 79 (variable_literal -> valid_variable .)
    AND             reduce using rule 79 (variable_literal -> valid_variable .)
    OR              reduce using rule 79 (variable_literal -> valid_variable .)
    STATE_END       reduce using rule 79 (variable_literal -> valid_variable .)
    RPAREN          reduce using rule 79 (variable_literal -> valid_variable .)
    COMMA           reduce using rule 79 (variable_literal -> valid_variable .)
    RBPAREN         reduce using rule 79 (variable_literal -> valid_variable .)


state 112

    (77) valid_variable -> name .
    (68) array_access -> name . LBPAREN expression RBPAREN
    (67) method_invocation -> name . LPAREN argument_list_opt RPAREN
    (76) qualified_name -> name . DOT simple_name

    TIMES           reduce using rule 77 (valid_variable -> name .)
    DIVIDE          reduce using rule 77 (valid_variable -> name .)
    REMAINDER       reduce using rule 77 (valid_variable -> name .)
    PLUS            reduce using rule 77 (valid_variable -> name .)
    MINUS           reduce using rule 77 (valid_variable -> name .)
    LSHIFT          reduce using rule 77 (valid_variable -> name .)
    RSHIFT          reduce using rule 77 (valid_variable -> name .)
    GREATER         reduce using rule 77 (valid_variable -> name .)
    LESS            reduce using rule 77 (valid_variable -> name .)
    GEQ             reduce using rule 77 (valid_variable -> name .)
    LEQ             reduce using rule 77 (valid_variable -> name .)
    EQUAL           reduce using rule 77 (valid_variable -> name .)
    NEQUAL          reduce using rule 77 (valid_variable -> name .)
    AND_BITWISE     reduce using rule 77 (valid_variable -> name .)
    XOR             reduce using rule 77 (valid_variable -> name .)
    OR_BITWISE      reduce using rule 77 (valid_variable -> name .)
    AND             reduce using rule 77 (valid_variable -> name .)
    OR              reduce using rule 77 (valid_variable -> name .)
    STATE_END       reduce using rule 77 (valid_variable -> name .)
    RPAREN          reduce using rule 77 (valid_variable -> name .)
    COMMA           reduce using rule 77 (valid_variable -> name .)
    RBPAREN         reduce using rule 77 (valid_variable -> name .)
    LBPAREN         shift and go to state 102
    LPAREN          shift and go to state 101
    DOT             shift and go to state 103


state 113

    (120) return_statement -> KWRD_RETURN expression_optional STATE_END .

    KWRD_IF         reduce using rule 120 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_WHILE      reduce using rule 120 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_DO         reduce using rule 120 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    BLOCK_BEGIN     reduce using rule 120 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    STATE_END       reduce using rule 120 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_RETURN     reduce using rule 120 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_PROTECTED  reduce using rule 120 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_PRIVATE    reduce using rule 120 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    IDENTIFIER      reduce using rule 120 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_VAR        reduce using rule 120 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_VAL        reduce using rule 120 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    BLOCK_END       reduce using rule 120 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_ELSE       reduce using rule 120 (return_statement -> KWRD_RETURN expression_optional STATE_END .)


state 114

    (27) inclusive_or_expression -> inclusive_or_expression OR_BITWISE . exclusive_or_expression
    (28) exclusive_or_expression -> . and_expression
    (29) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (30) and_expression -> . equality_expression
    (31) and_expression -> . and_expression AND_BITWISE equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQUAL relational_expression
    (34) equality_expression -> . equality_expression NEQUAL relational_expression
    (35) relational_expression -> . shift_expression
    (36) relational_expression -> . relational_expression GREATER shift_expression
    (37) relational_expression -> . relational_expression LESS shift_expression
    (38) relational_expression -> . relational_expression GEQ shift_expression
    (39) relational_expression -> . relational_expression LEQ shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    unary_expression               shift and go to state 61
    exclusive_or_expression        shift and go to state 150
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    array_access                   shift and go to state 13
    additive_expression            shift and go to state 87
    simple_name                    shift and go to state 23
    valid_variable                 shift and go to state 111
    literal                        shift and go to state 71
    and_expression                 shift and go to state 74
    method_invocation              shift and go to state 75
    relational_expression          shift and go to state 78
    qualified_name                 shift and go to state 15
    multiplicative_expression      shift and go to state 84
    shift_expression               shift and go to state 89
    equality_expression            shift and go to state 90
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 112

state 115

    (54) unary_expression_not_plus_minus -> TILDA unary_expression .

    TIMES           reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    DIVIDE          reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    REMAINDER       reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    PLUS            reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    MINUS           reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    LSHIFT          reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    RSHIFT          reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    GREATER         reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    LESS            reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    GEQ             reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    LEQ             reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    EQUAL           reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    NEQUAL          reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    AND_BITWISE     reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    XOR             reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    OR_BITWISE      reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    AND             reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    OR              reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    STATE_END       reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    RPAREN          reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    COMMA           reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    RBPAREN         reduce using rule 54 (unary_expression_not_plus_minus -> TILDA unary_expression .)


state 116

    (50) unary_expression -> PLUS unary_expression .

    TIMES           reduce using rule 50 (unary_expression -> PLUS unary_expression .)
    DIVIDE          reduce using rule 50 (unary_expression -> PLUS unary_expression .)
    REMAINDER       reduce using rule 50 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 50 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 50 (unary_expression -> PLUS unary_expression .)
    LSHIFT          reduce using rule 50 (unary_expression -> PLUS unary_expression .)
    RSHIFT          reduce using rule 50 (unary_expression -> PLUS unary_expression .)
    GREATER         reduce using rule 50 (unary_expression -> PLUS unary_expression .)
    LESS            reduce using rule 50 (unary_expression -> PLUS unary_expression .)
    GEQ             reduce using rule 50 (unary_expression -> PLUS unary_expression .)
    LEQ             reduce using rule 50 (unary_expression -> PLUS unary_expression .)
    EQUAL           reduce using rule 50 (unary_expression -> PLUS unary_expression .)
    NEQUAL          reduce using rule 50 (unary_expression -> PLUS unary_expression .)
    AND_BITWISE     reduce using rule 50 (unary_expression -> PLUS unary_expression .)
    XOR             reduce using rule 50 (unary_expression -> PLUS unary_expression .)
    OR_BITWISE      reduce using rule 50 (unary_expression -> PLUS unary_expression .)
    AND             reduce using rule 50 (unary_expression -> PLUS unary_expression .)
    OR              reduce using rule 50 (unary_expression -> PLUS unary_expression .)
    STATE_END       reduce using rule 50 (unary_expression -> PLUS unary_expression .)
    RPAREN          reduce using rule 50 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 50 (unary_expression -> PLUS unary_expression .)
    RBPAREN         reduce using rule 50 (unary_expression -> PLUS unary_expression .)


state 117

    (31) and_expression -> and_expression AND_BITWISE . equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQUAL relational_expression
    (34) equality_expression -> . equality_expression NEQUAL relational_expression
    (35) relational_expression -> . shift_expression
    (36) relational_expression -> . relational_expression GREATER shift_expression
    (37) relational_expression -> . relational_expression LESS shift_expression
    (38) relational_expression -> . relational_expression GEQ shift_expression
    (39) relational_expression -> . relational_expression LEQ shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    qualified_name                 shift and go to state 15
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    unary_expression               shift and go to state 61
    valid_variable                 shift and go to state 111
    array_access                   shift and go to state 13
    multiplicative_expression      shift and go to state 84
    primary                        shift and go to state 86
    name                           shift and go to state 112
    unary_expression_not_plus_minus shift and go to state 64
    literal                        shift and go to state 71
    equality_expression            shift and go to state 151
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 23
    shift_expression               shift and go to state 89
    additive_expression            shift and go to state 87
    relational_expression          shift and go to state 78

state 118

    (23) conditional_or_expression -> conditional_or_expression OR . conditional_and_expression
    (24) conditional_and_expression -> . inclusive_or_expression
    (25) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (26) inclusive_or_expression -> . exclusive_or_expression
    (27) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (28) exclusive_or_expression -> . and_expression
    (29) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (30) and_expression -> . equality_expression
    (31) and_expression -> . and_expression AND_BITWISE equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQUAL relational_expression
    (34) equality_expression -> . equality_expression NEQUAL relational_expression
    (35) relational_expression -> . shift_expression
    (36) relational_expression -> . relational_expression GREATER shift_expression
    (37) relational_expression -> . relational_expression LESS shift_expression
    (38) relational_expression -> . relational_expression GEQ shift_expression
    (39) relational_expression -> . relational_expression LEQ shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    unary_expression               shift and go to state 61
    exclusive_or_expression        shift and go to state 62
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    array_access                   shift and go to state 13
    additive_expression            shift and go to state 87
    simple_name                    shift and go to state 23
    valid_variable                 shift and go to state 111
    inclusive_or_expression        shift and go to state 70
    literal                        shift and go to state 71
    and_expression                 shift and go to state 74
    method_invocation              shift and go to state 75
    relational_expression          shift and go to state 78
    qualified_name                 shift and go to state 15
    multiplicative_expression      shift and go to state 84
    shift_expression               shift and go to state 89
    equality_expression            shift and go to state 90
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 112
    conditional_and_expression     shift and go to state 152

state 119

    (38) relational_expression -> relational_expression GEQ . shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    qualified_name                 shift and go to state 15
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 112
    unary_expression               shift and go to state 61
    valid_variable                 shift and go to state 111
    array_access                   shift and go to state 13
    multiplicative_expression      shift and go to state 84
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    literal                        shift and go to state 71
    method_invocation              shift and go to state 75
    shift_expression               shift and go to state 153
    additive_expression            shift and go to state 87
    simple_name                    shift and go to state 23

state 120

    (36) relational_expression -> relational_expression GREATER . shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    qualified_name                 shift and go to state 15
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 112
    unary_expression               shift and go to state 61
    valid_variable                 shift and go to state 111
    array_access                   shift and go to state 13
    multiplicative_expression      shift and go to state 84
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    literal                        shift and go to state 71
    method_invocation              shift and go to state 75
    shift_expression               shift and go to state 154
    additive_expression            shift and go to state 87
    simple_name                    shift and go to state 23

state 121

    (37) relational_expression -> relational_expression LESS . shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    qualified_name                 shift and go to state 15
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 112
    unary_expression               shift and go to state 61
    valid_variable                 shift and go to state 111
    array_access                   shift and go to state 13
    multiplicative_expression      shift and go to state 84
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    literal                        shift and go to state 71
    method_invocation              shift and go to state 75
    shift_expression               shift and go to state 155
    additive_expression            shift and go to state 87
    simple_name                    shift and go to state 23

state 122

    (39) relational_expression -> relational_expression LEQ . shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    qualified_name                 shift and go to state 15
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 112
    unary_expression               shift and go to state 61
    valid_variable                 shift and go to state 111
    array_access                   shift and go to state 13
    multiplicative_expression      shift and go to state 84
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    literal                        shift and go to state 71
    method_invocation              shift and go to state 75
    shift_expression               shift and go to state 156
    additive_expression            shift and go to state 87
    simple_name                    shift and go to state 23

state 123

    (49) multiplicative_expression -> multiplicative_expression REMAINDER . unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    qualified_name                 shift and go to state 15
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 112
    unary_expression               shift and go to state 157
    valid_variable                 shift and go to state 111
    array_access                   shift and go to state 13
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    literal                        shift and go to state 71
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 23

state 124

    (48) multiplicative_expression -> multiplicative_expression DIVIDE . unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    qualified_name                 shift and go to state 15
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 112
    unary_expression               shift and go to state 158
    valid_variable                 shift and go to state 111
    array_access                   shift and go to state 13
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    literal                        shift and go to state 71
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 23

state 125

    (47) multiplicative_expression -> multiplicative_expression TIMES . unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    qualified_name                 shift and go to state 15
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 112
    unary_expression               shift and go to state 159
    valid_variable                 shift and go to state 111
    array_access                   shift and go to state 13
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    literal                        shift and go to state 71
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 23

state 126

    (44) additive_expression -> additive_expression PLUS . multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    qualified_name                 shift and go to state 15
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 112
    unary_expression               shift and go to state 61
    valid_variable                 shift and go to state 111
    array_access                   shift and go to state 13
    multiplicative_expression      shift and go to state 160
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    literal                        shift and go to state 71
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 23

state 127

    (45) additive_expression -> additive_expression MINUS . multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    qualified_name                 shift and go to state 15
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 112
    unary_expression               shift and go to state 61
    valid_variable                 shift and go to state 111
    array_access                   shift and go to state 13
    multiplicative_expression      shift and go to state 161
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    literal                        shift and go to state 71
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 23

state 128

    (56) unary_expression_not_plus_minus -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 162


state 129

    (42) shift_expression -> shift_expression RSHIFT . additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    qualified_name                 shift and go to state 15
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 112
    unary_expression               shift and go to state 61
    valid_variable                 shift and go to state 111
    array_access                   shift and go to state 13
    multiplicative_expression      shift and go to state 84
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    literal                        shift and go to state 71
    method_invocation              shift and go to state 75
    additive_expression            shift and go to state 163
    simple_name                    shift and go to state 23

state 130

    (41) shift_expression -> shift_expression LSHIFT . additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    qualified_name                 shift and go to state 15
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 112
    unary_expression               shift and go to state 61
    valid_variable                 shift and go to state 111
    array_access                   shift and go to state 13
    multiplicative_expression      shift and go to state 84
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    literal                        shift and go to state 71
    method_invocation              shift and go to state 75
    additive_expression            shift and go to state 164
    simple_name                    shift and go to state 23

state 131

    (34) equality_expression -> equality_expression NEQUAL . relational_expression
    (35) relational_expression -> . shift_expression
    (36) relational_expression -> . relational_expression GREATER shift_expression
    (37) relational_expression -> . relational_expression LESS shift_expression
    (38) relational_expression -> . relational_expression GEQ shift_expression
    (39) relational_expression -> . relational_expression LEQ shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    qualified_name                 shift and go to state 15
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 112
    unary_expression               shift and go to state 61
    valid_variable                 shift and go to state 111
    array_access                   shift and go to state 13
    multiplicative_expression      shift and go to state 84
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    literal                        shift and go to state 71
    relational_expression          shift and go to state 165
    method_invocation              shift and go to state 75
    shift_expression               shift and go to state 89
    additive_expression            shift and go to state 87
    simple_name                    shift and go to state 23

state 132

    (33) equality_expression -> equality_expression EQUAL . relational_expression
    (35) relational_expression -> . shift_expression
    (36) relational_expression -> . relational_expression GREATER shift_expression
    (37) relational_expression -> . relational_expression LESS shift_expression
    (38) relational_expression -> . relational_expression GEQ shift_expression
    (39) relational_expression -> . relational_expression LEQ shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    qualified_name                 shift and go to state 15
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 112
    unary_expression               shift and go to state 61
    valid_variable                 shift and go to state 111
    array_access                   shift and go to state 13
    multiplicative_expression      shift and go to state 84
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    literal                        shift and go to state 71
    relational_expression          shift and go to state 166
    method_invocation              shift and go to state 75
    shift_expression               shift and go to state 89
    additive_expression            shift and go to state 87
    simple_name                    shift and go to state 23

state 133

    (25) conditional_and_expression -> conditional_and_expression AND . inclusive_or_expression
    (26) inclusive_or_expression -> . exclusive_or_expression
    (27) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (28) exclusive_or_expression -> . and_expression
    (29) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (30) and_expression -> . equality_expression
    (31) and_expression -> . and_expression AND_BITWISE equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQUAL relational_expression
    (34) equality_expression -> . equality_expression NEQUAL relational_expression
    (35) relational_expression -> . shift_expression
    (36) relational_expression -> . relational_expression GREATER shift_expression
    (37) relational_expression -> . relational_expression LESS shift_expression
    (38) relational_expression -> . relational_expression GEQ shift_expression
    (39) relational_expression -> . relational_expression LEQ shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    IDENTIFIER      shift and go to state 34
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    unary_expression               shift and go to state 61
    exclusive_or_expression        shift and go to state 62
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    array_access                   shift and go to state 13
    additive_expression            shift and go to state 87
    simple_name                    shift and go to state 23
    valid_variable                 shift and go to state 111
    inclusive_or_expression        shift and go to state 167
    literal                        shift and go to state 71
    and_expression                 shift and go to state 74
    method_invocation              shift and go to state 75
    relational_expression          shift and go to state 78
    qualified_name                 shift and go to state 15
    multiplicative_expression      shift and go to state 84
    shift_expression               shift and go to state 89
    equality_expression            shift and go to state 90
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 112

state 134

    (55) unary_expression_not_plus_minus -> NOT unary_expression .

    TIMES           reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)
    DIVIDE          reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)
    REMAINDER       reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)
    PLUS            reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)
    MINUS           reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)
    LSHIFT          reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)
    RSHIFT          reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)
    GREATER         reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)
    LESS            reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)
    GEQ             reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)
    LEQ             reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)
    EQUAL           reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)
    NEQUAL          reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)
    AND_BITWISE     reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)
    XOR             reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)
    OR_BITWISE      reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)
    AND             reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)
    OR              reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)
    STATE_END       reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)
    RPAREN          reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)
    COMMA           reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)
    RBPAREN         reduce using rule 55 (unary_expression_not_plus_minus -> NOT unary_expression .)


state 135

    (93) local_variable_declaration -> modifier_opts declaration_keyword variable_declaration_body .

    STATE_END       reduce using rule 93 (local_variable_declaration -> modifier_opts declaration_keyword variable_declaration_body .)


state 136

    (94) variable_declaration_body -> variable_declarator . ASSIGN expression

    ASSIGN          shift and go to state 168


state 137

    (98) variable_declarator -> variable_declarator_id .

    RPAREN          reduce using rule 98 (variable_declarator -> variable_declarator_id .)
    COMMA           reduce using rule 98 (variable_declarator -> variable_declarator_id .)
    ASSIGN          reduce using rule 98 (variable_declarator -> variable_declarator_id .)


state 138

    (95) variable_declaration_body -> LPAREN . variable_declarators RPAREN ASSIGN LPAREN argument_list RPAREN
    (96) variable_declarators -> . variable_declarator
    (97) variable_declarators -> . variable_declarators COMMA variable_declarator
    (98) variable_declarator -> . variable_declarator_id
    (99) variable_declarator_id -> . IDENTIFIER COLON primitive_type

    IDENTIFIER      shift and go to state 139

    variable_declarators           shift and go to state 169
    variable_declarator_id         shift and go to state 137
    variable_declarator            shift and go to state 170

state 139

    (99) variable_declarator_id -> IDENTIFIER . COLON primitive_type

    COLON           shift and go to state 171


state 140

    (112) if_then_statement -> KWRD_IF LPAREN expression . RPAREN statement
    (113) if_then_else_statement -> KWRD_IF LPAREN expression . RPAREN if_then_else_intermediate KWRD_ELSE statement

    RPAREN          shift and go to state 172


state 141

    (69) argument_list_opt -> argument_list .
    (72) argument_list -> argument_list . COMMA expression

    RPAREN          reduce using rule 69 (argument_list_opt -> argument_list .)
    COMMA           shift and go to state 173


state 142

    (70) argument_list_opt -> empty .

    RPAREN          reduce using rule 70 (argument_list_opt -> empty .)


state 143

    (67) method_invocation -> name LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 174


state 144

    (71) argument_list -> expression .

    RPAREN          reduce using rule 71 (argument_list -> expression .)
    COMMA           reduce using rule 71 (argument_list -> expression .)


state 145

    (68) array_access -> name LBPAREN expression . RBPAREN

    RBPAREN         shift and go to state 175


state 146

    (76) qualified_name -> name DOT simple_name .

    LBPAREN         reduce using rule 76 (qualified_name -> name DOT simple_name .)
    DOT             reduce using rule 76 (qualified_name -> name DOT simple_name .)
    LPAREN          reduce using rule 76 (qualified_name -> name DOT simple_name .)
    ASSIGN          reduce using rule 76 (qualified_name -> name DOT simple_name .)
    TIMES_ASSIGN    reduce using rule 76 (qualified_name -> name DOT simple_name .)
    DIVIDE_ASSIGN   reduce using rule 76 (qualified_name -> name DOT simple_name .)
    REMAINDER_ASSIGN reduce using rule 76 (qualified_name -> name DOT simple_name .)
    PLUS_ASSIGN     reduce using rule 76 (qualified_name -> name DOT simple_name .)
    MINUS_ASSIGN    reduce using rule 76 (qualified_name -> name DOT simple_name .)
    LSHIFT_ASSIGN   reduce using rule 76 (qualified_name -> name DOT simple_name .)
    RSHIFT_ASSIGN   reduce using rule 76 (qualified_name -> name DOT simple_name .)
    AND_ASSIGN      reduce using rule 76 (qualified_name -> name DOT simple_name .)
    OR_ASSIGN       reduce using rule 76 (qualified_name -> name DOT simple_name .)
    XOR_ASSIGN      reduce using rule 76 (qualified_name -> name DOT simple_name .)
    TIMES           reduce using rule 76 (qualified_name -> name DOT simple_name .)
    DIVIDE          reduce using rule 76 (qualified_name -> name DOT simple_name .)
    REMAINDER       reduce using rule 76 (qualified_name -> name DOT simple_name .)
    PLUS            reduce using rule 76 (qualified_name -> name DOT simple_name .)
    MINUS           reduce using rule 76 (qualified_name -> name DOT simple_name .)
    LSHIFT          reduce using rule 76 (qualified_name -> name DOT simple_name .)
    RSHIFT          reduce using rule 76 (qualified_name -> name DOT simple_name .)
    GREATER         reduce using rule 76 (qualified_name -> name DOT simple_name .)
    LESS            reduce using rule 76 (qualified_name -> name DOT simple_name .)
    GEQ             reduce using rule 76 (qualified_name -> name DOT simple_name .)
    LEQ             reduce using rule 76 (qualified_name -> name DOT simple_name .)
    EQUAL           reduce using rule 76 (qualified_name -> name DOT simple_name .)
    NEQUAL          reduce using rule 76 (qualified_name -> name DOT simple_name .)
    AND_BITWISE     reduce using rule 76 (qualified_name -> name DOT simple_name .)
    XOR             reduce using rule 76 (qualified_name -> name DOT simple_name .)
    OR_BITWISE      reduce using rule 76 (qualified_name -> name DOT simple_name .)
    AND             reduce using rule 76 (qualified_name -> name DOT simple_name .)
    OR              reduce using rule 76 (qualified_name -> name DOT simple_name .)
    RPAREN          reduce using rule 76 (qualified_name -> name DOT simple_name .)
    STATE_END       reduce using rule 76 (qualified_name -> name DOT simple_name .)
    COMMA           reduce using rule 76 (qualified_name -> name DOT simple_name .)
    RBPAREN         reduce using rule 76 (qualified_name -> name DOT simple_name .)


state 147

    (117) while_statement -> KWRD_WHILE LPAREN expression RPAREN . statement
    (100) statement -> . normal_statement
    (101) statement -> . if_then_statement
    (102) statement -> . if_then_else_statement
    (103) statement -> . while_statement
    (104) statement -> . do_while_statement
    (105) normal_statement -> . block
    (106) normal_statement -> . expression_statement
    (107) normal_statement -> . empty_statement
    (108) normal_statement -> . return_statement
    (112) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (113) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (117) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (118) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (81) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (109) expression_statement -> . statement_expression STATE_END
    (119) empty_statement -> . STATE_END
    (120) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (110) statement_expression -> . assignment
    (111) statement_expression -> . method_invocation
    (10) assignment -> . valid_variable assignment_operator assignment_expression
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name

    KWRD_IF         shift and go to state 33
    KWRD_WHILE      shift and go to state 24
    KWRD_DO         shift and go to state 30
    BLOCK_BEGIN     shift and go to state 5
    STATE_END       shift and go to state 8
    KWRD_RETURN     shift and go to state 31
    IDENTIFIER      shift and go to state 34

    expression_statement           shift and go to state 9
    normal_statement               shift and go to state 10
    if_then_statement              shift and go to state 12
    array_access                   shift and go to state 13
    qualified_name                 shift and go to state 15
    valid_variable                 shift and go to state 16
    return_statement               shift and go to state 18
    while_statement                shift and go to state 19
    statement                      shift and go to state 176
    statement_expression           shift and go to state 21
    method_invocation              shift and go to state 22
    simple_name                    shift and go to state 23
    do_while_statement             shift and go to state 28
    assignment                     shift and go to state 29
    name                           shift and go to state 35
    empty_statement                shift and go to state 37
    block                          shift and go to state 40
    if_then_else_statement         shift and go to state 41

state 148

    (118) do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN . expression RPAREN STATE_END
    (5) expression -> . assignment_expression
    (8) assignment_expression -> . assignment
    (9) assignment_expression -> . conditional_or_expression
    (10) assignment -> . valid_variable assignment_operator assignment_expression
    (22) conditional_or_expression -> . conditional_and_expression
    (23) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (24) conditional_and_expression -> . inclusive_or_expression
    (25) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (26) inclusive_or_expression -> . exclusive_or_expression
    (27) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (28) exclusive_or_expression -> . and_expression
    (29) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (30) and_expression -> . equality_expression
    (31) and_expression -> . and_expression AND_BITWISE equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQUAL relational_expression
    (34) equality_expression -> . equality_expression NEQUAL relational_expression
    (35) relational_expression -> . shift_expression
    (36) relational_expression -> . relational_expression GREATER shift_expression
    (37) relational_expression -> . relational_expression LESS shift_expression
    (38) relational_expression -> . relational_expression GEQ shift_expression
    (39) relational_expression -> . relational_expression LEQ shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 34
    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    unary_expression               shift and go to state 61
    exclusive_or_expression        shift and go to state 62
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    array_access                   shift and go to state 13
    additive_expression            shift and go to state 87
    simple_name                    shift and go to state 23
    valid_variable                 shift and go to state 69
    inclusive_or_expression        shift and go to state 70
    literal                        shift and go to state 71
    and_expression                 shift and go to state 74
    relational_expression          shift and go to state 78
    method_invocation              shift and go to state 75
    conditional_or_expression      shift and go to state 76
    assignment_expression          shift and go to state 81
    qualified_name                 shift and go to state 15
    assignment                     shift and go to state 83
    multiplicative_expression      shift and go to state 84
    shift_expression               shift and go to state 89
    equality_expression            shift and go to state 90
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 93
    expression                     shift and go to state 177
    conditional_and_expression     shift and go to state 94

state 149

    (29) exclusive_or_expression -> exclusive_or_expression XOR and_expression .
    (31) and_expression -> and_expression . AND_BITWISE equality_expression

    XOR             reduce using rule 29 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR_BITWISE      reduce using rule 29 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND             reduce using rule 29 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR              reduce using rule 29 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBPAREN         reduce using rule 29 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RPAREN          reduce using rule 29 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    STATE_END       reduce using rule 29 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COMMA           reduce using rule 29 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND_BITWISE     shift and go to state 117


state 150

    (27) inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .
    (29) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR_BITWISE      reduce using rule 27 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    AND             reduce using rule 27 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    OR              reduce using rule 27 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    RBPAREN         reduce using rule 27 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    STATE_END       reduce using rule 27 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    RPAREN          reduce using rule 27 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    COMMA           reduce using rule 27 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    XOR             shift and go to state 109


state 151

    (31) and_expression -> and_expression AND_BITWISE equality_expression .
    (33) equality_expression -> equality_expression . EQUAL relational_expression
    (34) equality_expression -> equality_expression . NEQUAL relational_expression

    AND_BITWISE     reduce using rule 31 (and_expression -> and_expression AND_BITWISE equality_expression .)
    XOR             reduce using rule 31 (and_expression -> and_expression AND_BITWISE equality_expression .)
    OR_BITWISE      reduce using rule 31 (and_expression -> and_expression AND_BITWISE equality_expression .)
    AND             reduce using rule 31 (and_expression -> and_expression AND_BITWISE equality_expression .)
    OR              reduce using rule 31 (and_expression -> and_expression AND_BITWISE equality_expression .)
    RPAREN          reduce using rule 31 (and_expression -> and_expression AND_BITWISE equality_expression .)
    RBPAREN         reduce using rule 31 (and_expression -> and_expression AND_BITWISE equality_expression .)
    STATE_END       reduce using rule 31 (and_expression -> and_expression AND_BITWISE equality_expression .)
    COMMA           reduce using rule 31 (and_expression -> and_expression AND_BITWISE equality_expression .)
    EQUAL           shift and go to state 132
    NEQUAL          shift and go to state 131


state 152

    (23) conditional_or_expression -> conditional_or_expression OR conditional_and_expression .
    (25) conditional_and_expression -> conditional_and_expression . AND inclusive_or_expression

    OR              reduce using rule 23 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    STATE_END       reduce using rule 23 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    RPAREN          reduce using rule 23 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    COMMA           reduce using rule 23 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    RBPAREN         reduce using rule 23 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    AND             shift and go to state 133


state 153

    (38) relational_expression -> relational_expression GEQ shift_expression .
    (41) shift_expression -> shift_expression . LSHIFT additive_expression
    (42) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 38 (relational_expression -> relational_expression GEQ shift_expression .)
    LESS            reduce using rule 38 (relational_expression -> relational_expression GEQ shift_expression .)
    GEQ             reduce using rule 38 (relational_expression -> relational_expression GEQ shift_expression .)
    LEQ             reduce using rule 38 (relational_expression -> relational_expression GEQ shift_expression .)
    EQUAL           reduce using rule 38 (relational_expression -> relational_expression GEQ shift_expression .)
    NEQUAL          reduce using rule 38 (relational_expression -> relational_expression GEQ shift_expression .)
    AND_BITWISE     reduce using rule 38 (relational_expression -> relational_expression GEQ shift_expression .)
    XOR             reduce using rule 38 (relational_expression -> relational_expression GEQ shift_expression .)
    OR_BITWISE      reduce using rule 38 (relational_expression -> relational_expression GEQ shift_expression .)
    AND             reduce using rule 38 (relational_expression -> relational_expression GEQ shift_expression .)
    OR              reduce using rule 38 (relational_expression -> relational_expression GEQ shift_expression .)
    COMMA           reduce using rule 38 (relational_expression -> relational_expression GEQ shift_expression .)
    RPAREN          reduce using rule 38 (relational_expression -> relational_expression GEQ shift_expression .)
    STATE_END       reduce using rule 38 (relational_expression -> relational_expression GEQ shift_expression .)
    RBPAREN         reduce using rule 38 (relational_expression -> relational_expression GEQ shift_expression .)
    LSHIFT          shift and go to state 130
    RSHIFT          shift and go to state 129


state 154

    (36) relational_expression -> relational_expression GREATER shift_expression .
    (41) shift_expression -> shift_expression . LSHIFT additive_expression
    (42) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 36 (relational_expression -> relational_expression GREATER shift_expression .)
    LESS            reduce using rule 36 (relational_expression -> relational_expression GREATER shift_expression .)
    GEQ             reduce using rule 36 (relational_expression -> relational_expression GREATER shift_expression .)
    LEQ             reduce using rule 36 (relational_expression -> relational_expression GREATER shift_expression .)
    EQUAL           reduce using rule 36 (relational_expression -> relational_expression GREATER shift_expression .)
    NEQUAL          reduce using rule 36 (relational_expression -> relational_expression GREATER shift_expression .)
    AND_BITWISE     reduce using rule 36 (relational_expression -> relational_expression GREATER shift_expression .)
    XOR             reduce using rule 36 (relational_expression -> relational_expression GREATER shift_expression .)
    OR_BITWISE      reduce using rule 36 (relational_expression -> relational_expression GREATER shift_expression .)
    AND             reduce using rule 36 (relational_expression -> relational_expression GREATER shift_expression .)
    OR              reduce using rule 36 (relational_expression -> relational_expression GREATER shift_expression .)
    COMMA           reduce using rule 36 (relational_expression -> relational_expression GREATER shift_expression .)
    RPAREN          reduce using rule 36 (relational_expression -> relational_expression GREATER shift_expression .)
    STATE_END       reduce using rule 36 (relational_expression -> relational_expression GREATER shift_expression .)
    RBPAREN         reduce using rule 36 (relational_expression -> relational_expression GREATER shift_expression .)
    LSHIFT          shift and go to state 130
    RSHIFT          shift and go to state 129


state 155

    (37) relational_expression -> relational_expression LESS shift_expression .
    (41) shift_expression -> shift_expression . LSHIFT additive_expression
    (42) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 37 (relational_expression -> relational_expression LESS shift_expression .)
    LESS            reduce using rule 37 (relational_expression -> relational_expression LESS shift_expression .)
    GEQ             reduce using rule 37 (relational_expression -> relational_expression LESS shift_expression .)
    LEQ             reduce using rule 37 (relational_expression -> relational_expression LESS shift_expression .)
    EQUAL           reduce using rule 37 (relational_expression -> relational_expression LESS shift_expression .)
    NEQUAL          reduce using rule 37 (relational_expression -> relational_expression LESS shift_expression .)
    AND_BITWISE     reduce using rule 37 (relational_expression -> relational_expression LESS shift_expression .)
    XOR             reduce using rule 37 (relational_expression -> relational_expression LESS shift_expression .)
    OR_BITWISE      reduce using rule 37 (relational_expression -> relational_expression LESS shift_expression .)
    AND             reduce using rule 37 (relational_expression -> relational_expression LESS shift_expression .)
    OR              reduce using rule 37 (relational_expression -> relational_expression LESS shift_expression .)
    COMMA           reduce using rule 37 (relational_expression -> relational_expression LESS shift_expression .)
    RPAREN          reduce using rule 37 (relational_expression -> relational_expression LESS shift_expression .)
    STATE_END       reduce using rule 37 (relational_expression -> relational_expression LESS shift_expression .)
    RBPAREN         reduce using rule 37 (relational_expression -> relational_expression LESS shift_expression .)
    LSHIFT          shift and go to state 130
    RSHIFT          shift and go to state 129


state 156

    (39) relational_expression -> relational_expression LEQ shift_expression .
    (41) shift_expression -> shift_expression . LSHIFT additive_expression
    (42) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 39 (relational_expression -> relational_expression LEQ shift_expression .)
    LESS            reduce using rule 39 (relational_expression -> relational_expression LEQ shift_expression .)
    GEQ             reduce using rule 39 (relational_expression -> relational_expression LEQ shift_expression .)
    LEQ             reduce using rule 39 (relational_expression -> relational_expression LEQ shift_expression .)
    EQUAL           reduce using rule 39 (relational_expression -> relational_expression LEQ shift_expression .)
    NEQUAL          reduce using rule 39 (relational_expression -> relational_expression LEQ shift_expression .)
    AND_BITWISE     reduce using rule 39 (relational_expression -> relational_expression LEQ shift_expression .)
    XOR             reduce using rule 39 (relational_expression -> relational_expression LEQ shift_expression .)
    OR_BITWISE      reduce using rule 39 (relational_expression -> relational_expression LEQ shift_expression .)
    AND             reduce using rule 39 (relational_expression -> relational_expression LEQ shift_expression .)
    OR              reduce using rule 39 (relational_expression -> relational_expression LEQ shift_expression .)
    COMMA           reduce using rule 39 (relational_expression -> relational_expression LEQ shift_expression .)
    RPAREN          reduce using rule 39 (relational_expression -> relational_expression LEQ shift_expression .)
    STATE_END       reduce using rule 39 (relational_expression -> relational_expression LEQ shift_expression .)
    RBPAREN         reduce using rule 39 (relational_expression -> relational_expression LEQ shift_expression .)
    LSHIFT          shift and go to state 130
    RSHIFT          shift and go to state 129


state 157

    (49) multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .

    TIMES           reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    DIVIDE          reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    REMAINDER       reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    PLUS            reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    MINUS           reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    LSHIFT          reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    RSHIFT          reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    GREATER         reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    LESS            reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    GEQ             reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    LEQ             reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    EQUAL           reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    NEQUAL          reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    AND_BITWISE     reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    XOR             reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    OR_BITWISE      reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    AND             reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    OR              reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    STATE_END       reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    RPAREN          reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    COMMA           reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    RBPAREN         reduce using rule 49 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)


state 158

    (48) multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .

    TIMES           reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DIVIDE          reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    REMAINDER       reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    PLUS            reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MINUS           reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LSHIFT          reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RSHIFT          reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GREATER         reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LESS            reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GEQ             reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LEQ             reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    EQUAL           reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    NEQUAL          reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AND_BITWISE     reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    XOR             reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OR_BITWISE      reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AND             reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OR              reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    STATE_END       reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RPAREN          reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COMMA           reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RBPAREN         reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)


state 159

    (47) multiplicative_expression -> multiplicative_expression TIMES unary_expression .

    TIMES           reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DIVIDE          reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    REMAINDER       reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    PLUS            reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MINUS           reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LSHIFT          reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RSHIFT          reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GREATER         reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LESS            reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GEQ             reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LEQ             reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    EQUAL           reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    NEQUAL          reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    AND_BITWISE     reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    XOR             reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OR_BITWISE      reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    AND             reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OR              reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    STATE_END       reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RPAREN          reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    COMMA           reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RBPAREN         reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)


state 160

    (44) additive_expression -> additive_expression PLUS multiplicative_expression .
    (47) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (48) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (49) multiplicative_expression -> multiplicative_expression . REMAINDER unary_expression

    PLUS            reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LSHIFT          reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSHIFT          reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER         reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS            reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GEQ             reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LEQ             reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUAL           reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NEQUAL          reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND_BITWISE     reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR_BITWISE      reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STATE_END       reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBPAREN         reduce using rule 44 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 125
    DIVIDE          shift and go to state 124
    REMAINDER       shift and go to state 123


state 161

    (45) additive_expression -> additive_expression MINUS multiplicative_expression .
    (47) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (48) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (49) multiplicative_expression -> multiplicative_expression . REMAINDER unary_expression

    PLUS            reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LSHIFT          reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSHIFT          reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER         reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS            reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GEQ             reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LEQ             reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUAL           reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NEQUAL          reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND_BITWISE     reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR_BITWISE      reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STATE_END       reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBPAREN         reduce using rule 45 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 125
    DIVIDE          shift and go to state 124
    REMAINDER       shift and go to state 123


state 162

    (56) unary_expression_not_plus_minus -> LPAREN expression RPAREN .

    TIMES           reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    REMAINDER       reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    LESS            reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    GEQ             reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    LEQ             reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    NEQUAL          reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    AND_BITWISE     reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    XOR             reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    OR_BITWISE      reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    AND             reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    OR              reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    STATE_END       reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    RBPAREN         reduce using rule 56 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)


state 163

    (42) shift_expression -> shift_expression RSHIFT additive_expression .
    (44) additive_expression -> additive_expression . PLUS multiplicative_expression
    (45) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 42 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 42 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GREATER         reduce using rule 42 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LESS            reduce using rule 42 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GEQ             reduce using rule 42 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LEQ             reduce using rule 42 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQUAL           reduce using rule 42 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NEQUAL          reduce using rule 42 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND_BITWISE     reduce using rule 42 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOR             reduce using rule 42 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR_BITWISE      reduce using rule 42 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND             reduce using rule 42 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR              reduce using rule 42 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 42 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 42 (shift_expression -> shift_expression RSHIFT additive_expression .)
    STATE_END       reduce using rule 42 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBPAREN         reduce using rule 42 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127


state 164

    (41) shift_expression -> shift_expression LSHIFT additive_expression .
    (44) additive_expression -> additive_expression . PLUS multiplicative_expression
    (45) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 41 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 41 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GREATER         reduce using rule 41 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LESS            reduce using rule 41 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GEQ             reduce using rule 41 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LEQ             reduce using rule 41 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQUAL           reduce using rule 41 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NEQUAL          reduce using rule 41 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND_BITWISE     reduce using rule 41 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOR             reduce using rule 41 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR_BITWISE      reduce using rule 41 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND             reduce using rule 41 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR              reduce using rule 41 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 41 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 41 (shift_expression -> shift_expression LSHIFT additive_expression .)
    STATE_END       reduce using rule 41 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBPAREN         reduce using rule 41 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127


state 165

    (34) equality_expression -> equality_expression NEQUAL relational_expression .
    (36) relational_expression -> relational_expression . GREATER shift_expression
    (37) relational_expression -> relational_expression . LESS shift_expression
    (38) relational_expression -> relational_expression . GEQ shift_expression
    (39) relational_expression -> relational_expression . LEQ shift_expression

    EQUAL           reduce using rule 34 (equality_expression -> equality_expression NEQUAL relational_expression .)
    NEQUAL          reduce using rule 34 (equality_expression -> equality_expression NEQUAL relational_expression .)
    AND_BITWISE     reduce using rule 34 (equality_expression -> equality_expression NEQUAL relational_expression .)
    XOR             reduce using rule 34 (equality_expression -> equality_expression NEQUAL relational_expression .)
    OR_BITWISE      reduce using rule 34 (equality_expression -> equality_expression NEQUAL relational_expression .)
    AND             reduce using rule 34 (equality_expression -> equality_expression NEQUAL relational_expression .)
    OR              reduce using rule 34 (equality_expression -> equality_expression NEQUAL relational_expression .)
    STATE_END       reduce using rule 34 (equality_expression -> equality_expression NEQUAL relational_expression .)
    RPAREN          reduce using rule 34 (equality_expression -> equality_expression NEQUAL relational_expression .)
    RBPAREN         reduce using rule 34 (equality_expression -> equality_expression NEQUAL relational_expression .)
    COMMA           reduce using rule 34 (equality_expression -> equality_expression NEQUAL relational_expression .)
    GREATER         shift and go to state 120
    LESS            shift and go to state 121
    GEQ             shift and go to state 119
    LEQ             shift and go to state 122


state 166

    (33) equality_expression -> equality_expression EQUAL relational_expression .
    (36) relational_expression -> relational_expression . GREATER shift_expression
    (37) relational_expression -> relational_expression . LESS shift_expression
    (38) relational_expression -> relational_expression . GEQ shift_expression
    (39) relational_expression -> relational_expression . LEQ shift_expression

    EQUAL           reduce using rule 33 (equality_expression -> equality_expression EQUAL relational_expression .)
    NEQUAL          reduce using rule 33 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND_BITWISE     reduce using rule 33 (equality_expression -> equality_expression EQUAL relational_expression .)
    XOR             reduce using rule 33 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR_BITWISE      reduce using rule 33 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND             reduce using rule 33 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR              reduce using rule 33 (equality_expression -> equality_expression EQUAL relational_expression .)
    STATE_END       reduce using rule 33 (equality_expression -> equality_expression EQUAL relational_expression .)
    RPAREN          reduce using rule 33 (equality_expression -> equality_expression EQUAL relational_expression .)
    RBPAREN         reduce using rule 33 (equality_expression -> equality_expression EQUAL relational_expression .)
    COMMA           reduce using rule 33 (equality_expression -> equality_expression EQUAL relational_expression .)
    GREATER         shift and go to state 120
    LESS            shift and go to state 121
    GEQ             shift and go to state 119
    LEQ             shift and go to state 122


state 167

    (25) conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .
    (27) inclusive_or_expression -> inclusive_or_expression . OR_BITWISE exclusive_or_expression

    AND             reduce using rule 25 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    OR              reduce using rule 25 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    COMMA           reduce using rule 25 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    RPAREN          reduce using rule 25 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    STATE_END       reduce using rule 25 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    RBPAREN         reduce using rule 25 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    OR_BITWISE      shift and go to state 114


state 168

    (94) variable_declaration_body -> variable_declarator ASSIGN . expression
    (5) expression -> . assignment_expression
    (8) assignment_expression -> . assignment
    (9) assignment_expression -> . conditional_or_expression
    (10) assignment -> . valid_variable assignment_operator assignment_expression
    (22) conditional_or_expression -> . conditional_and_expression
    (23) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (24) conditional_and_expression -> . inclusive_or_expression
    (25) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (26) inclusive_or_expression -> . exclusive_or_expression
    (27) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (28) exclusive_or_expression -> . and_expression
    (29) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (30) and_expression -> . equality_expression
    (31) and_expression -> . and_expression AND_BITWISE equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQUAL relational_expression
    (34) equality_expression -> . equality_expression NEQUAL relational_expression
    (35) relational_expression -> . shift_expression
    (36) relational_expression -> . relational_expression GREATER shift_expression
    (37) relational_expression -> . relational_expression LESS shift_expression
    (38) relational_expression -> . relational_expression GEQ shift_expression
    (39) relational_expression -> . relational_expression LEQ shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 34
    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    unary_expression               shift and go to state 61
    exclusive_or_expression        shift and go to state 62
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    array_access                   shift and go to state 13
    additive_expression            shift and go to state 87
    simple_name                    shift and go to state 23
    valid_variable                 shift and go to state 69
    inclusive_or_expression        shift and go to state 70
    literal                        shift and go to state 71
    and_expression                 shift and go to state 74
    relational_expression          shift and go to state 78
    method_invocation              shift and go to state 75
    conditional_or_expression      shift and go to state 76
    assignment_expression          shift and go to state 81
    qualified_name                 shift and go to state 15
    assignment                     shift and go to state 83
    multiplicative_expression      shift and go to state 84
    shift_expression               shift and go to state 89
    equality_expression            shift and go to state 90
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 93
    expression                     shift and go to state 178
    conditional_and_expression     shift and go to state 94

state 169

    (95) variable_declaration_body -> LPAREN variable_declarators . RPAREN ASSIGN LPAREN argument_list RPAREN
    (97) variable_declarators -> variable_declarators . COMMA variable_declarator

    RPAREN          shift and go to state 179
    COMMA           shift and go to state 180


state 170

    (96) variable_declarators -> variable_declarator .

    RPAREN          reduce using rule 96 (variable_declarators -> variable_declarator .)
    COMMA           reduce using rule 96 (variable_declarators -> variable_declarator .)


state 171

    (99) variable_declarator_id -> IDENTIFIER COLON . primitive_type
    (124) primitive_type -> . TYPE_INT
    (125) primitive_type -> . TYPE_FLOAT
    (126) primitive_type -> . TYPE_CHAR
    (127) primitive_type -> . TYPE_STRING
    (128) primitive_type -> . TYPE_BOOLEAN

    TYPE_INT        shift and go to state 181
    TYPE_FLOAT      shift and go to state 186
    TYPE_CHAR       shift and go to state 185
    TYPE_STRING     shift and go to state 182
    TYPE_BOOLEAN    shift and go to state 183

    primitive_type                 shift and go to state 184

state 172

    (112) if_then_statement -> KWRD_IF LPAREN expression RPAREN . statement
    (113) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN . if_then_else_intermediate KWRD_ELSE statement
    (100) statement -> . normal_statement
    (101) statement -> . if_then_statement
    (102) statement -> . if_then_else_statement
    (103) statement -> . while_statement
    (104) statement -> . do_while_statement
    (115) if_then_else_intermediate -> . normal_statement
    (116) if_then_else_intermediate -> . if_then_else_statement_precedence
    (105) normal_statement -> . block
    (106) normal_statement -> . expression_statement
    (107) normal_statement -> . empty_statement
    (108) normal_statement -> . return_statement
    (112) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (113) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (117) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (118) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (114) if_then_else_statement_precedence -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
    (81) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (109) expression_statement -> . statement_expression STATE_END
    (119) empty_statement -> . STATE_END
    (120) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (110) statement_expression -> . assignment
    (111) statement_expression -> . method_invocation
    (10) assignment -> . valid_variable assignment_operator assignment_expression
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name

    KWRD_IF         shift and go to state 191
    KWRD_WHILE      shift and go to state 24
    KWRD_DO         shift and go to state 30
    BLOCK_BEGIN     shift and go to state 5
    STATE_END       shift and go to state 8
    KWRD_RETURN     shift and go to state 31
    IDENTIFIER      shift and go to state 34

    expression_statement           shift and go to state 9
    if_then_else_statement_precedence shift and go to state 187
    normal_statement               shift and go to state 188
    if_then_else_intermediate      shift and go to state 189
    if_then_statement              shift and go to state 12
    array_access                   shift and go to state 13
    qualified_name                 shift and go to state 15
    valid_variable                 shift and go to state 16
    return_statement               shift and go to state 18
    while_statement                shift and go to state 19
    statement                      shift and go to state 190
    statement_expression           shift and go to state 21
    method_invocation              shift and go to state 22
    simple_name                    shift and go to state 23
    do_while_statement             shift and go to state 28
    assignment                     shift and go to state 29
    name                           shift and go to state 35
    empty_statement                shift and go to state 37
    block                          shift and go to state 40
    if_then_else_statement         shift and go to state 41

state 173

    (72) argument_list -> argument_list COMMA . expression
    (5) expression -> . assignment_expression
    (8) assignment_expression -> . assignment
    (9) assignment_expression -> . conditional_or_expression
    (10) assignment -> . valid_variable assignment_operator assignment_expression
    (22) conditional_or_expression -> . conditional_and_expression
    (23) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (24) conditional_and_expression -> . inclusive_or_expression
    (25) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (26) inclusive_or_expression -> . exclusive_or_expression
    (27) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (28) exclusive_or_expression -> . and_expression
    (29) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (30) and_expression -> . equality_expression
    (31) and_expression -> . and_expression AND_BITWISE equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQUAL relational_expression
    (34) equality_expression -> . equality_expression NEQUAL relational_expression
    (35) relational_expression -> . shift_expression
    (36) relational_expression -> . relational_expression GREATER shift_expression
    (37) relational_expression -> . relational_expression LESS shift_expression
    (38) relational_expression -> . relational_expression GEQ shift_expression
    (39) relational_expression -> . relational_expression LEQ shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 34
    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    unary_expression               shift and go to state 61
    exclusive_or_expression        shift and go to state 62
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    array_access                   shift and go to state 13
    additive_expression            shift and go to state 87
    simple_name                    shift and go to state 23
    valid_variable                 shift and go to state 69
    inclusive_or_expression        shift and go to state 70
    literal                        shift and go to state 71
    and_expression                 shift and go to state 74
    relational_expression          shift and go to state 78
    method_invocation              shift and go to state 75
    conditional_or_expression      shift and go to state 76
    assignment_expression          shift and go to state 81
    qualified_name                 shift and go to state 15
    assignment                     shift and go to state 83
    multiplicative_expression      shift and go to state 84
    shift_expression               shift and go to state 89
    equality_expression            shift and go to state 90
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 93
    expression                     shift and go to state 192
    conditional_and_expression     shift and go to state 94

state 174

    (67) method_invocation -> name LPAREN argument_list_opt RPAREN .

    STATE_END       reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    TIMES           reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    DIVIDE          reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    REMAINDER       reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    PLUS            reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    MINUS           reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    LSHIFT          reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    RSHIFT          reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    GREATER         reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    LESS            reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    GEQ             reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    LEQ             reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    EQUAL           reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    NEQUAL          reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    AND_BITWISE     reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    XOR             reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    OR_BITWISE      reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    RBPAREN         reduce using rule 67 (method_invocation -> name LPAREN argument_list_opt RPAREN .)


state 175

    (68) array_access -> name LBPAREN expression RBPAREN .

    TIMES           reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    DIVIDE          reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    REMAINDER       reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    PLUS            reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    MINUS           reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    LSHIFT          reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    RSHIFT          reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    GREATER         reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    LESS            reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    GEQ             reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    LEQ             reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    EQUAL           reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    NEQUAL          reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    AND_BITWISE     reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    XOR             reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    OR_BITWISE      reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    AND             reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    OR              reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    STATE_END       reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    RPAREN          reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    COMMA           reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    RBPAREN         reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    ASSIGN          reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    TIMES_ASSIGN    reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    DIVIDE_ASSIGN   reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    REMAINDER_ASSIGN reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    PLUS_ASSIGN     reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    MINUS_ASSIGN    reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    LSHIFT_ASSIGN   reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    RSHIFT_ASSIGN   reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    AND_ASSIGN      reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    OR_ASSIGN       reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)
    XOR_ASSIGN      reduce using rule 68 (array_access -> name LBPAREN expression RBPAREN .)


state 176

    (117) while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .

    KWRD_IF         reduce using rule 117 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_WHILE      reduce using rule 117 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_DO         reduce using rule 117 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    BLOCK_BEGIN     reduce using rule 117 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    STATE_END       reduce using rule 117 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_RETURN     reduce using rule 117 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_PROTECTED  reduce using rule 117 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_PRIVATE    reduce using rule 117 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 117 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_VAR        reduce using rule 117 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_VAL        reduce using rule 117 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    BLOCK_END       reduce using rule 117 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)


state 177

    (118) do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression . RPAREN STATE_END

    RPAREN          shift and go to state 193


state 178

    (94) variable_declaration_body -> variable_declarator ASSIGN expression .

    STATE_END       reduce using rule 94 (variable_declaration_body -> variable_declarator ASSIGN expression .)


state 179

    (95) variable_declaration_body -> LPAREN variable_declarators RPAREN . ASSIGN LPAREN argument_list RPAREN

    ASSIGN          shift and go to state 194


state 180

    (97) variable_declarators -> variable_declarators COMMA . variable_declarator
    (98) variable_declarator -> . variable_declarator_id
    (99) variable_declarator_id -> . IDENTIFIER COLON primitive_type

    IDENTIFIER      shift and go to state 139

    variable_declarator_id         shift and go to state 137
    variable_declarator            shift and go to state 195

state 181

    (124) primitive_type -> TYPE_INT .

    ASSIGN          reduce using rule 124 (primitive_type -> TYPE_INT .)
    RPAREN          reduce using rule 124 (primitive_type -> TYPE_INT .)
    COMMA           reduce using rule 124 (primitive_type -> TYPE_INT .)


state 182

    (127) primitive_type -> TYPE_STRING .

    ASSIGN          reduce using rule 127 (primitive_type -> TYPE_STRING .)
    RPAREN          reduce using rule 127 (primitive_type -> TYPE_STRING .)
    COMMA           reduce using rule 127 (primitive_type -> TYPE_STRING .)


state 183

    (128) primitive_type -> TYPE_BOOLEAN .

    ASSIGN          reduce using rule 128 (primitive_type -> TYPE_BOOLEAN .)
    RPAREN          reduce using rule 128 (primitive_type -> TYPE_BOOLEAN .)
    COMMA           reduce using rule 128 (primitive_type -> TYPE_BOOLEAN .)


state 184

    (99) variable_declarator_id -> IDENTIFIER COLON primitive_type .

    RPAREN          reduce using rule 99 (variable_declarator_id -> IDENTIFIER COLON primitive_type .)
    COMMA           reduce using rule 99 (variable_declarator_id -> IDENTIFIER COLON primitive_type .)
    ASSIGN          reduce using rule 99 (variable_declarator_id -> IDENTIFIER COLON primitive_type .)


state 185

    (126) primitive_type -> TYPE_CHAR .

    ASSIGN          reduce using rule 126 (primitive_type -> TYPE_CHAR .)
    RPAREN          reduce using rule 126 (primitive_type -> TYPE_CHAR .)
    COMMA           reduce using rule 126 (primitive_type -> TYPE_CHAR .)


state 186

    (125) primitive_type -> TYPE_FLOAT .

    ASSIGN          reduce using rule 125 (primitive_type -> TYPE_FLOAT .)
    RPAREN          reduce using rule 125 (primitive_type -> TYPE_FLOAT .)
    COMMA           reduce using rule 125 (primitive_type -> TYPE_FLOAT .)


state 187

    (116) if_then_else_intermediate -> if_then_else_statement_precedence .

    KWRD_ELSE       reduce using rule 116 (if_then_else_intermediate -> if_then_else_statement_precedence .)


state 188

    (100) statement -> normal_statement .
    (115) if_then_else_intermediate -> normal_statement .

    KWRD_IF         reduce using rule 100 (statement -> normal_statement .)
    KWRD_WHILE      reduce using rule 100 (statement -> normal_statement .)
    KWRD_DO         reduce using rule 100 (statement -> normal_statement .)
    BLOCK_BEGIN     reduce using rule 100 (statement -> normal_statement .)
    STATE_END       reduce using rule 100 (statement -> normal_statement .)
    KWRD_RETURN     reduce using rule 100 (statement -> normal_statement .)
    KWRD_PROTECTED  reduce using rule 100 (statement -> normal_statement .)
    KWRD_PRIVATE    reduce using rule 100 (statement -> normal_statement .)
    IDENTIFIER      reduce using rule 100 (statement -> normal_statement .)
    KWRD_VAR        reduce using rule 100 (statement -> normal_statement .)
    KWRD_VAL        reduce using rule 100 (statement -> normal_statement .)
    BLOCK_END       reduce using rule 100 (statement -> normal_statement .)
    KWRD_ELSE       reduce using rule 115 (if_then_else_intermediate -> normal_statement .)


state 189

    (113) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate . KWRD_ELSE statement

    KWRD_ELSE       shift and go to state 196


state 190

    (112) if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .

    KWRD_IF         reduce using rule 112 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_WHILE      reduce using rule 112 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_DO         reduce using rule 112 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    BLOCK_BEGIN     reduce using rule 112 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    STATE_END       reduce using rule 112 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_RETURN     reduce using rule 112 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_PROTECTED  reduce using rule 112 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_PRIVATE    reduce using rule 112 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 112 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_VAR        reduce using rule 112 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_VAL        reduce using rule 112 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    BLOCK_END       reduce using rule 112 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)


state 191

    (112) if_then_statement -> KWRD_IF . LPAREN expression RPAREN statement
    (113) if_then_else_statement -> KWRD_IF . LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (114) if_then_else_statement_precedence -> KWRD_IF . LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate

    LPAREN          shift and go to state 197


state 192

    (72) argument_list -> argument_list COMMA expression .

    RPAREN          reduce using rule 72 (argument_list -> argument_list COMMA expression .)
    COMMA           reduce using rule 72 (argument_list -> argument_list COMMA expression .)


state 193

    (118) do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN . STATE_END

    STATE_END       shift and go to state 198


state 194

    (95) variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN . LPAREN argument_list RPAREN

    LPAREN          shift and go to state 199


state 195

    (97) variable_declarators -> variable_declarators COMMA variable_declarator .

    RPAREN          reduce using rule 97 (variable_declarators -> variable_declarators COMMA variable_declarator .)
    COMMA           reduce using rule 97 (variable_declarators -> variable_declarators COMMA variable_declarator .)


state 196

    (113) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE . statement
    (100) statement -> . normal_statement
    (101) statement -> . if_then_statement
    (102) statement -> . if_then_else_statement
    (103) statement -> . while_statement
    (104) statement -> . do_while_statement
    (105) normal_statement -> . block
    (106) normal_statement -> . expression_statement
    (107) normal_statement -> . empty_statement
    (108) normal_statement -> . return_statement
    (112) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (113) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (117) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (118) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (81) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (109) expression_statement -> . statement_expression STATE_END
    (119) empty_statement -> . STATE_END
    (120) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (110) statement_expression -> . assignment
    (111) statement_expression -> . method_invocation
    (10) assignment -> . valid_variable assignment_operator assignment_expression
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name

    KWRD_IF         shift and go to state 33
    KWRD_WHILE      shift and go to state 24
    KWRD_DO         shift and go to state 30
    BLOCK_BEGIN     shift and go to state 5
    STATE_END       shift and go to state 8
    KWRD_RETURN     shift and go to state 31
    IDENTIFIER      shift and go to state 34

    expression_statement           shift and go to state 9
    normal_statement               shift and go to state 10
    if_then_statement              shift and go to state 12
    array_access                   shift and go to state 13
    qualified_name                 shift and go to state 15
    valid_variable                 shift and go to state 16
    return_statement               shift and go to state 18
    while_statement                shift and go to state 19
    statement                      shift and go to state 200
    statement_expression           shift and go to state 21
    method_invocation              shift and go to state 22
    simple_name                    shift and go to state 23
    do_while_statement             shift and go to state 28
    assignment                     shift and go to state 29
    name                           shift and go to state 35
    empty_statement                shift and go to state 37
    block                          shift and go to state 40
    if_then_else_statement         shift and go to state 41

state 197

    (112) if_then_statement -> KWRD_IF LPAREN . expression RPAREN statement
    (113) if_then_else_statement -> KWRD_IF LPAREN . expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (114) if_then_else_statement_precedence -> KWRD_IF LPAREN . expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
    (5) expression -> . assignment_expression
    (8) assignment_expression -> . assignment
    (9) assignment_expression -> . conditional_or_expression
    (10) assignment -> . valid_variable assignment_operator assignment_expression
    (22) conditional_or_expression -> . conditional_and_expression
    (23) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (24) conditional_and_expression -> . inclusive_or_expression
    (25) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (26) inclusive_or_expression -> . exclusive_or_expression
    (27) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (28) exclusive_or_expression -> . and_expression
    (29) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (30) and_expression -> . equality_expression
    (31) and_expression -> . and_expression AND_BITWISE equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQUAL relational_expression
    (34) equality_expression -> . equality_expression NEQUAL relational_expression
    (35) relational_expression -> . shift_expression
    (36) relational_expression -> . relational_expression GREATER shift_expression
    (37) relational_expression -> . relational_expression LESS shift_expression
    (38) relational_expression -> . relational_expression GEQ shift_expression
    (39) relational_expression -> . relational_expression LEQ shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 34
    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    unary_expression               shift and go to state 61
    exclusive_or_expression        shift and go to state 62
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    array_access                   shift and go to state 13
    additive_expression            shift and go to state 87
    simple_name                    shift and go to state 23
    valid_variable                 shift and go to state 69
    inclusive_or_expression        shift and go to state 70
    literal                        shift and go to state 71
    and_expression                 shift and go to state 74
    relational_expression          shift and go to state 78
    method_invocation              shift and go to state 75
    conditional_or_expression      shift and go to state 76
    assignment_expression          shift and go to state 81
    qualified_name                 shift and go to state 15
    assignment                     shift and go to state 83
    multiplicative_expression      shift and go to state 84
    shift_expression               shift and go to state 89
    equality_expression            shift and go to state 90
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 93
    expression                     shift and go to state 201
    conditional_and_expression     shift and go to state 94

state 198

    (118) do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .

    KWRD_IF         reduce using rule 118 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_WHILE      reduce using rule 118 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_DO         reduce using rule 118 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    BLOCK_BEGIN     reduce using rule 118 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    STATE_END       reduce using rule 118 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_RETURN     reduce using rule 118 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_PROTECTED  reduce using rule 118 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_PRIVATE    reduce using rule 118 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    IDENTIFIER      reduce using rule 118 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_VAR        reduce using rule 118 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_VAL        reduce using rule 118 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    BLOCK_END       reduce using rule 118 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)


state 199

    (95) variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN . argument_list RPAREN
    (71) argument_list -> . expression
    (72) argument_list -> . argument_list COMMA expression
    (5) expression -> . assignment_expression
    (8) assignment_expression -> . assignment
    (9) assignment_expression -> . conditional_or_expression
    (10) assignment -> . valid_variable assignment_operator assignment_expression
    (22) conditional_or_expression -> . conditional_and_expression
    (23) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (24) conditional_and_expression -> . inclusive_or_expression
    (25) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (26) inclusive_or_expression -> . exclusive_or_expression
    (27) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name
    (28) exclusive_or_expression -> . and_expression
    (29) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (30) and_expression -> . equality_expression
    (31) and_expression -> . and_expression AND_BITWISE equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQUAL relational_expression
    (34) equality_expression -> . equality_expression NEQUAL relational_expression
    (35) relational_expression -> . shift_expression
    (36) relational_expression -> . relational_expression GREATER shift_expression
    (37) relational_expression -> . relational_expression LESS shift_expression
    (38) relational_expression -> . relational_expression GEQ shift_expression
    (39) relational_expression -> . relational_expression LEQ shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LSHIFT additive_expression
    (42) shift_expression -> . shift_expression RSHIFT additive_expression
    (43) additive_expression -> . multiplicative_expression
    (44) additive_expression -> . additive_expression PLUS multiplicative_expression
    (45) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . unary_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (49) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (50) unary_expression -> . PLUS unary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) unary_expression -> . unary_expression_not_plus_minus
    (53) unary_expression_not_plus_minus -> . variable_literal
    (54) unary_expression_not_plus_minus -> . TILDA unary_expression
    (55) unary_expression_not_plus_minus -> . NOT unary_expression
    (56) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (79) variable_literal -> . valid_variable
    (80) variable_literal -> . primary
    (57) primary -> . literal
    (58) primary -> . method_invocation
    (59) literal -> . int_float
    (60) literal -> . CHARACTER
    (61) literal -> . STRING_CONST
    (62) literal -> . BOOL_CONSTT
    (63) literal -> . BOOL_CONSTF
    (64) literal -> . KWRD_NULL
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (65) int_float -> . FLOAT_CONST
    (66) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 34
    PLUS            shift and go to state 73
    MINUS           shift and go to state 66
    TILDA           shift and go to state 72
    NOT             shift and go to state 95
    LPAREN          shift and go to state 88
    CHARACTER       shift and go to state 63
    STRING_CONST    shift and go to state 80
    BOOL_CONSTT     shift and go to state 67
    BOOL_CONSTF     shift and go to state 82
    KWRD_NULL       shift and go to state 79
    FLOAT_CONST     shift and go to state 65
    INT_CONST       shift and go to state 85

    unary_expression               shift and go to state 61
    exclusive_or_expression        shift and go to state 62
    primary                        shift and go to state 86
    unary_expression_not_plus_minus shift and go to state 64
    array_access                   shift and go to state 13
    additive_expression            shift and go to state 87
    simple_name                    shift and go to state 23
    valid_variable                 shift and go to state 69
    inclusive_or_expression        shift and go to state 70
    literal                        shift and go to state 71
    and_expression                 shift and go to state 74
    relational_expression          shift and go to state 78
    method_invocation              shift and go to state 75
    conditional_or_expression      shift and go to state 76
    argument_list                  shift and go to state 202
    assignment_expression          shift and go to state 81
    qualified_name                 shift and go to state 15
    assignment                     shift and go to state 83
    multiplicative_expression      shift and go to state 84
    shift_expression               shift and go to state 89
    equality_expression            shift and go to state 90
    int_float                      shift and go to state 91
    variable_literal               shift and go to state 92
    name                           shift and go to state 93
    expression                     shift and go to state 144
    conditional_and_expression     shift and go to state 94

state 200

    (113) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .

    KWRD_WHILE      reduce using rule 113 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_IF         reduce using rule 113 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_DO         reduce using rule 113 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    BLOCK_BEGIN     reduce using rule 113 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    STATE_END       reduce using rule 113 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_RETURN     reduce using rule 113 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_PROTECTED  reduce using rule 113 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_PRIVATE    reduce using rule 113 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    IDENTIFIER      reduce using rule 113 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_VAR        reduce using rule 113 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_VAL        reduce using rule 113 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    BLOCK_END       reduce using rule 113 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)


state 201

    (112) if_then_statement -> KWRD_IF LPAREN expression . RPAREN statement
    (113) if_then_else_statement -> KWRD_IF LPAREN expression . RPAREN if_then_else_intermediate KWRD_ELSE statement
    (114) if_then_else_statement_precedence -> KWRD_IF LPAREN expression . RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate

    RPAREN          shift and go to state 203


state 202

    (95) variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN argument_list . RPAREN
    (72) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 204
    COMMA           shift and go to state 173


state 203

    (112) if_then_statement -> KWRD_IF LPAREN expression RPAREN . statement
    (113) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN . if_then_else_intermediate KWRD_ELSE statement
    (114) if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN . if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
    (100) statement -> . normal_statement
    (101) statement -> . if_then_statement
    (102) statement -> . if_then_else_statement
    (103) statement -> . while_statement
    (104) statement -> . do_while_statement
    (115) if_then_else_intermediate -> . normal_statement
    (116) if_then_else_intermediate -> . if_then_else_statement_precedence
    (105) normal_statement -> . block
    (106) normal_statement -> . expression_statement
    (107) normal_statement -> . empty_statement
    (108) normal_statement -> . return_statement
    (112) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (113) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (117) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (118) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (114) if_then_else_statement_precedence -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
    (81) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (109) expression_statement -> . statement_expression STATE_END
    (119) empty_statement -> . STATE_END
    (120) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (110) statement_expression -> . assignment
    (111) statement_expression -> . method_invocation
    (10) assignment -> . valid_variable assignment_operator assignment_expression
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name

    KWRD_IF         shift and go to state 191
    KWRD_WHILE      shift and go to state 24
    KWRD_DO         shift and go to state 30
    BLOCK_BEGIN     shift and go to state 5
    STATE_END       shift and go to state 8
    KWRD_RETURN     shift and go to state 31
    IDENTIFIER      shift and go to state 34

    expression_statement           shift and go to state 9
    if_then_else_statement_precedence shift and go to state 187
    normal_statement               shift and go to state 188
    if_then_else_intermediate      shift and go to state 205
    if_then_statement              shift and go to state 12
    array_access                   shift and go to state 13
    qualified_name                 shift and go to state 15
    valid_variable                 shift and go to state 16
    return_statement               shift and go to state 18
    while_statement                shift and go to state 19
    statement                      shift and go to state 190
    statement_expression           shift and go to state 21
    method_invocation              shift and go to state 22
    simple_name                    shift and go to state 23
    do_while_statement             shift and go to state 28
    assignment                     shift and go to state 29
    name                           shift and go to state 35
    empty_statement                shift and go to state 37
    block                          shift and go to state 40
    if_then_else_statement         shift and go to state 41

state 204

    (95) variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN argument_list RPAREN .

    STATE_END       reduce using rule 95 (variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN argument_list RPAREN .)


state 205

    (113) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate . KWRD_ELSE statement
    (114) if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate . KWRD_ELSE if_then_else_intermediate

    KWRD_ELSE       shift and go to state 206


state 206

    (113) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE . statement
    (114) if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE . if_then_else_intermediate
    (100) statement -> . normal_statement
    (101) statement -> . if_then_statement
    (102) statement -> . if_then_else_statement
    (103) statement -> . while_statement
    (104) statement -> . do_while_statement
    (115) if_then_else_intermediate -> . normal_statement
    (116) if_then_else_intermediate -> . if_then_else_statement_precedence
    (105) normal_statement -> . block
    (106) normal_statement -> . expression_statement
    (107) normal_statement -> . empty_statement
    (108) normal_statement -> . return_statement
    (112) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (113) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (117) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (118) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (114) if_then_else_statement_precedence -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
    (81) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (109) expression_statement -> . statement_expression STATE_END
    (119) empty_statement -> . STATE_END
    (120) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (110) statement_expression -> . assignment
    (111) statement_expression -> . method_invocation
    (10) assignment -> . valid_variable assignment_operator assignment_expression
    (67) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (77) valid_variable -> . name
    (78) valid_variable -> . array_access
    (73) name -> . simple_name
    (74) name -> . qualified_name
    (68) array_access -> . name LBPAREN expression RBPAREN
    (75) simple_name -> . IDENTIFIER
    (76) qualified_name -> . name DOT simple_name

    KWRD_IF         shift and go to state 191
    KWRD_WHILE      shift and go to state 24
    KWRD_DO         shift and go to state 30
    BLOCK_BEGIN     shift and go to state 5
    STATE_END       shift and go to state 8
    KWRD_RETURN     shift and go to state 31
    IDENTIFIER      shift and go to state 34

    expression_statement           shift and go to state 9
    if_then_else_statement_precedence shift and go to state 187
    normal_statement               shift and go to state 188
    if_then_else_intermediate      shift and go to state 207
    if_then_statement              shift and go to state 12
    array_access                   shift and go to state 13
    qualified_name                 shift and go to state 15
    valid_variable                 shift and go to state 16
    return_statement               shift and go to state 18
    while_statement                shift and go to state 19
    statement                      shift and go to state 200
    statement_expression           shift and go to state 21
    method_invocation              shift and go to state 22
    simple_name                    shift and go to state 23
    do_while_statement             shift and go to state 28
    assignment                     shift and go to state 29
    name                           shift and go to state 35
    empty_statement                shift and go to state 37
    block                          shift and go to state 40
    if_then_else_statement         shift and go to state 41

state 207

    (114) if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate .

    KWRD_ELSE       reduce using rule 114 (if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate .)

