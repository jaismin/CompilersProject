Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    KWRD_TYPE
    LOWER_BOUND
    KWRD_LAZY
    VIEWABLE
    KWRD_THIS
    KWRD_WITH
    KWRD_FORSOME
    KWRD_TRY
    NIL
    KWRD_SUPER
    KWRD_UNTIL
    VIEW
    KWRD_PACKAGE
    EXACTEQ
    KWRD_ABST
    KWRD_FOREACH
    KWRD_STATIC
    UNDER
    UPPER_BOUND
    INNER_CLASS
    KWRD_THROW
    KWRD_MACRO
    KWRD_PUBLIC
    KWRD_FINAL
    COMM
    KWRD_IMPLICIT
    KWRD_SEALED
    CHOOSE
    KWRD_FINALLY
    SUBTYPE
    KWRD_FOR
    QUESTION
    KWRD_IMPORT
    KWRD_YIELD
    KWRD_OVERRIDE
    newline
    AT
    KWRD_TRAIT
    KWRD_CATCH

Grammar

Rule 0     S' -> ProgramStructure
Rule 1     ProgramStructure -> ProgramStructure class_and_objects
Rule 2     ProgramStructure -> class_and_objects
Rule 3     class_and_objects -> SingletonObject
Rule 4     class_and_objects -> class_declaration
Rule 5     SingletonObject -> ObjectDeclare block
Rule 6     ObjectDeclare -> KWRD_OBJECT IDENTIFIER
Rule 7     ObjectDeclare -> KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
Rule 8     expression -> assignment_expression
Rule 9     expression_optional -> expression
Rule 10    expression_optional -> empty
Rule 11    assignment_expression -> assignment
Rule 12    assignment_expression -> conditional_or_expression
Rule 13    assignment -> valid_variable assignment_operator assignment_expression
Rule 14    assignment_operator -> ASSIGN
Rule 15    assignment_operator -> TIMES_ASSIGN
Rule 16    assignment_operator -> DIVIDE_ASSIGN
Rule 17    assignment_operator -> REMAINDER_ASSIGN
Rule 18    assignment_operator -> PLUS_ASSIGN
Rule 19    assignment_operator -> MINUS_ASSIGN
Rule 20    assignment_operator -> LSHIFT_ASSIGN
Rule 21    assignment_operator -> RSHIFT_ASSIGN
Rule 22    assignment_operator -> AND_ASSIGN
Rule 23    assignment_operator -> OR_ASSIGN
Rule 24    assignment_operator -> XOR_ASSIGN
Rule 25    conditional_or_expression -> conditional_and_expression
Rule 26    conditional_or_expression -> conditional_or_expression OR conditional_and_expression
Rule 27    conditional_and_expression -> inclusive_or_expression
Rule 28    conditional_and_expression -> conditional_and_expression AND inclusive_or_expression
Rule 29    inclusive_or_expression -> exclusive_or_expression
Rule 30    inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression
Rule 31    exclusive_or_expression -> and_expression
Rule 32    exclusive_or_expression -> exclusive_or_expression XOR and_expression
Rule 33    and_expression -> equality_expression
Rule 34    and_expression -> and_expression AND_BITWISE equality_expression
Rule 35    equality_expression -> relational_expression
Rule 36    equality_expression -> equality_expression EQUAL relational_expression
Rule 37    equality_expression -> equality_expression NEQUAL relational_expression
Rule 38    relational_expression -> shift_expression
Rule 39    relational_expression -> relational_expression GREATER shift_expression
Rule 40    relational_expression -> relational_expression LESS shift_expression
Rule 41    relational_expression -> relational_expression GEQ shift_expression
Rule 42    relational_expression -> relational_expression LEQ shift_expression
Rule 43    shift_expression -> additive_expression
Rule 44    shift_expression -> shift_expression LSHIFT additive_expression
Rule 45    shift_expression -> shift_expression RSHIFT additive_expression
Rule 46    additive_expression -> multiplicative_expression
Rule 47    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 48    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 49    multiplicative_expression -> unary_expression
Rule 50    multiplicative_expression -> multiplicative_expression TIMES unary_expression
Rule 51    multiplicative_expression -> multiplicative_expression DIVIDE unary_expression
Rule 52    multiplicative_expression -> multiplicative_expression REMAINDER unary_expression
Rule 53    unary_expression -> PLUS unary_expression
Rule 54    unary_expression -> MINUS unary_expression
Rule 55    unary_expression -> unary_expression_not_plus_minus
Rule 56    unary_expression_not_plus_minus -> base_variable_set
Rule 57    unary_expression_not_plus_minus -> TILDA unary_expression
Rule 58    unary_expression_not_plus_minus -> NOT unary_expression
Rule 59    unary_expression_not_plus_minus -> cast_expression
Rule 60    base_variable_set -> variable_literal
Rule 61    base_variable_set -> LPAREN expression RPAREN
Rule 62    cast_expression -> LPAREN primitive_type RPAREN unary_expression
Rule 63    primary -> literal
Rule 64    primary -> method_invocation
Rule 65    literal -> int_float
Rule 66    literal -> CHARACTER
Rule 67    literal -> STRING_CONST
Rule 68    literal -> BOOL_CONSTT
Rule 69    literal -> BOOL_CONSTF
Rule 70    literal -> KWRD_NULL
Rule 71    int_float -> FLOAT_CONST
Rule 72    int_float -> INT_CONST
Rule 73    method_invocation -> name LPAREN argument_list_opt RPAREN
Rule 74    array_access -> name LBPAREN expression RBPAREN
Rule 75    argument_list_opt -> argument_list
Rule 76    argument_list_opt -> empty
Rule 77    argument_list -> expression
Rule 78    argument_list -> argument_list COMMA expression
Rule 79    name -> simple_name
Rule 80    name -> qualified_name
Rule 81    simple_name -> IDENTIFIER
Rule 82    qualified_name -> name DOT simple_name
Rule 83    valid_variable -> name
Rule 84    valid_variable -> array_access
Rule 85    variable_literal -> valid_variable
Rule 86    variable_literal -> primary
Rule 87    block -> BLOCK_BEGIN block_statements_opt BLOCK_END
Rule 88    block_statements_opt -> block_statements
Rule 89    block_statements_opt -> empty
Rule 90    block_statements -> block_statement
Rule 91    block_statements -> block_statements block_statement
Rule 92    block_statement -> local_variable_declaration_statement
Rule 93    block_statement -> statement
Rule 94    block_statement -> class_declaration
Rule 95    block_statement -> SingletonObject
Rule 96    block_statement -> method_declaration
Rule 97    modifier_opts -> modifier
Rule 98    modifier_opts -> empty
Rule 99    declaration_keyword -> KWRD_VAR
Rule 100   declaration_keyword -> KWRD_VAL
Rule 101   local_variable_declaration_statement -> local_variable_declaration STATE_END
Rule 102   local_variable_declaration -> modifier_opts declaration_keyword variable_declaration_body
Rule 103   variable_declaration_initializer -> expression
Rule 104   variable_declaration_initializer -> array_initializer
Rule 105   variable_declaration_initializer -> class_initializer
Rule 106   variable_arguement_list -> variable_declaration_initializer
Rule 107   variable_arguement_list -> variable_arguement_list COMMA variable_declaration_initializer
Rule 108   variable_declaration_body -> variable_declarator ASSIGN variable_declaration_initializer
Rule 109   variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list RPAREN
Rule 110   variable_declarators -> variable_declarator
Rule 111   variable_declarators -> variable_declarators COMMA variable_declarator
Rule 112   variable_declarator -> variable_declarator_id
Rule 113   variable_declarator_id -> IDENTIFIER COLON type
Rule 114   statement -> normal_statement
Rule 115   statement -> if_then_statement
Rule 116   statement -> if_then_else_statement
Rule 117   statement -> while_statement
Rule 118   statement -> do_while_statement
Rule 119   normal_statement -> block
Rule 120   normal_statement -> expression_statement
Rule 121   normal_statement -> empty_statement
Rule 122   normal_statement -> return_statement
Rule 123   normal_statement -> switch_statement
Rule 124   expression_statement -> statement_expression STATE_END
Rule 125   statement_expression -> assignment
Rule 126   statement_expression -> method_invocation
Rule 127   if_then_statement -> KWRD_IF LPAREN expression RPAREN statement
Rule 128   if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
Rule 129   if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
Rule 130   if_then_else_intermediate -> normal_statement
Rule 131   if_then_else_intermediate -> if_then_else_statement_precedence
Rule 132   while_statement -> KWRD_WHILE LPAREN expression RPAREN statement
Rule 133   do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
Rule 134   switch_statement -> expression KWRD_MATCH switch_block
Rule 135   switch_block -> BLOCK_BEGIN BLOCK_END
Rule 136   switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END
Rule 137   switch_block -> BLOCK_BEGIN switch_labels BLOCK_END
Rule 138   switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END
Rule 139   switch_block_statements -> switch_block_statement
Rule 140   switch_block_statements -> switch_block_statements switch_block_statement
Rule 141   switch_block_statement -> switch_labels block_statements
Rule 142   switch_labels -> switch_label
Rule 143   switch_labels -> switch_labels switch_label
Rule 144   switch_label -> KWRD_CASE expression FUNTYPE
Rule 145   empty_statement -> STATE_END
Rule 146   return_statement -> KWRD_RETURN expression_optional STATE_END
Rule 147   constructor_arguement_list_opt -> constructor_arguement_list
Rule 148   constructor_arguement_list_opt -> empty
Rule 149   constructor_arguement_list -> constructor_arguement_list_declarator
Rule 150   constructor_arguement_list -> constructor_arguement_list COMMA constructor_arguement_list_declarator
Rule 151   constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER COLON type
Rule 152   func_arguement_list_opt -> variable_declarators
Rule 153   func_arguement_list_opt -> empty
Rule 154   class_declaration -> class_header class_body
Rule 155   class_header -> class_header_name class_header_extends_opt
Rule 156   class_header_name -> class_header_name1 LPAREN constructor_arguement_list_opt RPAREN
Rule 157   class_header_name1 -> modifier_opts KWRD_CLASS name
Rule 158   class_header_extends_opt -> class_header_extends
Rule 159   class_header_extends_opt -> empty
Rule 160   class_header_extends -> KWRD_EXTNDS name LPAREN func_arguement_list_opt RPAREN
Rule 161   class_body -> block
Rule 162   method_declaration -> method_header method_body
Rule 163   method_header -> method_header_name LPAREN func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
Rule 164   method_return_type -> type
Rule 165   method_return_type -> TYPE_VOID
Rule 166   method_header_name -> modifier_opts KWRD_DEF IDENTIFIER
Rule 167   method_body -> block
Rule 168   modifier -> KWRD_PROTECTED
Rule 169   modifier -> KWRD_PRIVATE
Rule 170   type -> primitive_type
Rule 171   type -> reference_type
Rule 172   primitive_type -> TYPE_INT
Rule 173   primitive_type -> TYPE_FLOAT
Rule 174   primitive_type -> TYPE_CHAR
Rule 175   primitive_type -> TYPE_STRING
Rule 176   primitive_type -> TYPE_BOOLEAN
Rule 177   reference_type -> class_data_type
Rule 178   reference_type -> array_data_type
Rule 179   class_data_type -> name
Rule 180   array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN
Rule 181   array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN
Rule 182   array_initializer -> KWRD_ARRAY LPAREN argument_list_opt RPAREN
Rule 183   class_initializer -> KWRD_NEW name LPAREN argument_list_opt RPAREN
Rule 184   print_st -> IDENTIFIER LPAREN IDENTIFIER RPAREN
Rule 185   empty -> <empty>

Terminals, with rules where they appear

AND                  : 28
AND_ASSIGN           : 22
AND_BITWISE          : 34
ASSIGN               : 14 108 109 163
AT                   : 
BLOCK_BEGIN          : 87 135 136 137 138
BLOCK_END            : 87 135 136 137 138
BOOL_CONSTF          : 69
BOOL_CONSTT          : 68
CHARACTER            : 66
CHOOSE               : 
COLON                : 113 151 163
COMM                 : 
COMMA                : 78 107 111 150
DIVIDE               : 51
DIVIDE_ASSIGN        : 16
DOT                  : 82
EQUAL                : 36
EXACTEQ              : 
FLOAT_CONST          : 71
FUNTYPE              : 144
GEQ                  : 41
GREATER              : 39
IDENTIFIER           : 6 7 7 81 113 151 166 184 184
INNER_CLASS          : 
INT_CONST            : 72 181
KWRD_ABST            : 
KWRD_ARRAY           : 180 181 182
KWRD_CASE            : 144
KWRD_CATCH           : 
KWRD_CLASS           : 157
KWRD_DEF             : 166
KWRD_DO              : 133
KWRD_ELSE            : 128 129
KWRD_EXTNDS          : 7 160
KWRD_FINAL           : 
KWRD_FINALLY         : 
KWRD_FOR             : 
KWRD_FOREACH         : 
KWRD_FORSOME         : 
KWRD_IF              : 127 128 129
KWRD_IMPLICIT        : 
KWRD_IMPORT          : 
KWRD_LAZY            : 
KWRD_MACRO           : 
KWRD_MATCH           : 134
KWRD_NEW             : 181 183
KWRD_NULL            : 70
KWRD_OBJECT          : 6 7
KWRD_OVERRIDE        : 
KWRD_PACKAGE         : 
KWRD_PRIVATE         : 169
KWRD_PROTECTED       : 168
KWRD_PUBLIC          : 
KWRD_RETURN          : 146
KWRD_SEALED          : 
KWRD_STATIC          : 
KWRD_SUPER           : 
KWRD_THIS            : 
KWRD_THROW           : 
KWRD_TRAIT           : 
KWRD_TRY             : 
KWRD_TYPE            : 
KWRD_UNTIL           : 
KWRD_VAL             : 100
KWRD_VAR             : 99
KWRD_WHILE           : 132 133
KWRD_WITH            : 
KWRD_YIELD           : 
LBPAREN              : 74 180 181
LEQ                  : 42
LESS                 : 40
LOWER_BOUND          : 
LPAREN               : 61 62 73 109 109 127 128 129 132 133 156 160 163 181 182 183 184
LSHIFT               : 44
LSHIFT_ASSIGN        : 20
MINUS                : 48 54
MINUS_ASSIGN         : 19
NEQUAL               : 37
NIL                  : 
NOT                  : 58
OR                   : 26
OR_ASSIGN            : 23
OR_BITWISE           : 30
PLUS                 : 47 53
PLUS_ASSIGN          : 18
QUESTION             : 
RBPAREN              : 74 180 181
REMAINDER            : 52
REMAINDER_ASSIGN     : 17
RPAREN               : 61 62 73 109 109 127 128 129 132 133 156 160 163 181 182 183 184
RSHIFT               : 45
RSHIFT_ASSIGN        : 21
STATE_END            : 101 124 133 145 146
STRING_CONST         : 67
SUBTYPE              : 
TILDA                : 57
TIMES                : 50
TIMES_ASSIGN         : 15
TYPE_BOOLEAN         : 176
TYPE_CHAR            : 174
TYPE_FLOAT           : 173
TYPE_INT             : 172
TYPE_STRING          : 175
TYPE_VOID            : 165
UNDER                : 
UPPER_BOUND          : 
VIEW                 : 
VIEWABLE             : 
XOR                  : 32
XOR_ASSIGN           : 24
error                : 
newline              : 

Nonterminals, with rules where they appear

ObjectDeclare        : 5
ProgramStructure     : 1 0
SingletonObject      : 3 95
additive_expression  : 43 44 45 47 48
and_expression       : 31 32 34
argument_list        : 75 78
argument_list_opt    : 73 182 183
array_access         : 84
array_data_type      : 178
array_initializer    : 104
assignment           : 11 125
assignment_expression : 8 13
assignment_operator  : 13
base_variable_set    : 56
block                : 5 119 161 167
block_statement      : 90 91
block_statements     : 88 91 141
block_statements_opt : 87
cast_expression      : 59
class_and_objects    : 1 2
class_body           : 154
class_data_type      : 177
class_declaration    : 4 94
class_header         : 154
class_header_extends : 158
class_header_extends_opt : 155
class_header_name    : 155
class_header_name1   : 156
class_initializer    : 105
conditional_and_expression : 25 26 28
conditional_or_expression : 12 26
constructor_arguement_list : 147 150
constructor_arguement_list_declarator : 149 150
constructor_arguement_list_opt : 156
declaration_keyword  : 102 151
do_while_statement   : 118
empty                : 10 76 89 98 148 153 159
empty_statement      : 121
equality_expression  : 33 34 36 37
exclusive_or_expression : 29 30 32
expression           : 9 61 74 77 78 103 127 128 129 132 133 134 144
expression_optional  : 146
expression_statement : 120
func_arguement_list_opt : 160 163
if_then_else_intermediate : 128 129 129
if_then_else_statement : 116
if_then_else_statement_precedence : 131
if_then_statement    : 115
inclusive_or_expression : 27 28 30
int_float            : 65
literal              : 63
local_variable_declaration : 101
local_variable_declaration_statement : 92
method_body          : 162
method_declaration   : 96
method_header        : 162
method_header_name   : 163
method_invocation    : 64 126
method_return_type   : 163
modifier             : 97
modifier_opts        : 102 157 166
multiplicative_expression : 46 47 48 50 51 52
name                 : 73 74 82 83 157 160 179 183
normal_statement     : 114 130
primary              : 86
primitive_type       : 62 170
print_st             : 
qualified_name       : 80
reference_type       : 171
relational_expression : 35 36 37 39 40 41 42
return_statement     : 122
shift_expression     : 38 39 40 41 42 44 45
simple_name          : 79 82
statement            : 93 127 128 132 133
statement_expression : 124
switch_block         : 134
switch_block_statement : 139 140
switch_block_statements : 136 138 140
switch_label         : 142 143
switch_labels        : 137 138 141 143
switch_statement     : 123
type                 : 113 151 164 180 181
unary_expression     : 49 50 51 52 53 54 57 58 62
unary_expression_not_plus_minus : 55
valid_variable       : 13 85
variable_arguement_list : 107 109
variable_declaration_body : 102
variable_declaration_initializer : 106 107 108
variable_declarator  : 108 110 111
variable_declarator_id : 112
variable_declarators : 109 111 152
variable_literal     : 60
while_statement      : 117

Parsing method: LALR

state 0

    (0) S' -> . ProgramStructure
    (1) ProgramStructure -> . ProgramStructure class_and_objects
    (2) ProgramStructure -> . class_and_objects
    (3) class_and_objects -> . SingletonObject
    (4) class_and_objects -> . class_declaration
    (5) SingletonObject -> . ObjectDeclare block
    (154) class_declaration -> . class_header class_body
    (6) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (7) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (155) class_header -> . class_header_name class_header_extends_opt
    (156) class_header_name -> . class_header_name1 LPAREN constructor_arguement_list_opt RPAREN
    (157) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (97) modifier_opts -> . modifier
    (98) modifier_opts -> . empty
    (168) modifier -> . KWRD_PROTECTED
    (169) modifier -> . KWRD_PRIVATE
    (185) empty -> .

    KWRD_OBJECT     shift and go to state 4
    KWRD_PROTECTED  shift and go to state 10
    KWRD_PRIVATE    shift and go to state 14
    KWRD_CLASS      reduce using rule 185 (empty -> .)

    class_header_name              shift and go to state 3
    ProgramStructure               shift and go to state 6
    ObjectDeclare                  shift and go to state 1
    class_header_name1             shift and go to state 2
    class_declaration              shift and go to state 11
    class_and_objects              shift and go to state 12
    empty                          shift and go to state 5
    SingletonObject                shift and go to state 7
    modifier                       shift and go to state 13
    class_header                   shift and go to state 8
    modifier_opts                  shift and go to state 9

state 1

    (5) SingletonObject -> ObjectDeclare . block
    (87) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 15

    block                          shift and go to state 16

state 2

    (156) class_header_name -> class_header_name1 . LPAREN constructor_arguement_list_opt RPAREN

    LPAREN          shift and go to state 17


state 3

    (155) class_header -> class_header_name . class_header_extends_opt
    (158) class_header_extends_opt -> . class_header_extends
    (159) class_header_extends_opt -> . empty
    (160) class_header_extends -> . KWRD_EXTNDS name LPAREN func_arguement_list_opt RPAREN
    (185) empty -> .

    KWRD_EXTNDS     shift and go to state 20
    BLOCK_BEGIN     reduce using rule 185 (empty -> .)

    class_header_extends           shift and go to state 18
    class_header_extends_opt       shift and go to state 19
    empty                          shift and go to state 21

state 4

    (6) ObjectDeclare -> KWRD_OBJECT . IDENTIFIER
    (7) ObjectDeclare -> KWRD_OBJECT . IDENTIFIER KWRD_EXTNDS IDENTIFIER

    IDENTIFIER      shift and go to state 22


state 5

    (98) modifier_opts -> empty .

    KWRD_DEF        reduce using rule 98 (modifier_opts -> empty .)
    KWRD_CLASS      reduce using rule 98 (modifier_opts -> empty .)
    KWRD_VAR        reduce using rule 98 (modifier_opts -> empty .)
    KWRD_VAL        reduce using rule 98 (modifier_opts -> empty .)


state 6

    (0) S' -> ProgramStructure .
    (1) ProgramStructure -> ProgramStructure . class_and_objects
    (3) class_and_objects -> . SingletonObject
    (4) class_and_objects -> . class_declaration
    (5) SingletonObject -> . ObjectDeclare block
    (154) class_declaration -> . class_header class_body
    (6) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (7) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (155) class_header -> . class_header_name class_header_extends_opt
    (156) class_header_name -> . class_header_name1 LPAREN constructor_arguement_list_opt RPAREN
    (157) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (97) modifier_opts -> . modifier
    (98) modifier_opts -> . empty
    (168) modifier -> . KWRD_PROTECTED
    (169) modifier -> . KWRD_PRIVATE
    (185) empty -> .

    KWRD_OBJECT     shift and go to state 4
    KWRD_PROTECTED  shift and go to state 10
    KWRD_PRIVATE    shift and go to state 14
    KWRD_CLASS      reduce using rule 185 (empty -> .)

    class_header_name              shift and go to state 3
    ObjectDeclare                  shift and go to state 1
    class_header_name1             shift and go to state 2
    class_declaration              shift and go to state 11
    class_and_objects              shift and go to state 23
    empty                          shift and go to state 5
    SingletonObject                shift and go to state 7
    modifier                       shift and go to state 13
    class_header                   shift and go to state 8
    modifier_opts                  shift and go to state 9

state 7

    (3) class_and_objects -> SingletonObject .

    KWRD_OBJECT     reduce using rule 3 (class_and_objects -> SingletonObject .)
    KWRD_PROTECTED  reduce using rule 3 (class_and_objects -> SingletonObject .)
    KWRD_PRIVATE    reduce using rule 3 (class_and_objects -> SingletonObject .)
    $end            reduce using rule 3 (class_and_objects -> SingletonObject .)
    KWRD_CLASS      reduce using rule 3 (class_and_objects -> SingletonObject .)


state 8

    (154) class_declaration -> class_header . class_body
    (161) class_body -> . block
    (87) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 15

    class_body                     shift and go to state 24
    block                          shift and go to state 25

state 9

    (157) class_header_name1 -> modifier_opts . KWRD_CLASS name

    KWRD_CLASS      shift and go to state 26


state 10

    (168) modifier -> KWRD_PROTECTED .

    KWRD_DEF        reduce using rule 168 (modifier -> KWRD_PROTECTED .)
    KWRD_CLASS      reduce using rule 168 (modifier -> KWRD_PROTECTED .)
    KWRD_VAR        reduce using rule 168 (modifier -> KWRD_PROTECTED .)
    KWRD_VAL        reduce using rule 168 (modifier -> KWRD_PROTECTED .)


state 11

    (4) class_and_objects -> class_declaration .

    KWRD_OBJECT     reduce using rule 4 (class_and_objects -> class_declaration .)
    KWRD_PROTECTED  reduce using rule 4 (class_and_objects -> class_declaration .)
    KWRD_PRIVATE    reduce using rule 4 (class_and_objects -> class_declaration .)
    $end            reduce using rule 4 (class_and_objects -> class_declaration .)
    KWRD_CLASS      reduce using rule 4 (class_and_objects -> class_declaration .)


state 12

    (2) ProgramStructure -> class_and_objects .

    KWRD_OBJECT     reduce using rule 2 (ProgramStructure -> class_and_objects .)
    KWRD_PROTECTED  reduce using rule 2 (ProgramStructure -> class_and_objects .)
    KWRD_PRIVATE    reduce using rule 2 (ProgramStructure -> class_and_objects .)
    $end            reduce using rule 2 (ProgramStructure -> class_and_objects .)
    KWRD_CLASS      reduce using rule 2 (ProgramStructure -> class_and_objects .)


state 13

    (97) modifier_opts -> modifier .

    KWRD_DEF        reduce using rule 97 (modifier_opts -> modifier .)
    KWRD_CLASS      reduce using rule 97 (modifier_opts -> modifier .)
    KWRD_VAR        reduce using rule 97 (modifier_opts -> modifier .)
    KWRD_VAL        reduce using rule 97 (modifier_opts -> modifier .)


state 14

    (169) modifier -> KWRD_PRIVATE .

    KWRD_DEF        reduce using rule 169 (modifier -> KWRD_PRIVATE .)
    KWRD_CLASS      reduce using rule 169 (modifier -> KWRD_PRIVATE .)
    KWRD_VAR        reduce using rule 169 (modifier -> KWRD_PRIVATE .)
    KWRD_VAL        reduce using rule 169 (modifier -> KWRD_PRIVATE .)


state 15

    (87) block -> BLOCK_BEGIN . block_statements_opt BLOCK_END
    (88) block_statements_opt -> . block_statements
    (89) block_statements_opt -> . empty
    (90) block_statements -> . block_statement
    (91) block_statements -> . block_statements block_statement
    (185) empty -> .
    (92) block_statement -> . local_variable_declaration_statement
    (93) block_statement -> . statement
    (94) block_statement -> . class_declaration
    (95) block_statement -> . SingletonObject
    (96) block_statement -> . method_declaration
    (101) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (114) statement -> . normal_statement
    (115) statement -> . if_then_statement
    (116) statement -> . if_then_else_statement
    (117) statement -> . while_statement
    (118) statement -> . do_while_statement
    (154) class_declaration -> . class_header class_body
    (5) SingletonObject -> . ObjectDeclare block
    (162) method_declaration -> . method_header method_body
    (102) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (119) normal_statement -> . block
    (120) normal_statement -> . expression_statement
    (121) normal_statement -> . empty_statement
    (122) normal_statement -> . return_statement
    (123) normal_statement -> . switch_statement
    (127) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (128) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (132) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (133) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (155) class_header -> . class_header_name class_header_extends_opt
    (6) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (7) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (163) method_header -> . method_header_name LPAREN func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (97) modifier_opts -> . modifier
    (98) modifier_opts -> . empty
    (87) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (124) expression_statement -> . statement_expression STATE_END
    (145) empty_statement -> . STATE_END
    (146) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (134) switch_statement -> . expression KWRD_MATCH switch_block
    (156) class_header_name -> . class_header_name1 LPAREN constructor_arguement_list_opt RPAREN
    (166) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (168) modifier -> . KWRD_PROTECTED
    (169) modifier -> . KWRD_PRIVATE
    (125) statement_expression -> . assignment
    (126) statement_expression -> . method_invocation
    (8) expression -> . assignment_expression
    (157) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (74) array_access -> . name LBPAREN expression RBPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    BLOCK_END       reduce using rule 185 (empty -> .)
    KWRD_DEF        reduce using rule 185 (empty -> .)
    KWRD_CLASS      reduce using rule 185 (empty -> .)
    KWRD_VAR        reduce using rule 185 (empty -> .)
    KWRD_VAL        reduce using rule 185 (empty -> .)
    KWRD_IF         shift and go to state 57
    KWRD_WHILE      shift and go to state 46
    KWRD_DO         shift and go to state 41
    KWRD_OBJECT     shift and go to state 4
    BLOCK_BEGIN     shift and go to state 15
    STATE_END       shift and go to state 47
    KWRD_RETURN     shift and go to state 44
    KWRD_PROTECTED  shift and go to state 10
    KWRD_PRIVATE    shift and go to state 14
    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    expression_statement           shift and go to state 27
    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    normal_statement               shift and go to state 84
    ObjectDeclare                  shift and go to state 1
    class_header_name1             shift and go to state 2
    if_then_statement              shift and go to state 67
    array_access                   shift and go to state 29
    switch_statement               shift and go to state 50
    assignment_expression          shift and go to state 91
    block_statements_opt           shift and go to state 33
    qualified_name                 shift and go to state 78
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 64
    cast_expression                shift and go to state 79
    block_statement                shift and go to state 70
    shift_expression               shift and go to state 56
    return_statement               shift and go to state 88
    while_statement                shift and go to state 35
    and_expression                 shift and go to state 86
    statement                      shift and go to state 74
    statement_expression           shift and go to state 38
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 68
    conditional_or_expression      shift and go to state 53
    empty                          shift and go to state 77
    relational_expression          shift and go to state 73
    block_statements               shift and go to state 89
    local_variable_declaration_statement shift and go to state 39
    do_while_statement             shift and go to state 54
    int_float                      shift and go to state 40
    assignment                     shift and go to state 92
    multiplicative_expression      shift and go to state 55
    literal                        shift and go to state 71
    primary                        shift and go to state 66
    additive_expression            shift and go to state 52
    SingletonObject                shift and go to state 42
    method_header_name             shift and go to state 43
    class_header                   shift and go to state 8
    modifier_opts                  shift and go to state 94
    equality_expression            shift and go to state 80
    variable_literal               shift and go to state 58
    name                           shift and go to state 45
    unary_expression_not_plus_minus shift and go to state 49
    method_header                  shift and go to state 81
    empty_statement                shift and go to state 82
    class_declaration              shift and go to state 95
    local_variable_declaration     shift and go to state 83
    modifier                       shift and go to state 13
    expression                     shift and go to state 61
    conditional_and_expression     shift and go to state 59
    block                          shift and go to state 62
    if_then_else_statement         shift and go to state 63

state 16

    (5) SingletonObject -> ObjectDeclare block .

    KWRD_OBJECT     reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_PROTECTED  reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_PRIVATE    reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    $end            reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_CLASS      reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_IF         reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_WHILE      reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_DO         reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    BLOCK_BEGIN     reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    STATE_END       reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_RETURN     reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    IDENTIFIER      reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    PLUS            reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    MINUS           reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    TILDA           reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    NOT             reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    LPAREN          reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    CHARACTER       reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    STRING_CONST    reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    BOOL_CONSTT     reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    BOOL_CONSTF     reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_NULL       reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    FLOAT_CONST     reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    INT_CONST       reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_DEF        reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_VAR        reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_VAL        reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    BLOCK_END       reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_CASE       reduce using rule 5 (SingletonObject -> ObjectDeclare block .)


state 17

    (156) class_header_name -> class_header_name1 LPAREN . constructor_arguement_list_opt RPAREN
    (147) constructor_arguement_list_opt -> . constructor_arguement_list
    (148) constructor_arguement_list_opt -> . empty
    (149) constructor_arguement_list -> . constructor_arguement_list_declarator
    (150) constructor_arguement_list -> . constructor_arguement_list COMMA constructor_arguement_list_declarator
    (185) empty -> .
    (151) constructor_arguement_list_declarator -> . declaration_keyword IDENTIFIER COLON type
    (99) declaration_keyword -> . KWRD_VAR
    (100) declaration_keyword -> . KWRD_VAL

    RPAREN          reduce using rule 185 (empty -> .)
    KWRD_VAR        shift and go to state 99
    KWRD_VAL        shift and go to state 100

    constructor_arguement_list_opt shift and go to state 96
    declaration_keyword            shift and go to state 97
    constructor_arguement_list     shift and go to state 98
    constructor_arguement_list_declarator shift and go to state 101
    empty                          shift and go to state 102

state 18

    (158) class_header_extends_opt -> class_header_extends .

    BLOCK_BEGIN     reduce using rule 158 (class_header_extends_opt -> class_header_extends .)


state 19

    (155) class_header -> class_header_name class_header_extends_opt .

    BLOCK_BEGIN     reduce using rule 155 (class_header -> class_header_name class_header_extends_opt .)


state 20

    (160) class_header_extends -> KWRD_EXTNDS . name LPAREN func_arguement_list_opt RPAREN
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name

    IDENTIFIER      shift and go to state 76

    name                           shift and go to state 103
    qualified_name                 shift and go to state 78
    simple_name                    shift and go to state 68

state 21

    (159) class_header_extends_opt -> empty .

    BLOCK_BEGIN     reduce using rule 159 (class_header_extends_opt -> empty .)


state 22

    (6) ObjectDeclare -> KWRD_OBJECT IDENTIFIER .
    (7) ObjectDeclare -> KWRD_OBJECT IDENTIFIER . KWRD_EXTNDS IDENTIFIER

    BLOCK_BEGIN     reduce using rule 6 (ObjectDeclare -> KWRD_OBJECT IDENTIFIER .)
    KWRD_EXTNDS     shift and go to state 104


state 23

    (1) ProgramStructure -> ProgramStructure class_and_objects .

    KWRD_OBJECT     reduce using rule 1 (ProgramStructure -> ProgramStructure class_and_objects .)
    KWRD_PROTECTED  reduce using rule 1 (ProgramStructure -> ProgramStructure class_and_objects .)
    KWRD_PRIVATE    reduce using rule 1 (ProgramStructure -> ProgramStructure class_and_objects .)
    $end            reduce using rule 1 (ProgramStructure -> ProgramStructure class_and_objects .)
    KWRD_CLASS      reduce using rule 1 (ProgramStructure -> ProgramStructure class_and_objects .)


state 24

    (154) class_declaration -> class_header class_body .

    KWRD_OBJECT     reduce using rule 154 (class_declaration -> class_header class_body .)
    KWRD_PROTECTED  reduce using rule 154 (class_declaration -> class_header class_body .)
    KWRD_PRIVATE    reduce using rule 154 (class_declaration -> class_header class_body .)
    $end            reduce using rule 154 (class_declaration -> class_header class_body .)
    KWRD_CLASS      reduce using rule 154 (class_declaration -> class_header class_body .)
    KWRD_IF         reduce using rule 154 (class_declaration -> class_header class_body .)
    KWRD_WHILE      reduce using rule 154 (class_declaration -> class_header class_body .)
    KWRD_DO         reduce using rule 154 (class_declaration -> class_header class_body .)
    BLOCK_BEGIN     reduce using rule 154 (class_declaration -> class_header class_body .)
    STATE_END       reduce using rule 154 (class_declaration -> class_header class_body .)
    KWRD_RETURN     reduce using rule 154 (class_declaration -> class_header class_body .)
    IDENTIFIER      reduce using rule 154 (class_declaration -> class_header class_body .)
    PLUS            reduce using rule 154 (class_declaration -> class_header class_body .)
    MINUS           reduce using rule 154 (class_declaration -> class_header class_body .)
    TILDA           reduce using rule 154 (class_declaration -> class_header class_body .)
    NOT             reduce using rule 154 (class_declaration -> class_header class_body .)
    LPAREN          reduce using rule 154 (class_declaration -> class_header class_body .)
    CHARACTER       reduce using rule 154 (class_declaration -> class_header class_body .)
    STRING_CONST    reduce using rule 154 (class_declaration -> class_header class_body .)
    BOOL_CONSTT     reduce using rule 154 (class_declaration -> class_header class_body .)
    BOOL_CONSTF     reduce using rule 154 (class_declaration -> class_header class_body .)
    KWRD_NULL       reduce using rule 154 (class_declaration -> class_header class_body .)
    FLOAT_CONST     reduce using rule 154 (class_declaration -> class_header class_body .)
    INT_CONST       reduce using rule 154 (class_declaration -> class_header class_body .)
    KWRD_DEF        reduce using rule 154 (class_declaration -> class_header class_body .)
    KWRD_VAR        reduce using rule 154 (class_declaration -> class_header class_body .)
    KWRD_VAL        reduce using rule 154 (class_declaration -> class_header class_body .)
    BLOCK_END       reduce using rule 154 (class_declaration -> class_header class_body .)
    KWRD_CASE       reduce using rule 154 (class_declaration -> class_header class_body .)


state 25

    (161) class_body -> block .

    KWRD_OBJECT     reduce using rule 161 (class_body -> block .)
    KWRD_PROTECTED  reduce using rule 161 (class_body -> block .)
    KWRD_PRIVATE    reduce using rule 161 (class_body -> block .)
    $end            reduce using rule 161 (class_body -> block .)
    KWRD_CLASS      reduce using rule 161 (class_body -> block .)
    KWRD_IF         reduce using rule 161 (class_body -> block .)
    KWRD_WHILE      reduce using rule 161 (class_body -> block .)
    KWRD_DO         reduce using rule 161 (class_body -> block .)
    BLOCK_BEGIN     reduce using rule 161 (class_body -> block .)
    STATE_END       reduce using rule 161 (class_body -> block .)
    KWRD_RETURN     reduce using rule 161 (class_body -> block .)
    IDENTIFIER      reduce using rule 161 (class_body -> block .)
    PLUS            reduce using rule 161 (class_body -> block .)
    MINUS           reduce using rule 161 (class_body -> block .)
    TILDA           reduce using rule 161 (class_body -> block .)
    NOT             reduce using rule 161 (class_body -> block .)
    LPAREN          reduce using rule 161 (class_body -> block .)
    CHARACTER       reduce using rule 161 (class_body -> block .)
    STRING_CONST    reduce using rule 161 (class_body -> block .)
    BOOL_CONSTT     reduce using rule 161 (class_body -> block .)
    BOOL_CONSTF     reduce using rule 161 (class_body -> block .)
    KWRD_NULL       reduce using rule 161 (class_body -> block .)
    FLOAT_CONST     reduce using rule 161 (class_body -> block .)
    INT_CONST       reduce using rule 161 (class_body -> block .)
    KWRD_DEF        reduce using rule 161 (class_body -> block .)
    KWRD_VAR        reduce using rule 161 (class_body -> block .)
    KWRD_VAL        reduce using rule 161 (class_body -> block .)
    BLOCK_END       reduce using rule 161 (class_body -> block .)
    KWRD_CASE       reduce using rule 161 (class_body -> block .)


state 26

    (157) class_header_name1 -> modifier_opts KWRD_CLASS . name
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name

    IDENTIFIER      shift and go to state 76

    simple_name                    shift and go to state 68
    qualified_name                 shift and go to state 78
    name                           shift and go to state 105

state 27

    (120) normal_statement -> expression_statement .

    KWRD_IF         reduce using rule 120 (normal_statement -> expression_statement .)
    KWRD_WHILE      reduce using rule 120 (normal_statement -> expression_statement .)
    KWRD_DO         reduce using rule 120 (normal_statement -> expression_statement .)
    KWRD_OBJECT     reduce using rule 120 (normal_statement -> expression_statement .)
    BLOCK_BEGIN     reduce using rule 120 (normal_statement -> expression_statement .)
    STATE_END       reduce using rule 120 (normal_statement -> expression_statement .)
    KWRD_RETURN     reduce using rule 120 (normal_statement -> expression_statement .)
    KWRD_PROTECTED  reduce using rule 120 (normal_statement -> expression_statement .)
    KWRD_PRIVATE    reduce using rule 120 (normal_statement -> expression_statement .)
    IDENTIFIER      reduce using rule 120 (normal_statement -> expression_statement .)
    PLUS            reduce using rule 120 (normal_statement -> expression_statement .)
    MINUS           reduce using rule 120 (normal_statement -> expression_statement .)
    TILDA           reduce using rule 120 (normal_statement -> expression_statement .)
    NOT             reduce using rule 120 (normal_statement -> expression_statement .)
    LPAREN          reduce using rule 120 (normal_statement -> expression_statement .)
    CHARACTER       reduce using rule 120 (normal_statement -> expression_statement .)
    STRING_CONST    reduce using rule 120 (normal_statement -> expression_statement .)
    BOOL_CONSTT     reduce using rule 120 (normal_statement -> expression_statement .)
    BOOL_CONSTF     reduce using rule 120 (normal_statement -> expression_statement .)
    KWRD_NULL       reduce using rule 120 (normal_statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 120 (normal_statement -> expression_statement .)
    INT_CONST       reduce using rule 120 (normal_statement -> expression_statement .)
    KWRD_DEF        reduce using rule 120 (normal_statement -> expression_statement .)
    KWRD_CLASS      reduce using rule 120 (normal_statement -> expression_statement .)
    KWRD_VAR        reduce using rule 120 (normal_statement -> expression_statement .)
    KWRD_VAL        reduce using rule 120 (normal_statement -> expression_statement .)
    BLOCK_END       reduce using rule 120 (normal_statement -> expression_statement .)
    KWRD_CASE       reduce using rule 120 (normal_statement -> expression_statement .)
    KWRD_ELSE       reduce using rule 120 (normal_statement -> expression_statement .)


state 28

    (71) int_float -> FLOAT_CONST .

    TIMES           reduce using rule 71 (int_float -> FLOAT_CONST .)
    DIVIDE          reduce using rule 71 (int_float -> FLOAT_CONST .)
    REMAINDER       reduce using rule 71 (int_float -> FLOAT_CONST .)
    PLUS            reduce using rule 71 (int_float -> FLOAT_CONST .)
    MINUS           reduce using rule 71 (int_float -> FLOAT_CONST .)
    LSHIFT          reduce using rule 71 (int_float -> FLOAT_CONST .)
    RSHIFT          reduce using rule 71 (int_float -> FLOAT_CONST .)
    GREATER         reduce using rule 71 (int_float -> FLOAT_CONST .)
    LESS            reduce using rule 71 (int_float -> FLOAT_CONST .)
    GEQ             reduce using rule 71 (int_float -> FLOAT_CONST .)
    LEQ             reduce using rule 71 (int_float -> FLOAT_CONST .)
    EQUAL           reduce using rule 71 (int_float -> FLOAT_CONST .)
    NEQUAL          reduce using rule 71 (int_float -> FLOAT_CONST .)
    AND_BITWISE     reduce using rule 71 (int_float -> FLOAT_CONST .)
    XOR             reduce using rule 71 (int_float -> FLOAT_CONST .)
    OR_BITWISE      reduce using rule 71 (int_float -> FLOAT_CONST .)
    AND             reduce using rule 71 (int_float -> FLOAT_CONST .)
    OR              reduce using rule 71 (int_float -> FLOAT_CONST .)
    FUNTYPE         reduce using rule 71 (int_float -> FLOAT_CONST .)
    KWRD_MATCH      reduce using rule 71 (int_float -> FLOAT_CONST .)
    STATE_END       reduce using rule 71 (int_float -> FLOAT_CONST .)
    RPAREN          reduce using rule 71 (int_float -> FLOAT_CONST .)
    COMMA           reduce using rule 71 (int_float -> FLOAT_CONST .)
    RBPAREN         reduce using rule 71 (int_float -> FLOAT_CONST .)


state 29

    (84) valid_variable -> array_access .

    ASSIGN          reduce using rule 84 (valid_variable -> array_access .)
    TIMES_ASSIGN    reduce using rule 84 (valid_variable -> array_access .)
    DIVIDE_ASSIGN   reduce using rule 84 (valid_variable -> array_access .)
    REMAINDER_ASSIGN reduce using rule 84 (valid_variable -> array_access .)
    PLUS_ASSIGN     reduce using rule 84 (valid_variable -> array_access .)
    MINUS_ASSIGN    reduce using rule 84 (valid_variable -> array_access .)
    LSHIFT_ASSIGN   reduce using rule 84 (valid_variable -> array_access .)
    RSHIFT_ASSIGN   reduce using rule 84 (valid_variable -> array_access .)
    AND_ASSIGN      reduce using rule 84 (valid_variable -> array_access .)
    OR_ASSIGN       reduce using rule 84 (valid_variable -> array_access .)
    XOR_ASSIGN      reduce using rule 84 (valid_variable -> array_access .)
    TIMES           reduce using rule 84 (valid_variable -> array_access .)
    DIVIDE          reduce using rule 84 (valid_variable -> array_access .)
    REMAINDER       reduce using rule 84 (valid_variable -> array_access .)
    PLUS            reduce using rule 84 (valid_variable -> array_access .)
    MINUS           reduce using rule 84 (valid_variable -> array_access .)
    LSHIFT          reduce using rule 84 (valid_variable -> array_access .)
    RSHIFT          reduce using rule 84 (valid_variable -> array_access .)
    GREATER         reduce using rule 84 (valid_variable -> array_access .)
    LESS            reduce using rule 84 (valid_variable -> array_access .)
    GEQ             reduce using rule 84 (valid_variable -> array_access .)
    LEQ             reduce using rule 84 (valid_variable -> array_access .)
    EQUAL           reduce using rule 84 (valid_variable -> array_access .)
    NEQUAL          reduce using rule 84 (valid_variable -> array_access .)
    AND_BITWISE     reduce using rule 84 (valid_variable -> array_access .)
    XOR             reduce using rule 84 (valid_variable -> array_access .)
    OR_BITWISE      reduce using rule 84 (valid_variable -> array_access .)
    AND             reduce using rule 84 (valid_variable -> array_access .)
    OR              reduce using rule 84 (valid_variable -> array_access .)
    KWRD_MATCH      reduce using rule 84 (valid_variable -> array_access .)
    STATE_END       reduce using rule 84 (valid_variable -> array_access .)
    RPAREN          reduce using rule 84 (valid_variable -> array_access .)
    COMMA           reduce using rule 84 (valid_variable -> array_access .)
    RBPAREN         reduce using rule 84 (valid_variable -> array_access .)
    FUNTYPE         reduce using rule 84 (valid_variable -> array_access .)


state 30

    (54) unary_expression -> MINUS . unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    qualified_name                 shift and go to state 78
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    unary_expression               shift and go to state 106
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 107
    array_access                   shift and go to state 29
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    literal                        shift and go to state 71
    method_invocation              shift and go to state 108
    cast_expression                shift and go to state 79
    simple_name                    shift and go to state 68
    name                           shift and go to state 109

state 31

    (67) literal -> STRING_CONST .

    TIMES           reduce using rule 67 (literal -> STRING_CONST .)
    DIVIDE          reduce using rule 67 (literal -> STRING_CONST .)
    REMAINDER       reduce using rule 67 (literal -> STRING_CONST .)
    PLUS            reduce using rule 67 (literal -> STRING_CONST .)
    MINUS           reduce using rule 67 (literal -> STRING_CONST .)
    LSHIFT          reduce using rule 67 (literal -> STRING_CONST .)
    RSHIFT          reduce using rule 67 (literal -> STRING_CONST .)
    GREATER         reduce using rule 67 (literal -> STRING_CONST .)
    LESS            reduce using rule 67 (literal -> STRING_CONST .)
    GEQ             reduce using rule 67 (literal -> STRING_CONST .)
    LEQ             reduce using rule 67 (literal -> STRING_CONST .)
    EQUAL           reduce using rule 67 (literal -> STRING_CONST .)
    NEQUAL          reduce using rule 67 (literal -> STRING_CONST .)
    AND_BITWISE     reduce using rule 67 (literal -> STRING_CONST .)
    XOR             reduce using rule 67 (literal -> STRING_CONST .)
    OR_BITWISE      reduce using rule 67 (literal -> STRING_CONST .)
    AND             reduce using rule 67 (literal -> STRING_CONST .)
    OR              reduce using rule 67 (literal -> STRING_CONST .)
    COMMA           reduce using rule 67 (literal -> STRING_CONST .)
    RPAREN          reduce using rule 67 (literal -> STRING_CONST .)
    KWRD_MATCH      reduce using rule 67 (literal -> STRING_CONST .)
    STATE_END       reduce using rule 67 (literal -> STRING_CONST .)
    RBPAREN         reduce using rule 67 (literal -> STRING_CONST .)
    FUNTYPE         reduce using rule 67 (literal -> STRING_CONST .)


state 32

    (69) literal -> BOOL_CONSTF .

    TIMES           reduce using rule 69 (literal -> BOOL_CONSTF .)
    DIVIDE          reduce using rule 69 (literal -> BOOL_CONSTF .)
    REMAINDER       reduce using rule 69 (literal -> BOOL_CONSTF .)
    PLUS            reduce using rule 69 (literal -> BOOL_CONSTF .)
    MINUS           reduce using rule 69 (literal -> BOOL_CONSTF .)
    LSHIFT          reduce using rule 69 (literal -> BOOL_CONSTF .)
    RSHIFT          reduce using rule 69 (literal -> BOOL_CONSTF .)
    GREATER         reduce using rule 69 (literal -> BOOL_CONSTF .)
    LESS            reduce using rule 69 (literal -> BOOL_CONSTF .)
    GEQ             reduce using rule 69 (literal -> BOOL_CONSTF .)
    LEQ             reduce using rule 69 (literal -> BOOL_CONSTF .)
    EQUAL           reduce using rule 69 (literal -> BOOL_CONSTF .)
    NEQUAL          reduce using rule 69 (literal -> BOOL_CONSTF .)
    AND_BITWISE     reduce using rule 69 (literal -> BOOL_CONSTF .)
    XOR             reduce using rule 69 (literal -> BOOL_CONSTF .)
    OR_BITWISE      reduce using rule 69 (literal -> BOOL_CONSTF .)
    AND             reduce using rule 69 (literal -> BOOL_CONSTF .)
    OR              reduce using rule 69 (literal -> BOOL_CONSTF .)
    COMMA           reduce using rule 69 (literal -> BOOL_CONSTF .)
    RPAREN          reduce using rule 69 (literal -> BOOL_CONSTF .)
    KWRD_MATCH      reduce using rule 69 (literal -> BOOL_CONSTF .)
    STATE_END       reduce using rule 69 (literal -> BOOL_CONSTF .)
    RBPAREN         reduce using rule 69 (literal -> BOOL_CONSTF .)
    FUNTYPE         reduce using rule 69 (literal -> BOOL_CONSTF .)


state 33

    (87) block -> BLOCK_BEGIN block_statements_opt . BLOCK_END

    BLOCK_END       shift and go to state 110


state 34

    (27) conditional_and_expression -> inclusive_or_expression .
    (30) inclusive_or_expression -> inclusive_or_expression . OR_BITWISE exclusive_or_expression

    AND             reduce using rule 27 (conditional_and_expression -> inclusive_or_expression .)
    OR              reduce using rule 27 (conditional_and_expression -> inclusive_or_expression .)
    STATE_END       reduce using rule 27 (conditional_and_expression -> inclusive_or_expression .)
    KWRD_MATCH      reduce using rule 27 (conditional_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 27 (conditional_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 27 (conditional_and_expression -> inclusive_or_expression .)
    FUNTYPE         reduce using rule 27 (conditional_and_expression -> inclusive_or_expression .)
    RBPAREN         reduce using rule 27 (conditional_and_expression -> inclusive_or_expression .)
    OR_BITWISE      shift and go to state 111


state 35

    (117) statement -> while_statement .

    KWRD_IF         reduce using rule 117 (statement -> while_statement .)
    KWRD_WHILE      reduce using rule 117 (statement -> while_statement .)
    KWRD_DO         reduce using rule 117 (statement -> while_statement .)
    KWRD_OBJECT     reduce using rule 117 (statement -> while_statement .)
    BLOCK_BEGIN     reduce using rule 117 (statement -> while_statement .)
    STATE_END       reduce using rule 117 (statement -> while_statement .)
    KWRD_RETURN     reduce using rule 117 (statement -> while_statement .)
    KWRD_PROTECTED  reduce using rule 117 (statement -> while_statement .)
    KWRD_PRIVATE    reduce using rule 117 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 117 (statement -> while_statement .)
    PLUS            reduce using rule 117 (statement -> while_statement .)
    MINUS           reduce using rule 117 (statement -> while_statement .)
    TILDA           reduce using rule 117 (statement -> while_statement .)
    NOT             reduce using rule 117 (statement -> while_statement .)
    LPAREN          reduce using rule 117 (statement -> while_statement .)
    CHARACTER       reduce using rule 117 (statement -> while_statement .)
    STRING_CONST    reduce using rule 117 (statement -> while_statement .)
    BOOL_CONSTT     reduce using rule 117 (statement -> while_statement .)
    BOOL_CONSTF     reduce using rule 117 (statement -> while_statement .)
    KWRD_NULL       reduce using rule 117 (statement -> while_statement .)
    FLOAT_CONST     reduce using rule 117 (statement -> while_statement .)
    INT_CONST       reduce using rule 117 (statement -> while_statement .)
    KWRD_DEF        reduce using rule 117 (statement -> while_statement .)
    KWRD_CLASS      reduce using rule 117 (statement -> while_statement .)
    KWRD_VAR        reduce using rule 117 (statement -> while_statement .)
    KWRD_VAL        reduce using rule 117 (statement -> while_statement .)
    BLOCK_END       reduce using rule 117 (statement -> while_statement .)
    KWRD_CASE       reduce using rule 117 (statement -> while_statement .)


state 36

    (68) literal -> BOOL_CONSTT .

    TIMES           reduce using rule 68 (literal -> BOOL_CONSTT .)
    DIVIDE          reduce using rule 68 (literal -> BOOL_CONSTT .)
    REMAINDER       reduce using rule 68 (literal -> BOOL_CONSTT .)
    PLUS            reduce using rule 68 (literal -> BOOL_CONSTT .)
    MINUS           reduce using rule 68 (literal -> BOOL_CONSTT .)
    LSHIFT          reduce using rule 68 (literal -> BOOL_CONSTT .)
    RSHIFT          reduce using rule 68 (literal -> BOOL_CONSTT .)
    GREATER         reduce using rule 68 (literal -> BOOL_CONSTT .)
    LESS            reduce using rule 68 (literal -> BOOL_CONSTT .)
    GEQ             reduce using rule 68 (literal -> BOOL_CONSTT .)
    LEQ             reduce using rule 68 (literal -> BOOL_CONSTT .)
    EQUAL           reduce using rule 68 (literal -> BOOL_CONSTT .)
    NEQUAL          reduce using rule 68 (literal -> BOOL_CONSTT .)
    AND_BITWISE     reduce using rule 68 (literal -> BOOL_CONSTT .)
    XOR             reduce using rule 68 (literal -> BOOL_CONSTT .)
    OR_BITWISE      reduce using rule 68 (literal -> BOOL_CONSTT .)
    AND             reduce using rule 68 (literal -> BOOL_CONSTT .)
    OR              reduce using rule 68 (literal -> BOOL_CONSTT .)
    COMMA           reduce using rule 68 (literal -> BOOL_CONSTT .)
    RPAREN          reduce using rule 68 (literal -> BOOL_CONSTT .)
    KWRD_MATCH      reduce using rule 68 (literal -> BOOL_CONSTT .)
    STATE_END       reduce using rule 68 (literal -> BOOL_CONSTT .)
    RBPAREN         reduce using rule 68 (literal -> BOOL_CONSTT .)
    FUNTYPE         reduce using rule 68 (literal -> BOOL_CONSTT .)


state 37

    (53) unary_expression -> PLUS . unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    qualified_name                 shift and go to state 78
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    unary_expression               shift and go to state 112
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 107
    array_access                   shift and go to state 29
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    literal                        shift and go to state 71
    method_invocation              shift and go to state 108
    cast_expression                shift and go to state 79
    simple_name                    shift and go to state 68
    name                           shift and go to state 109

state 38

    (124) expression_statement -> statement_expression . STATE_END

    STATE_END       shift and go to state 113


state 39

    (92) block_statement -> local_variable_declaration_statement .

    KWRD_IF         reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    KWRD_WHILE      reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    KWRD_DO         reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    KWRD_OBJECT     reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    BLOCK_BEGIN     reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    STATE_END       reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    KWRD_RETURN     reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    KWRD_PROTECTED  reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    KWRD_PRIVATE    reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    IDENTIFIER      reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    PLUS            reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    MINUS           reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    TILDA           reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    NOT             reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    LPAREN          reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    CHARACTER       reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    STRING_CONST    reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    BOOL_CONSTT     reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    BOOL_CONSTF     reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    KWRD_NULL       reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    FLOAT_CONST     reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    INT_CONST       reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    KWRD_DEF        reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    KWRD_CLASS      reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    KWRD_VAR        reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    KWRD_VAL        reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    BLOCK_END       reduce using rule 92 (block_statement -> local_variable_declaration_statement .)
    KWRD_CASE       reduce using rule 92 (block_statement -> local_variable_declaration_statement .)


state 40

    (65) literal -> int_float .

    TIMES           reduce using rule 65 (literal -> int_float .)
    DIVIDE          reduce using rule 65 (literal -> int_float .)
    REMAINDER       reduce using rule 65 (literal -> int_float .)
    PLUS            reduce using rule 65 (literal -> int_float .)
    MINUS           reduce using rule 65 (literal -> int_float .)
    LSHIFT          reduce using rule 65 (literal -> int_float .)
    RSHIFT          reduce using rule 65 (literal -> int_float .)
    GREATER         reduce using rule 65 (literal -> int_float .)
    LESS            reduce using rule 65 (literal -> int_float .)
    GEQ             reduce using rule 65 (literal -> int_float .)
    LEQ             reduce using rule 65 (literal -> int_float .)
    EQUAL           reduce using rule 65 (literal -> int_float .)
    NEQUAL          reduce using rule 65 (literal -> int_float .)
    AND_BITWISE     reduce using rule 65 (literal -> int_float .)
    XOR             reduce using rule 65 (literal -> int_float .)
    OR_BITWISE      reduce using rule 65 (literal -> int_float .)
    AND             reduce using rule 65 (literal -> int_float .)
    OR              reduce using rule 65 (literal -> int_float .)
    COMMA           reduce using rule 65 (literal -> int_float .)
    RPAREN          reduce using rule 65 (literal -> int_float .)
    KWRD_MATCH      reduce using rule 65 (literal -> int_float .)
    STATE_END       reduce using rule 65 (literal -> int_float .)
    RBPAREN         reduce using rule 65 (literal -> int_float .)
    FUNTYPE         reduce using rule 65 (literal -> int_float .)


state 41

    (133) do_while_statement -> KWRD_DO . statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (114) statement -> . normal_statement
    (115) statement -> . if_then_statement
    (116) statement -> . if_then_else_statement
    (117) statement -> . while_statement
    (118) statement -> . do_while_statement
    (119) normal_statement -> . block
    (120) normal_statement -> . expression_statement
    (121) normal_statement -> . empty_statement
    (122) normal_statement -> . return_statement
    (123) normal_statement -> . switch_statement
    (127) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (128) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (132) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (133) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (87) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (124) expression_statement -> . statement_expression STATE_END
    (145) empty_statement -> . STATE_END
    (146) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (134) switch_statement -> . expression KWRD_MATCH switch_block
    (125) statement_expression -> . assignment
    (126) statement_expression -> . method_invocation
    (8) expression -> . assignment_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (74) array_access -> . name LBPAREN expression RBPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    KWRD_IF         shift and go to state 57
    KWRD_WHILE      shift and go to state 46
    KWRD_DO         shift and go to state 41
    BLOCK_BEGIN     shift and go to state 15
    STATE_END       shift and go to state 47
    KWRD_RETURN     shift and go to state 44
    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    expression_statement           shift and go to state 27
    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    normal_statement               shift and go to state 84
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    if_then_statement              shift and go to state 67
    array_access                   shift and go to state 29
    switch_statement               shift and go to state 50
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    return_statement               shift and go to state 88
    while_statement                shift and go to state 35
    and_expression                 shift and go to state 86
    statement                      shift and go to state 114
    statement_expression           shift and go to state 38
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 68
    conditional_or_expression      shift and go to state 53
    relational_expression          shift and go to state 73
    do_while_statement             shift and go to state 54
    assignment                     shift and go to state 92
    multiplicative_expression      shift and go to state 55
    additive_expression            shift and go to state 52
    cast_expression                shift and go to state 79
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 45
    empty_statement                shift and go to state 82
    expression                     shift and go to state 61
    conditional_and_expression     shift and go to state 59
    block                          shift and go to state 62
    if_then_else_statement         shift and go to state 63

state 42

    (95) block_statement -> SingletonObject .

    KWRD_IF         reduce using rule 95 (block_statement -> SingletonObject .)
    KWRD_WHILE      reduce using rule 95 (block_statement -> SingletonObject .)
    KWRD_DO         reduce using rule 95 (block_statement -> SingletonObject .)
    KWRD_OBJECT     reduce using rule 95 (block_statement -> SingletonObject .)
    BLOCK_BEGIN     reduce using rule 95 (block_statement -> SingletonObject .)
    STATE_END       reduce using rule 95 (block_statement -> SingletonObject .)
    KWRD_RETURN     reduce using rule 95 (block_statement -> SingletonObject .)
    KWRD_PROTECTED  reduce using rule 95 (block_statement -> SingletonObject .)
    KWRD_PRIVATE    reduce using rule 95 (block_statement -> SingletonObject .)
    IDENTIFIER      reduce using rule 95 (block_statement -> SingletonObject .)
    PLUS            reduce using rule 95 (block_statement -> SingletonObject .)
    MINUS           reduce using rule 95 (block_statement -> SingletonObject .)
    TILDA           reduce using rule 95 (block_statement -> SingletonObject .)
    NOT             reduce using rule 95 (block_statement -> SingletonObject .)
    LPAREN          reduce using rule 95 (block_statement -> SingletonObject .)
    CHARACTER       reduce using rule 95 (block_statement -> SingletonObject .)
    STRING_CONST    reduce using rule 95 (block_statement -> SingletonObject .)
    BOOL_CONSTT     reduce using rule 95 (block_statement -> SingletonObject .)
    BOOL_CONSTF     reduce using rule 95 (block_statement -> SingletonObject .)
    KWRD_NULL       reduce using rule 95 (block_statement -> SingletonObject .)
    FLOAT_CONST     reduce using rule 95 (block_statement -> SingletonObject .)
    INT_CONST       reduce using rule 95 (block_statement -> SingletonObject .)
    KWRD_DEF        reduce using rule 95 (block_statement -> SingletonObject .)
    KWRD_CLASS      reduce using rule 95 (block_statement -> SingletonObject .)
    KWRD_VAR        reduce using rule 95 (block_statement -> SingletonObject .)
    KWRD_VAL        reduce using rule 95 (block_statement -> SingletonObject .)
    BLOCK_END       reduce using rule 95 (block_statement -> SingletonObject .)
    KWRD_CASE       reduce using rule 95 (block_statement -> SingletonObject .)


state 43

    (163) method_header -> method_header_name . LPAREN func_arguement_list_opt RPAREN COLON method_return_type ASSIGN

    LPAREN          shift and go to state 115


state 44

    (146) return_statement -> KWRD_RETURN . expression_optional STATE_END
    (9) expression_optional -> . expression
    (10) expression_optional -> . empty
    (8) expression -> . assignment_expression
    (185) empty -> .
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    STATE_END       reduce using rule 185 (empty -> .)
    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    additive_expression            shift and go to state 52
    simple_name                    shift and go to state 68
    expression_optional            shift and go to state 116
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    and_expression                 shift and go to state 86
    relational_expression          shift and go to state 73
    cast_expression                shift and go to state 79
    conditional_or_expression      shift and go to state 53
    empty                          shift and go to state 117
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    assignment                     shift and go to state 118
    multiplicative_expression      shift and go to state 55
    method_invocation              shift and go to state 108
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 119
    expression                     shift and go to state 120
    conditional_and_expression     shift and go to state 59

state 45

    (73) method_invocation -> name . LPAREN argument_list_opt RPAREN
    (83) valid_variable -> name .
    (74) array_access -> name . LBPAREN expression RBPAREN
    (82) qualified_name -> name . DOT simple_name

    LPAREN          shift and go to state 121
    ASSIGN          reduce using rule 83 (valid_variable -> name .)
    TIMES_ASSIGN    reduce using rule 83 (valid_variable -> name .)
    DIVIDE_ASSIGN   reduce using rule 83 (valid_variable -> name .)
    REMAINDER_ASSIGN reduce using rule 83 (valid_variable -> name .)
    PLUS_ASSIGN     reduce using rule 83 (valid_variable -> name .)
    MINUS_ASSIGN    reduce using rule 83 (valid_variable -> name .)
    LSHIFT_ASSIGN   reduce using rule 83 (valid_variable -> name .)
    RSHIFT_ASSIGN   reduce using rule 83 (valid_variable -> name .)
    AND_ASSIGN      reduce using rule 83 (valid_variable -> name .)
    OR_ASSIGN       reduce using rule 83 (valid_variable -> name .)
    XOR_ASSIGN      reduce using rule 83 (valid_variable -> name .)
    TIMES           reduce using rule 83 (valid_variable -> name .)
    DIVIDE          reduce using rule 83 (valid_variable -> name .)
    REMAINDER       reduce using rule 83 (valid_variable -> name .)
    PLUS            reduce using rule 83 (valid_variable -> name .)
    MINUS           reduce using rule 83 (valid_variable -> name .)
    LSHIFT          reduce using rule 83 (valid_variable -> name .)
    RSHIFT          reduce using rule 83 (valid_variable -> name .)
    GREATER         reduce using rule 83 (valid_variable -> name .)
    LESS            reduce using rule 83 (valid_variable -> name .)
    GEQ             reduce using rule 83 (valid_variable -> name .)
    LEQ             reduce using rule 83 (valid_variable -> name .)
    EQUAL           reduce using rule 83 (valid_variable -> name .)
    NEQUAL          reduce using rule 83 (valid_variable -> name .)
    AND_BITWISE     reduce using rule 83 (valid_variable -> name .)
    XOR             reduce using rule 83 (valid_variable -> name .)
    OR_BITWISE      reduce using rule 83 (valid_variable -> name .)
    AND             reduce using rule 83 (valid_variable -> name .)
    OR              reduce using rule 83 (valid_variable -> name .)
    KWRD_MATCH      reduce using rule 83 (valid_variable -> name .)
    LBPAREN         shift and go to state 122
    DOT             shift and go to state 123


state 46

    (132) while_statement -> KWRD_WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 124


state 47

    (145) empty_statement -> STATE_END .

    KWRD_WHILE      reduce using rule 145 (empty_statement -> STATE_END .)
    KWRD_IF         reduce using rule 145 (empty_statement -> STATE_END .)
    KWRD_DO         reduce using rule 145 (empty_statement -> STATE_END .)
    KWRD_OBJECT     reduce using rule 145 (empty_statement -> STATE_END .)
    BLOCK_BEGIN     reduce using rule 145 (empty_statement -> STATE_END .)
    STATE_END       reduce using rule 145 (empty_statement -> STATE_END .)
    KWRD_RETURN     reduce using rule 145 (empty_statement -> STATE_END .)
    KWRD_PROTECTED  reduce using rule 145 (empty_statement -> STATE_END .)
    KWRD_PRIVATE    reduce using rule 145 (empty_statement -> STATE_END .)
    IDENTIFIER      reduce using rule 145 (empty_statement -> STATE_END .)
    PLUS            reduce using rule 145 (empty_statement -> STATE_END .)
    MINUS           reduce using rule 145 (empty_statement -> STATE_END .)
    TILDA           reduce using rule 145 (empty_statement -> STATE_END .)
    NOT             reduce using rule 145 (empty_statement -> STATE_END .)
    LPAREN          reduce using rule 145 (empty_statement -> STATE_END .)
    CHARACTER       reduce using rule 145 (empty_statement -> STATE_END .)
    STRING_CONST    reduce using rule 145 (empty_statement -> STATE_END .)
    BOOL_CONSTT     reduce using rule 145 (empty_statement -> STATE_END .)
    BOOL_CONSTF     reduce using rule 145 (empty_statement -> STATE_END .)
    KWRD_NULL       reduce using rule 145 (empty_statement -> STATE_END .)
    FLOAT_CONST     reduce using rule 145 (empty_statement -> STATE_END .)
    INT_CONST       reduce using rule 145 (empty_statement -> STATE_END .)
    KWRD_DEF        reduce using rule 145 (empty_statement -> STATE_END .)
    KWRD_CLASS      reduce using rule 145 (empty_statement -> STATE_END .)
    KWRD_VAR        reduce using rule 145 (empty_statement -> STATE_END .)
    KWRD_VAL        reduce using rule 145 (empty_statement -> STATE_END .)
    BLOCK_END       reduce using rule 145 (empty_statement -> STATE_END .)
    KWRD_CASE       reduce using rule 145 (empty_statement -> STATE_END .)
    KWRD_ELSE       reduce using rule 145 (empty_statement -> STATE_END .)


state 48

    (49) multiplicative_expression -> unary_expression .

    TIMES           reduce using rule 49 (multiplicative_expression -> unary_expression .)
    DIVIDE          reduce using rule 49 (multiplicative_expression -> unary_expression .)
    REMAINDER       reduce using rule 49 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 49 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 49 (multiplicative_expression -> unary_expression .)
    LSHIFT          reduce using rule 49 (multiplicative_expression -> unary_expression .)
    RSHIFT          reduce using rule 49 (multiplicative_expression -> unary_expression .)
    GREATER         reduce using rule 49 (multiplicative_expression -> unary_expression .)
    LESS            reduce using rule 49 (multiplicative_expression -> unary_expression .)
    GEQ             reduce using rule 49 (multiplicative_expression -> unary_expression .)
    LEQ             reduce using rule 49 (multiplicative_expression -> unary_expression .)
    EQUAL           reduce using rule 49 (multiplicative_expression -> unary_expression .)
    NEQUAL          reduce using rule 49 (multiplicative_expression -> unary_expression .)
    AND_BITWISE     reduce using rule 49 (multiplicative_expression -> unary_expression .)
    XOR             reduce using rule 49 (multiplicative_expression -> unary_expression .)
    OR_BITWISE      reduce using rule 49 (multiplicative_expression -> unary_expression .)
    AND             reduce using rule 49 (multiplicative_expression -> unary_expression .)
    OR              reduce using rule 49 (multiplicative_expression -> unary_expression .)
    KWRD_MATCH      reduce using rule 49 (multiplicative_expression -> unary_expression .)
    STATE_END       reduce using rule 49 (multiplicative_expression -> unary_expression .)
    RPAREN          reduce using rule 49 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 49 (multiplicative_expression -> unary_expression .)
    RBPAREN         reduce using rule 49 (multiplicative_expression -> unary_expression .)
    FUNTYPE         reduce using rule 49 (multiplicative_expression -> unary_expression .)


state 49

    (55) unary_expression -> unary_expression_not_plus_minus .

    TIMES           reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    DIVIDE          reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    REMAINDER       reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    PLUS            reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    MINUS           reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    LSHIFT          reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    RSHIFT          reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    GREATER         reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    LESS            reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    GEQ             reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    LEQ             reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    EQUAL           reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    NEQUAL          reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    AND_BITWISE     reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    XOR             reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    OR_BITWISE      reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    AND             reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    OR              reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    KWRD_MATCH      reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    RPAREN          reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    FUNTYPE         reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    STATE_END       reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    COMMA           reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    RBPAREN         reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)


state 50

    (123) normal_statement -> switch_statement .

    KWRD_IF         reduce using rule 123 (normal_statement -> switch_statement .)
    KWRD_WHILE      reduce using rule 123 (normal_statement -> switch_statement .)
    KWRD_DO         reduce using rule 123 (normal_statement -> switch_statement .)
    KWRD_OBJECT     reduce using rule 123 (normal_statement -> switch_statement .)
    BLOCK_BEGIN     reduce using rule 123 (normal_statement -> switch_statement .)
    STATE_END       reduce using rule 123 (normal_statement -> switch_statement .)
    KWRD_RETURN     reduce using rule 123 (normal_statement -> switch_statement .)
    KWRD_PROTECTED  reduce using rule 123 (normal_statement -> switch_statement .)
    KWRD_PRIVATE    reduce using rule 123 (normal_statement -> switch_statement .)
    IDENTIFIER      reduce using rule 123 (normal_statement -> switch_statement .)
    PLUS            reduce using rule 123 (normal_statement -> switch_statement .)
    MINUS           reduce using rule 123 (normal_statement -> switch_statement .)
    TILDA           reduce using rule 123 (normal_statement -> switch_statement .)
    NOT             reduce using rule 123 (normal_statement -> switch_statement .)
    LPAREN          reduce using rule 123 (normal_statement -> switch_statement .)
    CHARACTER       reduce using rule 123 (normal_statement -> switch_statement .)
    STRING_CONST    reduce using rule 123 (normal_statement -> switch_statement .)
    BOOL_CONSTT     reduce using rule 123 (normal_statement -> switch_statement .)
    BOOL_CONSTF     reduce using rule 123 (normal_statement -> switch_statement .)
    KWRD_NULL       reduce using rule 123 (normal_statement -> switch_statement .)
    FLOAT_CONST     reduce using rule 123 (normal_statement -> switch_statement .)
    INT_CONST       reduce using rule 123 (normal_statement -> switch_statement .)
    KWRD_DEF        reduce using rule 123 (normal_statement -> switch_statement .)
    KWRD_CLASS      reduce using rule 123 (normal_statement -> switch_statement .)
    KWRD_VAR        reduce using rule 123 (normal_statement -> switch_statement .)
    KWRD_VAL        reduce using rule 123 (normal_statement -> switch_statement .)
    BLOCK_END       reduce using rule 123 (normal_statement -> switch_statement .)
    KWRD_CASE       reduce using rule 123 (normal_statement -> switch_statement .)
    KWRD_ELSE       reduce using rule 123 (normal_statement -> switch_statement .)


state 51

    (13) assignment -> valid_variable . assignment_operator assignment_expression
    (85) variable_literal -> valid_variable .
    (14) assignment_operator -> . ASSIGN
    (15) assignment_operator -> . TIMES_ASSIGN
    (16) assignment_operator -> . DIVIDE_ASSIGN
    (17) assignment_operator -> . REMAINDER_ASSIGN
    (18) assignment_operator -> . PLUS_ASSIGN
    (19) assignment_operator -> . MINUS_ASSIGN
    (20) assignment_operator -> . LSHIFT_ASSIGN
    (21) assignment_operator -> . RSHIFT_ASSIGN
    (22) assignment_operator -> . AND_ASSIGN
    (23) assignment_operator -> . OR_ASSIGN
    (24) assignment_operator -> . XOR_ASSIGN

    TIMES           reduce using rule 85 (variable_literal -> valid_variable .)
    DIVIDE          reduce using rule 85 (variable_literal -> valid_variable .)
    REMAINDER       reduce using rule 85 (variable_literal -> valid_variable .)
    PLUS            reduce using rule 85 (variable_literal -> valid_variable .)
    MINUS           reduce using rule 85 (variable_literal -> valid_variable .)
    LSHIFT          reduce using rule 85 (variable_literal -> valid_variable .)
    RSHIFT          reduce using rule 85 (variable_literal -> valid_variable .)
    GREATER         reduce using rule 85 (variable_literal -> valid_variable .)
    LESS            reduce using rule 85 (variable_literal -> valid_variable .)
    GEQ             reduce using rule 85 (variable_literal -> valid_variable .)
    LEQ             reduce using rule 85 (variable_literal -> valid_variable .)
    EQUAL           reduce using rule 85 (variable_literal -> valid_variable .)
    NEQUAL          reduce using rule 85 (variable_literal -> valid_variable .)
    AND_BITWISE     reduce using rule 85 (variable_literal -> valid_variable .)
    XOR             reduce using rule 85 (variable_literal -> valid_variable .)
    OR_BITWISE      reduce using rule 85 (variable_literal -> valid_variable .)
    AND             reduce using rule 85 (variable_literal -> valid_variable .)
    OR              reduce using rule 85 (variable_literal -> valid_variable .)
    COMMA           reduce using rule 85 (variable_literal -> valid_variable .)
    RPAREN          reduce using rule 85 (variable_literal -> valid_variable .)
    FUNTYPE         reduce using rule 85 (variable_literal -> valid_variable .)
    KWRD_MATCH      reduce using rule 85 (variable_literal -> valid_variable .)
    RBPAREN         reduce using rule 85 (variable_literal -> valid_variable .)
    STATE_END       reduce using rule 85 (variable_literal -> valid_variable .)
    ASSIGN          shift and go to state 135
    TIMES_ASSIGN    shift and go to state 125
    DIVIDE_ASSIGN   shift and go to state 132
    REMAINDER_ASSIGN shift and go to state 128
    PLUS_ASSIGN     shift and go to state 134
    MINUS_ASSIGN    shift and go to state 127
    LSHIFT_ASSIGN   shift and go to state 130
    RSHIFT_ASSIGN   shift and go to state 126
    AND_ASSIGN      shift and go to state 131
    OR_ASSIGN       shift and go to state 129
    XOR_ASSIGN      shift and go to state 136

    assignment_operator            shift and go to state 133

state 52

    (43) shift_expression -> additive_expression .
    (47) additive_expression -> additive_expression . PLUS multiplicative_expression
    (48) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 43 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 43 (shift_expression -> additive_expression .)
    GREATER         reduce using rule 43 (shift_expression -> additive_expression .)
    LESS            reduce using rule 43 (shift_expression -> additive_expression .)
    GEQ             reduce using rule 43 (shift_expression -> additive_expression .)
    LEQ             reduce using rule 43 (shift_expression -> additive_expression .)
    EQUAL           reduce using rule 43 (shift_expression -> additive_expression .)
    NEQUAL          reduce using rule 43 (shift_expression -> additive_expression .)
    AND_BITWISE     reduce using rule 43 (shift_expression -> additive_expression .)
    XOR             reduce using rule 43 (shift_expression -> additive_expression .)
    OR_BITWISE      reduce using rule 43 (shift_expression -> additive_expression .)
    AND             reduce using rule 43 (shift_expression -> additive_expression .)
    OR              reduce using rule 43 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 43 (shift_expression -> additive_expression .)
    KWRD_MATCH      reduce using rule 43 (shift_expression -> additive_expression .)
    STATE_END       reduce using rule 43 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 43 (shift_expression -> additive_expression .)
    RBPAREN         reduce using rule 43 (shift_expression -> additive_expression .)
    FUNTYPE         reduce using rule 43 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138


state 53

    (12) assignment_expression -> conditional_or_expression .
    (26) conditional_or_expression -> conditional_or_expression . OR conditional_and_expression

    COMMA           reduce using rule 12 (assignment_expression -> conditional_or_expression .)
    RPAREN          reduce using rule 12 (assignment_expression -> conditional_or_expression .)
    KWRD_MATCH      reduce using rule 12 (assignment_expression -> conditional_or_expression .)
    STATE_END       reduce using rule 12 (assignment_expression -> conditional_or_expression .)
    RBPAREN         reduce using rule 12 (assignment_expression -> conditional_or_expression .)
    FUNTYPE         reduce using rule 12 (assignment_expression -> conditional_or_expression .)
    OR              shift and go to state 139


state 54

    (118) statement -> do_while_statement .

    KWRD_IF         reduce using rule 118 (statement -> do_while_statement .)
    KWRD_WHILE      reduce using rule 118 (statement -> do_while_statement .)
    KWRD_DO         reduce using rule 118 (statement -> do_while_statement .)
    KWRD_OBJECT     reduce using rule 118 (statement -> do_while_statement .)
    BLOCK_BEGIN     reduce using rule 118 (statement -> do_while_statement .)
    STATE_END       reduce using rule 118 (statement -> do_while_statement .)
    KWRD_RETURN     reduce using rule 118 (statement -> do_while_statement .)
    KWRD_PROTECTED  reduce using rule 118 (statement -> do_while_statement .)
    KWRD_PRIVATE    reduce using rule 118 (statement -> do_while_statement .)
    IDENTIFIER      reduce using rule 118 (statement -> do_while_statement .)
    PLUS            reduce using rule 118 (statement -> do_while_statement .)
    MINUS           reduce using rule 118 (statement -> do_while_statement .)
    TILDA           reduce using rule 118 (statement -> do_while_statement .)
    NOT             reduce using rule 118 (statement -> do_while_statement .)
    LPAREN          reduce using rule 118 (statement -> do_while_statement .)
    CHARACTER       reduce using rule 118 (statement -> do_while_statement .)
    STRING_CONST    reduce using rule 118 (statement -> do_while_statement .)
    BOOL_CONSTT     reduce using rule 118 (statement -> do_while_statement .)
    BOOL_CONSTF     reduce using rule 118 (statement -> do_while_statement .)
    KWRD_NULL       reduce using rule 118 (statement -> do_while_statement .)
    FLOAT_CONST     reduce using rule 118 (statement -> do_while_statement .)
    INT_CONST       reduce using rule 118 (statement -> do_while_statement .)
    KWRD_DEF        reduce using rule 118 (statement -> do_while_statement .)
    KWRD_CLASS      reduce using rule 118 (statement -> do_while_statement .)
    KWRD_VAR        reduce using rule 118 (statement -> do_while_statement .)
    KWRD_VAL        reduce using rule 118 (statement -> do_while_statement .)
    BLOCK_END       reduce using rule 118 (statement -> do_while_statement .)
    KWRD_CASE       reduce using rule 118 (statement -> do_while_statement .)


state 55

    (46) additive_expression -> multiplicative_expression .
    (50) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (51) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (52) multiplicative_expression -> multiplicative_expression . REMAINDER unary_expression

    PLUS            reduce using rule 46 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 46 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 46 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 46 (additive_expression -> multiplicative_expression .)
    GREATER         reduce using rule 46 (additive_expression -> multiplicative_expression .)
    LESS            reduce using rule 46 (additive_expression -> multiplicative_expression .)
    GEQ             reduce using rule 46 (additive_expression -> multiplicative_expression .)
    LEQ             reduce using rule 46 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 46 (additive_expression -> multiplicative_expression .)
    NEQUAL          reduce using rule 46 (additive_expression -> multiplicative_expression .)
    AND_BITWISE     reduce using rule 46 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 46 (additive_expression -> multiplicative_expression .)
    OR_BITWISE      reduce using rule 46 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 46 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 46 (additive_expression -> multiplicative_expression .)
    KWRD_MATCH      reduce using rule 46 (additive_expression -> multiplicative_expression .)
    STATE_END       reduce using rule 46 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 46 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 46 (additive_expression -> multiplicative_expression .)
    RBPAREN         reduce using rule 46 (additive_expression -> multiplicative_expression .)
    FUNTYPE         reduce using rule 46 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 142
    DIVIDE          shift and go to state 141
    REMAINDER       shift and go to state 140


state 56

    (38) relational_expression -> shift_expression .
    (44) shift_expression -> shift_expression . LSHIFT additive_expression
    (45) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 38 (relational_expression -> shift_expression .)
    LESS            reduce using rule 38 (relational_expression -> shift_expression .)
    GEQ             reduce using rule 38 (relational_expression -> shift_expression .)
    LEQ             reduce using rule 38 (relational_expression -> shift_expression .)
    EQUAL           reduce using rule 38 (relational_expression -> shift_expression .)
    NEQUAL          reduce using rule 38 (relational_expression -> shift_expression .)
    AND_BITWISE     reduce using rule 38 (relational_expression -> shift_expression .)
    XOR             reduce using rule 38 (relational_expression -> shift_expression .)
    OR_BITWISE      reduce using rule 38 (relational_expression -> shift_expression .)
    AND             reduce using rule 38 (relational_expression -> shift_expression .)
    OR              reduce using rule 38 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 38 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 38 (relational_expression -> shift_expression .)
    KWRD_MATCH      reduce using rule 38 (relational_expression -> shift_expression .)
    STATE_END       reduce using rule 38 (relational_expression -> shift_expression .)
    RBPAREN         reduce using rule 38 (relational_expression -> shift_expression .)
    FUNTYPE         reduce using rule 38 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 144
    RSHIFT          shift and go to state 143


state 57

    (127) if_then_statement -> KWRD_IF . LPAREN expression RPAREN statement
    (128) if_then_else_statement -> KWRD_IF . LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement

    LPAREN          shift and go to state 145


state 58

    (60) base_variable_set -> variable_literal .

    TIMES           reduce using rule 60 (base_variable_set -> variable_literal .)
    DIVIDE          reduce using rule 60 (base_variable_set -> variable_literal .)
    REMAINDER       reduce using rule 60 (base_variable_set -> variable_literal .)
    PLUS            reduce using rule 60 (base_variable_set -> variable_literal .)
    MINUS           reduce using rule 60 (base_variable_set -> variable_literal .)
    LSHIFT          reduce using rule 60 (base_variable_set -> variable_literal .)
    RSHIFT          reduce using rule 60 (base_variable_set -> variable_literal .)
    GREATER         reduce using rule 60 (base_variable_set -> variable_literal .)
    LESS            reduce using rule 60 (base_variable_set -> variable_literal .)
    GEQ             reduce using rule 60 (base_variable_set -> variable_literal .)
    LEQ             reduce using rule 60 (base_variable_set -> variable_literal .)
    EQUAL           reduce using rule 60 (base_variable_set -> variable_literal .)
    NEQUAL          reduce using rule 60 (base_variable_set -> variable_literal .)
    AND_BITWISE     reduce using rule 60 (base_variable_set -> variable_literal .)
    XOR             reduce using rule 60 (base_variable_set -> variable_literal .)
    OR_BITWISE      reduce using rule 60 (base_variable_set -> variable_literal .)
    AND             reduce using rule 60 (base_variable_set -> variable_literal .)
    OR              reduce using rule 60 (base_variable_set -> variable_literal .)
    KWRD_MATCH      reduce using rule 60 (base_variable_set -> variable_literal .)
    STATE_END       reduce using rule 60 (base_variable_set -> variable_literal .)
    RPAREN          reduce using rule 60 (base_variable_set -> variable_literal .)
    COMMA           reduce using rule 60 (base_variable_set -> variable_literal .)
    RBPAREN         reduce using rule 60 (base_variable_set -> variable_literal .)
    FUNTYPE         reduce using rule 60 (base_variable_set -> variable_literal .)


state 59

    (25) conditional_or_expression -> conditional_and_expression .
    (28) conditional_and_expression -> conditional_and_expression . AND inclusive_or_expression

    OR              reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    FUNTYPE         reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    COMMA           reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    RPAREN          reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    KWRD_MATCH      reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    STATE_END       reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    RBPAREN         reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    AND             shift and go to state 146


state 60

    (58) unary_expression_not_plus_minus -> NOT . unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    qualified_name                 shift and go to state 78
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    unary_expression               shift and go to state 147
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 107
    array_access                   shift and go to state 29
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    literal                        shift and go to state 71
    method_invocation              shift and go to state 108
    cast_expression                shift and go to state 79
    simple_name                    shift and go to state 68
    name                           shift and go to state 109

state 61

    (134) switch_statement -> expression . KWRD_MATCH switch_block

    KWRD_MATCH      shift and go to state 148


state 62

    (119) normal_statement -> block .

    KWRD_IF         reduce using rule 119 (normal_statement -> block .)
    KWRD_WHILE      reduce using rule 119 (normal_statement -> block .)
    KWRD_DO         reduce using rule 119 (normal_statement -> block .)
    KWRD_OBJECT     reduce using rule 119 (normal_statement -> block .)
    BLOCK_BEGIN     reduce using rule 119 (normal_statement -> block .)
    STATE_END       reduce using rule 119 (normal_statement -> block .)
    KWRD_RETURN     reduce using rule 119 (normal_statement -> block .)
    KWRD_PROTECTED  reduce using rule 119 (normal_statement -> block .)
    KWRD_PRIVATE    reduce using rule 119 (normal_statement -> block .)
    IDENTIFIER      reduce using rule 119 (normal_statement -> block .)
    PLUS            reduce using rule 119 (normal_statement -> block .)
    MINUS           reduce using rule 119 (normal_statement -> block .)
    TILDA           reduce using rule 119 (normal_statement -> block .)
    NOT             reduce using rule 119 (normal_statement -> block .)
    LPAREN          reduce using rule 119 (normal_statement -> block .)
    CHARACTER       reduce using rule 119 (normal_statement -> block .)
    STRING_CONST    reduce using rule 119 (normal_statement -> block .)
    BOOL_CONSTT     reduce using rule 119 (normal_statement -> block .)
    BOOL_CONSTF     reduce using rule 119 (normal_statement -> block .)
    KWRD_NULL       reduce using rule 119 (normal_statement -> block .)
    FLOAT_CONST     reduce using rule 119 (normal_statement -> block .)
    INT_CONST       reduce using rule 119 (normal_statement -> block .)
    KWRD_DEF        reduce using rule 119 (normal_statement -> block .)
    KWRD_CLASS      reduce using rule 119 (normal_statement -> block .)
    KWRD_VAR        reduce using rule 119 (normal_statement -> block .)
    KWRD_VAL        reduce using rule 119 (normal_statement -> block .)
    BLOCK_END       reduce using rule 119 (normal_statement -> block .)
    KWRD_CASE       reduce using rule 119 (normal_statement -> block .)
    KWRD_ELSE       reduce using rule 119 (normal_statement -> block .)


state 63

    (116) statement -> if_then_else_statement .

    KWRD_IF         reduce using rule 116 (statement -> if_then_else_statement .)
    KWRD_WHILE      reduce using rule 116 (statement -> if_then_else_statement .)
    KWRD_DO         reduce using rule 116 (statement -> if_then_else_statement .)
    KWRD_OBJECT     reduce using rule 116 (statement -> if_then_else_statement .)
    BLOCK_BEGIN     reduce using rule 116 (statement -> if_then_else_statement .)
    STATE_END       reduce using rule 116 (statement -> if_then_else_statement .)
    KWRD_RETURN     reduce using rule 116 (statement -> if_then_else_statement .)
    KWRD_PROTECTED  reduce using rule 116 (statement -> if_then_else_statement .)
    KWRD_PRIVATE    reduce using rule 116 (statement -> if_then_else_statement .)
    IDENTIFIER      reduce using rule 116 (statement -> if_then_else_statement .)
    PLUS            reduce using rule 116 (statement -> if_then_else_statement .)
    MINUS           reduce using rule 116 (statement -> if_then_else_statement .)
    TILDA           reduce using rule 116 (statement -> if_then_else_statement .)
    NOT             reduce using rule 116 (statement -> if_then_else_statement .)
    LPAREN          reduce using rule 116 (statement -> if_then_else_statement .)
    CHARACTER       reduce using rule 116 (statement -> if_then_else_statement .)
    STRING_CONST    reduce using rule 116 (statement -> if_then_else_statement .)
    BOOL_CONSTT     reduce using rule 116 (statement -> if_then_else_statement .)
    BOOL_CONSTF     reduce using rule 116 (statement -> if_then_else_statement .)
    KWRD_NULL       reduce using rule 116 (statement -> if_then_else_statement .)
    FLOAT_CONST     reduce using rule 116 (statement -> if_then_else_statement .)
    INT_CONST       reduce using rule 116 (statement -> if_then_else_statement .)
    KWRD_DEF        reduce using rule 116 (statement -> if_then_else_statement .)
    KWRD_CLASS      reduce using rule 116 (statement -> if_then_else_statement .)
    KWRD_VAR        reduce using rule 116 (statement -> if_then_else_statement .)
    KWRD_VAL        reduce using rule 116 (statement -> if_then_else_statement .)
    BLOCK_END       reduce using rule 116 (statement -> if_then_else_statement .)
    KWRD_CASE       reduce using rule 116 (statement -> if_then_else_statement .)


state 64

    (96) block_statement -> method_declaration .

    KWRD_IF         reduce using rule 96 (block_statement -> method_declaration .)
    KWRD_WHILE      reduce using rule 96 (block_statement -> method_declaration .)
    KWRD_DO         reduce using rule 96 (block_statement -> method_declaration .)
    KWRD_OBJECT     reduce using rule 96 (block_statement -> method_declaration .)
    BLOCK_BEGIN     reduce using rule 96 (block_statement -> method_declaration .)
    STATE_END       reduce using rule 96 (block_statement -> method_declaration .)
    KWRD_RETURN     reduce using rule 96 (block_statement -> method_declaration .)
    KWRD_PROTECTED  reduce using rule 96 (block_statement -> method_declaration .)
    KWRD_PRIVATE    reduce using rule 96 (block_statement -> method_declaration .)
    IDENTIFIER      reduce using rule 96 (block_statement -> method_declaration .)
    PLUS            reduce using rule 96 (block_statement -> method_declaration .)
    MINUS           reduce using rule 96 (block_statement -> method_declaration .)
    TILDA           reduce using rule 96 (block_statement -> method_declaration .)
    NOT             reduce using rule 96 (block_statement -> method_declaration .)
    LPAREN          reduce using rule 96 (block_statement -> method_declaration .)
    CHARACTER       reduce using rule 96 (block_statement -> method_declaration .)
    STRING_CONST    reduce using rule 96 (block_statement -> method_declaration .)
    BOOL_CONSTT     reduce using rule 96 (block_statement -> method_declaration .)
    BOOL_CONSTF     reduce using rule 96 (block_statement -> method_declaration .)
    KWRD_NULL       reduce using rule 96 (block_statement -> method_declaration .)
    FLOAT_CONST     reduce using rule 96 (block_statement -> method_declaration .)
    INT_CONST       reduce using rule 96 (block_statement -> method_declaration .)
    KWRD_DEF        reduce using rule 96 (block_statement -> method_declaration .)
    KWRD_CLASS      reduce using rule 96 (block_statement -> method_declaration .)
    KWRD_VAR        reduce using rule 96 (block_statement -> method_declaration .)
    KWRD_VAL        reduce using rule 96 (block_statement -> method_declaration .)
    BLOCK_END       reduce using rule 96 (block_statement -> method_declaration .)
    KWRD_CASE       reduce using rule 96 (block_statement -> method_declaration .)


state 65

    (29) inclusive_or_expression -> exclusive_or_expression .
    (32) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR_BITWISE      reduce using rule 29 (inclusive_or_expression -> exclusive_or_expression .)
    AND             reduce using rule 29 (inclusive_or_expression -> exclusive_or_expression .)
    OR              reduce using rule 29 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 29 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 29 (inclusive_or_expression -> exclusive_or_expression .)
    KWRD_MATCH      reduce using rule 29 (inclusive_or_expression -> exclusive_or_expression .)
    STATE_END       reduce using rule 29 (inclusive_or_expression -> exclusive_or_expression .)
    RBPAREN         reduce using rule 29 (inclusive_or_expression -> exclusive_or_expression .)
    FUNTYPE         reduce using rule 29 (inclusive_or_expression -> exclusive_or_expression .)
    XOR             shift and go to state 149


state 66

    (86) variable_literal -> primary .

    TIMES           reduce using rule 86 (variable_literal -> primary .)
    DIVIDE          reduce using rule 86 (variable_literal -> primary .)
    REMAINDER       reduce using rule 86 (variable_literal -> primary .)
    PLUS            reduce using rule 86 (variable_literal -> primary .)
    MINUS           reduce using rule 86 (variable_literal -> primary .)
    LSHIFT          reduce using rule 86 (variable_literal -> primary .)
    RSHIFT          reduce using rule 86 (variable_literal -> primary .)
    GREATER         reduce using rule 86 (variable_literal -> primary .)
    LESS            reduce using rule 86 (variable_literal -> primary .)
    GEQ             reduce using rule 86 (variable_literal -> primary .)
    LEQ             reduce using rule 86 (variable_literal -> primary .)
    EQUAL           reduce using rule 86 (variable_literal -> primary .)
    NEQUAL          reduce using rule 86 (variable_literal -> primary .)
    AND_BITWISE     reduce using rule 86 (variable_literal -> primary .)
    XOR             reduce using rule 86 (variable_literal -> primary .)
    OR_BITWISE      reduce using rule 86 (variable_literal -> primary .)
    AND             reduce using rule 86 (variable_literal -> primary .)
    OR              reduce using rule 86 (variable_literal -> primary .)
    KWRD_MATCH      reduce using rule 86 (variable_literal -> primary .)
    STATE_END       reduce using rule 86 (variable_literal -> primary .)
    RPAREN          reduce using rule 86 (variable_literal -> primary .)
    COMMA           reduce using rule 86 (variable_literal -> primary .)
    RBPAREN         reduce using rule 86 (variable_literal -> primary .)
    FUNTYPE         reduce using rule 86 (variable_literal -> primary .)


state 67

    (115) statement -> if_then_statement .

    KWRD_IF         reduce using rule 115 (statement -> if_then_statement .)
    KWRD_WHILE      reduce using rule 115 (statement -> if_then_statement .)
    KWRD_DO         reduce using rule 115 (statement -> if_then_statement .)
    KWRD_OBJECT     reduce using rule 115 (statement -> if_then_statement .)
    BLOCK_BEGIN     reduce using rule 115 (statement -> if_then_statement .)
    STATE_END       reduce using rule 115 (statement -> if_then_statement .)
    KWRD_RETURN     reduce using rule 115 (statement -> if_then_statement .)
    KWRD_PROTECTED  reduce using rule 115 (statement -> if_then_statement .)
    KWRD_PRIVATE    reduce using rule 115 (statement -> if_then_statement .)
    IDENTIFIER      reduce using rule 115 (statement -> if_then_statement .)
    PLUS            reduce using rule 115 (statement -> if_then_statement .)
    MINUS           reduce using rule 115 (statement -> if_then_statement .)
    TILDA           reduce using rule 115 (statement -> if_then_statement .)
    NOT             reduce using rule 115 (statement -> if_then_statement .)
    LPAREN          reduce using rule 115 (statement -> if_then_statement .)
    CHARACTER       reduce using rule 115 (statement -> if_then_statement .)
    STRING_CONST    reduce using rule 115 (statement -> if_then_statement .)
    BOOL_CONSTT     reduce using rule 115 (statement -> if_then_statement .)
    BOOL_CONSTF     reduce using rule 115 (statement -> if_then_statement .)
    KWRD_NULL       reduce using rule 115 (statement -> if_then_statement .)
    FLOAT_CONST     reduce using rule 115 (statement -> if_then_statement .)
    INT_CONST       reduce using rule 115 (statement -> if_then_statement .)
    KWRD_DEF        reduce using rule 115 (statement -> if_then_statement .)
    KWRD_CLASS      reduce using rule 115 (statement -> if_then_statement .)
    KWRD_VAR        reduce using rule 115 (statement -> if_then_statement .)
    KWRD_VAL        reduce using rule 115 (statement -> if_then_statement .)
    BLOCK_END       reduce using rule 115 (statement -> if_then_statement .)
    KWRD_CASE       reduce using rule 115 (statement -> if_then_statement .)


state 68

    (79) name -> simple_name .

    LBPAREN         reduce using rule 79 (name -> simple_name .)
    LPAREN          reduce using rule 79 (name -> simple_name .)
    DOT             reduce using rule 79 (name -> simple_name .)
    TIMES           reduce using rule 79 (name -> simple_name .)
    DIVIDE          reduce using rule 79 (name -> simple_name .)
    REMAINDER       reduce using rule 79 (name -> simple_name .)
    PLUS            reduce using rule 79 (name -> simple_name .)
    MINUS           reduce using rule 79 (name -> simple_name .)
    LSHIFT          reduce using rule 79 (name -> simple_name .)
    RSHIFT          reduce using rule 79 (name -> simple_name .)
    GREATER         reduce using rule 79 (name -> simple_name .)
    LESS            reduce using rule 79 (name -> simple_name .)
    GEQ             reduce using rule 79 (name -> simple_name .)
    LEQ             reduce using rule 79 (name -> simple_name .)
    EQUAL           reduce using rule 79 (name -> simple_name .)
    NEQUAL          reduce using rule 79 (name -> simple_name .)
    AND_BITWISE     reduce using rule 79 (name -> simple_name .)
    XOR             reduce using rule 79 (name -> simple_name .)
    OR_BITWISE      reduce using rule 79 (name -> simple_name .)
    AND             reduce using rule 79 (name -> simple_name .)
    OR              reduce using rule 79 (name -> simple_name .)
    KWRD_MATCH      reduce using rule 79 (name -> simple_name .)
    STATE_END       reduce using rule 79 (name -> simple_name .)
    RPAREN          reduce using rule 79 (name -> simple_name .)
    COMMA           reduce using rule 79 (name -> simple_name .)
    RBPAREN         reduce using rule 79 (name -> simple_name .)
    FUNTYPE         reduce using rule 79 (name -> simple_name .)
    ASSIGN          reduce using rule 79 (name -> simple_name .)
    TIMES_ASSIGN    reduce using rule 79 (name -> simple_name .)
    DIVIDE_ASSIGN   reduce using rule 79 (name -> simple_name .)
    REMAINDER_ASSIGN reduce using rule 79 (name -> simple_name .)
    PLUS_ASSIGN     reduce using rule 79 (name -> simple_name .)
    MINUS_ASSIGN    reduce using rule 79 (name -> simple_name .)
    LSHIFT_ASSIGN   reduce using rule 79 (name -> simple_name .)
    RSHIFT_ASSIGN   reduce using rule 79 (name -> simple_name .)
    AND_ASSIGN      reduce using rule 79 (name -> simple_name .)
    OR_ASSIGN       reduce using rule 79 (name -> simple_name .)
    XOR_ASSIGN      reduce using rule 79 (name -> simple_name .)


state 69

    (72) int_float -> INT_CONST .

    TIMES           reduce using rule 72 (int_float -> INT_CONST .)
    DIVIDE          reduce using rule 72 (int_float -> INT_CONST .)
    REMAINDER       reduce using rule 72 (int_float -> INT_CONST .)
    PLUS            reduce using rule 72 (int_float -> INT_CONST .)
    MINUS           reduce using rule 72 (int_float -> INT_CONST .)
    LSHIFT          reduce using rule 72 (int_float -> INT_CONST .)
    RSHIFT          reduce using rule 72 (int_float -> INT_CONST .)
    GREATER         reduce using rule 72 (int_float -> INT_CONST .)
    LESS            reduce using rule 72 (int_float -> INT_CONST .)
    GEQ             reduce using rule 72 (int_float -> INT_CONST .)
    LEQ             reduce using rule 72 (int_float -> INT_CONST .)
    EQUAL           reduce using rule 72 (int_float -> INT_CONST .)
    NEQUAL          reduce using rule 72 (int_float -> INT_CONST .)
    AND_BITWISE     reduce using rule 72 (int_float -> INT_CONST .)
    XOR             reduce using rule 72 (int_float -> INT_CONST .)
    OR_BITWISE      reduce using rule 72 (int_float -> INT_CONST .)
    AND             reduce using rule 72 (int_float -> INT_CONST .)
    OR              reduce using rule 72 (int_float -> INT_CONST .)
    FUNTYPE         reduce using rule 72 (int_float -> INT_CONST .)
    KWRD_MATCH      reduce using rule 72 (int_float -> INT_CONST .)
    STATE_END       reduce using rule 72 (int_float -> INT_CONST .)
    RPAREN          reduce using rule 72 (int_float -> INT_CONST .)
    COMMA           reduce using rule 72 (int_float -> INT_CONST .)
    RBPAREN         reduce using rule 72 (int_float -> INT_CONST .)


state 70

    (90) block_statements -> block_statement .

    KWRD_IF         reduce using rule 90 (block_statements -> block_statement .)
    KWRD_WHILE      reduce using rule 90 (block_statements -> block_statement .)
    KWRD_DO         reduce using rule 90 (block_statements -> block_statement .)
    KWRD_OBJECT     reduce using rule 90 (block_statements -> block_statement .)
    BLOCK_BEGIN     reduce using rule 90 (block_statements -> block_statement .)
    STATE_END       reduce using rule 90 (block_statements -> block_statement .)
    KWRD_RETURN     reduce using rule 90 (block_statements -> block_statement .)
    KWRD_PROTECTED  reduce using rule 90 (block_statements -> block_statement .)
    KWRD_PRIVATE    reduce using rule 90 (block_statements -> block_statement .)
    IDENTIFIER      reduce using rule 90 (block_statements -> block_statement .)
    PLUS            reduce using rule 90 (block_statements -> block_statement .)
    MINUS           reduce using rule 90 (block_statements -> block_statement .)
    TILDA           reduce using rule 90 (block_statements -> block_statement .)
    NOT             reduce using rule 90 (block_statements -> block_statement .)
    LPAREN          reduce using rule 90 (block_statements -> block_statement .)
    CHARACTER       reduce using rule 90 (block_statements -> block_statement .)
    STRING_CONST    reduce using rule 90 (block_statements -> block_statement .)
    BOOL_CONSTT     reduce using rule 90 (block_statements -> block_statement .)
    BOOL_CONSTF     reduce using rule 90 (block_statements -> block_statement .)
    KWRD_NULL       reduce using rule 90 (block_statements -> block_statement .)
    FLOAT_CONST     reduce using rule 90 (block_statements -> block_statement .)
    INT_CONST       reduce using rule 90 (block_statements -> block_statement .)
    KWRD_DEF        reduce using rule 90 (block_statements -> block_statement .)
    KWRD_CLASS      reduce using rule 90 (block_statements -> block_statement .)
    KWRD_VAR        reduce using rule 90 (block_statements -> block_statement .)
    KWRD_VAL        reduce using rule 90 (block_statements -> block_statement .)
    BLOCK_END       reduce using rule 90 (block_statements -> block_statement .)
    KWRD_CASE       reduce using rule 90 (block_statements -> block_statement .)


state 71

    (63) primary -> literal .

    TIMES           reduce using rule 63 (primary -> literal .)
    DIVIDE          reduce using rule 63 (primary -> literal .)
    REMAINDER       reduce using rule 63 (primary -> literal .)
    PLUS            reduce using rule 63 (primary -> literal .)
    MINUS           reduce using rule 63 (primary -> literal .)
    LSHIFT          reduce using rule 63 (primary -> literal .)
    RSHIFT          reduce using rule 63 (primary -> literal .)
    GREATER         reduce using rule 63 (primary -> literal .)
    LESS            reduce using rule 63 (primary -> literal .)
    GEQ             reduce using rule 63 (primary -> literal .)
    LEQ             reduce using rule 63 (primary -> literal .)
    EQUAL           reduce using rule 63 (primary -> literal .)
    NEQUAL          reduce using rule 63 (primary -> literal .)
    AND_BITWISE     reduce using rule 63 (primary -> literal .)
    XOR             reduce using rule 63 (primary -> literal .)
    OR_BITWISE      reduce using rule 63 (primary -> literal .)
    AND             reduce using rule 63 (primary -> literal .)
    OR              reduce using rule 63 (primary -> literal .)
    KWRD_MATCH      reduce using rule 63 (primary -> literal .)
    STATE_END       reduce using rule 63 (primary -> literal .)
    RPAREN          reduce using rule 63 (primary -> literal .)
    COMMA           reduce using rule 63 (primary -> literal .)
    RBPAREN         reduce using rule 63 (primary -> literal .)
    FUNTYPE         reduce using rule 63 (primary -> literal .)


state 72

    (57) unary_expression_not_plus_minus -> TILDA . unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    qualified_name                 shift and go to state 78
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    unary_expression               shift and go to state 150
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 107
    array_access                   shift and go to state 29
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    literal                        shift and go to state 71
    method_invocation              shift and go to state 108
    cast_expression                shift and go to state 79
    simple_name                    shift and go to state 68
    name                           shift and go to state 109

state 73

    (35) equality_expression -> relational_expression .
    (39) relational_expression -> relational_expression . GREATER shift_expression
    (40) relational_expression -> relational_expression . LESS shift_expression
    (41) relational_expression -> relational_expression . GEQ shift_expression
    (42) relational_expression -> relational_expression . LEQ shift_expression

    EQUAL           reduce using rule 35 (equality_expression -> relational_expression .)
    NEQUAL          reduce using rule 35 (equality_expression -> relational_expression .)
    AND_BITWISE     reduce using rule 35 (equality_expression -> relational_expression .)
    XOR             reduce using rule 35 (equality_expression -> relational_expression .)
    OR_BITWISE      reduce using rule 35 (equality_expression -> relational_expression .)
    AND             reduce using rule 35 (equality_expression -> relational_expression .)
    OR              reduce using rule 35 (equality_expression -> relational_expression .)
    KWRD_MATCH      reduce using rule 35 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 35 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 35 (equality_expression -> relational_expression .)
    STATE_END       reduce using rule 35 (equality_expression -> relational_expression .)
    RBPAREN         reduce using rule 35 (equality_expression -> relational_expression .)
    FUNTYPE         reduce using rule 35 (equality_expression -> relational_expression .)
    GREATER         shift and go to state 152
    LESS            shift and go to state 153
    GEQ             shift and go to state 151
    LEQ             shift and go to state 154


state 74

    (93) block_statement -> statement .

    KWRD_IF         reduce using rule 93 (block_statement -> statement .)
    KWRD_WHILE      reduce using rule 93 (block_statement -> statement .)
    KWRD_DO         reduce using rule 93 (block_statement -> statement .)
    KWRD_OBJECT     reduce using rule 93 (block_statement -> statement .)
    BLOCK_BEGIN     reduce using rule 93 (block_statement -> statement .)
    STATE_END       reduce using rule 93 (block_statement -> statement .)
    KWRD_RETURN     reduce using rule 93 (block_statement -> statement .)
    KWRD_PROTECTED  reduce using rule 93 (block_statement -> statement .)
    KWRD_PRIVATE    reduce using rule 93 (block_statement -> statement .)
    IDENTIFIER      reduce using rule 93 (block_statement -> statement .)
    PLUS            reduce using rule 93 (block_statement -> statement .)
    MINUS           reduce using rule 93 (block_statement -> statement .)
    TILDA           reduce using rule 93 (block_statement -> statement .)
    NOT             reduce using rule 93 (block_statement -> statement .)
    LPAREN          reduce using rule 93 (block_statement -> statement .)
    CHARACTER       reduce using rule 93 (block_statement -> statement .)
    STRING_CONST    reduce using rule 93 (block_statement -> statement .)
    BOOL_CONSTT     reduce using rule 93 (block_statement -> statement .)
    BOOL_CONSTF     reduce using rule 93 (block_statement -> statement .)
    KWRD_NULL       reduce using rule 93 (block_statement -> statement .)
    FLOAT_CONST     reduce using rule 93 (block_statement -> statement .)
    INT_CONST       reduce using rule 93 (block_statement -> statement .)
    KWRD_DEF        reduce using rule 93 (block_statement -> statement .)
    KWRD_CLASS      reduce using rule 93 (block_statement -> statement .)
    KWRD_VAR        reduce using rule 93 (block_statement -> statement .)
    KWRD_VAL        reduce using rule 93 (block_statement -> statement .)
    BLOCK_END       reduce using rule 93 (block_statement -> statement .)
    KWRD_CASE       reduce using rule 93 (block_statement -> statement .)


state 75

    (126) statement_expression -> method_invocation .
    (64) primary -> method_invocation .

    STATE_END       reduce using rule 126 (statement_expression -> method_invocation .)
    TIMES           reduce using rule 64 (primary -> method_invocation .)
    DIVIDE          reduce using rule 64 (primary -> method_invocation .)
    REMAINDER       reduce using rule 64 (primary -> method_invocation .)
    PLUS            reduce using rule 64 (primary -> method_invocation .)
    MINUS           reduce using rule 64 (primary -> method_invocation .)
    LSHIFT          reduce using rule 64 (primary -> method_invocation .)
    RSHIFT          reduce using rule 64 (primary -> method_invocation .)
    GREATER         reduce using rule 64 (primary -> method_invocation .)
    LESS            reduce using rule 64 (primary -> method_invocation .)
    GEQ             reduce using rule 64 (primary -> method_invocation .)
    LEQ             reduce using rule 64 (primary -> method_invocation .)
    EQUAL           reduce using rule 64 (primary -> method_invocation .)
    NEQUAL          reduce using rule 64 (primary -> method_invocation .)
    AND_BITWISE     reduce using rule 64 (primary -> method_invocation .)
    XOR             reduce using rule 64 (primary -> method_invocation .)
    OR_BITWISE      reduce using rule 64 (primary -> method_invocation .)
    AND             reduce using rule 64 (primary -> method_invocation .)
    OR              reduce using rule 64 (primary -> method_invocation .)
    KWRD_MATCH      reduce using rule 64 (primary -> method_invocation .)


state 76

    (81) simple_name -> IDENTIFIER .

    LBPAREN         reduce using rule 81 (simple_name -> IDENTIFIER .)
    LPAREN          reduce using rule 81 (simple_name -> IDENTIFIER .)
    DOT             reduce using rule 81 (simple_name -> IDENTIFIER .)
    TIMES           reduce using rule 81 (simple_name -> IDENTIFIER .)
    DIVIDE          reduce using rule 81 (simple_name -> IDENTIFIER .)
    REMAINDER       reduce using rule 81 (simple_name -> IDENTIFIER .)
    PLUS            reduce using rule 81 (simple_name -> IDENTIFIER .)
    MINUS           reduce using rule 81 (simple_name -> IDENTIFIER .)
    LSHIFT          reduce using rule 81 (simple_name -> IDENTIFIER .)
    RSHIFT          reduce using rule 81 (simple_name -> IDENTIFIER .)
    GREATER         reduce using rule 81 (simple_name -> IDENTIFIER .)
    LESS            reduce using rule 81 (simple_name -> IDENTIFIER .)
    GEQ             reduce using rule 81 (simple_name -> IDENTIFIER .)
    LEQ             reduce using rule 81 (simple_name -> IDENTIFIER .)
    EQUAL           reduce using rule 81 (simple_name -> IDENTIFIER .)
    NEQUAL          reduce using rule 81 (simple_name -> IDENTIFIER .)
    AND_BITWISE     reduce using rule 81 (simple_name -> IDENTIFIER .)
    XOR             reduce using rule 81 (simple_name -> IDENTIFIER .)
    OR_BITWISE      reduce using rule 81 (simple_name -> IDENTIFIER .)
    AND             reduce using rule 81 (simple_name -> IDENTIFIER .)
    OR              reduce using rule 81 (simple_name -> IDENTIFIER .)
    KWRD_MATCH      reduce using rule 81 (simple_name -> IDENTIFIER .)
    STATE_END       reduce using rule 81 (simple_name -> IDENTIFIER .)
    RPAREN          reduce using rule 81 (simple_name -> IDENTIFIER .)
    COMMA           reduce using rule 81 (simple_name -> IDENTIFIER .)
    RBPAREN         reduce using rule 81 (simple_name -> IDENTIFIER .)
    FUNTYPE         reduce using rule 81 (simple_name -> IDENTIFIER .)
    ASSIGN          reduce using rule 81 (simple_name -> IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 81 (simple_name -> IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 81 (simple_name -> IDENTIFIER .)
    REMAINDER_ASSIGN reduce using rule 81 (simple_name -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 81 (simple_name -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 81 (simple_name -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 81 (simple_name -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 81 (simple_name -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 81 (simple_name -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 81 (simple_name -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 81 (simple_name -> IDENTIFIER .)


state 77

    (89) block_statements_opt -> empty .
    (98) modifier_opts -> empty .

    BLOCK_END       reduce using rule 89 (block_statements_opt -> empty .)
    KWRD_DEF        reduce using rule 98 (modifier_opts -> empty .)
    KWRD_CLASS      reduce using rule 98 (modifier_opts -> empty .)
    KWRD_VAR        reduce using rule 98 (modifier_opts -> empty .)
    KWRD_VAL        reduce using rule 98 (modifier_opts -> empty .)


state 78

    (80) name -> qualified_name .

    LBPAREN         reduce using rule 80 (name -> qualified_name .)
    LPAREN          reduce using rule 80 (name -> qualified_name .)
    DOT             reduce using rule 80 (name -> qualified_name .)
    TIMES           reduce using rule 80 (name -> qualified_name .)
    DIVIDE          reduce using rule 80 (name -> qualified_name .)
    REMAINDER       reduce using rule 80 (name -> qualified_name .)
    PLUS            reduce using rule 80 (name -> qualified_name .)
    MINUS           reduce using rule 80 (name -> qualified_name .)
    LSHIFT          reduce using rule 80 (name -> qualified_name .)
    RSHIFT          reduce using rule 80 (name -> qualified_name .)
    GREATER         reduce using rule 80 (name -> qualified_name .)
    LESS            reduce using rule 80 (name -> qualified_name .)
    GEQ             reduce using rule 80 (name -> qualified_name .)
    LEQ             reduce using rule 80 (name -> qualified_name .)
    EQUAL           reduce using rule 80 (name -> qualified_name .)
    NEQUAL          reduce using rule 80 (name -> qualified_name .)
    AND_BITWISE     reduce using rule 80 (name -> qualified_name .)
    XOR             reduce using rule 80 (name -> qualified_name .)
    OR_BITWISE      reduce using rule 80 (name -> qualified_name .)
    AND             reduce using rule 80 (name -> qualified_name .)
    OR              reduce using rule 80 (name -> qualified_name .)
    KWRD_MATCH      reduce using rule 80 (name -> qualified_name .)
    STATE_END       reduce using rule 80 (name -> qualified_name .)
    RPAREN          reduce using rule 80 (name -> qualified_name .)
    COMMA           reduce using rule 80 (name -> qualified_name .)
    RBPAREN         reduce using rule 80 (name -> qualified_name .)
    FUNTYPE         reduce using rule 80 (name -> qualified_name .)
    ASSIGN          reduce using rule 80 (name -> qualified_name .)
    TIMES_ASSIGN    reduce using rule 80 (name -> qualified_name .)
    DIVIDE_ASSIGN   reduce using rule 80 (name -> qualified_name .)
    REMAINDER_ASSIGN reduce using rule 80 (name -> qualified_name .)
    PLUS_ASSIGN     reduce using rule 80 (name -> qualified_name .)
    MINUS_ASSIGN    reduce using rule 80 (name -> qualified_name .)
    LSHIFT_ASSIGN   reduce using rule 80 (name -> qualified_name .)
    RSHIFT_ASSIGN   reduce using rule 80 (name -> qualified_name .)
    AND_ASSIGN      reduce using rule 80 (name -> qualified_name .)
    OR_ASSIGN       reduce using rule 80 (name -> qualified_name .)
    XOR_ASSIGN      reduce using rule 80 (name -> qualified_name .)


state 79

    (59) unary_expression_not_plus_minus -> cast_expression .

    TIMES           reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    DIVIDE          reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    REMAINDER       reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    PLUS            reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    MINUS           reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    LSHIFT          reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    RSHIFT          reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    GREATER         reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    LESS            reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    GEQ             reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    LEQ             reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    EQUAL           reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    NEQUAL          reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    AND_BITWISE     reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    XOR             reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    OR_BITWISE      reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    AND             reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    OR              reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    KWRD_MATCH      reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    STATE_END       reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    RPAREN          reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    COMMA           reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    RBPAREN         reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)
    FUNTYPE         reduce using rule 59 (unary_expression_not_plus_minus -> cast_expression .)


state 80

    (33) and_expression -> equality_expression .
    (36) equality_expression -> equality_expression . EQUAL relational_expression
    (37) equality_expression -> equality_expression . NEQUAL relational_expression

    AND_BITWISE     reduce using rule 33 (and_expression -> equality_expression .)
    XOR             reduce using rule 33 (and_expression -> equality_expression .)
    OR_BITWISE      reduce using rule 33 (and_expression -> equality_expression .)
    AND             reduce using rule 33 (and_expression -> equality_expression .)
    OR              reduce using rule 33 (and_expression -> equality_expression .)
    KWRD_MATCH      reduce using rule 33 (and_expression -> equality_expression .)
    STATE_END       reduce using rule 33 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 33 (and_expression -> equality_expression .)
    COMMA           reduce using rule 33 (and_expression -> equality_expression .)
    RBPAREN         reduce using rule 33 (and_expression -> equality_expression .)
    FUNTYPE         reduce using rule 33 (and_expression -> equality_expression .)
    EQUAL           shift and go to state 156
    NEQUAL          shift and go to state 155


state 81

    (162) method_declaration -> method_header . method_body
    (167) method_body -> . block
    (87) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 15

    method_body                    shift and go to state 157
    block                          shift and go to state 158

state 82

    (121) normal_statement -> empty_statement .

    KWRD_IF         reduce using rule 121 (normal_statement -> empty_statement .)
    KWRD_WHILE      reduce using rule 121 (normal_statement -> empty_statement .)
    KWRD_DO         reduce using rule 121 (normal_statement -> empty_statement .)
    KWRD_OBJECT     reduce using rule 121 (normal_statement -> empty_statement .)
    BLOCK_BEGIN     reduce using rule 121 (normal_statement -> empty_statement .)
    STATE_END       reduce using rule 121 (normal_statement -> empty_statement .)
    KWRD_RETURN     reduce using rule 121 (normal_statement -> empty_statement .)
    KWRD_PROTECTED  reduce using rule 121 (normal_statement -> empty_statement .)
    KWRD_PRIVATE    reduce using rule 121 (normal_statement -> empty_statement .)
    IDENTIFIER      reduce using rule 121 (normal_statement -> empty_statement .)
    PLUS            reduce using rule 121 (normal_statement -> empty_statement .)
    MINUS           reduce using rule 121 (normal_statement -> empty_statement .)
    TILDA           reduce using rule 121 (normal_statement -> empty_statement .)
    NOT             reduce using rule 121 (normal_statement -> empty_statement .)
    LPAREN          reduce using rule 121 (normal_statement -> empty_statement .)
    CHARACTER       reduce using rule 121 (normal_statement -> empty_statement .)
    STRING_CONST    reduce using rule 121 (normal_statement -> empty_statement .)
    BOOL_CONSTT     reduce using rule 121 (normal_statement -> empty_statement .)
    BOOL_CONSTF     reduce using rule 121 (normal_statement -> empty_statement .)
    KWRD_NULL       reduce using rule 121 (normal_statement -> empty_statement .)
    FLOAT_CONST     reduce using rule 121 (normal_statement -> empty_statement .)
    INT_CONST       reduce using rule 121 (normal_statement -> empty_statement .)
    KWRD_DEF        reduce using rule 121 (normal_statement -> empty_statement .)
    KWRD_CLASS      reduce using rule 121 (normal_statement -> empty_statement .)
    KWRD_VAR        reduce using rule 121 (normal_statement -> empty_statement .)
    KWRD_VAL        reduce using rule 121 (normal_statement -> empty_statement .)
    BLOCK_END       reduce using rule 121 (normal_statement -> empty_statement .)
    KWRD_CASE       reduce using rule 121 (normal_statement -> empty_statement .)
    KWRD_ELSE       reduce using rule 121 (normal_statement -> empty_statement .)


state 83

    (101) local_variable_declaration_statement -> local_variable_declaration . STATE_END

    STATE_END       shift and go to state 159


state 84

    (114) statement -> normal_statement .

    KWRD_IF         reduce using rule 114 (statement -> normal_statement .)
    KWRD_WHILE      reduce using rule 114 (statement -> normal_statement .)
    KWRD_DO         reduce using rule 114 (statement -> normal_statement .)
    KWRD_OBJECT     reduce using rule 114 (statement -> normal_statement .)
    BLOCK_BEGIN     reduce using rule 114 (statement -> normal_statement .)
    STATE_END       reduce using rule 114 (statement -> normal_statement .)
    KWRD_RETURN     reduce using rule 114 (statement -> normal_statement .)
    KWRD_PROTECTED  reduce using rule 114 (statement -> normal_statement .)
    KWRD_PRIVATE    reduce using rule 114 (statement -> normal_statement .)
    IDENTIFIER      reduce using rule 114 (statement -> normal_statement .)
    PLUS            reduce using rule 114 (statement -> normal_statement .)
    MINUS           reduce using rule 114 (statement -> normal_statement .)
    TILDA           reduce using rule 114 (statement -> normal_statement .)
    NOT             reduce using rule 114 (statement -> normal_statement .)
    LPAREN          reduce using rule 114 (statement -> normal_statement .)
    CHARACTER       reduce using rule 114 (statement -> normal_statement .)
    STRING_CONST    reduce using rule 114 (statement -> normal_statement .)
    BOOL_CONSTT     reduce using rule 114 (statement -> normal_statement .)
    BOOL_CONSTF     reduce using rule 114 (statement -> normal_statement .)
    KWRD_NULL       reduce using rule 114 (statement -> normal_statement .)
    FLOAT_CONST     reduce using rule 114 (statement -> normal_statement .)
    INT_CONST       reduce using rule 114 (statement -> normal_statement .)
    KWRD_DEF        reduce using rule 114 (statement -> normal_statement .)
    KWRD_CLASS      reduce using rule 114 (statement -> normal_statement .)
    KWRD_VAR        reduce using rule 114 (statement -> normal_statement .)
    KWRD_VAL        reduce using rule 114 (statement -> normal_statement .)
    BLOCK_END       reduce using rule 114 (statement -> normal_statement .)
    KWRD_CASE       reduce using rule 114 (statement -> normal_statement .)


state 85

    (66) literal -> CHARACTER .

    TIMES           reduce using rule 66 (literal -> CHARACTER .)
    DIVIDE          reduce using rule 66 (literal -> CHARACTER .)
    REMAINDER       reduce using rule 66 (literal -> CHARACTER .)
    PLUS            reduce using rule 66 (literal -> CHARACTER .)
    MINUS           reduce using rule 66 (literal -> CHARACTER .)
    LSHIFT          reduce using rule 66 (literal -> CHARACTER .)
    RSHIFT          reduce using rule 66 (literal -> CHARACTER .)
    GREATER         reduce using rule 66 (literal -> CHARACTER .)
    LESS            reduce using rule 66 (literal -> CHARACTER .)
    GEQ             reduce using rule 66 (literal -> CHARACTER .)
    LEQ             reduce using rule 66 (literal -> CHARACTER .)
    EQUAL           reduce using rule 66 (literal -> CHARACTER .)
    NEQUAL          reduce using rule 66 (literal -> CHARACTER .)
    AND_BITWISE     reduce using rule 66 (literal -> CHARACTER .)
    XOR             reduce using rule 66 (literal -> CHARACTER .)
    OR_BITWISE      reduce using rule 66 (literal -> CHARACTER .)
    AND             reduce using rule 66 (literal -> CHARACTER .)
    OR              reduce using rule 66 (literal -> CHARACTER .)
    COMMA           reduce using rule 66 (literal -> CHARACTER .)
    RPAREN          reduce using rule 66 (literal -> CHARACTER .)
    KWRD_MATCH      reduce using rule 66 (literal -> CHARACTER .)
    STATE_END       reduce using rule 66 (literal -> CHARACTER .)
    RBPAREN         reduce using rule 66 (literal -> CHARACTER .)
    FUNTYPE         reduce using rule 66 (literal -> CHARACTER .)


state 86

    (31) exclusive_or_expression -> and_expression .
    (34) and_expression -> and_expression . AND_BITWISE equality_expression

    XOR             reduce using rule 31 (exclusive_or_expression -> and_expression .)
    OR_BITWISE      reduce using rule 31 (exclusive_or_expression -> and_expression .)
    AND             reduce using rule 31 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 31 (exclusive_or_expression -> and_expression .)
    KWRD_MATCH      reduce using rule 31 (exclusive_or_expression -> and_expression .)
    STATE_END       reduce using rule 31 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 31 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 31 (exclusive_or_expression -> and_expression .)
    RBPAREN         reduce using rule 31 (exclusive_or_expression -> and_expression .)
    FUNTYPE         reduce using rule 31 (exclusive_or_expression -> and_expression .)
    AND_BITWISE     shift and go to state 160


state 87

    (56) unary_expression_not_plus_minus -> base_variable_set .

    TIMES           reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    DIVIDE          reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    REMAINDER       reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    PLUS            reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    MINUS           reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    LSHIFT          reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    RSHIFT          reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    GREATER         reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    LESS            reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    GEQ             reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    LEQ             reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    EQUAL           reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    NEQUAL          reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    AND_BITWISE     reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    XOR             reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    OR_BITWISE      reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    AND             reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    OR              reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    KWRD_MATCH      reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    STATE_END       reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    RPAREN          reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    COMMA           reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    RBPAREN         reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)
    FUNTYPE         reduce using rule 56 (unary_expression_not_plus_minus -> base_variable_set .)


state 88

    (122) normal_statement -> return_statement .

    KWRD_IF         reduce using rule 122 (normal_statement -> return_statement .)
    KWRD_WHILE      reduce using rule 122 (normal_statement -> return_statement .)
    KWRD_DO         reduce using rule 122 (normal_statement -> return_statement .)
    KWRD_OBJECT     reduce using rule 122 (normal_statement -> return_statement .)
    BLOCK_BEGIN     reduce using rule 122 (normal_statement -> return_statement .)
    STATE_END       reduce using rule 122 (normal_statement -> return_statement .)
    KWRD_RETURN     reduce using rule 122 (normal_statement -> return_statement .)
    KWRD_PROTECTED  reduce using rule 122 (normal_statement -> return_statement .)
    KWRD_PRIVATE    reduce using rule 122 (normal_statement -> return_statement .)
    IDENTIFIER      reduce using rule 122 (normal_statement -> return_statement .)
    PLUS            reduce using rule 122 (normal_statement -> return_statement .)
    MINUS           reduce using rule 122 (normal_statement -> return_statement .)
    TILDA           reduce using rule 122 (normal_statement -> return_statement .)
    NOT             reduce using rule 122 (normal_statement -> return_statement .)
    LPAREN          reduce using rule 122 (normal_statement -> return_statement .)
    CHARACTER       reduce using rule 122 (normal_statement -> return_statement .)
    STRING_CONST    reduce using rule 122 (normal_statement -> return_statement .)
    BOOL_CONSTT     reduce using rule 122 (normal_statement -> return_statement .)
    BOOL_CONSTF     reduce using rule 122 (normal_statement -> return_statement .)
    KWRD_NULL       reduce using rule 122 (normal_statement -> return_statement .)
    FLOAT_CONST     reduce using rule 122 (normal_statement -> return_statement .)
    INT_CONST       reduce using rule 122 (normal_statement -> return_statement .)
    KWRD_DEF        reduce using rule 122 (normal_statement -> return_statement .)
    KWRD_CLASS      reduce using rule 122 (normal_statement -> return_statement .)
    KWRD_VAR        reduce using rule 122 (normal_statement -> return_statement .)
    KWRD_VAL        reduce using rule 122 (normal_statement -> return_statement .)
    BLOCK_END       reduce using rule 122 (normal_statement -> return_statement .)
    KWRD_CASE       reduce using rule 122 (normal_statement -> return_statement .)
    KWRD_ELSE       reduce using rule 122 (normal_statement -> return_statement .)


state 89

    (88) block_statements_opt -> block_statements .
    (91) block_statements -> block_statements . block_statement
    (92) block_statement -> . local_variable_declaration_statement
    (93) block_statement -> . statement
    (94) block_statement -> . class_declaration
    (95) block_statement -> . SingletonObject
    (96) block_statement -> . method_declaration
    (101) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (114) statement -> . normal_statement
    (115) statement -> . if_then_statement
    (116) statement -> . if_then_else_statement
    (117) statement -> . while_statement
    (118) statement -> . do_while_statement
    (154) class_declaration -> . class_header class_body
    (5) SingletonObject -> . ObjectDeclare block
    (162) method_declaration -> . method_header method_body
    (102) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (119) normal_statement -> . block
    (120) normal_statement -> . expression_statement
    (121) normal_statement -> . empty_statement
    (122) normal_statement -> . return_statement
    (123) normal_statement -> . switch_statement
    (127) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (128) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (132) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (133) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (155) class_header -> . class_header_name class_header_extends_opt
    (6) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (7) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (163) method_header -> . method_header_name LPAREN func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (97) modifier_opts -> . modifier
    (98) modifier_opts -> . empty
    (87) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (124) expression_statement -> . statement_expression STATE_END
    (145) empty_statement -> . STATE_END
    (146) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (134) switch_statement -> . expression KWRD_MATCH switch_block
    (156) class_header_name -> . class_header_name1 LPAREN constructor_arguement_list_opt RPAREN
    (166) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (168) modifier -> . KWRD_PROTECTED
    (169) modifier -> . KWRD_PRIVATE
    (185) empty -> .
    (125) statement_expression -> . assignment
    (126) statement_expression -> . method_invocation
    (8) expression -> . assignment_expression
    (157) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (74) array_access -> . name LBPAREN expression RBPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    BLOCK_END       reduce using rule 88 (block_statements_opt -> block_statements .)
    KWRD_IF         shift and go to state 57
    KWRD_WHILE      shift and go to state 46
    KWRD_DO         shift and go to state 41
    KWRD_OBJECT     shift and go to state 4
    BLOCK_BEGIN     shift and go to state 15
    STATE_END       shift and go to state 47
    KWRD_RETURN     shift and go to state 44
    KWRD_PROTECTED  shift and go to state 10
    KWRD_PRIVATE    shift and go to state 14
    KWRD_DEF        reduce using rule 185 (empty -> .)
    KWRD_CLASS      reduce using rule 185 (empty -> .)
    KWRD_VAR        reduce using rule 185 (empty -> .)
    KWRD_VAL        reduce using rule 185 (empty -> .)
    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    expression_statement           shift and go to state 27
    unary_expression               shift and go to state 48
    method_header                  shift and go to state 81
    exclusive_or_expression        shift and go to state 65
    normal_statement               shift and go to state 84
    ObjectDeclare                  shift and go to state 1
    class_header_name1             shift and go to state 2
    unary_expression_not_plus_minus shift and go to state 49
    if_then_statement              shift and go to state 67
    array_access                   shift and go to state 29
    switch_statement               shift and go to state 50
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 64
    cast_expression                shift and go to state 79
    block_statement                shift and go to state 161
    shift_expression               shift and go to state 56
    return_statement               shift and go to state 88
    while_statement                shift and go to state 35
    and_expression                 shift and go to state 86
    statement                      shift and go to state 74
    statement_expression           shift and go to state 38
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 68
    conditional_or_expression      shift and go to state 53
    empty                          shift and go to state 5
    relational_expression          shift and go to state 73
    local_variable_declaration_statement shift and go to state 39
    do_while_statement             shift and go to state 54
    int_float                      shift and go to state 40
    assignment                     shift and go to state 92
    multiplicative_expression      shift and go to state 55
    literal                        shift and go to state 71
    primary                        shift and go to state 66
    additive_expression            shift and go to state 52
    SingletonObject                shift and go to state 42
    method_header_name             shift and go to state 43
    class_header                   shift and go to state 8
    modifier_opts                  shift and go to state 94
    equality_expression            shift and go to state 80
    variable_literal               shift and go to state 58
    name                           shift and go to state 45
    empty_statement                shift and go to state 82
    class_declaration              shift and go to state 95
    local_variable_declaration     shift and go to state 83
    modifier                       shift and go to state 13
    expression                     shift and go to state 61
    conditional_and_expression     shift and go to state 59
    block                          shift and go to state 62
    if_then_else_statement         shift and go to state 63

state 90

    (70) literal -> KWRD_NULL .

    TIMES           reduce using rule 70 (literal -> KWRD_NULL .)
    DIVIDE          reduce using rule 70 (literal -> KWRD_NULL .)
    REMAINDER       reduce using rule 70 (literal -> KWRD_NULL .)
    PLUS            reduce using rule 70 (literal -> KWRD_NULL .)
    MINUS           reduce using rule 70 (literal -> KWRD_NULL .)
    LSHIFT          reduce using rule 70 (literal -> KWRD_NULL .)
    RSHIFT          reduce using rule 70 (literal -> KWRD_NULL .)
    GREATER         reduce using rule 70 (literal -> KWRD_NULL .)
    LESS            reduce using rule 70 (literal -> KWRD_NULL .)
    GEQ             reduce using rule 70 (literal -> KWRD_NULL .)
    LEQ             reduce using rule 70 (literal -> KWRD_NULL .)
    EQUAL           reduce using rule 70 (literal -> KWRD_NULL .)
    NEQUAL          reduce using rule 70 (literal -> KWRD_NULL .)
    AND_BITWISE     reduce using rule 70 (literal -> KWRD_NULL .)
    XOR             reduce using rule 70 (literal -> KWRD_NULL .)
    OR_BITWISE      reduce using rule 70 (literal -> KWRD_NULL .)
    AND             reduce using rule 70 (literal -> KWRD_NULL .)
    OR              reduce using rule 70 (literal -> KWRD_NULL .)
    COMMA           reduce using rule 70 (literal -> KWRD_NULL .)
    RPAREN          reduce using rule 70 (literal -> KWRD_NULL .)
    KWRD_MATCH      reduce using rule 70 (literal -> KWRD_NULL .)
    STATE_END       reduce using rule 70 (literal -> KWRD_NULL .)
    RBPAREN         reduce using rule 70 (literal -> KWRD_NULL .)
    FUNTYPE         reduce using rule 70 (literal -> KWRD_NULL .)


state 91

    (8) expression -> assignment_expression .

    COMMA           reduce using rule 8 (expression -> assignment_expression .)
    RPAREN          reduce using rule 8 (expression -> assignment_expression .)
    STATE_END       reduce using rule 8 (expression -> assignment_expression .)
    KWRD_MATCH      reduce using rule 8 (expression -> assignment_expression .)
    RBPAREN         reduce using rule 8 (expression -> assignment_expression .)
    FUNTYPE         reduce using rule 8 (expression -> assignment_expression .)


state 92

    (125) statement_expression -> assignment .
    (11) assignment_expression -> assignment .

    STATE_END       reduce using rule 125 (statement_expression -> assignment .)
    KWRD_MATCH      reduce using rule 11 (assignment_expression -> assignment .)


state 93

    (61) base_variable_set -> LPAREN . expression RPAREN
    (62) cast_expression -> LPAREN . primitive_type RPAREN unary_expression
    (8) expression -> . assignment_expression
    (172) primitive_type -> . TYPE_INT
    (173) primitive_type -> . TYPE_FLOAT
    (174) primitive_type -> . TYPE_CHAR
    (175) primitive_type -> . TYPE_STRING
    (176) primitive_type -> . TYPE_BOOLEAN
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    TYPE_INT        shift and go to state 162
    TYPE_FLOAT      shift and go to state 167
    TYPE_CHAR       shift and go to state 164
    TYPE_STRING     shift and go to state 163
    TYPE_BOOLEAN    shift and go to state 166
    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    additive_expression            shift and go to state 52
    simple_name                    shift and go to state 68
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    primitive_type                 shift and go to state 165
    and_expression                 shift and go to state 86
    relational_expression          shift and go to state 73
    cast_expression                shift and go to state 79
    conditional_or_expression      shift and go to state 53
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    assignment                     shift and go to state 118
    multiplicative_expression      shift and go to state 55
    method_invocation              shift and go to state 108
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 119
    expression                     shift and go to state 168
    conditional_and_expression     shift and go to state 59

state 94

    (102) local_variable_declaration -> modifier_opts . declaration_keyword variable_declaration_body
    (166) method_header_name -> modifier_opts . KWRD_DEF IDENTIFIER
    (157) class_header_name1 -> modifier_opts . KWRD_CLASS name
    (99) declaration_keyword -> . KWRD_VAR
    (100) declaration_keyword -> . KWRD_VAL

    KWRD_DEF        shift and go to state 169
    KWRD_CLASS      shift and go to state 26
    KWRD_VAR        shift and go to state 99
    KWRD_VAL        shift and go to state 100

    declaration_keyword            shift and go to state 170

state 95

    (94) block_statement -> class_declaration .

    KWRD_IF         reduce using rule 94 (block_statement -> class_declaration .)
    KWRD_WHILE      reduce using rule 94 (block_statement -> class_declaration .)
    KWRD_DO         reduce using rule 94 (block_statement -> class_declaration .)
    KWRD_OBJECT     reduce using rule 94 (block_statement -> class_declaration .)
    BLOCK_BEGIN     reduce using rule 94 (block_statement -> class_declaration .)
    STATE_END       reduce using rule 94 (block_statement -> class_declaration .)
    KWRD_RETURN     reduce using rule 94 (block_statement -> class_declaration .)
    KWRD_PROTECTED  reduce using rule 94 (block_statement -> class_declaration .)
    KWRD_PRIVATE    reduce using rule 94 (block_statement -> class_declaration .)
    IDENTIFIER      reduce using rule 94 (block_statement -> class_declaration .)
    PLUS            reduce using rule 94 (block_statement -> class_declaration .)
    MINUS           reduce using rule 94 (block_statement -> class_declaration .)
    TILDA           reduce using rule 94 (block_statement -> class_declaration .)
    NOT             reduce using rule 94 (block_statement -> class_declaration .)
    LPAREN          reduce using rule 94 (block_statement -> class_declaration .)
    CHARACTER       reduce using rule 94 (block_statement -> class_declaration .)
    STRING_CONST    reduce using rule 94 (block_statement -> class_declaration .)
    BOOL_CONSTT     reduce using rule 94 (block_statement -> class_declaration .)
    BOOL_CONSTF     reduce using rule 94 (block_statement -> class_declaration .)
    KWRD_NULL       reduce using rule 94 (block_statement -> class_declaration .)
    FLOAT_CONST     reduce using rule 94 (block_statement -> class_declaration .)
    INT_CONST       reduce using rule 94 (block_statement -> class_declaration .)
    KWRD_DEF        reduce using rule 94 (block_statement -> class_declaration .)
    KWRD_CLASS      reduce using rule 94 (block_statement -> class_declaration .)
    KWRD_VAR        reduce using rule 94 (block_statement -> class_declaration .)
    KWRD_VAL        reduce using rule 94 (block_statement -> class_declaration .)
    BLOCK_END       reduce using rule 94 (block_statement -> class_declaration .)
    KWRD_CASE       reduce using rule 94 (block_statement -> class_declaration .)


state 96

    (156) class_header_name -> class_header_name1 LPAREN constructor_arguement_list_opt . RPAREN

    RPAREN          shift and go to state 171


state 97

    (151) constructor_arguement_list_declarator -> declaration_keyword . IDENTIFIER COLON type

    IDENTIFIER      shift and go to state 172


state 98

    (147) constructor_arguement_list_opt -> constructor_arguement_list .
    (150) constructor_arguement_list -> constructor_arguement_list . COMMA constructor_arguement_list_declarator

    RPAREN          reduce using rule 147 (constructor_arguement_list_opt -> constructor_arguement_list .)
    COMMA           shift and go to state 173


state 99

    (99) declaration_keyword -> KWRD_VAR .

    IDENTIFIER      reduce using rule 99 (declaration_keyword -> KWRD_VAR .)
    LPAREN          reduce using rule 99 (declaration_keyword -> KWRD_VAR .)


state 100

    (100) declaration_keyword -> KWRD_VAL .

    IDENTIFIER      reduce using rule 100 (declaration_keyword -> KWRD_VAL .)
    LPAREN          reduce using rule 100 (declaration_keyword -> KWRD_VAL .)


state 101

    (149) constructor_arguement_list -> constructor_arguement_list_declarator .

    COMMA           reduce using rule 149 (constructor_arguement_list -> constructor_arguement_list_declarator .)
    RPAREN          reduce using rule 149 (constructor_arguement_list -> constructor_arguement_list_declarator .)


state 102

    (148) constructor_arguement_list_opt -> empty .

    RPAREN          reduce using rule 148 (constructor_arguement_list_opt -> empty .)


state 103

    (160) class_header_extends -> KWRD_EXTNDS name . LPAREN func_arguement_list_opt RPAREN
    (82) qualified_name -> name . DOT simple_name

    LPAREN          shift and go to state 174
    DOT             shift and go to state 123


state 104

    (7) ObjectDeclare -> KWRD_OBJECT IDENTIFIER KWRD_EXTNDS . IDENTIFIER

    IDENTIFIER      shift and go to state 175


state 105

    (157) class_header_name1 -> modifier_opts KWRD_CLASS name .
    (82) qualified_name -> name . DOT simple_name

    LPAREN          reduce using rule 157 (class_header_name1 -> modifier_opts KWRD_CLASS name .)
    DOT             shift and go to state 123


state 106

    (54) unary_expression -> MINUS unary_expression .

    TIMES           reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    REMAINDER       reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    LSHIFT          reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    RSHIFT          reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    GREATER         reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    LESS            reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    GEQ             reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    LEQ             reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    EQUAL           reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    NEQUAL          reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    AND_BITWISE     reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    XOR             reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    OR_BITWISE      reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    AND             reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    OR              reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    KWRD_MATCH      reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    FUNTYPE         reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    STATE_END       reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    RBPAREN         reduce using rule 54 (unary_expression -> MINUS unary_expression .)


state 107

    (85) variable_literal -> valid_variable .

    TIMES           reduce using rule 85 (variable_literal -> valid_variable .)
    DIVIDE          reduce using rule 85 (variable_literal -> valid_variable .)
    REMAINDER       reduce using rule 85 (variable_literal -> valid_variable .)
    PLUS            reduce using rule 85 (variable_literal -> valid_variable .)
    MINUS           reduce using rule 85 (variable_literal -> valid_variable .)
    LSHIFT          reduce using rule 85 (variable_literal -> valid_variable .)
    RSHIFT          reduce using rule 85 (variable_literal -> valid_variable .)
    GREATER         reduce using rule 85 (variable_literal -> valid_variable .)
    LESS            reduce using rule 85 (variable_literal -> valid_variable .)
    GEQ             reduce using rule 85 (variable_literal -> valid_variable .)
    LEQ             reduce using rule 85 (variable_literal -> valid_variable .)
    EQUAL           reduce using rule 85 (variable_literal -> valid_variable .)
    NEQUAL          reduce using rule 85 (variable_literal -> valid_variable .)
    AND_BITWISE     reduce using rule 85 (variable_literal -> valid_variable .)
    XOR             reduce using rule 85 (variable_literal -> valid_variable .)
    OR_BITWISE      reduce using rule 85 (variable_literal -> valid_variable .)
    AND             reduce using rule 85 (variable_literal -> valid_variable .)
    OR              reduce using rule 85 (variable_literal -> valid_variable .)
    KWRD_MATCH      reduce using rule 85 (variable_literal -> valid_variable .)
    STATE_END       reduce using rule 85 (variable_literal -> valid_variable .)
    RPAREN          reduce using rule 85 (variable_literal -> valid_variable .)
    COMMA           reduce using rule 85 (variable_literal -> valid_variable .)
    RBPAREN         reduce using rule 85 (variable_literal -> valid_variable .)
    FUNTYPE         reduce using rule 85 (variable_literal -> valid_variable .)


state 108

    (64) primary -> method_invocation .

    TIMES           reduce using rule 64 (primary -> method_invocation .)
    DIVIDE          reduce using rule 64 (primary -> method_invocation .)
    REMAINDER       reduce using rule 64 (primary -> method_invocation .)
    PLUS            reduce using rule 64 (primary -> method_invocation .)
    MINUS           reduce using rule 64 (primary -> method_invocation .)
    LSHIFT          reduce using rule 64 (primary -> method_invocation .)
    RSHIFT          reduce using rule 64 (primary -> method_invocation .)
    GREATER         reduce using rule 64 (primary -> method_invocation .)
    LESS            reduce using rule 64 (primary -> method_invocation .)
    GEQ             reduce using rule 64 (primary -> method_invocation .)
    LEQ             reduce using rule 64 (primary -> method_invocation .)
    EQUAL           reduce using rule 64 (primary -> method_invocation .)
    NEQUAL          reduce using rule 64 (primary -> method_invocation .)
    AND_BITWISE     reduce using rule 64 (primary -> method_invocation .)
    XOR             reduce using rule 64 (primary -> method_invocation .)
    OR_BITWISE      reduce using rule 64 (primary -> method_invocation .)
    AND             reduce using rule 64 (primary -> method_invocation .)
    OR              reduce using rule 64 (primary -> method_invocation .)
    KWRD_MATCH      reduce using rule 64 (primary -> method_invocation .)
    STATE_END       reduce using rule 64 (primary -> method_invocation .)
    RPAREN          reduce using rule 64 (primary -> method_invocation .)
    COMMA           reduce using rule 64 (primary -> method_invocation .)
    RBPAREN         reduce using rule 64 (primary -> method_invocation .)
    FUNTYPE         reduce using rule 64 (primary -> method_invocation .)


state 109

    (83) valid_variable -> name .
    (74) array_access -> name . LBPAREN expression RBPAREN
    (73) method_invocation -> name . LPAREN argument_list_opt RPAREN
    (82) qualified_name -> name . DOT simple_name

    TIMES           reduce using rule 83 (valid_variable -> name .)
    DIVIDE          reduce using rule 83 (valid_variable -> name .)
    REMAINDER       reduce using rule 83 (valid_variable -> name .)
    PLUS            reduce using rule 83 (valid_variable -> name .)
    MINUS           reduce using rule 83 (valid_variable -> name .)
    LSHIFT          reduce using rule 83 (valid_variable -> name .)
    RSHIFT          reduce using rule 83 (valid_variable -> name .)
    GREATER         reduce using rule 83 (valid_variable -> name .)
    LESS            reduce using rule 83 (valid_variable -> name .)
    GEQ             reduce using rule 83 (valid_variable -> name .)
    LEQ             reduce using rule 83 (valid_variable -> name .)
    EQUAL           reduce using rule 83 (valid_variable -> name .)
    NEQUAL          reduce using rule 83 (valid_variable -> name .)
    AND_BITWISE     reduce using rule 83 (valid_variable -> name .)
    XOR             reduce using rule 83 (valid_variable -> name .)
    OR_BITWISE      reduce using rule 83 (valid_variable -> name .)
    AND             reduce using rule 83 (valid_variable -> name .)
    OR              reduce using rule 83 (valid_variable -> name .)
    KWRD_MATCH      reduce using rule 83 (valid_variable -> name .)
    STATE_END       reduce using rule 83 (valid_variable -> name .)
    RPAREN          reduce using rule 83 (valid_variable -> name .)
    COMMA           reduce using rule 83 (valid_variable -> name .)
    RBPAREN         reduce using rule 83 (valid_variable -> name .)
    FUNTYPE         reduce using rule 83 (valid_variable -> name .)
    LBPAREN         shift and go to state 122
    LPAREN          shift and go to state 121
    DOT             shift and go to state 123


state 110

    (87) block -> BLOCK_BEGIN block_statements_opt BLOCK_END .

    KWRD_WHILE      reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_IF         reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_DO         reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_OBJECT     reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    STATE_END       reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_RETURN     reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_PROTECTED  reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_PRIVATE    reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    IDENTIFIER      reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    PLUS            reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    MINUS           reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    TILDA           reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    NOT             reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    LPAREN          reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    CHARACTER       reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    STRING_CONST    reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    BOOL_CONSTT     reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    BOOL_CONSTF     reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_NULL       reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    FLOAT_CONST     reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    INT_CONST       reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_DEF        reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_CLASS      reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_VAR        reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_VAL        reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    BLOCK_END       reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_CASE       reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    $end            reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_ELSE       reduce using rule 87 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)


state 111

    (30) inclusive_or_expression -> inclusive_or_expression OR_BITWISE . exclusive_or_expression
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 176
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    additive_expression            shift and go to state 52
    simple_name                    shift and go to state 68
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 107
    literal                        shift and go to state 71
    and_expression                 shift and go to state 86
    method_invocation              shift and go to state 108
    relational_expression          shift and go to state 73
    qualified_name                 shift and go to state 78
    multiplicative_expression      shift and go to state 55
    cast_expression                shift and go to state 79
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 109

state 112

    (53) unary_expression -> PLUS unary_expression .

    TIMES           reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    DIVIDE          reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    REMAINDER       reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    LSHIFT          reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    RSHIFT          reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    GREATER         reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    LESS            reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    GEQ             reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    LEQ             reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    EQUAL           reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    NEQUAL          reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    AND_BITWISE     reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    XOR             reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    OR_BITWISE      reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    AND             reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    OR              reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    KWRD_MATCH      reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    RPAREN          reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    FUNTYPE         reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    STATE_END       reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    RBPAREN         reduce using rule 53 (unary_expression -> PLUS unary_expression .)


state 113

    (124) expression_statement -> statement_expression STATE_END .

    KWRD_IF         reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    KWRD_WHILE      reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    KWRD_DO         reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    KWRD_OBJECT     reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    BLOCK_BEGIN     reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    STATE_END       reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    KWRD_RETURN     reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    KWRD_PROTECTED  reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    KWRD_PRIVATE    reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    IDENTIFIER      reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    PLUS            reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    MINUS           reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    TILDA           reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    NOT             reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    LPAREN          reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    CHARACTER       reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    STRING_CONST    reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    BOOL_CONSTT     reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    BOOL_CONSTF     reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    KWRD_NULL       reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    FLOAT_CONST     reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    INT_CONST       reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    KWRD_DEF        reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    KWRD_CLASS      reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    KWRD_VAR        reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    KWRD_VAL        reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    BLOCK_END       reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    KWRD_CASE       reduce using rule 124 (expression_statement -> statement_expression STATE_END .)
    KWRD_ELSE       reduce using rule 124 (expression_statement -> statement_expression STATE_END .)


state 114

    (133) do_while_statement -> KWRD_DO statement . KWRD_WHILE LPAREN expression RPAREN STATE_END

    KWRD_WHILE      shift and go to state 177


state 115

    (163) method_header -> method_header_name LPAREN . func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (152) func_arguement_list_opt -> . variable_declarators
    (153) func_arguement_list_opt -> . empty
    (110) variable_declarators -> . variable_declarator
    (111) variable_declarators -> . variable_declarators COMMA variable_declarator
    (185) empty -> .
    (112) variable_declarator -> . variable_declarator_id
    (113) variable_declarator_id -> . IDENTIFIER COLON type

    RPAREN          reduce using rule 185 (empty -> .)
    IDENTIFIER      shift and go to state 182

    func_arguement_list_opt        shift and go to state 178
    variable_declarators           shift and go to state 180
    variable_declarator            shift and go to state 181
    variable_declarator_id         shift and go to state 179
    empty                          shift and go to state 183

state 116

    (146) return_statement -> KWRD_RETURN expression_optional . STATE_END

    STATE_END       shift and go to state 184


state 117

    (10) expression_optional -> empty .

    STATE_END       reduce using rule 10 (expression_optional -> empty .)


state 118

    (11) assignment_expression -> assignment .

    COMMA           reduce using rule 11 (assignment_expression -> assignment .)
    RPAREN          reduce using rule 11 (assignment_expression -> assignment .)
    STATE_END       reduce using rule 11 (assignment_expression -> assignment .)
    RBPAREN         reduce using rule 11 (assignment_expression -> assignment .)
    FUNTYPE         reduce using rule 11 (assignment_expression -> assignment .)
    KWRD_MATCH      reduce using rule 11 (assignment_expression -> assignment .)


state 119

    (83) valid_variable -> name .
    (74) array_access -> name . LBPAREN expression RBPAREN
    (82) qualified_name -> name . DOT simple_name
    (73) method_invocation -> name . LPAREN argument_list_opt RPAREN

    ASSIGN          reduce using rule 83 (valid_variable -> name .)
    TIMES_ASSIGN    reduce using rule 83 (valid_variable -> name .)
    DIVIDE_ASSIGN   reduce using rule 83 (valid_variable -> name .)
    REMAINDER_ASSIGN reduce using rule 83 (valid_variable -> name .)
    PLUS_ASSIGN     reduce using rule 83 (valid_variable -> name .)
    MINUS_ASSIGN    reduce using rule 83 (valid_variable -> name .)
    LSHIFT_ASSIGN   reduce using rule 83 (valid_variable -> name .)
    RSHIFT_ASSIGN   reduce using rule 83 (valid_variable -> name .)
    AND_ASSIGN      reduce using rule 83 (valid_variable -> name .)
    OR_ASSIGN       reduce using rule 83 (valid_variable -> name .)
    XOR_ASSIGN      reduce using rule 83 (valid_variable -> name .)
    TIMES           reduce using rule 83 (valid_variable -> name .)
    DIVIDE          reduce using rule 83 (valid_variable -> name .)
    REMAINDER       reduce using rule 83 (valid_variable -> name .)
    PLUS            reduce using rule 83 (valid_variable -> name .)
    MINUS           reduce using rule 83 (valid_variable -> name .)
    LSHIFT          reduce using rule 83 (valid_variable -> name .)
    RSHIFT          reduce using rule 83 (valid_variable -> name .)
    GREATER         reduce using rule 83 (valid_variable -> name .)
    LESS            reduce using rule 83 (valid_variable -> name .)
    GEQ             reduce using rule 83 (valid_variable -> name .)
    LEQ             reduce using rule 83 (valid_variable -> name .)
    EQUAL           reduce using rule 83 (valid_variable -> name .)
    NEQUAL          reduce using rule 83 (valid_variable -> name .)
    AND_BITWISE     reduce using rule 83 (valid_variable -> name .)
    XOR             reduce using rule 83 (valid_variable -> name .)
    OR_BITWISE      reduce using rule 83 (valid_variable -> name .)
    AND             reduce using rule 83 (valid_variable -> name .)
    OR              reduce using rule 83 (valid_variable -> name .)
    COMMA           reduce using rule 83 (valid_variable -> name .)
    RPAREN          reduce using rule 83 (valid_variable -> name .)
    RBPAREN         reduce using rule 83 (valid_variable -> name .)
    STATE_END       reduce using rule 83 (valid_variable -> name .)
    FUNTYPE         reduce using rule 83 (valid_variable -> name .)
    KWRD_MATCH      reduce using rule 83 (valid_variable -> name .)
    LBPAREN         shift and go to state 122
    DOT             shift and go to state 123
    LPAREN          shift and go to state 121


state 120

    (9) expression_optional -> expression .

    STATE_END       reduce using rule 9 (expression_optional -> expression .)


state 121

    (73) method_invocation -> name LPAREN . argument_list_opt RPAREN
    (75) argument_list_opt -> . argument_list
    (76) argument_list_opt -> . empty
    (77) argument_list -> . expression
    (78) argument_list -> . argument_list COMMA expression
    (185) empty -> .
    (8) expression -> . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    RPAREN          reduce using rule 185 (empty -> .)
    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    and_expression                 shift and go to state 86
    exclusive_or_expression        shift and go to state 65
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    additive_expression            shift and go to state 52
    simple_name                    shift and go to state 68
    unary_expression               shift and go to state 48
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    relational_expression          shift and go to state 73
    cast_expression                shift and go to state 79
    conditional_or_expression      shift and go to state 53
    empty                          shift and go to state 186
    argument_list                  shift and go to state 185
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    assignment                     shift and go to state 118
    multiplicative_expression      shift and go to state 55
    method_invocation              shift and go to state 108
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 119
    argument_list_opt              shift and go to state 187
    expression                     shift and go to state 188
    conditional_and_expression     shift and go to state 59

state 122

    (74) array_access -> name LBPAREN . expression RBPAREN
    (8) expression -> . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    additive_expression            shift and go to state 52
    simple_name                    shift and go to state 68
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    and_expression                 shift and go to state 86
    relational_expression          shift and go to state 73
    cast_expression                shift and go to state 79
    conditional_or_expression      shift and go to state 53
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    assignment                     shift and go to state 118
    multiplicative_expression      shift and go to state 55
    method_invocation              shift and go to state 108
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 119
    expression                     shift and go to state 189
    conditional_and_expression     shift and go to state 59

state 123

    (82) qualified_name -> name DOT . simple_name
    (81) simple_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 76

    simple_name                    shift and go to state 190

state 124

    (132) while_statement -> KWRD_WHILE LPAREN . expression RPAREN statement
    (8) expression -> . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    additive_expression            shift and go to state 52
    simple_name                    shift and go to state 68
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    and_expression                 shift and go to state 86
    relational_expression          shift and go to state 73
    cast_expression                shift and go to state 79
    conditional_or_expression      shift and go to state 53
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    assignment                     shift and go to state 118
    multiplicative_expression      shift and go to state 55
    method_invocation              shift and go to state 108
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 119
    expression                     shift and go to state 191
    conditional_and_expression     shift and go to state 59

state 125

    (15) assignment_operator -> TIMES_ASSIGN .

    IDENTIFIER      reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    PLUS            reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    MINUS           reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    TILDA           reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    NOT             reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    LPAREN          reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    CHARACTER       reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    STRING_CONST    reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    BOOL_CONSTT     reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    BOOL_CONSTF     reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    KWRD_NULL       reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    FLOAT_CONST     reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    INT_CONST       reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)


state 126

    (21) assignment_operator -> RSHIFT_ASSIGN .

    IDENTIFIER      reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    PLUS            reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    MINUS           reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    TILDA           reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    NOT             reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    LPAREN          reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    CHARACTER       reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    STRING_CONST    reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    BOOL_CONSTT     reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    BOOL_CONSTF     reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    KWRD_NULL       reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    FLOAT_CONST     reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    INT_CONST       reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)


state 127

    (19) assignment_operator -> MINUS_ASSIGN .

    IDENTIFIER      reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    PLUS            reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    MINUS           reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    TILDA           reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    NOT             reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    LPAREN          reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    CHARACTER       reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    STRING_CONST    reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    BOOL_CONSTT     reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    BOOL_CONSTF     reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    KWRD_NULL       reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    FLOAT_CONST     reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    INT_CONST       reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)


state 128

    (17) assignment_operator -> REMAINDER_ASSIGN .

    IDENTIFIER      reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    PLUS            reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    MINUS           reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    TILDA           reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    NOT             reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    LPAREN          reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    CHARACTER       reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    STRING_CONST    reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    BOOL_CONSTT     reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    BOOL_CONSTF     reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    KWRD_NULL       reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    FLOAT_CONST     reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    INT_CONST       reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)


state 129

    (23) assignment_operator -> OR_ASSIGN .

    IDENTIFIER      reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    PLUS            reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    MINUS           reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    TILDA           reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    NOT             reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    LPAREN          reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    CHARACTER       reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    STRING_CONST    reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    BOOL_CONSTT     reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    BOOL_CONSTF     reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    KWRD_NULL       reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    FLOAT_CONST     reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    INT_CONST       reduce using rule 23 (assignment_operator -> OR_ASSIGN .)


state 130

    (20) assignment_operator -> LSHIFT_ASSIGN .

    IDENTIFIER      reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    PLUS            reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    MINUS           reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    TILDA           reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    NOT             reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    LPAREN          reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    CHARACTER       reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    STRING_CONST    reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    BOOL_CONSTT     reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    BOOL_CONSTF     reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    KWRD_NULL       reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    FLOAT_CONST     reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    INT_CONST       reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)


state 131

    (22) assignment_operator -> AND_ASSIGN .

    IDENTIFIER      reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    PLUS            reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    MINUS           reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    TILDA           reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    NOT             reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    LPAREN          reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    CHARACTER       reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    STRING_CONST    reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    BOOL_CONSTT     reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    BOOL_CONSTF     reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    KWRD_NULL       reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    FLOAT_CONST     reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    INT_CONST       reduce using rule 22 (assignment_operator -> AND_ASSIGN .)


state 132

    (16) assignment_operator -> DIVIDE_ASSIGN .

    IDENTIFIER      reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    PLUS            reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    TILDA           reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    NOT             reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    CHARACTER       reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    STRING_CONST    reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    BOOL_CONSTT     reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    BOOL_CONSTF     reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    KWRD_NULL       reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    FLOAT_CONST     reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    INT_CONST       reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)


state 133

    (13) assignment -> valid_variable assignment_operator . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    additive_expression            shift and go to state 52
    simple_name                    shift and go to state 68
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    and_expression                 shift and go to state 86
    relational_expression          shift and go to state 73
    cast_expression                shift and go to state 79
    conditional_or_expression      shift and go to state 53
    assignment_expression          shift and go to state 192
    qualified_name                 shift and go to state 78
    assignment                     shift and go to state 118
    multiplicative_expression      shift and go to state 55
    method_invocation              shift and go to state 108
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 119
    conditional_and_expression     shift and go to state 59

state 134

    (18) assignment_operator -> PLUS_ASSIGN .

    IDENTIFIER      reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    PLUS            reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    MINUS           reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    TILDA           reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    NOT             reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    CHARACTER       reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    STRING_CONST    reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    BOOL_CONSTT     reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    BOOL_CONSTF     reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    KWRD_NULL       reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    FLOAT_CONST     reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    INT_CONST       reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)


state 135

    (14) assignment_operator -> ASSIGN .

    IDENTIFIER      reduce using rule 14 (assignment_operator -> ASSIGN .)
    PLUS            reduce using rule 14 (assignment_operator -> ASSIGN .)
    MINUS           reduce using rule 14 (assignment_operator -> ASSIGN .)
    TILDA           reduce using rule 14 (assignment_operator -> ASSIGN .)
    NOT             reduce using rule 14 (assignment_operator -> ASSIGN .)
    LPAREN          reduce using rule 14 (assignment_operator -> ASSIGN .)
    CHARACTER       reduce using rule 14 (assignment_operator -> ASSIGN .)
    STRING_CONST    reduce using rule 14 (assignment_operator -> ASSIGN .)
    BOOL_CONSTT     reduce using rule 14 (assignment_operator -> ASSIGN .)
    BOOL_CONSTF     reduce using rule 14 (assignment_operator -> ASSIGN .)
    KWRD_NULL       reduce using rule 14 (assignment_operator -> ASSIGN .)
    FLOAT_CONST     reduce using rule 14 (assignment_operator -> ASSIGN .)
    INT_CONST       reduce using rule 14 (assignment_operator -> ASSIGN .)


state 136

    (24) assignment_operator -> XOR_ASSIGN .

    IDENTIFIER      reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    PLUS            reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    MINUS           reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    TILDA           reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    NOT             reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    LPAREN          reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    CHARACTER       reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    STRING_CONST    reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    BOOL_CONSTT     reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    BOOL_CONSTF     reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    KWRD_NULL       reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    FLOAT_CONST     reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    INT_CONST       reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)


state 137

    (47) additive_expression -> additive_expression PLUS . multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    qualified_name                 shift and go to state 78
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    base_variable_set              shift and go to state 87
    unary_expression               shift and go to state 48
    valid_variable                 shift and go to state 107
    array_access                   shift and go to state 29
    multiplicative_expression      shift and go to state 193
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    literal                        shift and go to state 71
    method_invocation              shift and go to state 108
    cast_expression                shift and go to state 79
    simple_name                    shift and go to state 68
    name                           shift and go to state 109

state 138

    (48) additive_expression -> additive_expression MINUS . multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    qualified_name                 shift and go to state 78
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    base_variable_set              shift and go to state 87
    unary_expression               shift and go to state 48
    valid_variable                 shift and go to state 107
    array_access                   shift and go to state 29
    multiplicative_expression      shift and go to state 194
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    literal                        shift and go to state 71
    method_invocation              shift and go to state 108
    cast_expression                shift and go to state 79
    simple_name                    shift and go to state 68
    name                           shift and go to state 109

state 139

    (26) conditional_or_expression -> conditional_or_expression OR . conditional_and_expression
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    additive_expression            shift and go to state 52
    simple_name                    shift and go to state 68
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 107
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    and_expression                 shift and go to state 86
    cast_expression                shift and go to state 79
    relational_expression          shift and go to state 73
    qualified_name                 shift and go to state 78
    multiplicative_expression      shift and go to state 55
    method_invocation              shift and go to state 108
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 109
    conditional_and_expression     shift and go to state 195

state 140

    (52) multiplicative_expression -> multiplicative_expression REMAINDER . unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    qualified_name                 shift and go to state 78
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    unary_expression               shift and go to state 196
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 107
    array_access                   shift and go to state 29
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    literal                        shift and go to state 71
    method_invocation              shift and go to state 108
    cast_expression                shift and go to state 79
    simple_name                    shift and go to state 68
    name                           shift and go to state 109

state 141

    (51) multiplicative_expression -> multiplicative_expression DIVIDE . unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    qualified_name                 shift and go to state 78
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    unary_expression               shift and go to state 197
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 107
    array_access                   shift and go to state 29
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    literal                        shift and go to state 71
    method_invocation              shift and go to state 108
    cast_expression                shift and go to state 79
    simple_name                    shift and go to state 68
    name                           shift and go to state 109

state 142

    (50) multiplicative_expression -> multiplicative_expression TIMES . unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    qualified_name                 shift and go to state 78
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    unary_expression               shift and go to state 198
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 107
    array_access                   shift and go to state 29
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    literal                        shift and go to state 71
    method_invocation              shift and go to state 108
    cast_expression                shift and go to state 79
    simple_name                    shift and go to state 68
    name                           shift and go to state 109

state 143

    (45) shift_expression -> shift_expression RSHIFT . additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    qualified_name                 shift and go to state 78
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    base_variable_set              shift and go to state 87
    unary_expression               shift and go to state 48
    valid_variable                 shift and go to state 107
    array_access                   shift and go to state 29
    multiplicative_expression      shift and go to state 55
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    literal                        shift and go to state 71
    method_invocation              shift and go to state 108
    cast_expression                shift and go to state 79
    simple_name                    shift and go to state 68
    additive_expression            shift and go to state 199
    name                           shift and go to state 109

state 144

    (44) shift_expression -> shift_expression LSHIFT . additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    qualified_name                 shift and go to state 78
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    base_variable_set              shift and go to state 87
    unary_expression               shift and go to state 48
    valid_variable                 shift and go to state 107
    array_access                   shift and go to state 29
    multiplicative_expression      shift and go to state 55
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    literal                        shift and go to state 71
    method_invocation              shift and go to state 108
    cast_expression                shift and go to state 79
    simple_name                    shift and go to state 68
    additive_expression            shift and go to state 200
    name                           shift and go to state 109

state 145

    (127) if_then_statement -> KWRD_IF LPAREN . expression RPAREN statement
    (128) if_then_else_statement -> KWRD_IF LPAREN . expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (8) expression -> . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    additive_expression            shift and go to state 52
    simple_name                    shift and go to state 68
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    and_expression                 shift and go to state 86
    relational_expression          shift and go to state 73
    cast_expression                shift and go to state 79
    conditional_or_expression      shift and go to state 53
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    assignment                     shift and go to state 118
    multiplicative_expression      shift and go to state 55
    method_invocation              shift and go to state 108
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 119
    expression                     shift and go to state 201
    conditional_and_expression     shift and go to state 59

state 146

    (28) conditional_and_expression -> conditional_and_expression AND . inclusive_or_expression
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    additive_expression            shift and go to state 52
    simple_name                    shift and go to state 68
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 107
    inclusive_or_expression        shift and go to state 202
    literal                        shift and go to state 71
    and_expression                 shift and go to state 86
    method_invocation              shift and go to state 108
    relational_expression          shift and go to state 73
    qualified_name                 shift and go to state 78
    multiplicative_expression      shift and go to state 55
    cast_expression                shift and go to state 79
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 109

state 147

    (58) unary_expression_not_plus_minus -> NOT unary_expression .

    TIMES           reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    DIVIDE          reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    REMAINDER       reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    PLUS            reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    MINUS           reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    LSHIFT          reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    RSHIFT          reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    GREATER         reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    LESS            reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    GEQ             reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    LEQ             reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    EQUAL           reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    NEQUAL          reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    AND_BITWISE     reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    XOR             reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    OR_BITWISE      reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    AND             reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    OR              reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    KWRD_MATCH      reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    STATE_END       reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    RPAREN          reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    COMMA           reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    RBPAREN         reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    FUNTYPE         reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)


state 148

    (134) switch_statement -> expression KWRD_MATCH . switch_block
    (135) switch_block -> . BLOCK_BEGIN BLOCK_END
    (136) switch_block -> . BLOCK_BEGIN switch_block_statements BLOCK_END
    (137) switch_block -> . BLOCK_BEGIN switch_labels BLOCK_END
    (138) switch_block -> . BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END

    BLOCK_BEGIN     shift and go to state 203

    switch_block                   shift and go to state 204

state 149

    (32) exclusive_or_expression -> exclusive_or_expression XOR . and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    unary_expression               shift and go to state 48
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    and_expression                 shift and go to state 205
    simple_name                    shift and go to state 68
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 107
    literal                        shift and go to state 71
    additive_expression            shift and go to state 52
    method_invocation              shift and go to state 108
    relational_expression          shift and go to state 73
    qualified_name                 shift and go to state 78
    multiplicative_expression      shift and go to state 55
    cast_expression                shift and go to state 79
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 109

state 150

    (57) unary_expression_not_plus_minus -> TILDA unary_expression .

    TIMES           reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    DIVIDE          reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    REMAINDER       reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    PLUS            reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    MINUS           reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    LSHIFT          reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    RSHIFT          reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    GREATER         reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    LESS            reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    GEQ             reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    LEQ             reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    EQUAL           reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    NEQUAL          reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    AND_BITWISE     reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    XOR             reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    OR_BITWISE      reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    AND             reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    OR              reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    KWRD_MATCH      reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    STATE_END       reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    RPAREN          reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    COMMA           reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    RBPAREN         reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    FUNTYPE         reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)


state 151

    (41) relational_expression -> relational_expression GEQ . shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    qualified_name                 shift and go to state 78
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    base_variable_set              shift and go to state 87
    unary_expression               shift and go to state 48
    valid_variable                 shift and go to state 107
    array_access                   shift and go to state 29
    multiplicative_expression      shift and go to state 55
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    literal                        shift and go to state 71
    method_invocation              shift and go to state 108
    cast_expression                shift and go to state 79
    simple_name                    shift and go to state 68
    shift_expression               shift and go to state 206
    additive_expression            shift and go to state 52
    name                           shift and go to state 109

state 152

    (39) relational_expression -> relational_expression GREATER . shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    qualified_name                 shift and go to state 78
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    base_variable_set              shift and go to state 87
    unary_expression               shift and go to state 48
    valid_variable                 shift and go to state 107
    array_access                   shift and go to state 29
    multiplicative_expression      shift and go to state 55
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    literal                        shift and go to state 71
    method_invocation              shift and go to state 108
    cast_expression                shift and go to state 79
    simple_name                    shift and go to state 68
    shift_expression               shift and go to state 207
    additive_expression            shift and go to state 52
    name                           shift and go to state 109

state 153

    (40) relational_expression -> relational_expression LESS . shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    qualified_name                 shift and go to state 78
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    base_variable_set              shift and go to state 87
    unary_expression               shift and go to state 48
    valid_variable                 shift and go to state 107
    array_access                   shift and go to state 29
    multiplicative_expression      shift and go to state 55
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    literal                        shift and go to state 71
    method_invocation              shift and go to state 108
    cast_expression                shift and go to state 79
    simple_name                    shift and go to state 68
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 52
    name                           shift and go to state 109

state 154

    (42) relational_expression -> relational_expression LEQ . shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    qualified_name                 shift and go to state 78
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    base_variable_set              shift and go to state 87
    unary_expression               shift and go to state 48
    valid_variable                 shift and go to state 107
    array_access                   shift and go to state 29
    multiplicative_expression      shift and go to state 55
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    literal                        shift and go to state 71
    method_invocation              shift and go to state 108
    cast_expression                shift and go to state 79
    simple_name                    shift and go to state 68
    shift_expression               shift and go to state 209
    additive_expression            shift and go to state 52
    name                           shift and go to state 109

state 155

    (37) equality_expression -> equality_expression NEQUAL . relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    unary_expression               shift and go to state 48
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    additive_expression            shift and go to state 52
    simple_name                    shift and go to state 68
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 107
    literal                        shift and go to state 71
    relational_expression          shift and go to state 210
    method_invocation              shift and go to state 108
    qualified_name                 shift and go to state 78
    multiplicative_expression      shift and go to state 55
    cast_expression                shift and go to state 79
    shift_expression               shift and go to state 56
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 109

state 156

    (36) equality_expression -> equality_expression EQUAL . relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    unary_expression               shift and go to state 48
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    additive_expression            shift and go to state 52
    simple_name                    shift and go to state 68
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 107
    literal                        shift and go to state 71
    relational_expression          shift and go to state 211
    method_invocation              shift and go to state 108
    qualified_name                 shift and go to state 78
    multiplicative_expression      shift and go to state 55
    cast_expression                shift and go to state 79
    shift_expression               shift and go to state 56
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 109

state 157

    (162) method_declaration -> method_header method_body .

    KWRD_IF         reduce using rule 162 (method_declaration -> method_header method_body .)
    KWRD_WHILE      reduce using rule 162 (method_declaration -> method_header method_body .)
    KWRD_DO         reduce using rule 162 (method_declaration -> method_header method_body .)
    KWRD_OBJECT     reduce using rule 162 (method_declaration -> method_header method_body .)
    BLOCK_BEGIN     reduce using rule 162 (method_declaration -> method_header method_body .)
    STATE_END       reduce using rule 162 (method_declaration -> method_header method_body .)
    KWRD_RETURN     reduce using rule 162 (method_declaration -> method_header method_body .)
    KWRD_PROTECTED  reduce using rule 162 (method_declaration -> method_header method_body .)
    KWRD_PRIVATE    reduce using rule 162 (method_declaration -> method_header method_body .)
    IDENTIFIER      reduce using rule 162 (method_declaration -> method_header method_body .)
    PLUS            reduce using rule 162 (method_declaration -> method_header method_body .)
    MINUS           reduce using rule 162 (method_declaration -> method_header method_body .)
    TILDA           reduce using rule 162 (method_declaration -> method_header method_body .)
    NOT             reduce using rule 162 (method_declaration -> method_header method_body .)
    LPAREN          reduce using rule 162 (method_declaration -> method_header method_body .)
    CHARACTER       reduce using rule 162 (method_declaration -> method_header method_body .)
    STRING_CONST    reduce using rule 162 (method_declaration -> method_header method_body .)
    BOOL_CONSTT     reduce using rule 162 (method_declaration -> method_header method_body .)
    BOOL_CONSTF     reduce using rule 162 (method_declaration -> method_header method_body .)
    KWRD_NULL       reduce using rule 162 (method_declaration -> method_header method_body .)
    FLOAT_CONST     reduce using rule 162 (method_declaration -> method_header method_body .)
    INT_CONST       reduce using rule 162 (method_declaration -> method_header method_body .)
    KWRD_DEF        reduce using rule 162 (method_declaration -> method_header method_body .)
    KWRD_CLASS      reduce using rule 162 (method_declaration -> method_header method_body .)
    KWRD_VAR        reduce using rule 162 (method_declaration -> method_header method_body .)
    KWRD_VAL        reduce using rule 162 (method_declaration -> method_header method_body .)
    BLOCK_END       reduce using rule 162 (method_declaration -> method_header method_body .)
    KWRD_CASE       reduce using rule 162 (method_declaration -> method_header method_body .)


state 158

    (167) method_body -> block .

    KWRD_IF         reduce using rule 167 (method_body -> block .)
    KWRD_WHILE      reduce using rule 167 (method_body -> block .)
    KWRD_DO         reduce using rule 167 (method_body -> block .)
    KWRD_OBJECT     reduce using rule 167 (method_body -> block .)
    BLOCK_BEGIN     reduce using rule 167 (method_body -> block .)
    STATE_END       reduce using rule 167 (method_body -> block .)
    KWRD_RETURN     reduce using rule 167 (method_body -> block .)
    KWRD_PROTECTED  reduce using rule 167 (method_body -> block .)
    KWRD_PRIVATE    reduce using rule 167 (method_body -> block .)
    IDENTIFIER      reduce using rule 167 (method_body -> block .)
    PLUS            reduce using rule 167 (method_body -> block .)
    MINUS           reduce using rule 167 (method_body -> block .)
    TILDA           reduce using rule 167 (method_body -> block .)
    NOT             reduce using rule 167 (method_body -> block .)
    LPAREN          reduce using rule 167 (method_body -> block .)
    CHARACTER       reduce using rule 167 (method_body -> block .)
    STRING_CONST    reduce using rule 167 (method_body -> block .)
    BOOL_CONSTT     reduce using rule 167 (method_body -> block .)
    BOOL_CONSTF     reduce using rule 167 (method_body -> block .)
    KWRD_NULL       reduce using rule 167 (method_body -> block .)
    FLOAT_CONST     reduce using rule 167 (method_body -> block .)
    INT_CONST       reduce using rule 167 (method_body -> block .)
    KWRD_DEF        reduce using rule 167 (method_body -> block .)
    KWRD_CLASS      reduce using rule 167 (method_body -> block .)
    KWRD_VAR        reduce using rule 167 (method_body -> block .)
    KWRD_VAL        reduce using rule 167 (method_body -> block .)
    BLOCK_END       reduce using rule 167 (method_body -> block .)
    KWRD_CASE       reduce using rule 167 (method_body -> block .)


state 159

    (101) local_variable_declaration_statement -> local_variable_declaration STATE_END .

    KWRD_IF         reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_WHILE      reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_DO         reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_OBJECT     reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    BLOCK_BEGIN     reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    STATE_END       reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_RETURN     reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_PROTECTED  reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_PRIVATE    reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    IDENTIFIER      reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    PLUS            reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    MINUS           reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    TILDA           reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    NOT             reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    LPAREN          reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    CHARACTER       reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    STRING_CONST    reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    BOOL_CONSTT     reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    BOOL_CONSTF     reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_NULL       reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    FLOAT_CONST     reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    INT_CONST       reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_DEF        reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_CLASS      reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_VAR        reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_VAL        reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    BLOCK_END       reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_CASE       reduce using rule 101 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)


state 160

    (34) and_expression -> and_expression AND_BITWISE . equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    unary_expression               shift and go to state 48
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    simple_name                    shift and go to state 68
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 107
    literal                        shift and go to state 71
    additive_expression            shift and go to state 52
    method_invocation              shift and go to state 108
    relational_expression          shift and go to state 73
    qualified_name                 shift and go to state 78
    multiplicative_expression      shift and go to state 55
    cast_expression                shift and go to state 79
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 212
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 109

state 161

    (91) block_statements -> block_statements block_statement .

    KWRD_IF         reduce using rule 91 (block_statements -> block_statements block_statement .)
    KWRD_WHILE      reduce using rule 91 (block_statements -> block_statements block_statement .)
    KWRD_DO         reduce using rule 91 (block_statements -> block_statements block_statement .)
    KWRD_OBJECT     reduce using rule 91 (block_statements -> block_statements block_statement .)
    BLOCK_BEGIN     reduce using rule 91 (block_statements -> block_statements block_statement .)
    STATE_END       reduce using rule 91 (block_statements -> block_statements block_statement .)
    KWRD_RETURN     reduce using rule 91 (block_statements -> block_statements block_statement .)
    KWRD_PROTECTED  reduce using rule 91 (block_statements -> block_statements block_statement .)
    KWRD_PRIVATE    reduce using rule 91 (block_statements -> block_statements block_statement .)
    IDENTIFIER      reduce using rule 91 (block_statements -> block_statements block_statement .)
    PLUS            reduce using rule 91 (block_statements -> block_statements block_statement .)
    MINUS           reduce using rule 91 (block_statements -> block_statements block_statement .)
    TILDA           reduce using rule 91 (block_statements -> block_statements block_statement .)
    NOT             reduce using rule 91 (block_statements -> block_statements block_statement .)
    LPAREN          reduce using rule 91 (block_statements -> block_statements block_statement .)
    CHARACTER       reduce using rule 91 (block_statements -> block_statements block_statement .)
    STRING_CONST    reduce using rule 91 (block_statements -> block_statements block_statement .)
    BOOL_CONSTT     reduce using rule 91 (block_statements -> block_statements block_statement .)
    BOOL_CONSTF     reduce using rule 91 (block_statements -> block_statements block_statement .)
    KWRD_NULL       reduce using rule 91 (block_statements -> block_statements block_statement .)
    FLOAT_CONST     reduce using rule 91 (block_statements -> block_statements block_statement .)
    INT_CONST       reduce using rule 91 (block_statements -> block_statements block_statement .)
    KWRD_DEF        reduce using rule 91 (block_statements -> block_statements block_statement .)
    KWRD_CLASS      reduce using rule 91 (block_statements -> block_statements block_statement .)
    KWRD_VAR        reduce using rule 91 (block_statements -> block_statements block_statement .)
    KWRD_VAL        reduce using rule 91 (block_statements -> block_statements block_statement .)
    BLOCK_END       reduce using rule 91 (block_statements -> block_statements block_statement .)
    KWRD_CASE       reduce using rule 91 (block_statements -> block_statements block_statement .)


state 162

    (172) primitive_type -> TYPE_INT .

    COMMA           reduce using rule 172 (primitive_type -> TYPE_INT .)
    RPAREN          reduce using rule 172 (primitive_type -> TYPE_INT .)
    ASSIGN          reduce using rule 172 (primitive_type -> TYPE_INT .)
    RBPAREN         reduce using rule 172 (primitive_type -> TYPE_INT .)


state 163

    (175) primitive_type -> TYPE_STRING .

    COMMA           reduce using rule 175 (primitive_type -> TYPE_STRING .)
    RPAREN          reduce using rule 175 (primitive_type -> TYPE_STRING .)
    ASSIGN          reduce using rule 175 (primitive_type -> TYPE_STRING .)
    RBPAREN         reduce using rule 175 (primitive_type -> TYPE_STRING .)


state 164

    (174) primitive_type -> TYPE_CHAR .

    COMMA           reduce using rule 174 (primitive_type -> TYPE_CHAR .)
    RPAREN          reduce using rule 174 (primitive_type -> TYPE_CHAR .)
    ASSIGN          reduce using rule 174 (primitive_type -> TYPE_CHAR .)
    RBPAREN         reduce using rule 174 (primitive_type -> TYPE_CHAR .)


state 165

    (62) cast_expression -> LPAREN primitive_type . RPAREN unary_expression

    RPAREN          shift and go to state 213


state 166

    (176) primitive_type -> TYPE_BOOLEAN .

    COMMA           reduce using rule 176 (primitive_type -> TYPE_BOOLEAN .)
    RPAREN          reduce using rule 176 (primitive_type -> TYPE_BOOLEAN .)
    ASSIGN          reduce using rule 176 (primitive_type -> TYPE_BOOLEAN .)
    RBPAREN         reduce using rule 176 (primitive_type -> TYPE_BOOLEAN .)


state 167

    (173) primitive_type -> TYPE_FLOAT .

    COMMA           reduce using rule 173 (primitive_type -> TYPE_FLOAT .)
    RPAREN          reduce using rule 173 (primitive_type -> TYPE_FLOAT .)
    ASSIGN          reduce using rule 173 (primitive_type -> TYPE_FLOAT .)
    RBPAREN         reduce using rule 173 (primitive_type -> TYPE_FLOAT .)


state 168

    (61) base_variable_set -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 214


state 169

    (166) method_header_name -> modifier_opts KWRD_DEF . IDENTIFIER

    IDENTIFIER      shift and go to state 215


state 170

    (102) local_variable_declaration -> modifier_opts declaration_keyword . variable_declaration_body
    (108) variable_declaration_body -> . variable_declarator ASSIGN variable_declaration_initializer
    (109) variable_declaration_body -> . LPAREN variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list RPAREN
    (112) variable_declarator -> . variable_declarator_id
    (113) variable_declarator_id -> . IDENTIFIER COLON type

    LPAREN          shift and go to state 218
    IDENTIFIER      shift and go to state 182

    variable_declaration_body      shift and go to state 216
    variable_declarator            shift and go to state 217
    variable_declarator_id         shift and go to state 179

state 171

    (156) class_header_name -> class_header_name1 LPAREN constructor_arguement_list_opt RPAREN .

    KWRD_EXTNDS     reduce using rule 156 (class_header_name -> class_header_name1 LPAREN constructor_arguement_list_opt RPAREN .)
    BLOCK_BEGIN     reduce using rule 156 (class_header_name -> class_header_name1 LPAREN constructor_arguement_list_opt RPAREN .)


state 172

    (151) constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER . COLON type

    COLON           shift and go to state 219


state 173

    (150) constructor_arguement_list -> constructor_arguement_list COMMA . constructor_arguement_list_declarator
    (151) constructor_arguement_list_declarator -> . declaration_keyword IDENTIFIER COLON type
    (99) declaration_keyword -> . KWRD_VAR
    (100) declaration_keyword -> . KWRD_VAL

    KWRD_VAR        shift and go to state 99
    KWRD_VAL        shift and go to state 100

    declaration_keyword            shift and go to state 97
    constructor_arguement_list_declarator shift and go to state 220

state 174

    (160) class_header_extends -> KWRD_EXTNDS name LPAREN . func_arguement_list_opt RPAREN
    (152) func_arguement_list_opt -> . variable_declarators
    (153) func_arguement_list_opt -> . empty
    (110) variable_declarators -> . variable_declarator
    (111) variable_declarators -> . variable_declarators COMMA variable_declarator
    (185) empty -> .
    (112) variable_declarator -> . variable_declarator_id
    (113) variable_declarator_id -> . IDENTIFIER COLON type

    RPAREN          reduce using rule 185 (empty -> .)
    IDENTIFIER      shift and go to state 182

    func_arguement_list_opt        shift and go to state 221
    variable_declarators           shift and go to state 180
    variable_declarator            shift and go to state 181
    variable_declarator_id         shift and go to state 179
    empty                          shift and go to state 183

state 175

    (7) ObjectDeclare -> KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER .

    BLOCK_BEGIN     reduce using rule 7 (ObjectDeclare -> KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER .)


state 176

    (30) inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .
    (32) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR_BITWISE      reduce using rule 30 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    AND             reduce using rule 30 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    OR              reduce using rule 30 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    COMMA           reduce using rule 30 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    RPAREN          reduce using rule 30 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    KWRD_MATCH      reduce using rule 30 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    STATE_END       reduce using rule 30 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    RBPAREN         reduce using rule 30 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    FUNTYPE         reduce using rule 30 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    XOR             shift and go to state 149


state 177

    (133) do_while_statement -> KWRD_DO statement KWRD_WHILE . LPAREN expression RPAREN STATE_END

    LPAREN          shift and go to state 222


state 178

    (163) method_header -> method_header_name LPAREN func_arguement_list_opt . RPAREN COLON method_return_type ASSIGN

    RPAREN          shift and go to state 223


state 179

    (112) variable_declarator -> variable_declarator_id .

    COMMA           reduce using rule 112 (variable_declarator -> variable_declarator_id .)
    RPAREN          reduce using rule 112 (variable_declarator -> variable_declarator_id .)
    ASSIGN          reduce using rule 112 (variable_declarator -> variable_declarator_id .)


state 180

    (152) func_arguement_list_opt -> variable_declarators .
    (111) variable_declarators -> variable_declarators . COMMA variable_declarator

    RPAREN          reduce using rule 152 (func_arguement_list_opt -> variable_declarators .)
    COMMA           shift and go to state 224


state 181

    (110) variable_declarators -> variable_declarator .

    COMMA           reduce using rule 110 (variable_declarators -> variable_declarator .)
    RPAREN          reduce using rule 110 (variable_declarators -> variable_declarator .)


state 182

    (113) variable_declarator_id -> IDENTIFIER . COLON type

    COLON           shift and go to state 225


state 183

    (153) func_arguement_list_opt -> empty .

    RPAREN          reduce using rule 153 (func_arguement_list_opt -> empty .)


state 184

    (146) return_statement -> KWRD_RETURN expression_optional STATE_END .

    KWRD_WHILE      reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_IF         reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_DO         reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_OBJECT     reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    BLOCK_BEGIN     reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    STATE_END       reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_RETURN     reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_PROTECTED  reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_PRIVATE    reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    IDENTIFIER      reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    PLUS            reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    MINUS           reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    TILDA           reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    NOT             reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    LPAREN          reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    CHARACTER       reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    STRING_CONST    reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    BOOL_CONSTT     reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    BOOL_CONSTF     reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_NULL       reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    FLOAT_CONST     reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    INT_CONST       reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_DEF        reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_CLASS      reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_VAR        reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_VAL        reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    BLOCK_END       reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_CASE       reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_ELSE       reduce using rule 146 (return_statement -> KWRD_RETURN expression_optional STATE_END .)


state 185

    (75) argument_list_opt -> argument_list .
    (78) argument_list -> argument_list . COMMA expression

    RPAREN          reduce using rule 75 (argument_list_opt -> argument_list .)
    COMMA           shift and go to state 226


state 186

    (76) argument_list_opt -> empty .

    RPAREN          reduce using rule 76 (argument_list_opt -> empty .)


state 187

    (73) method_invocation -> name LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 227


state 188

    (77) argument_list -> expression .

    COMMA           reduce using rule 77 (argument_list -> expression .)
    RPAREN          reduce using rule 77 (argument_list -> expression .)


state 189

    (74) array_access -> name LBPAREN expression . RBPAREN

    RBPAREN         shift and go to state 228


state 190

    (82) qualified_name -> name DOT simple_name .

    LBPAREN         reduce using rule 82 (qualified_name -> name DOT simple_name .)
    LPAREN          reduce using rule 82 (qualified_name -> name DOT simple_name .)
    DOT             reduce using rule 82 (qualified_name -> name DOT simple_name .)
    TIMES           reduce using rule 82 (qualified_name -> name DOT simple_name .)
    DIVIDE          reduce using rule 82 (qualified_name -> name DOT simple_name .)
    REMAINDER       reduce using rule 82 (qualified_name -> name DOT simple_name .)
    PLUS            reduce using rule 82 (qualified_name -> name DOT simple_name .)
    MINUS           reduce using rule 82 (qualified_name -> name DOT simple_name .)
    LSHIFT          reduce using rule 82 (qualified_name -> name DOT simple_name .)
    RSHIFT          reduce using rule 82 (qualified_name -> name DOT simple_name .)
    GREATER         reduce using rule 82 (qualified_name -> name DOT simple_name .)
    LESS            reduce using rule 82 (qualified_name -> name DOT simple_name .)
    GEQ             reduce using rule 82 (qualified_name -> name DOT simple_name .)
    LEQ             reduce using rule 82 (qualified_name -> name DOT simple_name .)
    EQUAL           reduce using rule 82 (qualified_name -> name DOT simple_name .)
    NEQUAL          reduce using rule 82 (qualified_name -> name DOT simple_name .)
    AND_BITWISE     reduce using rule 82 (qualified_name -> name DOT simple_name .)
    XOR             reduce using rule 82 (qualified_name -> name DOT simple_name .)
    OR_BITWISE      reduce using rule 82 (qualified_name -> name DOT simple_name .)
    AND             reduce using rule 82 (qualified_name -> name DOT simple_name .)
    OR              reduce using rule 82 (qualified_name -> name DOT simple_name .)
    KWRD_MATCH      reduce using rule 82 (qualified_name -> name DOT simple_name .)
    STATE_END       reduce using rule 82 (qualified_name -> name DOT simple_name .)
    RPAREN          reduce using rule 82 (qualified_name -> name DOT simple_name .)
    COMMA           reduce using rule 82 (qualified_name -> name DOT simple_name .)
    RBPAREN         reduce using rule 82 (qualified_name -> name DOT simple_name .)
    FUNTYPE         reduce using rule 82 (qualified_name -> name DOT simple_name .)
    ASSIGN          reduce using rule 82 (qualified_name -> name DOT simple_name .)
    TIMES_ASSIGN    reduce using rule 82 (qualified_name -> name DOT simple_name .)
    DIVIDE_ASSIGN   reduce using rule 82 (qualified_name -> name DOT simple_name .)
    REMAINDER_ASSIGN reduce using rule 82 (qualified_name -> name DOT simple_name .)
    PLUS_ASSIGN     reduce using rule 82 (qualified_name -> name DOT simple_name .)
    MINUS_ASSIGN    reduce using rule 82 (qualified_name -> name DOT simple_name .)
    LSHIFT_ASSIGN   reduce using rule 82 (qualified_name -> name DOT simple_name .)
    RSHIFT_ASSIGN   reduce using rule 82 (qualified_name -> name DOT simple_name .)
    AND_ASSIGN      reduce using rule 82 (qualified_name -> name DOT simple_name .)
    OR_ASSIGN       reduce using rule 82 (qualified_name -> name DOT simple_name .)
    XOR_ASSIGN      reduce using rule 82 (qualified_name -> name DOT simple_name .)


state 191

    (132) while_statement -> KWRD_WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 229


state 192

    (13) assignment -> valid_variable assignment_operator assignment_expression .

    STATE_END       reduce using rule 13 (assignment -> valid_variable assignment_operator assignment_expression .)
    KWRD_MATCH      reduce using rule 13 (assignment -> valid_variable assignment_operator assignment_expression .)
    COMMA           reduce using rule 13 (assignment -> valid_variable assignment_operator assignment_expression .)
    RPAREN          reduce using rule 13 (assignment -> valid_variable assignment_operator assignment_expression .)
    RBPAREN         reduce using rule 13 (assignment -> valid_variable assignment_operator assignment_expression .)
    FUNTYPE         reduce using rule 13 (assignment -> valid_variable assignment_operator assignment_expression .)


state 193

    (47) additive_expression -> additive_expression PLUS multiplicative_expression .
    (50) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (51) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (52) multiplicative_expression -> multiplicative_expression . REMAINDER unary_expression

    PLUS            reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LSHIFT          reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSHIFT          reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER         reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS            reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GEQ             reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LEQ             reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUAL           reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NEQUAL          reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND_BITWISE     reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR_BITWISE      reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    KWRD_MATCH      reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STATE_END       reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBPAREN         reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FUNTYPE         reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 142
    DIVIDE          shift and go to state 141
    REMAINDER       shift and go to state 140


state 194

    (48) additive_expression -> additive_expression MINUS multiplicative_expression .
    (50) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (51) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (52) multiplicative_expression -> multiplicative_expression . REMAINDER unary_expression

    PLUS            reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LSHIFT          reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSHIFT          reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER         reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS            reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GEQ             reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LEQ             reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUAL           reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NEQUAL          reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND_BITWISE     reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR_BITWISE      reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    KWRD_MATCH      reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STATE_END       reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBPAREN         reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FUNTYPE         reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 142
    DIVIDE          shift and go to state 141
    REMAINDER       shift and go to state 140


state 195

    (26) conditional_or_expression -> conditional_or_expression OR conditional_and_expression .
    (28) conditional_and_expression -> conditional_and_expression . AND inclusive_or_expression

    OR              reduce using rule 26 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    FUNTYPE         reduce using rule 26 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    COMMA           reduce using rule 26 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    RPAREN          reduce using rule 26 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    KWRD_MATCH      reduce using rule 26 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    STATE_END       reduce using rule 26 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    RBPAREN         reduce using rule 26 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    AND             shift and go to state 146


state 196

    (52) multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .

    TIMES           reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    DIVIDE          reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    REMAINDER       reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    PLUS            reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    MINUS           reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    LSHIFT          reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    RSHIFT          reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    GREATER         reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    LESS            reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    GEQ             reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    LEQ             reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    EQUAL           reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    NEQUAL          reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    AND_BITWISE     reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    XOR             reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    OR_BITWISE      reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    AND             reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    OR              reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    KWRD_MATCH      reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    STATE_END       reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    RPAREN          reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    COMMA           reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    RBPAREN         reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    FUNTYPE         reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)


state 197

    (51) multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .

    TIMES           reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DIVIDE          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    REMAINDER       reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    PLUS            reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MINUS           reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LSHIFT          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RSHIFT          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GREATER         reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LESS            reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GEQ             reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LEQ             reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    EQUAL           reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    NEQUAL          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AND_BITWISE     reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    XOR             reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OR_BITWISE      reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AND             reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OR              reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    KWRD_MATCH      reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    STATE_END       reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RPAREN          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COMMA           reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RBPAREN         reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    FUNTYPE         reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)


state 198

    (50) multiplicative_expression -> multiplicative_expression TIMES unary_expression .

    TIMES           reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DIVIDE          reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    REMAINDER       reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    PLUS            reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MINUS           reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LSHIFT          reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RSHIFT          reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GREATER         reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LESS            reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GEQ             reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LEQ             reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    EQUAL           reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    NEQUAL          reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    AND_BITWISE     reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    XOR             reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OR_BITWISE      reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    AND             reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OR              reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    KWRD_MATCH      reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    STATE_END       reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RPAREN          reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    COMMA           reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RBPAREN         reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    FUNTYPE         reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)


state 199

    (45) shift_expression -> shift_expression RSHIFT additive_expression .
    (47) additive_expression -> additive_expression . PLUS multiplicative_expression
    (48) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GREATER         reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LESS            reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GEQ             reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LEQ             reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQUAL           reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NEQUAL          reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND_BITWISE     reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOR             reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR_BITWISE      reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND             reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR              reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    KWRD_MATCH      reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    STATE_END       reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBPAREN         reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    FUNTYPE         reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138


state 200

    (44) shift_expression -> shift_expression LSHIFT additive_expression .
    (47) additive_expression -> additive_expression . PLUS multiplicative_expression
    (48) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GREATER         reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LESS            reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GEQ             reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LEQ             reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQUAL           reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NEQUAL          reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND_BITWISE     reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOR             reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR_BITWISE      reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND             reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR              reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    KWRD_MATCH      reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    STATE_END       reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBPAREN         reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    FUNTYPE         reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138


state 201

    (127) if_then_statement -> KWRD_IF LPAREN expression . RPAREN statement
    (128) if_then_else_statement -> KWRD_IF LPAREN expression . RPAREN if_then_else_intermediate KWRD_ELSE statement

    RPAREN          shift and go to state 230


state 202

    (28) conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .
    (30) inclusive_or_expression -> inclusive_or_expression . OR_BITWISE exclusive_or_expression

    AND             reduce using rule 28 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    OR              reduce using rule 28 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    STATE_END       reduce using rule 28 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    KWRD_MATCH      reduce using rule 28 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    RPAREN          reduce using rule 28 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    COMMA           reduce using rule 28 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    FUNTYPE         reduce using rule 28 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    RBPAREN         reduce using rule 28 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    OR_BITWISE      shift and go to state 111


state 203

    (135) switch_block -> BLOCK_BEGIN . BLOCK_END
    (136) switch_block -> BLOCK_BEGIN . switch_block_statements BLOCK_END
    (137) switch_block -> BLOCK_BEGIN . switch_labels BLOCK_END
    (138) switch_block -> BLOCK_BEGIN . switch_block_statements switch_labels BLOCK_END
    (139) switch_block_statements -> . switch_block_statement
    (140) switch_block_statements -> . switch_block_statements switch_block_statement
    (142) switch_labels -> . switch_label
    (143) switch_labels -> . switch_labels switch_label
    (141) switch_block_statement -> . switch_labels block_statements
    (144) switch_label -> . KWRD_CASE expression FUNTYPE

    BLOCK_END       shift and go to state 231
    KWRD_CASE       shift and go to state 232

    switch_block_statements        shift and go to state 235
    switch_labels                  shift and go to state 233
    switch_label                   shift and go to state 234
    switch_block_statement         shift and go to state 236

state 204

    (134) switch_statement -> expression KWRD_MATCH switch_block .

    KWRD_IF         reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_WHILE      reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_DO         reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_OBJECT     reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    BLOCK_BEGIN     reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    STATE_END       reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_RETURN     reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_PROTECTED  reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_PRIVATE    reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    IDENTIFIER      reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    PLUS            reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    MINUS           reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    TILDA           reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    NOT             reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    LPAREN          reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    CHARACTER       reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    STRING_CONST    reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    BOOL_CONSTT     reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    BOOL_CONSTF     reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_NULL       reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    FLOAT_CONST     reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    INT_CONST       reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_DEF        reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_CLASS      reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_VAR        reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_VAL        reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    BLOCK_END       reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_CASE       reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_ELSE       reduce using rule 134 (switch_statement -> expression KWRD_MATCH switch_block .)


state 205

    (32) exclusive_or_expression -> exclusive_or_expression XOR and_expression .
    (34) and_expression -> and_expression . AND_BITWISE equality_expression

    XOR             reduce using rule 32 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR_BITWISE      reduce using rule 32 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND             reduce using rule 32 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR              reduce using rule 32 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    KWRD_MATCH      reduce using rule 32 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    STATE_END       reduce using rule 32 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RPAREN          reduce using rule 32 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COMMA           reduce using rule 32 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBPAREN         reduce using rule 32 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    FUNTYPE         reduce using rule 32 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND_BITWISE     shift and go to state 160


state 206

    (41) relational_expression -> relational_expression GEQ shift_expression .
    (44) shift_expression -> shift_expression . LSHIFT additive_expression
    (45) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    LESS            reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    GEQ             reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    LEQ             reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    EQUAL           reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    NEQUAL          reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    AND_BITWISE     reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    XOR             reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    OR_BITWISE      reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    AND             reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    OR              reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    COMMA           reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    RPAREN          reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    KWRD_MATCH      reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    STATE_END       reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    RBPAREN         reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    FUNTYPE         reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    LSHIFT          shift and go to state 144
    RSHIFT          shift and go to state 143


state 207

    (39) relational_expression -> relational_expression GREATER shift_expression .
    (44) shift_expression -> shift_expression . LSHIFT additive_expression
    (45) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    LESS            reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    GEQ             reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    LEQ             reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    EQUAL           reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    NEQUAL          reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    AND_BITWISE     reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    XOR             reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    OR_BITWISE      reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    AND             reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    OR              reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    COMMA           reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    RPAREN          reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    KWRD_MATCH      reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    STATE_END       reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    RBPAREN         reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    FUNTYPE         reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    LSHIFT          shift and go to state 144
    RSHIFT          shift and go to state 143


state 208

    (40) relational_expression -> relational_expression LESS shift_expression .
    (44) shift_expression -> shift_expression . LSHIFT additive_expression
    (45) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    LESS            reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    GEQ             reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    LEQ             reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    EQUAL           reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    NEQUAL          reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    AND_BITWISE     reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    XOR             reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    OR_BITWISE      reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    AND             reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    OR              reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    COMMA           reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    RPAREN          reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    KWRD_MATCH      reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    STATE_END       reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    RBPAREN         reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    FUNTYPE         reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    LSHIFT          shift and go to state 144
    RSHIFT          shift and go to state 143


state 209

    (42) relational_expression -> relational_expression LEQ shift_expression .
    (44) shift_expression -> shift_expression . LSHIFT additive_expression
    (45) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    LESS            reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    GEQ             reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    LEQ             reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    EQUAL           reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    NEQUAL          reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    AND_BITWISE     reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    XOR             reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    OR_BITWISE      reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    AND             reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    OR              reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    COMMA           reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    RPAREN          reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    KWRD_MATCH      reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    STATE_END       reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    RBPAREN         reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    FUNTYPE         reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    LSHIFT          shift and go to state 144
    RSHIFT          shift and go to state 143


state 210

    (37) equality_expression -> equality_expression NEQUAL relational_expression .
    (39) relational_expression -> relational_expression . GREATER shift_expression
    (40) relational_expression -> relational_expression . LESS shift_expression
    (41) relational_expression -> relational_expression . GEQ shift_expression
    (42) relational_expression -> relational_expression . LEQ shift_expression

    EQUAL           reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    NEQUAL          reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    AND_BITWISE     reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    XOR             reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    OR_BITWISE      reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    AND             reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    OR              reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    KWRD_MATCH      reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    RPAREN          reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    COMMA           reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    STATE_END       reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    RBPAREN         reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    FUNTYPE         reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    GREATER         shift and go to state 152
    LESS            shift and go to state 153
    GEQ             shift and go to state 151
    LEQ             shift and go to state 154


state 211

    (36) equality_expression -> equality_expression EQUAL relational_expression .
    (39) relational_expression -> relational_expression . GREATER shift_expression
    (40) relational_expression -> relational_expression . LESS shift_expression
    (41) relational_expression -> relational_expression . GEQ shift_expression
    (42) relational_expression -> relational_expression . LEQ shift_expression

    EQUAL           reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    NEQUAL          reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND_BITWISE     reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    XOR             reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR_BITWISE      reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND             reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR              reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    KWRD_MATCH      reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    RPAREN          reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    COMMA           reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    STATE_END       reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    RBPAREN         reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    FUNTYPE         reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    GREATER         shift and go to state 152
    LESS            shift and go to state 153
    GEQ             shift and go to state 151
    LEQ             shift and go to state 154


state 212

    (34) and_expression -> and_expression AND_BITWISE equality_expression .
    (36) equality_expression -> equality_expression . EQUAL relational_expression
    (37) equality_expression -> equality_expression . NEQUAL relational_expression

    AND_BITWISE     reduce using rule 34 (and_expression -> and_expression AND_BITWISE equality_expression .)
    XOR             reduce using rule 34 (and_expression -> and_expression AND_BITWISE equality_expression .)
    OR_BITWISE      reduce using rule 34 (and_expression -> and_expression AND_BITWISE equality_expression .)
    AND             reduce using rule 34 (and_expression -> and_expression AND_BITWISE equality_expression .)
    OR              reduce using rule 34 (and_expression -> and_expression AND_BITWISE equality_expression .)
    KWRD_MATCH      reduce using rule 34 (and_expression -> and_expression AND_BITWISE equality_expression .)
    STATE_END       reduce using rule 34 (and_expression -> and_expression AND_BITWISE equality_expression .)
    RPAREN          reduce using rule 34 (and_expression -> and_expression AND_BITWISE equality_expression .)
    COMMA           reduce using rule 34 (and_expression -> and_expression AND_BITWISE equality_expression .)
    RBPAREN         reduce using rule 34 (and_expression -> and_expression AND_BITWISE equality_expression .)
    FUNTYPE         reduce using rule 34 (and_expression -> and_expression AND_BITWISE equality_expression .)
    EQUAL           shift and go to state 156
    NEQUAL          shift and go to state 155


state 213

    (62) cast_expression -> LPAREN primitive_type RPAREN . unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    IDENTIFIER      shift and go to state 76
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    qualified_name                 shift and go to state 78
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    unary_expression               shift and go to state 237
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 107
    array_access                   shift and go to state 29
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    literal                        shift and go to state 71
    method_invocation              shift and go to state 108
    cast_expression                shift and go to state 79
    simple_name                    shift and go to state 68
    name                           shift and go to state 109

state 214

    (61) base_variable_set -> LPAREN expression RPAREN .

    TIMES           reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    REMAINDER       reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    LESS            reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    GEQ             reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    LEQ             reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    NEQUAL          reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    AND_BITWISE     reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    XOR             reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    OR_BITWISE      reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    AND             reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    OR              reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    KWRD_MATCH      reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    STATE_END       reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    RBPAREN         reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)
    FUNTYPE         reduce using rule 61 (base_variable_set -> LPAREN expression RPAREN .)


state 215

    (166) method_header_name -> modifier_opts KWRD_DEF IDENTIFIER .

    LPAREN          reduce using rule 166 (method_header_name -> modifier_opts KWRD_DEF IDENTIFIER .)


state 216

    (102) local_variable_declaration -> modifier_opts declaration_keyword variable_declaration_body .

    STATE_END       reduce using rule 102 (local_variable_declaration -> modifier_opts declaration_keyword variable_declaration_body .)


state 217

    (108) variable_declaration_body -> variable_declarator . ASSIGN variable_declaration_initializer

    ASSIGN          shift and go to state 238


state 218

    (109) variable_declaration_body -> LPAREN . variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list RPAREN
    (110) variable_declarators -> . variable_declarator
    (111) variable_declarators -> . variable_declarators COMMA variable_declarator
    (112) variable_declarator -> . variable_declarator_id
    (113) variable_declarator_id -> . IDENTIFIER COLON type

    IDENTIFIER      shift and go to state 182

    variable_declarators           shift and go to state 239
    variable_declarator_id         shift and go to state 179
    variable_declarator            shift and go to state 181

state 219

    (151) constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER COLON . type
    (170) type -> . primitive_type
    (171) type -> . reference_type
    (172) primitive_type -> . TYPE_INT
    (173) primitive_type -> . TYPE_FLOAT
    (174) primitive_type -> . TYPE_CHAR
    (175) primitive_type -> . TYPE_STRING
    (176) primitive_type -> . TYPE_BOOLEAN
    (177) reference_type -> . class_data_type
    (178) reference_type -> . array_data_type
    (179) class_data_type -> . name
    (180) array_data_type -> . KWRD_ARRAY LBPAREN type RBPAREN
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name

    TYPE_INT        shift and go to state 162
    TYPE_FLOAT      shift and go to state 167
    TYPE_CHAR       shift and go to state 164
    TYPE_STRING     shift and go to state 163
    TYPE_BOOLEAN    shift and go to state 166
    KWRD_ARRAY      shift and go to state 244
    IDENTIFIER      shift and go to state 76

    name                           shift and go to state 240
    qualified_name                 shift and go to state 78
    reference_type                 shift and go to state 241
    primitive_type                 shift and go to state 242
    class_data_type                shift and go to state 243
    type                           shift and go to state 245
    array_data_type                shift and go to state 246
    simple_name                    shift and go to state 68

state 220

    (150) constructor_arguement_list -> constructor_arguement_list COMMA constructor_arguement_list_declarator .

    COMMA           reduce using rule 150 (constructor_arguement_list -> constructor_arguement_list COMMA constructor_arguement_list_declarator .)
    RPAREN          reduce using rule 150 (constructor_arguement_list -> constructor_arguement_list COMMA constructor_arguement_list_declarator .)


state 221

    (160) class_header_extends -> KWRD_EXTNDS name LPAREN func_arguement_list_opt . RPAREN

    RPAREN          shift and go to state 247


state 222

    (133) do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN . expression RPAREN STATE_END
    (8) expression -> . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    additive_expression            shift and go to state 52
    simple_name                    shift and go to state 68
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    and_expression                 shift and go to state 86
    relational_expression          shift and go to state 73
    cast_expression                shift and go to state 79
    conditional_or_expression      shift and go to state 53
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    assignment                     shift and go to state 118
    multiplicative_expression      shift and go to state 55
    method_invocation              shift and go to state 108
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 119
    expression                     shift and go to state 248
    conditional_and_expression     shift and go to state 59

state 223

    (163) method_header -> method_header_name LPAREN func_arguement_list_opt RPAREN . COLON method_return_type ASSIGN

    COLON           shift and go to state 249


state 224

    (111) variable_declarators -> variable_declarators COMMA . variable_declarator
    (112) variable_declarator -> . variable_declarator_id
    (113) variable_declarator_id -> . IDENTIFIER COLON type

    IDENTIFIER      shift and go to state 182

    variable_declarator_id         shift and go to state 179
    variable_declarator            shift and go to state 250

state 225

    (113) variable_declarator_id -> IDENTIFIER COLON . type
    (170) type -> . primitive_type
    (171) type -> . reference_type
    (172) primitive_type -> . TYPE_INT
    (173) primitive_type -> . TYPE_FLOAT
    (174) primitive_type -> . TYPE_CHAR
    (175) primitive_type -> . TYPE_STRING
    (176) primitive_type -> . TYPE_BOOLEAN
    (177) reference_type -> . class_data_type
    (178) reference_type -> . array_data_type
    (179) class_data_type -> . name
    (180) array_data_type -> . KWRD_ARRAY LBPAREN type RBPAREN
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name

    TYPE_INT        shift and go to state 162
    TYPE_FLOAT      shift and go to state 167
    TYPE_CHAR       shift and go to state 164
    TYPE_STRING     shift and go to state 163
    TYPE_BOOLEAN    shift and go to state 166
    KWRD_ARRAY      shift and go to state 244
    IDENTIFIER      shift and go to state 76

    name                           shift and go to state 240
    qualified_name                 shift and go to state 78
    reference_type                 shift and go to state 241
    primitive_type                 shift and go to state 242
    class_data_type                shift and go to state 243
    type                           shift and go to state 251
    array_data_type                shift and go to state 246
    simple_name                    shift and go to state 68

state 226

    (78) argument_list -> argument_list COMMA . expression
    (8) expression -> . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    additive_expression            shift and go to state 52
    simple_name                    shift and go to state 68
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    and_expression                 shift and go to state 86
    relational_expression          shift and go to state 73
    cast_expression                shift and go to state 79
    conditional_or_expression      shift and go to state 53
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    assignment                     shift and go to state 118
    multiplicative_expression      shift and go to state 55
    method_invocation              shift and go to state 108
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 119
    expression                     shift and go to state 252
    conditional_and_expression     shift and go to state 59

state 227

    (73) method_invocation -> name LPAREN argument_list_opt RPAREN .

    TIMES           reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    DIVIDE          reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    REMAINDER       reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    PLUS            reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    MINUS           reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    LSHIFT          reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    RSHIFT          reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    GREATER         reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    LESS            reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    GEQ             reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    LEQ             reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    EQUAL           reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    NEQUAL          reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    AND_BITWISE     reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    XOR             reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    OR_BITWISE      reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    STATE_END       reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    KWRD_MATCH      reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    RBPAREN         reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    FUNTYPE         reduce using rule 73 (method_invocation -> name LPAREN argument_list_opt RPAREN .)


state 228

    (74) array_access -> name LBPAREN expression RBPAREN .

    ASSIGN          reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    TIMES_ASSIGN    reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    DIVIDE_ASSIGN   reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    REMAINDER_ASSIGN reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    PLUS_ASSIGN     reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    MINUS_ASSIGN    reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    LSHIFT_ASSIGN   reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    RSHIFT_ASSIGN   reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    AND_ASSIGN      reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    OR_ASSIGN       reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    XOR_ASSIGN      reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    TIMES           reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    DIVIDE          reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    REMAINDER       reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    PLUS            reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    MINUS           reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    LSHIFT          reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    RSHIFT          reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    GREATER         reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    LESS            reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    GEQ             reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    LEQ             reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    EQUAL           reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    NEQUAL          reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    AND_BITWISE     reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    XOR             reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    OR_BITWISE      reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    AND             reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    OR              reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    KWRD_MATCH      reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    COMMA           reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    RPAREN          reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    RBPAREN         reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    STATE_END       reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)
    FUNTYPE         reduce using rule 74 (array_access -> name LBPAREN expression RBPAREN .)


state 229

    (132) while_statement -> KWRD_WHILE LPAREN expression RPAREN . statement
    (114) statement -> . normal_statement
    (115) statement -> . if_then_statement
    (116) statement -> . if_then_else_statement
    (117) statement -> . while_statement
    (118) statement -> . do_while_statement
    (119) normal_statement -> . block
    (120) normal_statement -> . expression_statement
    (121) normal_statement -> . empty_statement
    (122) normal_statement -> . return_statement
    (123) normal_statement -> . switch_statement
    (127) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (128) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (132) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (133) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (87) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (124) expression_statement -> . statement_expression STATE_END
    (145) empty_statement -> . STATE_END
    (146) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (134) switch_statement -> . expression KWRD_MATCH switch_block
    (125) statement_expression -> . assignment
    (126) statement_expression -> . method_invocation
    (8) expression -> . assignment_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (74) array_access -> . name LBPAREN expression RBPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    KWRD_IF         shift and go to state 57
    KWRD_WHILE      shift and go to state 46
    KWRD_DO         shift and go to state 41
    BLOCK_BEGIN     shift and go to state 15
    STATE_END       shift and go to state 47
    KWRD_RETURN     shift and go to state 44
    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    expression_statement           shift and go to state 27
    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    normal_statement               shift and go to state 84
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    if_then_statement              shift and go to state 67
    array_access                   shift and go to state 29
    switch_statement               shift and go to state 50
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    return_statement               shift and go to state 88
    while_statement                shift and go to state 35
    and_expression                 shift and go to state 86
    statement                      shift and go to state 253
    statement_expression           shift and go to state 38
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 68
    conditional_or_expression      shift and go to state 53
    relational_expression          shift and go to state 73
    do_while_statement             shift and go to state 54
    assignment                     shift and go to state 92
    multiplicative_expression      shift and go to state 55
    additive_expression            shift and go to state 52
    cast_expression                shift and go to state 79
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 45
    empty_statement                shift and go to state 82
    expression                     shift and go to state 61
    conditional_and_expression     shift and go to state 59
    block                          shift and go to state 62
    if_then_else_statement         shift and go to state 63

state 230

    (127) if_then_statement -> KWRD_IF LPAREN expression RPAREN . statement
    (128) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN . if_then_else_intermediate KWRD_ELSE statement
    (114) statement -> . normal_statement
    (115) statement -> . if_then_statement
    (116) statement -> . if_then_else_statement
    (117) statement -> . while_statement
    (118) statement -> . do_while_statement
    (130) if_then_else_intermediate -> . normal_statement
    (131) if_then_else_intermediate -> . if_then_else_statement_precedence
    (119) normal_statement -> . block
    (120) normal_statement -> . expression_statement
    (121) normal_statement -> . empty_statement
    (122) normal_statement -> . return_statement
    (123) normal_statement -> . switch_statement
    (127) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (128) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (132) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (133) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (129) if_then_else_statement_precedence -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
    (87) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (124) expression_statement -> . statement_expression STATE_END
    (145) empty_statement -> . STATE_END
    (146) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (134) switch_statement -> . expression KWRD_MATCH switch_block
    (125) statement_expression -> . assignment
    (126) statement_expression -> . method_invocation
    (8) expression -> . assignment_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (74) array_access -> . name LBPAREN expression RBPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    KWRD_IF         shift and go to state 254
    KWRD_WHILE      shift and go to state 46
    KWRD_DO         shift and go to state 41
    BLOCK_BEGIN     shift and go to state 15
    STATE_END       shift and go to state 47
    KWRD_RETURN     shift and go to state 44
    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    expression_statement           shift and go to state 27
    if_then_else_statement_precedence shift and go to state 257
    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    normal_statement               shift and go to state 258
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    if_then_else_intermediate      shift and go to state 255
    if_then_statement              shift and go to state 67
    array_access                   shift and go to state 29
    switch_statement               shift and go to state 50
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    return_statement               shift and go to state 88
    while_statement                shift and go to state 35
    and_expression                 shift and go to state 86
    statement                      shift and go to state 256
    statement_expression           shift and go to state 38
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 68
    conditional_or_expression      shift and go to state 53
    relational_expression          shift and go to state 73
    do_while_statement             shift and go to state 54
    assignment                     shift and go to state 92
    multiplicative_expression      shift and go to state 55
    additive_expression            shift and go to state 52
    cast_expression                shift and go to state 79
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 45
    empty_statement                shift and go to state 82
    expression                     shift and go to state 61
    conditional_and_expression     shift and go to state 59
    block                          shift and go to state 62
    if_then_else_statement         shift and go to state 63

state 231

    (135) switch_block -> BLOCK_BEGIN BLOCK_END .

    KWRD_IF         reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_WHILE      reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_DO         reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_OBJECT     reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    STATE_END       reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_RETURN     reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_PROTECTED  reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_PRIVATE    reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    IDENTIFIER      reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    PLUS            reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    MINUS           reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    TILDA           reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    NOT             reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    LPAREN          reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    CHARACTER       reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    STRING_CONST    reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    BOOL_CONSTT     reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    BOOL_CONSTF     reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_NULL       reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    FLOAT_CONST     reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    INT_CONST       reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_DEF        reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_CLASS      reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_VAR        reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_VAL        reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    BLOCK_END       reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_CASE       reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_ELSE       reduce using rule 135 (switch_block -> BLOCK_BEGIN BLOCK_END .)


state 232

    (144) switch_label -> KWRD_CASE . expression FUNTYPE
    (8) expression -> . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    additive_expression            shift and go to state 52
    simple_name                    shift and go to state 68
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    and_expression                 shift and go to state 86
    relational_expression          shift and go to state 73
    cast_expression                shift and go to state 79
    conditional_or_expression      shift and go to state 53
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    assignment                     shift and go to state 118
    multiplicative_expression      shift and go to state 55
    method_invocation              shift and go to state 108
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 119
    expression                     shift and go to state 259
    conditional_and_expression     shift and go to state 59

state 233

    (137) switch_block -> BLOCK_BEGIN switch_labels . BLOCK_END
    (143) switch_labels -> switch_labels . switch_label
    (141) switch_block_statement -> switch_labels . block_statements
    (144) switch_label -> . KWRD_CASE expression FUNTYPE
    (90) block_statements -> . block_statement
    (91) block_statements -> . block_statements block_statement
    (92) block_statement -> . local_variable_declaration_statement
    (93) block_statement -> . statement
    (94) block_statement -> . class_declaration
    (95) block_statement -> . SingletonObject
    (96) block_statement -> . method_declaration
    (101) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (114) statement -> . normal_statement
    (115) statement -> . if_then_statement
    (116) statement -> . if_then_else_statement
    (117) statement -> . while_statement
    (118) statement -> . do_while_statement
    (154) class_declaration -> . class_header class_body
    (5) SingletonObject -> . ObjectDeclare block
    (162) method_declaration -> . method_header method_body
    (102) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (119) normal_statement -> . block
    (120) normal_statement -> . expression_statement
    (121) normal_statement -> . empty_statement
    (122) normal_statement -> . return_statement
    (123) normal_statement -> . switch_statement
    (127) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (128) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (132) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (133) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (155) class_header -> . class_header_name class_header_extends_opt
    (6) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (7) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (163) method_header -> . method_header_name LPAREN func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (97) modifier_opts -> . modifier
    (98) modifier_opts -> . empty
    (87) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (124) expression_statement -> . statement_expression STATE_END
    (145) empty_statement -> . STATE_END
    (146) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (134) switch_statement -> . expression KWRD_MATCH switch_block
    (156) class_header_name -> . class_header_name1 LPAREN constructor_arguement_list_opt RPAREN
    (166) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (168) modifier -> . KWRD_PROTECTED
    (169) modifier -> . KWRD_PRIVATE
    (185) empty -> .
    (125) statement_expression -> . assignment
    (126) statement_expression -> . method_invocation
    (8) expression -> . assignment_expression
    (157) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (74) array_access -> . name LBPAREN expression RBPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    BLOCK_END       shift and go to state 260
    KWRD_CASE       shift and go to state 232
    KWRD_IF         shift and go to state 57
    KWRD_WHILE      shift and go to state 46
    KWRD_DO         shift and go to state 41
    KWRD_OBJECT     shift and go to state 4
    BLOCK_BEGIN     shift and go to state 15
    STATE_END       shift and go to state 47
    KWRD_RETURN     shift and go to state 44
    KWRD_PROTECTED  shift and go to state 10
    KWRD_PRIVATE    shift and go to state 14
    KWRD_DEF        reduce using rule 185 (empty -> .)
    KWRD_CLASS      reduce using rule 185 (empty -> .)
    KWRD_VAR        reduce using rule 185 (empty -> .)
    KWRD_VAL        reduce using rule 185 (empty -> .)
    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    expression_statement           shift and go to state 27
    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    normal_statement               shift and go to state 84
    ObjectDeclare                  shift and go to state 1
    class_header_name1             shift and go to state 2
    if_then_statement              shift and go to state 67
    array_access                   shift and go to state 29
    switch_statement               shift and go to state 50
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    method_header_name             shift and go to state 43
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 64
    cast_expression                shift and go to state 79
    block_statement                shift and go to state 70
    return_statement               shift and go to state 88
    while_statement                shift and go to state 35
    and_expression                 shift and go to state 86
    statement                      shift and go to state 74
    statement_expression           shift and go to state 38
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 68
    conditional_or_expression      shift and go to state 53
    empty                          shift and go to state 5
    relational_expression          shift and go to state 73
    block_statements               shift and go to state 262
    local_variable_declaration_statement shift and go to state 39
    do_while_statement             shift and go to state 54
    int_float                      shift and go to state 40
    assignment                     shift and go to state 92
    multiplicative_expression      shift and go to state 55
    literal                        shift and go to state 71
    primary                        shift and go to state 66
    additive_expression            shift and go to state 52
    SingletonObject                shift and go to state 42
    switch_label                   shift and go to state 261
    class_header                   shift and go to state 8
    modifier_opts                  shift and go to state 94
    equality_expression            shift and go to state 80
    variable_literal               shift and go to state 58
    name                           shift and go to state 45
    unary_expression_not_plus_minus shift and go to state 49
    method_header                  shift and go to state 81
    empty_statement                shift and go to state 82
    class_declaration              shift and go to state 95
    shift_expression               shift and go to state 56
    local_variable_declaration     shift and go to state 83
    modifier                       shift and go to state 13
    expression                     shift and go to state 61
    conditional_and_expression     shift and go to state 59
    block                          shift and go to state 62
    if_then_else_statement         shift and go to state 63

state 234

    (142) switch_labels -> switch_label .

    BLOCK_END       reduce using rule 142 (switch_labels -> switch_label .)
    KWRD_CASE       reduce using rule 142 (switch_labels -> switch_label .)
    KWRD_IF         reduce using rule 142 (switch_labels -> switch_label .)
    KWRD_WHILE      reduce using rule 142 (switch_labels -> switch_label .)
    KWRD_DO         reduce using rule 142 (switch_labels -> switch_label .)
    KWRD_OBJECT     reduce using rule 142 (switch_labels -> switch_label .)
    BLOCK_BEGIN     reduce using rule 142 (switch_labels -> switch_label .)
    STATE_END       reduce using rule 142 (switch_labels -> switch_label .)
    KWRD_RETURN     reduce using rule 142 (switch_labels -> switch_label .)
    KWRD_PROTECTED  reduce using rule 142 (switch_labels -> switch_label .)
    KWRD_PRIVATE    reduce using rule 142 (switch_labels -> switch_label .)
    IDENTIFIER      reduce using rule 142 (switch_labels -> switch_label .)
    PLUS            reduce using rule 142 (switch_labels -> switch_label .)
    MINUS           reduce using rule 142 (switch_labels -> switch_label .)
    TILDA           reduce using rule 142 (switch_labels -> switch_label .)
    NOT             reduce using rule 142 (switch_labels -> switch_label .)
    LPAREN          reduce using rule 142 (switch_labels -> switch_label .)
    CHARACTER       reduce using rule 142 (switch_labels -> switch_label .)
    STRING_CONST    reduce using rule 142 (switch_labels -> switch_label .)
    BOOL_CONSTT     reduce using rule 142 (switch_labels -> switch_label .)
    BOOL_CONSTF     reduce using rule 142 (switch_labels -> switch_label .)
    KWRD_NULL       reduce using rule 142 (switch_labels -> switch_label .)
    FLOAT_CONST     reduce using rule 142 (switch_labels -> switch_label .)
    INT_CONST       reduce using rule 142 (switch_labels -> switch_label .)
    KWRD_DEF        reduce using rule 142 (switch_labels -> switch_label .)
    KWRD_CLASS      reduce using rule 142 (switch_labels -> switch_label .)
    KWRD_VAR        reduce using rule 142 (switch_labels -> switch_label .)
    KWRD_VAL        reduce using rule 142 (switch_labels -> switch_label .)


state 235

    (136) switch_block -> BLOCK_BEGIN switch_block_statements . BLOCK_END
    (138) switch_block -> BLOCK_BEGIN switch_block_statements . switch_labels BLOCK_END
    (140) switch_block_statements -> switch_block_statements . switch_block_statement
    (142) switch_labels -> . switch_label
    (143) switch_labels -> . switch_labels switch_label
    (141) switch_block_statement -> . switch_labels block_statements
    (144) switch_label -> . KWRD_CASE expression FUNTYPE

    BLOCK_END       shift and go to state 263
    KWRD_CASE       shift and go to state 232

    switch_labels                  shift and go to state 264
    switch_label                   shift and go to state 234
    switch_block_statement         shift and go to state 265

state 236

    (139) switch_block_statements -> switch_block_statement .

    BLOCK_END       reduce using rule 139 (switch_block_statements -> switch_block_statement .)
    KWRD_CASE       reduce using rule 139 (switch_block_statements -> switch_block_statement .)


state 237

    (62) cast_expression -> LPAREN primitive_type RPAREN unary_expression .

    TIMES           reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    DIVIDE          reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    REMAINDER       reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    PLUS            reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    MINUS           reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    LSHIFT          reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    RSHIFT          reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    GREATER         reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    LESS            reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    GEQ             reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    LEQ             reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    EQUAL           reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    NEQUAL          reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    AND_BITWISE     reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    XOR             reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    OR_BITWISE      reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    AND             reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    OR              reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    KWRD_MATCH      reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    STATE_END       reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    RPAREN          reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    COMMA           reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    RBPAREN         reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    FUNTYPE         reduce using rule 62 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)


state 238

    (108) variable_declaration_body -> variable_declarator ASSIGN . variable_declaration_initializer
    (103) variable_declaration_initializer -> . expression
    (104) variable_declaration_initializer -> . array_initializer
    (105) variable_declaration_initializer -> . class_initializer
    (8) expression -> . assignment_expression
    (181) array_initializer -> . KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN
    (182) array_initializer -> . KWRD_ARRAY LPAREN argument_list_opt RPAREN
    (183) class_initializer -> . KWRD_NEW name LPAREN argument_list_opt RPAREN
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    KWRD_NEW        shift and go to state 268
    KWRD_ARRAY      shift and go to state 267
    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    variable_declaration_initializer shift and go to state 266
    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    and_expression                 shift and go to state 86
    simple_name                    shift and go to state 68
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    relational_expression          shift and go to state 73
    cast_expression                shift and go to state 79
    conditional_or_expression      shift and go to state 53
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    assignment                     shift and go to state 118
    multiplicative_expression      shift and go to state 55
    additive_expression            shift and go to state 52
    method_invocation              shift and go to state 108
    class_initializer              shift and go to state 269
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    array_initializer              shift and go to state 270
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 119
    expression                     shift and go to state 271
    conditional_and_expression     shift and go to state 59

state 239

    (109) variable_declaration_body -> LPAREN variable_declarators . RPAREN ASSIGN LPAREN variable_arguement_list RPAREN
    (111) variable_declarators -> variable_declarators . COMMA variable_declarator

    RPAREN          shift and go to state 272
    COMMA           shift and go to state 224


state 240

    (179) class_data_type -> name .
    (82) qualified_name -> name . DOT simple_name

    RBPAREN         reduce using rule 179 (class_data_type -> name .)
    ASSIGN          reduce using rule 179 (class_data_type -> name .)
    COMMA           reduce using rule 179 (class_data_type -> name .)
    RPAREN          reduce using rule 179 (class_data_type -> name .)
    DOT             shift and go to state 123


state 241

    (171) type -> reference_type .

    COMMA           reduce using rule 171 (type -> reference_type .)
    RPAREN          reduce using rule 171 (type -> reference_type .)
    ASSIGN          reduce using rule 171 (type -> reference_type .)
    RBPAREN         reduce using rule 171 (type -> reference_type .)


state 242

    (170) type -> primitive_type .

    COMMA           reduce using rule 170 (type -> primitive_type .)
    RPAREN          reduce using rule 170 (type -> primitive_type .)
    ASSIGN          reduce using rule 170 (type -> primitive_type .)
    RBPAREN         reduce using rule 170 (type -> primitive_type .)


state 243

    (177) reference_type -> class_data_type .

    COMMA           reduce using rule 177 (reference_type -> class_data_type .)
    RPAREN          reduce using rule 177 (reference_type -> class_data_type .)
    RBPAREN         reduce using rule 177 (reference_type -> class_data_type .)
    ASSIGN          reduce using rule 177 (reference_type -> class_data_type .)


state 244

    (180) array_data_type -> KWRD_ARRAY . LBPAREN type RBPAREN

    LBPAREN         shift and go to state 273


state 245

    (151) constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER COLON type .

    COMMA           reduce using rule 151 (constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER COLON type .)
    RPAREN          reduce using rule 151 (constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER COLON type .)


state 246

    (178) reference_type -> array_data_type .

    COMMA           reduce using rule 178 (reference_type -> array_data_type .)
    RPAREN          reduce using rule 178 (reference_type -> array_data_type .)
    RBPAREN         reduce using rule 178 (reference_type -> array_data_type .)
    ASSIGN          reduce using rule 178 (reference_type -> array_data_type .)


state 247

    (160) class_header_extends -> KWRD_EXTNDS name LPAREN func_arguement_list_opt RPAREN .

    BLOCK_BEGIN     reduce using rule 160 (class_header_extends -> KWRD_EXTNDS name LPAREN func_arguement_list_opt RPAREN .)


state 248

    (133) do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression . RPAREN STATE_END

    RPAREN          shift and go to state 274


state 249

    (163) method_header -> method_header_name LPAREN func_arguement_list_opt RPAREN COLON . method_return_type ASSIGN
    (164) method_return_type -> . type
    (165) method_return_type -> . TYPE_VOID
    (170) type -> . primitive_type
    (171) type -> . reference_type
    (172) primitive_type -> . TYPE_INT
    (173) primitive_type -> . TYPE_FLOAT
    (174) primitive_type -> . TYPE_CHAR
    (175) primitive_type -> . TYPE_STRING
    (176) primitive_type -> . TYPE_BOOLEAN
    (177) reference_type -> . class_data_type
    (178) reference_type -> . array_data_type
    (179) class_data_type -> . name
    (180) array_data_type -> . KWRD_ARRAY LBPAREN type RBPAREN
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name

    TYPE_VOID       shift and go to state 275
    TYPE_INT        shift and go to state 162
    TYPE_FLOAT      shift and go to state 167
    TYPE_CHAR       shift and go to state 164
    TYPE_STRING     shift and go to state 163
    TYPE_BOOLEAN    shift and go to state 166
    KWRD_ARRAY      shift and go to state 244
    IDENTIFIER      shift and go to state 76

    name                           shift and go to state 240
    qualified_name                 shift and go to state 78
    method_return_type             shift and go to state 277
    reference_type                 shift and go to state 241
    primitive_type                 shift and go to state 242
    class_data_type                shift and go to state 243
    type                           shift and go to state 276
    array_data_type                shift and go to state 246
    simple_name                    shift and go to state 68

state 250

    (111) variable_declarators -> variable_declarators COMMA variable_declarator .

    COMMA           reduce using rule 111 (variable_declarators -> variable_declarators COMMA variable_declarator .)
    RPAREN          reduce using rule 111 (variable_declarators -> variable_declarators COMMA variable_declarator .)


state 251

    (113) variable_declarator_id -> IDENTIFIER COLON type .

    RPAREN          reduce using rule 113 (variable_declarator_id -> IDENTIFIER COLON type .)
    COMMA           reduce using rule 113 (variable_declarator_id -> IDENTIFIER COLON type .)
    ASSIGN          reduce using rule 113 (variable_declarator_id -> IDENTIFIER COLON type .)


state 252

    (78) argument_list -> argument_list COMMA expression .

    COMMA           reduce using rule 78 (argument_list -> argument_list COMMA expression .)
    RPAREN          reduce using rule 78 (argument_list -> argument_list COMMA expression .)


state 253

    (132) while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .

    KWRD_WHILE      reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_IF         reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_DO         reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_OBJECT     reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    BLOCK_BEGIN     reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    STATE_END       reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_RETURN     reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_PROTECTED  reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_PRIVATE    reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    TILDA           reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    CHARACTER       reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    STRING_CONST    reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    BOOL_CONSTT     reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    BOOL_CONSTF     reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_NULL       reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_DEF        reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_CLASS      reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_VAR        reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_VAL        reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    BLOCK_END       reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_CASE       reduce using rule 132 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)


state 254

    (127) if_then_statement -> KWRD_IF . LPAREN expression RPAREN statement
    (128) if_then_else_statement -> KWRD_IF . LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (129) if_then_else_statement_precedence -> KWRD_IF . LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate

    LPAREN          shift and go to state 278


state 255

    (128) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate . KWRD_ELSE statement

    KWRD_ELSE       shift and go to state 279


state 256

    (127) if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .

    KWRD_IF         reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_WHILE      reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_DO         reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_OBJECT     reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    BLOCK_BEGIN     reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    STATE_END       reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_RETURN     reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_PROTECTED  reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_PRIVATE    reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    TILDA           reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    CHARACTER       reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    STRING_CONST    reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    BOOL_CONSTT     reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    BOOL_CONSTF     reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_NULL       reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_DEF        reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_CLASS      reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_VAR        reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_VAL        reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    BLOCK_END       reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_CASE       reduce using rule 127 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)


state 257

    (131) if_then_else_intermediate -> if_then_else_statement_precedence .

    KWRD_ELSE       reduce using rule 131 (if_then_else_intermediate -> if_then_else_statement_precedence .)


state 258

    (114) statement -> normal_statement .
    (130) if_then_else_intermediate -> normal_statement .

    KWRD_IF         reduce using rule 114 (statement -> normal_statement .)
    KWRD_WHILE      reduce using rule 114 (statement -> normal_statement .)
    KWRD_DO         reduce using rule 114 (statement -> normal_statement .)
    KWRD_OBJECT     reduce using rule 114 (statement -> normal_statement .)
    BLOCK_BEGIN     reduce using rule 114 (statement -> normal_statement .)
    STATE_END       reduce using rule 114 (statement -> normal_statement .)
    KWRD_RETURN     reduce using rule 114 (statement -> normal_statement .)
    KWRD_PROTECTED  reduce using rule 114 (statement -> normal_statement .)
    KWRD_PRIVATE    reduce using rule 114 (statement -> normal_statement .)
    IDENTIFIER      reduce using rule 114 (statement -> normal_statement .)
    PLUS            reduce using rule 114 (statement -> normal_statement .)
    MINUS           reduce using rule 114 (statement -> normal_statement .)
    TILDA           reduce using rule 114 (statement -> normal_statement .)
    NOT             reduce using rule 114 (statement -> normal_statement .)
    LPAREN          reduce using rule 114 (statement -> normal_statement .)
    CHARACTER       reduce using rule 114 (statement -> normal_statement .)
    STRING_CONST    reduce using rule 114 (statement -> normal_statement .)
    BOOL_CONSTT     reduce using rule 114 (statement -> normal_statement .)
    BOOL_CONSTF     reduce using rule 114 (statement -> normal_statement .)
    KWRD_NULL       reduce using rule 114 (statement -> normal_statement .)
    FLOAT_CONST     reduce using rule 114 (statement -> normal_statement .)
    INT_CONST       reduce using rule 114 (statement -> normal_statement .)
    KWRD_DEF        reduce using rule 114 (statement -> normal_statement .)
    KWRD_CLASS      reduce using rule 114 (statement -> normal_statement .)
    KWRD_VAR        reduce using rule 114 (statement -> normal_statement .)
    KWRD_VAL        reduce using rule 114 (statement -> normal_statement .)
    BLOCK_END       reduce using rule 114 (statement -> normal_statement .)
    KWRD_CASE       reduce using rule 114 (statement -> normal_statement .)
    KWRD_ELSE       reduce using rule 130 (if_then_else_intermediate -> normal_statement .)


state 259

    (144) switch_label -> KWRD_CASE expression . FUNTYPE

    FUNTYPE         shift and go to state 280


state 260

    (137) switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .

    KWRD_IF         reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_WHILE      reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_DO         reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_OBJECT     reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    STATE_END       reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_RETURN     reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_PROTECTED  reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_PRIVATE    reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    IDENTIFIER      reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    PLUS            reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    MINUS           reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    TILDA           reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    NOT             reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    LPAREN          reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    CHARACTER       reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    STRING_CONST    reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    BOOL_CONSTT     reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    BOOL_CONSTF     reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_NULL       reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    FLOAT_CONST     reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    INT_CONST       reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_DEF        reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_CLASS      reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_VAR        reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_VAL        reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    BLOCK_END       reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_CASE       reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_ELSE       reduce using rule 137 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)


state 261

    (143) switch_labels -> switch_labels switch_label .

    BLOCK_END       reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    KWRD_CASE       reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    KWRD_IF         reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    KWRD_WHILE      reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    KWRD_DO         reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    KWRD_OBJECT     reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    BLOCK_BEGIN     reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    STATE_END       reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    KWRD_RETURN     reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    KWRD_PROTECTED  reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    KWRD_PRIVATE    reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    IDENTIFIER      reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    PLUS            reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    MINUS           reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    TILDA           reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    NOT             reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    LPAREN          reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    CHARACTER       reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    STRING_CONST    reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    BOOL_CONSTT     reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    BOOL_CONSTF     reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    KWRD_NULL       reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    FLOAT_CONST     reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    INT_CONST       reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    KWRD_DEF        reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    KWRD_CLASS      reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    KWRD_VAR        reduce using rule 143 (switch_labels -> switch_labels switch_label .)
    KWRD_VAL        reduce using rule 143 (switch_labels -> switch_labels switch_label .)


state 262

    (141) switch_block_statement -> switch_labels block_statements .
    (91) block_statements -> block_statements . block_statement
    (92) block_statement -> . local_variable_declaration_statement
    (93) block_statement -> . statement
    (94) block_statement -> . class_declaration
    (95) block_statement -> . SingletonObject
    (96) block_statement -> . method_declaration
    (101) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (114) statement -> . normal_statement
    (115) statement -> . if_then_statement
    (116) statement -> . if_then_else_statement
    (117) statement -> . while_statement
    (118) statement -> . do_while_statement
    (154) class_declaration -> . class_header class_body
    (5) SingletonObject -> . ObjectDeclare block
    (162) method_declaration -> . method_header method_body
    (102) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (119) normal_statement -> . block
    (120) normal_statement -> . expression_statement
    (121) normal_statement -> . empty_statement
    (122) normal_statement -> . return_statement
    (123) normal_statement -> . switch_statement
    (127) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (128) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (132) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (133) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (155) class_header -> . class_header_name class_header_extends_opt
    (6) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (7) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (163) method_header -> . method_header_name LPAREN func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (97) modifier_opts -> . modifier
    (98) modifier_opts -> . empty
    (87) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (124) expression_statement -> . statement_expression STATE_END
    (145) empty_statement -> . STATE_END
    (146) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (134) switch_statement -> . expression KWRD_MATCH switch_block
    (156) class_header_name -> . class_header_name1 LPAREN constructor_arguement_list_opt RPAREN
    (166) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (168) modifier -> . KWRD_PROTECTED
    (169) modifier -> . KWRD_PRIVATE
    (185) empty -> .
    (125) statement_expression -> . assignment
    (126) statement_expression -> . method_invocation
    (8) expression -> . assignment_expression
    (157) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (74) array_access -> . name LBPAREN expression RBPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    BLOCK_END       reduce using rule 141 (switch_block_statement -> switch_labels block_statements .)
    KWRD_CASE       reduce using rule 141 (switch_block_statement -> switch_labels block_statements .)
    KWRD_IF         shift and go to state 57
    KWRD_WHILE      shift and go to state 46
    KWRD_DO         shift and go to state 41
    KWRD_OBJECT     shift and go to state 4
    BLOCK_BEGIN     shift and go to state 15
    STATE_END       shift and go to state 47
    KWRD_RETURN     shift and go to state 44
    KWRD_PROTECTED  shift and go to state 10
    KWRD_PRIVATE    shift and go to state 14
    KWRD_DEF        reduce using rule 185 (empty -> .)
    KWRD_CLASS      reduce using rule 185 (empty -> .)
    KWRD_VAR        reduce using rule 185 (empty -> .)
    KWRD_VAL        reduce using rule 185 (empty -> .)
    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    expression_statement           shift and go to state 27
    unary_expression               shift and go to state 48
    method_header                  shift and go to state 81
    exclusive_or_expression        shift and go to state 65
    normal_statement               shift and go to state 84
    ObjectDeclare                  shift and go to state 1
    class_header_name1             shift and go to state 2
    unary_expression_not_plus_minus shift and go to state 49
    if_then_statement              shift and go to state 67
    array_access                   shift and go to state 29
    switch_statement               shift and go to state 50
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 64
    cast_expression                shift and go to state 79
    block_statement                shift and go to state 161
    return_statement               shift and go to state 88
    while_statement                shift and go to state 35
    and_expression                 shift and go to state 86
    statement                      shift and go to state 74
    statement_expression           shift and go to state 38
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 68
    conditional_or_expression      shift and go to state 53
    empty                          shift and go to state 5
    relational_expression          shift and go to state 73
    local_variable_declaration_statement shift and go to state 39
    do_while_statement             shift and go to state 54
    int_float                      shift and go to state 40
    assignment                     shift and go to state 92
    multiplicative_expression      shift and go to state 55
    literal                        shift and go to state 71
    primary                        shift and go to state 66
    additive_expression            shift and go to state 52
    SingletonObject                shift and go to state 42
    method_header_name             shift and go to state 43
    class_header                   shift and go to state 8
    modifier_opts                  shift and go to state 94
    equality_expression            shift and go to state 80
    variable_literal               shift and go to state 58
    name                           shift and go to state 45
    empty_statement                shift and go to state 82
    class_declaration              shift and go to state 95
    shift_expression               shift and go to state 56
    local_variable_declaration     shift and go to state 83
    modifier                       shift and go to state 13
    expression                     shift and go to state 61
    conditional_and_expression     shift and go to state 59
    block                          shift and go to state 62
    if_then_else_statement         shift and go to state 63

state 263

    (136) switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .

    KWRD_IF         reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_WHILE      reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_DO         reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_OBJECT     reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    STATE_END       reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_RETURN     reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_PROTECTED  reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_PRIVATE    reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    IDENTIFIER      reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    PLUS            reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    MINUS           reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    TILDA           reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    NOT             reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    LPAREN          reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    CHARACTER       reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    STRING_CONST    reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    BOOL_CONSTT     reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    BOOL_CONSTF     reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_NULL       reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    FLOAT_CONST     reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    INT_CONST       reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_DEF        reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_CLASS      reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_VAR        reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_VAL        reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    BLOCK_END       reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_CASE       reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_ELSE       reduce using rule 136 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)


state 264

    (138) switch_block -> BLOCK_BEGIN switch_block_statements switch_labels . BLOCK_END
    (143) switch_labels -> switch_labels . switch_label
    (141) switch_block_statement -> switch_labels . block_statements
    (144) switch_label -> . KWRD_CASE expression FUNTYPE
    (90) block_statements -> . block_statement
    (91) block_statements -> . block_statements block_statement
    (92) block_statement -> . local_variable_declaration_statement
    (93) block_statement -> . statement
    (94) block_statement -> . class_declaration
    (95) block_statement -> . SingletonObject
    (96) block_statement -> . method_declaration
    (101) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (114) statement -> . normal_statement
    (115) statement -> . if_then_statement
    (116) statement -> . if_then_else_statement
    (117) statement -> . while_statement
    (118) statement -> . do_while_statement
    (154) class_declaration -> . class_header class_body
    (5) SingletonObject -> . ObjectDeclare block
    (162) method_declaration -> . method_header method_body
    (102) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (119) normal_statement -> . block
    (120) normal_statement -> . expression_statement
    (121) normal_statement -> . empty_statement
    (122) normal_statement -> . return_statement
    (123) normal_statement -> . switch_statement
    (127) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (128) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (132) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (133) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (155) class_header -> . class_header_name class_header_extends_opt
    (6) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (7) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (163) method_header -> . method_header_name LPAREN func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (97) modifier_opts -> . modifier
    (98) modifier_opts -> . empty
    (87) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (124) expression_statement -> . statement_expression STATE_END
    (145) empty_statement -> . STATE_END
    (146) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (134) switch_statement -> . expression KWRD_MATCH switch_block
    (156) class_header_name -> . class_header_name1 LPAREN constructor_arguement_list_opt RPAREN
    (166) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (168) modifier -> . KWRD_PROTECTED
    (169) modifier -> . KWRD_PRIVATE
    (185) empty -> .
    (125) statement_expression -> . assignment
    (126) statement_expression -> . method_invocation
    (8) expression -> . assignment_expression
    (157) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (74) array_access -> . name LBPAREN expression RBPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    BLOCK_END       shift and go to state 281
    KWRD_CASE       shift and go to state 232
    KWRD_IF         shift and go to state 57
    KWRD_WHILE      shift and go to state 46
    KWRD_DO         shift and go to state 41
    KWRD_OBJECT     shift and go to state 4
    BLOCK_BEGIN     shift and go to state 15
    STATE_END       shift and go to state 47
    KWRD_RETURN     shift and go to state 44
    KWRD_PROTECTED  shift and go to state 10
    KWRD_PRIVATE    shift and go to state 14
    KWRD_DEF        reduce using rule 185 (empty -> .)
    KWRD_CLASS      reduce using rule 185 (empty -> .)
    KWRD_VAR        reduce using rule 185 (empty -> .)
    KWRD_VAL        reduce using rule 185 (empty -> .)
    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    expression_statement           shift and go to state 27
    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    normal_statement               shift and go to state 84
    ObjectDeclare                  shift and go to state 1
    class_header_name1             shift and go to state 2
    if_then_statement              shift and go to state 67
    array_access                   shift and go to state 29
    switch_statement               shift and go to state 50
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    method_header_name             shift and go to state 43
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 64
    cast_expression                shift and go to state 79
    block_statement                shift and go to state 70
    return_statement               shift and go to state 88
    while_statement                shift and go to state 35
    and_expression                 shift and go to state 86
    statement                      shift and go to state 74
    statement_expression           shift and go to state 38
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 68
    conditional_or_expression      shift and go to state 53
    empty                          shift and go to state 5
    relational_expression          shift and go to state 73
    block_statements               shift and go to state 262
    local_variable_declaration_statement shift and go to state 39
    do_while_statement             shift and go to state 54
    int_float                      shift and go to state 40
    assignment                     shift and go to state 92
    multiplicative_expression      shift and go to state 55
    literal                        shift and go to state 71
    primary                        shift and go to state 66
    additive_expression            shift and go to state 52
    SingletonObject                shift and go to state 42
    switch_label                   shift and go to state 261
    class_header                   shift and go to state 8
    modifier_opts                  shift and go to state 94
    equality_expression            shift and go to state 80
    variable_literal               shift and go to state 58
    name                           shift and go to state 45
    unary_expression_not_plus_minus shift and go to state 49
    expression                     shift and go to state 61
    method_header                  shift and go to state 81
    empty_statement                shift and go to state 82
    class_declaration              shift and go to state 95
    shift_expression               shift and go to state 56
    local_variable_declaration     shift and go to state 83
    modifier                       shift and go to state 13
    conditional_and_expression     shift and go to state 59
    block                          shift and go to state 62
    if_then_else_statement         shift and go to state 63

state 265

    (140) switch_block_statements -> switch_block_statements switch_block_statement .

    BLOCK_END       reduce using rule 140 (switch_block_statements -> switch_block_statements switch_block_statement .)
    KWRD_CASE       reduce using rule 140 (switch_block_statements -> switch_block_statements switch_block_statement .)


state 266

    (108) variable_declaration_body -> variable_declarator ASSIGN variable_declaration_initializer .

    STATE_END       reduce using rule 108 (variable_declaration_body -> variable_declarator ASSIGN variable_declaration_initializer .)


state 267

    (182) array_initializer -> KWRD_ARRAY . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 282


state 268

    (181) array_initializer -> KWRD_NEW . KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN
    (183) class_initializer -> KWRD_NEW . name LPAREN argument_list_opt RPAREN
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name

    KWRD_ARRAY      shift and go to state 284
    IDENTIFIER      shift and go to state 76

    simple_name                    shift and go to state 68
    name                           shift and go to state 283
    qualified_name                 shift and go to state 78

state 269

    (105) variable_declaration_initializer -> class_initializer .

    RPAREN          reduce using rule 105 (variable_declaration_initializer -> class_initializer .)
    COMMA           reduce using rule 105 (variable_declaration_initializer -> class_initializer .)
    STATE_END       reduce using rule 105 (variable_declaration_initializer -> class_initializer .)


state 270

    (104) variable_declaration_initializer -> array_initializer .

    RPAREN          reduce using rule 104 (variable_declaration_initializer -> array_initializer .)
    COMMA           reduce using rule 104 (variable_declaration_initializer -> array_initializer .)
    STATE_END       reduce using rule 104 (variable_declaration_initializer -> array_initializer .)


state 271

    (103) variable_declaration_initializer -> expression .

    RPAREN          reduce using rule 103 (variable_declaration_initializer -> expression .)
    COMMA           reduce using rule 103 (variable_declaration_initializer -> expression .)
    STATE_END       reduce using rule 103 (variable_declaration_initializer -> expression .)


state 272

    (109) variable_declaration_body -> LPAREN variable_declarators RPAREN . ASSIGN LPAREN variable_arguement_list RPAREN

    ASSIGN          shift and go to state 285


state 273

    (180) array_data_type -> KWRD_ARRAY LBPAREN . type RBPAREN
    (170) type -> . primitive_type
    (171) type -> . reference_type
    (172) primitive_type -> . TYPE_INT
    (173) primitive_type -> . TYPE_FLOAT
    (174) primitive_type -> . TYPE_CHAR
    (175) primitive_type -> . TYPE_STRING
    (176) primitive_type -> . TYPE_BOOLEAN
    (177) reference_type -> . class_data_type
    (178) reference_type -> . array_data_type
    (179) class_data_type -> . name
    (180) array_data_type -> . KWRD_ARRAY LBPAREN type RBPAREN
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name

    TYPE_INT        shift and go to state 162
    TYPE_FLOAT      shift and go to state 167
    TYPE_CHAR       shift and go to state 164
    TYPE_STRING     shift and go to state 163
    TYPE_BOOLEAN    shift and go to state 166
    KWRD_ARRAY      shift and go to state 244
    IDENTIFIER      shift and go to state 76

    name                           shift and go to state 240
    qualified_name                 shift and go to state 78
    reference_type                 shift and go to state 241
    primitive_type                 shift and go to state 242
    class_data_type                shift and go to state 243
    type                           shift and go to state 286
    array_data_type                shift and go to state 246
    simple_name                    shift and go to state 68

state 274

    (133) do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN . STATE_END

    STATE_END       shift and go to state 287


state 275

    (165) method_return_type -> TYPE_VOID .

    ASSIGN          reduce using rule 165 (method_return_type -> TYPE_VOID .)


state 276

    (164) method_return_type -> type .

    ASSIGN          reduce using rule 164 (method_return_type -> type .)


state 277

    (163) method_header -> method_header_name LPAREN func_arguement_list_opt RPAREN COLON method_return_type . ASSIGN

    ASSIGN          shift and go to state 288


state 278

    (127) if_then_statement -> KWRD_IF LPAREN . expression RPAREN statement
    (128) if_then_else_statement -> KWRD_IF LPAREN . expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (129) if_then_else_statement_precedence -> KWRD_IF LPAREN . expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
    (8) expression -> . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    additive_expression            shift and go to state 52
    simple_name                    shift and go to state 68
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    and_expression                 shift and go to state 86
    relational_expression          shift and go to state 73
    cast_expression                shift and go to state 79
    conditional_or_expression      shift and go to state 53
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    assignment                     shift and go to state 118
    multiplicative_expression      shift and go to state 55
    method_invocation              shift and go to state 108
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 119
    expression                     shift and go to state 289
    conditional_and_expression     shift and go to state 59

state 279

    (128) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE . statement
    (114) statement -> . normal_statement
    (115) statement -> . if_then_statement
    (116) statement -> . if_then_else_statement
    (117) statement -> . while_statement
    (118) statement -> . do_while_statement
    (119) normal_statement -> . block
    (120) normal_statement -> . expression_statement
    (121) normal_statement -> . empty_statement
    (122) normal_statement -> . return_statement
    (123) normal_statement -> . switch_statement
    (127) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (128) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (132) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (133) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (87) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (124) expression_statement -> . statement_expression STATE_END
    (145) empty_statement -> . STATE_END
    (146) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (134) switch_statement -> . expression KWRD_MATCH switch_block
    (125) statement_expression -> . assignment
    (126) statement_expression -> . method_invocation
    (8) expression -> . assignment_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (74) array_access -> . name LBPAREN expression RBPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    KWRD_IF         shift and go to state 57
    KWRD_WHILE      shift and go to state 46
    KWRD_DO         shift and go to state 41
    BLOCK_BEGIN     shift and go to state 15
    STATE_END       shift and go to state 47
    KWRD_RETURN     shift and go to state 44
    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    expression_statement           shift and go to state 27
    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    normal_statement               shift and go to state 84
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    if_then_statement              shift and go to state 67
    array_access                   shift and go to state 29
    switch_statement               shift and go to state 50
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    return_statement               shift and go to state 88
    while_statement                shift and go to state 35
    and_expression                 shift and go to state 86
    statement                      shift and go to state 290
    statement_expression           shift and go to state 38
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 68
    conditional_or_expression      shift and go to state 53
    relational_expression          shift and go to state 73
    do_while_statement             shift and go to state 54
    assignment                     shift and go to state 92
    multiplicative_expression      shift and go to state 55
    additive_expression            shift and go to state 52
    cast_expression                shift and go to state 79
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 45
    empty_statement                shift and go to state 82
    expression                     shift and go to state 61
    conditional_and_expression     shift and go to state 59
    block                          shift and go to state 62
    if_then_else_statement         shift and go to state 63

state 280

    (144) switch_label -> KWRD_CASE expression FUNTYPE .

    BLOCK_END       reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_CASE       reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_IF         reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_WHILE      reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_DO         reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_OBJECT     reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    BLOCK_BEGIN     reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    STATE_END       reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_RETURN     reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_PROTECTED  reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_PRIVATE    reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    IDENTIFIER      reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    PLUS            reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    MINUS           reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    TILDA           reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    NOT             reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    LPAREN          reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    CHARACTER       reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    STRING_CONST    reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    BOOL_CONSTT     reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    BOOL_CONSTF     reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_NULL       reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    FLOAT_CONST     reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    INT_CONST       reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_DEF        reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_CLASS      reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_VAR        reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_VAL        reduce using rule 144 (switch_label -> KWRD_CASE expression FUNTYPE .)


state 281

    (138) switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .

    KWRD_IF         reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_WHILE      reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_DO         reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_OBJECT     reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    STATE_END       reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_RETURN     reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_PROTECTED  reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_PRIVATE    reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    IDENTIFIER      reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    PLUS            reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    MINUS           reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    TILDA           reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    NOT             reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    LPAREN          reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    CHARACTER       reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    STRING_CONST    reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    BOOL_CONSTT     reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    BOOL_CONSTF     reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_NULL       reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    FLOAT_CONST     reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    INT_CONST       reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_DEF        reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_CLASS      reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_VAR        reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_VAL        reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    BLOCK_END       reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_CASE       reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_ELSE       reduce using rule 138 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)


state 282

    (182) array_initializer -> KWRD_ARRAY LPAREN . argument_list_opt RPAREN
    (75) argument_list_opt -> . argument_list
    (76) argument_list_opt -> . empty
    (77) argument_list -> . expression
    (78) argument_list -> . argument_list COMMA expression
    (185) empty -> .
    (8) expression -> . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    RPAREN          reduce using rule 185 (empty -> .)
    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    and_expression                 shift and go to state 86
    exclusive_or_expression        shift and go to state 65
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    additive_expression            shift and go to state 52
    simple_name                    shift and go to state 68
    unary_expression               shift and go to state 48
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    relational_expression          shift and go to state 73
    cast_expression                shift and go to state 79
    conditional_or_expression      shift and go to state 53
    empty                          shift and go to state 186
    argument_list                  shift and go to state 185
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    assignment                     shift and go to state 118
    multiplicative_expression      shift and go to state 55
    method_invocation              shift and go to state 108
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 119
    argument_list_opt              shift and go to state 291
    expression                     shift and go to state 188
    conditional_and_expression     shift and go to state 59

state 283

    (183) class_initializer -> KWRD_NEW name . LPAREN argument_list_opt RPAREN
    (82) qualified_name -> name . DOT simple_name

    LPAREN          shift and go to state 292
    DOT             shift and go to state 123


state 284

    (181) array_initializer -> KWRD_NEW KWRD_ARRAY . LBPAREN type RBPAREN LPAREN INT_CONST RPAREN

    LBPAREN         shift and go to state 293


state 285

    (109) variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN . LPAREN variable_arguement_list RPAREN

    LPAREN          shift and go to state 294


state 286

    (180) array_data_type -> KWRD_ARRAY LBPAREN type . RBPAREN

    RBPAREN         shift and go to state 295


state 287

    (133) do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .

    KWRD_IF         reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_WHILE      reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_DO         reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_OBJECT     reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    BLOCK_BEGIN     reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    STATE_END       reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_RETURN     reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_PROTECTED  reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_PRIVATE    reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    IDENTIFIER      reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    PLUS            reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    MINUS           reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    TILDA           reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    NOT             reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    LPAREN          reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    CHARACTER       reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    STRING_CONST    reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    BOOL_CONSTT     reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    BOOL_CONSTF     reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_NULL       reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    FLOAT_CONST     reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    INT_CONST       reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_DEF        reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_CLASS      reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_VAR        reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_VAL        reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    BLOCK_END       reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_CASE       reduce using rule 133 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)


state 288

    (163) method_header -> method_header_name LPAREN func_arguement_list_opt RPAREN COLON method_return_type ASSIGN .

    BLOCK_BEGIN     reduce using rule 163 (method_header -> method_header_name LPAREN func_arguement_list_opt RPAREN COLON method_return_type ASSIGN .)


state 289

    (127) if_then_statement -> KWRD_IF LPAREN expression . RPAREN statement
    (128) if_then_else_statement -> KWRD_IF LPAREN expression . RPAREN if_then_else_intermediate KWRD_ELSE statement
    (129) if_then_else_statement_precedence -> KWRD_IF LPAREN expression . RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate

    RPAREN          shift and go to state 296


state 290

    (128) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .

    KWRD_IF         reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_WHILE      reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_DO         reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_OBJECT     reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    BLOCK_BEGIN     reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    STATE_END       reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_RETURN     reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_PROTECTED  reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_PRIVATE    reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    IDENTIFIER      reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    PLUS            reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    MINUS           reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    TILDA           reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    NOT             reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    LPAREN          reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    CHARACTER       reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    STRING_CONST    reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    BOOL_CONSTT     reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    BOOL_CONSTF     reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_NULL       reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    FLOAT_CONST     reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    INT_CONST       reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_DEF        reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_CLASS      reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_VAR        reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_VAL        reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    BLOCK_END       reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_CASE       reduce using rule 128 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)


state 291

    (182) array_initializer -> KWRD_ARRAY LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 297


state 292

    (183) class_initializer -> KWRD_NEW name LPAREN . argument_list_opt RPAREN
    (75) argument_list_opt -> . argument_list
    (76) argument_list_opt -> . empty
    (77) argument_list -> . expression
    (78) argument_list -> . argument_list COMMA expression
    (185) empty -> .
    (8) expression -> . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    RPAREN          reduce using rule 185 (empty -> .)
    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    and_expression                 shift and go to state 86
    exclusive_or_expression        shift and go to state 65
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    additive_expression            shift and go to state 52
    simple_name                    shift and go to state 68
    unary_expression               shift and go to state 48
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    relational_expression          shift and go to state 73
    cast_expression                shift and go to state 79
    conditional_or_expression      shift and go to state 53
    empty                          shift and go to state 186
    argument_list                  shift and go to state 185
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    assignment                     shift and go to state 118
    multiplicative_expression      shift and go to state 55
    method_invocation              shift and go to state 108
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 119
    argument_list_opt              shift and go to state 298
    expression                     shift and go to state 188
    conditional_and_expression     shift and go to state 59

state 293

    (181) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN . type RBPAREN LPAREN INT_CONST RPAREN
    (170) type -> . primitive_type
    (171) type -> . reference_type
    (172) primitive_type -> . TYPE_INT
    (173) primitive_type -> . TYPE_FLOAT
    (174) primitive_type -> . TYPE_CHAR
    (175) primitive_type -> . TYPE_STRING
    (176) primitive_type -> . TYPE_BOOLEAN
    (177) reference_type -> . class_data_type
    (178) reference_type -> . array_data_type
    (179) class_data_type -> . name
    (180) array_data_type -> . KWRD_ARRAY LBPAREN type RBPAREN
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name

    TYPE_INT        shift and go to state 162
    TYPE_FLOAT      shift and go to state 167
    TYPE_CHAR       shift and go to state 164
    TYPE_STRING     shift and go to state 163
    TYPE_BOOLEAN    shift and go to state 166
    KWRD_ARRAY      shift and go to state 244
    IDENTIFIER      shift and go to state 76

    name                           shift and go to state 240
    qualified_name                 shift and go to state 78
    reference_type                 shift and go to state 241
    primitive_type                 shift and go to state 242
    class_data_type                shift and go to state 243
    type                           shift and go to state 299
    array_data_type                shift and go to state 246
    simple_name                    shift and go to state 68

state 294

    (109) variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN . variable_arguement_list RPAREN
    (106) variable_arguement_list -> . variable_declaration_initializer
    (107) variable_arguement_list -> . variable_arguement_list COMMA variable_declaration_initializer
    (103) variable_declaration_initializer -> . expression
    (104) variable_declaration_initializer -> . array_initializer
    (105) variable_declaration_initializer -> . class_initializer
    (8) expression -> . assignment_expression
    (181) array_initializer -> . KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN
    (182) array_initializer -> . KWRD_ARRAY LPAREN argument_list_opt RPAREN
    (183) class_initializer -> . KWRD_NEW name LPAREN argument_list_opt RPAREN
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    KWRD_NEW        shift and go to state 268
    KWRD_ARRAY      shift and go to state 267
    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    variable_declaration_initializer shift and go to state 300
    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    variable_arguement_list        shift and go to state 301
    array_access                   shift and go to state 29
    and_expression                 shift and go to state 86
    simple_name                    shift and go to state 68
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    relational_expression          shift and go to state 73
    cast_expression                shift and go to state 79
    conditional_or_expression      shift and go to state 53
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    assignment                     shift and go to state 118
    multiplicative_expression      shift and go to state 55
    additive_expression            shift and go to state 52
    method_invocation              shift and go to state 108
    class_initializer              shift and go to state 269
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    array_initializer              shift and go to state 270
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 119
    expression                     shift and go to state 271
    conditional_and_expression     shift and go to state 59

state 295

    (180) array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN .

    COMMA           reduce using rule 180 (array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN .)
    RPAREN          reduce using rule 180 (array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN .)
    ASSIGN          reduce using rule 180 (array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN .)
    RBPAREN         reduce using rule 180 (array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN .)


state 296

    (127) if_then_statement -> KWRD_IF LPAREN expression RPAREN . statement
    (128) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN . if_then_else_intermediate KWRD_ELSE statement
    (129) if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN . if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
    (114) statement -> . normal_statement
    (115) statement -> . if_then_statement
    (116) statement -> . if_then_else_statement
    (117) statement -> . while_statement
    (118) statement -> . do_while_statement
    (130) if_then_else_intermediate -> . normal_statement
    (131) if_then_else_intermediate -> . if_then_else_statement_precedence
    (119) normal_statement -> . block
    (120) normal_statement -> . expression_statement
    (121) normal_statement -> . empty_statement
    (122) normal_statement -> . return_statement
    (123) normal_statement -> . switch_statement
    (127) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (128) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (132) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (133) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (129) if_then_else_statement_precedence -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
    (87) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (124) expression_statement -> . statement_expression STATE_END
    (145) empty_statement -> . STATE_END
    (146) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (134) switch_statement -> . expression KWRD_MATCH switch_block
    (125) statement_expression -> . assignment
    (126) statement_expression -> . method_invocation
    (8) expression -> . assignment_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (74) array_access -> . name LBPAREN expression RBPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    KWRD_IF         shift and go to state 254
    KWRD_WHILE      shift and go to state 46
    KWRD_DO         shift and go to state 41
    BLOCK_BEGIN     shift and go to state 15
    STATE_END       shift and go to state 47
    KWRD_RETURN     shift and go to state 44
    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    expression_statement           shift and go to state 27
    if_then_else_statement_precedence shift and go to state 257
    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    normal_statement               shift and go to state 258
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    if_then_else_intermediate      shift and go to state 302
    if_then_statement              shift and go to state 67
    array_access                   shift and go to state 29
    switch_statement               shift and go to state 50
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    return_statement               shift and go to state 88
    while_statement                shift and go to state 35
    and_expression                 shift and go to state 86
    statement                      shift and go to state 256
    statement_expression           shift and go to state 38
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 68
    conditional_or_expression      shift and go to state 53
    relational_expression          shift and go to state 73
    do_while_statement             shift and go to state 54
    assignment                     shift and go to state 92
    multiplicative_expression      shift and go to state 55
    additive_expression            shift and go to state 52
    cast_expression                shift and go to state 79
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 45
    empty_statement                shift and go to state 82
    expression                     shift and go to state 61
    conditional_and_expression     shift and go to state 59
    block                          shift and go to state 62
    if_then_else_statement         shift and go to state 63

state 297

    (182) array_initializer -> KWRD_ARRAY LPAREN argument_list_opt RPAREN .

    RPAREN          reduce using rule 182 (array_initializer -> KWRD_ARRAY LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 182 (array_initializer -> KWRD_ARRAY LPAREN argument_list_opt RPAREN .)
    STATE_END       reduce using rule 182 (array_initializer -> KWRD_ARRAY LPAREN argument_list_opt RPAREN .)


state 298

    (183) class_initializer -> KWRD_NEW name LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 303


state 299

    (181) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type . RBPAREN LPAREN INT_CONST RPAREN

    RBPAREN         shift and go to state 304


state 300

    (106) variable_arguement_list -> variable_declaration_initializer .

    RPAREN          reduce using rule 106 (variable_arguement_list -> variable_declaration_initializer .)
    COMMA           reduce using rule 106 (variable_arguement_list -> variable_declaration_initializer .)


state 301

    (109) variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list . RPAREN
    (107) variable_arguement_list -> variable_arguement_list . COMMA variable_declaration_initializer

    RPAREN          shift and go to state 305
    COMMA           shift and go to state 306


state 302

    (128) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate . KWRD_ELSE statement
    (129) if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate . KWRD_ELSE if_then_else_intermediate

    KWRD_ELSE       shift and go to state 307


state 303

    (183) class_initializer -> KWRD_NEW name LPAREN argument_list_opt RPAREN .

    STATE_END       reduce using rule 183 (class_initializer -> KWRD_NEW name LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 183 (class_initializer -> KWRD_NEW name LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 183 (class_initializer -> KWRD_NEW name LPAREN argument_list_opt RPAREN .)


state 304

    (181) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN . LPAREN INT_CONST RPAREN

    LPAREN          shift and go to state 308


state 305

    (109) variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list RPAREN .

    STATE_END       reduce using rule 109 (variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list RPAREN .)


state 306

    (107) variable_arguement_list -> variable_arguement_list COMMA . variable_declaration_initializer
    (103) variable_declaration_initializer -> . expression
    (104) variable_declaration_initializer -> . array_initializer
    (105) variable_declaration_initializer -> . class_initializer
    (8) expression -> . assignment_expression
    (181) array_initializer -> . KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN
    (182) array_initializer -> . KWRD_ARRAY LPAREN argument_list_opt RPAREN
    (183) class_initializer -> . KWRD_NEW name LPAREN argument_list_opt RPAREN
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (74) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    KWRD_NEW        shift and go to state 268
    KWRD_ARRAY      shift and go to state 267
    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    variable_declaration_initializer shift and go to state 309
    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    array_access                   shift and go to state 29
    and_expression                 shift and go to state 86
    simple_name                    shift and go to state 68
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    relational_expression          shift and go to state 73
    cast_expression                shift and go to state 79
    conditional_or_expression      shift and go to state 53
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    assignment                     shift and go to state 118
    multiplicative_expression      shift and go to state 55
    additive_expression            shift and go to state 52
    method_invocation              shift and go to state 108
    class_initializer              shift and go to state 269
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    array_initializer              shift and go to state 270
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 119
    expression                     shift and go to state 271
    conditional_and_expression     shift and go to state 59

state 307

    (128) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE . statement
    (129) if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE . if_then_else_intermediate
    (114) statement -> . normal_statement
    (115) statement -> . if_then_statement
    (116) statement -> . if_then_else_statement
    (117) statement -> . while_statement
    (118) statement -> . do_while_statement
    (130) if_then_else_intermediate -> . normal_statement
    (131) if_then_else_intermediate -> . if_then_else_statement_precedence
    (119) normal_statement -> . block
    (120) normal_statement -> . expression_statement
    (121) normal_statement -> . empty_statement
    (122) normal_statement -> . return_statement
    (123) normal_statement -> . switch_statement
    (127) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (128) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (132) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (133) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (129) if_then_else_statement_precedence -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
    (87) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (124) expression_statement -> . statement_expression STATE_END
    (145) empty_statement -> . STATE_END
    (146) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (134) switch_statement -> . expression KWRD_MATCH switch_block
    (125) statement_expression -> . assignment
    (126) statement_expression -> . method_invocation
    (8) expression -> . assignment_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (73) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (83) valid_variable -> . name
    (84) valid_variable -> . array_access
    (79) name -> . simple_name
    (80) name -> . qualified_name
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (74) array_access -> . name LBPAREN expression RBPAREN
    (81) simple_name -> . IDENTIFIER
    (82) qualified_name -> . name DOT simple_name
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . base_variable_set
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . cast_expression
    (60) base_variable_set -> . variable_literal
    (61) base_variable_set -> . LPAREN expression RPAREN
    (62) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (85) variable_literal -> . valid_variable
    (86) variable_literal -> . primary
    (63) primary -> . literal
    (64) primary -> . method_invocation
    (65) literal -> . int_float
    (66) literal -> . CHARACTER
    (67) literal -> . STRING_CONST
    (68) literal -> . BOOL_CONSTT
    (69) literal -> . BOOL_CONSTF
    (70) literal -> . KWRD_NULL
    (71) int_float -> . FLOAT_CONST
    (72) int_float -> . INT_CONST

    KWRD_IF         shift and go to state 254
    KWRD_WHILE      shift and go to state 46
    KWRD_DO         shift and go to state 41
    BLOCK_BEGIN     shift and go to state 15
    STATE_END       shift and go to state 47
    KWRD_RETURN     shift and go to state 44
    IDENTIFIER      shift and go to state 76
    PLUS            shift and go to state 37
    MINUS           shift and go to state 30
    TILDA           shift and go to state 72
    NOT             shift and go to state 60
    LPAREN          shift and go to state 93
    CHARACTER       shift and go to state 85
    STRING_CONST    shift and go to state 31
    BOOL_CONSTT     shift and go to state 36
    BOOL_CONSTF     shift and go to state 32
    KWRD_NULL       shift and go to state 90
    FLOAT_CONST     shift and go to state 28
    INT_CONST       shift and go to state 69

    expression_statement           shift and go to state 27
    if_then_else_statement_precedence shift and go to state 257
    unary_expression               shift and go to state 48
    exclusive_or_expression        shift and go to state 65
    normal_statement               shift and go to state 258
    primary                        shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 49
    if_then_else_intermediate      shift and go to state 310
    if_then_statement              shift and go to state 67
    array_access                   shift and go to state 29
    switch_statement               shift and go to state 50
    assignment_expression          shift and go to state 91
    qualified_name                 shift and go to state 78
    base_variable_set              shift and go to state 87
    valid_variable                 shift and go to state 51
    inclusive_or_expression        shift and go to state 34
    literal                        shift and go to state 71
    return_statement               shift and go to state 88
    while_statement                shift and go to state 35
    and_expression                 shift and go to state 86
    statement                      shift and go to state 290
    statement_expression           shift and go to state 38
    method_invocation              shift and go to state 75
    simple_name                    shift and go to state 68
    conditional_or_expression      shift and go to state 53
    relational_expression          shift and go to state 73
    do_while_statement             shift and go to state 54
    assignment                     shift and go to state 92
    multiplicative_expression      shift and go to state 55
    additive_expression            shift and go to state 52
    cast_expression                shift and go to state 79
    shift_expression               shift and go to state 56
    equality_expression            shift and go to state 80
    int_float                      shift and go to state 40
    variable_literal               shift and go to state 58
    name                           shift and go to state 45
    empty_statement                shift and go to state 82
    expression                     shift and go to state 61
    conditional_and_expression     shift and go to state 59
    block                          shift and go to state 62
    if_then_else_statement         shift and go to state 63

state 308

    (181) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN . INT_CONST RPAREN

    INT_CONST       shift and go to state 311


state 309

    (107) variable_arguement_list -> variable_arguement_list COMMA variable_declaration_initializer .

    RPAREN          reduce using rule 107 (variable_arguement_list -> variable_arguement_list COMMA variable_declaration_initializer .)
    COMMA           reduce using rule 107 (variable_arguement_list -> variable_arguement_list COMMA variable_declaration_initializer .)


state 310

    (129) if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate .

    KWRD_ELSE       reduce using rule 129 (if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate .)


state 311

    (181) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST . RPAREN

    RPAREN          shift and go to state 312


state 312

    (181) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN .

    RPAREN          reduce using rule 181 (array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN .)
    COMMA           reduce using rule 181 (array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN .)
    STATE_END       reduce using rule 181 (array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN .)

