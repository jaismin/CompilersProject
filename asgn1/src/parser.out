Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    KWRD_TYPE
    LOWER_BOUND
    KWRD_LAZY
    VIEWABLE
    KWRD_THIS
    KWRD_WITH
    KWRD_FORSOME
    FUNTYPE
    KWRD_TRY
    NIL
    KWRD_SUPER
    KWRD_UNTIL
    VIEW
    KWRD_PACKAGE
    KWRD_CASE
    EXACTEQ
    KWRD_ABST
    KWRD_FOREACH
    KWRD_STATIC
    UNDER
    UPPER_BOUND
    INNER_CLASS
    KWRD_THROW
    KWRD_MACRO
    KWRD_PUBLIC
    KWRD_MATCH
    KWRD_FINAL
    COMM
    KWRD_IMPLICIT
    KWRD_SEALED
    CHOOSE
    KWRD_FINALLY
    SUBTYPE
    KWRD_FOR
    QUESTION
    KWRD_IMPORT
    KWRD_YIELD
    KWRD_OVERRIDE
    newline
    AT
    KWRD_TRAIT
    KWRD_CATCH

Grammar

Rule 0     S' -> ProgramStructure
Rule 1     ProgramStructure -> ProgramStructure class_and_objects
Rule 2     ProgramStructure -> class_and_objects
Rule 3     class_and_objects -> SingletonObject
Rule 4     class_and_objects -> class_declaration
Rule 5     SingletonObject -> ObjectDeclare block
Rule 6     ObjectDeclare -> KWRD_OBJECT IDENTIFIER
Rule 7     ObjectDeclare -> KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
Rule 8     expression -> assignment_expression
Rule 9     expression_optional -> expression
Rule 10    expression_optional -> empty
Rule 11    assignment_expression -> assignment
Rule 12    assignment_expression -> conditional_or_expression
Rule 13    assignment -> valid_variable assignment_operator assignment_expression
Rule 14    assignment_operator -> ASSIGN
Rule 15    assignment_operator -> TIMES_ASSIGN
Rule 16    assignment_operator -> DIVIDE_ASSIGN
Rule 17    assignment_operator -> REMAINDER_ASSIGN
Rule 18    assignment_operator -> PLUS_ASSIGN
Rule 19    assignment_operator -> MINUS_ASSIGN
Rule 20    assignment_operator -> LSHIFT_ASSIGN
Rule 21    assignment_operator -> RSHIFT_ASSIGN
Rule 22    assignment_operator -> AND_ASSIGN
Rule 23    assignment_operator -> OR_ASSIGN
Rule 24    assignment_operator -> XOR_ASSIGN
Rule 25    conditional_or_expression -> conditional_and_expression
Rule 26    conditional_or_expression -> conditional_or_expression OR conditional_and_expression
Rule 27    conditional_and_expression -> inclusive_or_expression
Rule 28    conditional_and_expression -> conditional_and_expression AND inclusive_or_expression
Rule 29    inclusive_or_expression -> exclusive_or_expression
Rule 30    inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression
Rule 31    exclusive_or_expression -> and_expression
Rule 32    exclusive_or_expression -> exclusive_or_expression XOR and_expression
Rule 33    and_expression -> equality_expression
Rule 34    and_expression -> and_expression AND_BITWISE equality_expression
Rule 35    equality_expression -> relational_expression
Rule 36    equality_expression -> equality_expression EQUAL relational_expression
Rule 37    equality_expression -> equality_expression NEQUAL relational_expression
Rule 38    relational_expression -> shift_expression
Rule 39    relational_expression -> relational_expression GREATER shift_expression
Rule 40    relational_expression -> relational_expression LESS shift_expression
Rule 41    relational_expression -> relational_expression GEQ shift_expression
Rule 42    relational_expression -> relational_expression LEQ shift_expression
Rule 43    shift_expression -> additive_expression
Rule 44    shift_expression -> shift_expression LSHIFT additive_expression
Rule 45    shift_expression -> shift_expression RSHIFT additive_expression
Rule 46    additive_expression -> multiplicative_expression
Rule 47    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 48    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 49    multiplicative_expression -> unary_expression
Rule 50    multiplicative_expression -> multiplicative_expression TIMES unary_expression
Rule 51    multiplicative_expression -> multiplicative_expression DIVIDE unary_expression
Rule 52    multiplicative_expression -> multiplicative_expression REMAINDER unary_expression
Rule 53    unary_expression -> PLUS unary_expression
Rule 54    unary_expression -> MINUS unary_expression
Rule 55    unary_expression -> unary_expression_not_plus_minus
Rule 56    unary_expression_not_plus_minus -> variable_literal
Rule 57    unary_expression_not_plus_minus -> TILDA unary_expression
Rule 58    unary_expression_not_plus_minus -> NOT unary_expression
Rule 59    unary_expression_not_plus_minus -> LPAREN expression RPAREN
Rule 60    primary -> literal
Rule 61    primary -> method_invocation
Rule 62    literal -> int_float
Rule 63    literal -> CHARACTER
Rule 64    literal -> STRING_CONST
Rule 65    literal -> BOOL_CONSTT
Rule 66    literal -> BOOL_CONSTF
Rule 67    literal -> KWRD_NULL
Rule 68    int_float -> FLOAT_CONST
Rule 69    int_float -> INT_CONST
Rule 70    method_invocation -> name LPAREN argument_list_opt RPAREN
Rule 71    array_access -> name LBPAREN expression RBPAREN
Rule 72    argument_list_opt -> argument_list
Rule 73    argument_list_opt -> empty
Rule 74    argument_list -> expression
Rule 75    argument_list -> argument_list COMMA expression
Rule 76    name -> simple_name
Rule 77    name -> qualified_name
Rule 78    simple_name -> IDENTIFIER
Rule 79    qualified_name -> name DOT simple_name
Rule 80    valid_variable -> name
Rule 81    valid_variable -> array_access
Rule 82    variable_literal -> valid_variable
Rule 83    variable_literal -> primary
Rule 84    block -> BLOCK_BEGIN block_statements_opt BLOCK_END
Rule 85    block_statements_opt -> block_statements
Rule 86    block_statements_opt -> empty
Rule 87    block_statements -> block_statement
Rule 88    block_statements -> block_statements block_statement
Rule 89    block_statement -> local_variable_declaration_statement
Rule 90    block_statement -> statement
Rule 91    block_statement -> class_declaration
Rule 92    block_statement -> SingletonObject
Rule 93    block_statement -> method_declaration
Rule 94    modifier_opts -> modifier
Rule 95    modifier_opts -> empty
Rule 96    declaration_keyword -> KWRD_VAR
Rule 97    declaration_keyword -> KWRD_VAL
Rule 98    local_variable_declaration_statement -> local_variable_declaration STATE_END
Rule 99    local_variable_declaration -> modifier_opts declaration_keyword variable_declaration_body
Rule 100   variable_declaration_initializer -> expression
Rule 101   variable_declaration_initializer -> array_initializer
Rule 102   variable_declaration_initializer -> class_initializer
Rule 103   variable_arguement_list -> variable_declaration_initializer
Rule 104   variable_arguement_list -> variable_arguement_list COMMA variable_declaration_initializer
Rule 105   variable_declaration_body -> variable_declarator ASSIGN variable_declaration_initializer
Rule 106   variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list RPAREN
Rule 107   variable_declarators -> variable_declarator
Rule 108   variable_declarators -> variable_declarators COMMA variable_declarator
Rule 109   variable_declarator -> variable_declarator_id
Rule 110   variable_declarator_id -> IDENTIFIER COLON type
Rule 111   statement -> normal_statement
Rule 112   statement -> if_then_statement
Rule 113   statement -> if_then_else_statement
Rule 114   statement -> while_statement
Rule 115   statement -> do_while_statement
Rule 116   normal_statement -> block
Rule 117   normal_statement -> expression_statement
Rule 118   normal_statement -> empty_statement
Rule 119   normal_statement -> return_statement
Rule 120   expression_statement -> statement_expression STATE_END
Rule 121   statement_expression -> assignment
Rule 122   statement_expression -> method_invocation
Rule 123   if_then_statement -> KWRD_IF LPAREN expression RPAREN statement
Rule 124   if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
Rule 125   if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
Rule 126   if_then_else_intermediate -> normal_statement
Rule 127   if_then_else_intermediate -> if_then_else_statement_precedence
Rule 128   while_statement -> KWRD_WHILE LPAREN expression RPAREN statement
Rule 129   do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
Rule 130   empty_statement -> STATE_END
Rule 131   return_statement -> KWRD_RETURN expression_optional STATE_END
Rule 132   constructor_arguement_list_opt -> constructor_arguement_list
Rule 133   constructor_arguement_list_opt -> empty
Rule 134   constructor_arguement_list -> constructor_arguement_list_declarator
Rule 135   constructor_arguement_list -> constructor_arguement_list COMMA constructor_arguement_list_declarator
Rule 136   constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER COLON type
Rule 137   func_arguement_list_opt -> variable_declarators
Rule 138   func_arguement_list_opt -> empty
Rule 139   class_declaration -> class_header class_body
Rule 140   class_header -> class_header_name class_header_extends_opt
Rule 141   class_header_name -> class_header_name1 LPAREN constructor_arguement_list_opt RPAREN
Rule 142   class_header_name1 -> modifier_opts KWRD_CLASS name
Rule 143   class_header_extends_opt -> class_header_extends
Rule 144   class_header_extends_opt -> empty
Rule 145   class_header_extends -> KWRD_EXTNDS name LPAREN func_arguement_list_opt RPAREN
Rule 146   class_body -> block
Rule 147   method_declaration -> method_header method_body
Rule 148   method_header -> method_header_name LPAREN func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
Rule 149   method_return_type -> type
Rule 150   method_return_type -> TYPE_VOID
Rule 151   method_header_name -> modifier_opts KWRD_DEF IDENTIFIER
Rule 152   method_body -> block
Rule 153   modifier -> KWRD_PROTECTED
Rule 154   modifier -> KWRD_PRIVATE
Rule 155   type -> primitive_type
Rule 156   type -> reference_type
Rule 157   primitive_type -> TYPE_INT
Rule 158   primitive_type -> TYPE_FLOAT
Rule 159   primitive_type -> TYPE_CHAR
Rule 160   primitive_type -> TYPE_STRING
Rule 161   primitive_type -> TYPE_BOOLEAN
Rule 162   reference_type -> class_data_type
Rule 163   reference_type -> array_data_type
Rule 164   class_data_type -> name
Rule 165   array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN
Rule 166   array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN
Rule 167   array_initializer -> KWRD_ARRAY LPAREN argument_list_opt RPAREN
Rule 168   class_initializer -> KWRD_NEW name LPAREN argument_list_opt RPAREN
Rule 169   print_st -> IDENTIFIER LPAREN IDENTIFIER RPAREN
Rule 170   empty -> <empty>

Terminals, with rules where they appear

AND                  : 28
AND_ASSIGN           : 22
AND_BITWISE          : 34
ASSIGN               : 14 105 106 148
AT                   : 
BLOCK_BEGIN          : 84
BLOCK_END            : 84
BOOL_CONSTF          : 66
BOOL_CONSTT          : 65
CHARACTER            : 63
CHOOSE               : 
COLON                : 110 136 148
COMM                 : 
COMMA                : 75 104 108 135
DIVIDE               : 51
DIVIDE_ASSIGN        : 16
DOT                  : 79
EQUAL                : 36
EXACTEQ              : 
FLOAT_CONST          : 68
FUNTYPE              : 
GEQ                  : 41
GREATER              : 39
IDENTIFIER           : 6 7 7 78 110 136 151 169 169
INNER_CLASS          : 
INT_CONST            : 69 166
KWRD_ABST            : 
KWRD_ARRAY           : 165 166 167
KWRD_CASE            : 
KWRD_CATCH           : 
KWRD_CLASS           : 142
KWRD_DEF             : 151
KWRD_DO              : 129
KWRD_ELSE            : 124 125
KWRD_EXTNDS          : 7 145
KWRD_FINAL           : 
KWRD_FINALLY         : 
KWRD_FOR             : 
KWRD_FOREACH         : 
KWRD_FORSOME         : 
KWRD_IF              : 123 124 125
KWRD_IMPLICIT        : 
KWRD_IMPORT          : 
KWRD_LAZY            : 
KWRD_MACRO           : 
KWRD_MATCH           : 
KWRD_NEW             : 166 168
KWRD_NULL            : 67
KWRD_OBJECT          : 6 7
KWRD_OVERRIDE        : 
KWRD_PACKAGE         : 
KWRD_PRIVATE         : 154
KWRD_PROTECTED       : 153
KWRD_PUBLIC          : 
KWRD_RETURN          : 131
KWRD_SEALED          : 
KWRD_STATIC          : 
KWRD_SUPER           : 
KWRD_THIS            : 
KWRD_THROW           : 
KWRD_TRAIT           : 
KWRD_TRY             : 
KWRD_TYPE            : 
KWRD_UNTIL           : 
KWRD_VAL             : 97
KWRD_VAR             : 96
KWRD_WHILE           : 128 129
KWRD_WITH            : 
KWRD_YIELD           : 
LBPAREN              : 71 165 166
LEQ                  : 42
LESS                 : 40
LOWER_BOUND          : 
LPAREN               : 59 70 106 106 123 124 125 128 129 141 145 148 166 167 168 169
LSHIFT               : 44
LSHIFT_ASSIGN        : 20
MINUS                : 48 54
MINUS_ASSIGN         : 19
NEQUAL               : 37
NIL                  : 
NOT                  : 58
OR                   : 26
OR_ASSIGN            : 23
OR_BITWISE           : 30
PLUS                 : 47 53
PLUS_ASSIGN          : 18
QUESTION             : 
RBPAREN              : 71 165 166
REMAINDER            : 52
REMAINDER_ASSIGN     : 17
RPAREN               : 59 70 106 106 123 124 125 128 129 141 145 148 166 167 168 169
RSHIFT               : 45
RSHIFT_ASSIGN        : 21
STATE_END            : 98 120 129 130 131
STRING_CONST         : 64
SUBTYPE              : 
TILDA                : 57
TIMES                : 50
TIMES_ASSIGN         : 15
TYPE_BOOLEAN         : 161
TYPE_CHAR            : 159
TYPE_FLOAT           : 158
TYPE_INT             : 157
TYPE_STRING          : 160
TYPE_VOID            : 150
UNDER                : 
UPPER_BOUND          : 
VIEW                 : 
VIEWABLE             : 
XOR                  : 32
XOR_ASSIGN           : 24
error                : 
newline              : 

Nonterminals, with rules where they appear

ObjectDeclare        : 5
ProgramStructure     : 1 0
SingletonObject      : 3 92
additive_expression  : 43 44 45 47 48
and_expression       : 31 32 34
argument_list        : 72 75
argument_list_opt    : 70 167 168
array_access         : 81
array_data_type      : 163
array_initializer    : 101
assignment           : 11 121
assignment_expression : 8 13
assignment_operator  : 13
block                : 5 116 146 152
block_statement      : 87 88
block_statements     : 85 88
block_statements_opt : 84
class_and_objects    : 1 2
class_body           : 139
class_data_type      : 162
class_declaration    : 4 91
class_header         : 139
class_header_extends : 143
class_header_extends_opt : 140
class_header_name    : 140
class_header_name1   : 141
class_initializer    : 102
conditional_and_expression : 25 26 28
conditional_or_expression : 12 26
constructor_arguement_list : 132 135
constructor_arguement_list_declarator : 134 135
constructor_arguement_list_opt : 141
declaration_keyword  : 99 136
do_while_statement   : 115
empty                : 10 73 86 95 133 138 144
empty_statement      : 118
equality_expression  : 33 34 36 37
exclusive_or_expression : 29 30 32
expression           : 9 59 71 74 75 100 123 124 125 128 129
expression_optional  : 131
expression_statement : 117
func_arguement_list_opt : 145 148
if_then_else_intermediate : 124 125 125
if_then_else_statement : 113
if_then_else_statement_precedence : 127
if_then_statement    : 112
inclusive_or_expression : 27 28 30
int_float            : 62
literal              : 60
local_variable_declaration : 98
local_variable_declaration_statement : 89
method_body          : 147
method_declaration   : 93
method_header        : 147
method_header_name   : 148
method_invocation    : 61 122
method_return_type   : 148
modifier             : 94
modifier_opts        : 99 142 151
multiplicative_expression : 46 47 48 50 51 52
name                 : 70 71 79 80 142 145 164 168
normal_statement     : 111 126
primary              : 83
primitive_type       : 155
print_st             : 
qualified_name       : 77
reference_type       : 156
relational_expression : 35 36 37 39 40 41 42
return_statement     : 119
shift_expression     : 38 39 40 41 42 44 45
simple_name          : 76 79
statement            : 90 123 124 128 129
statement_expression : 120
type                 : 110 136 149 165 166
unary_expression     : 49 50 51 52 53 54 57 58
unary_expression_not_plus_minus : 55
valid_variable       : 13 82
variable_arguement_list : 104 106
variable_declaration_body : 99
variable_declaration_initializer : 103 104 105
variable_declarator  : 105 107 108
variable_declarator_id : 109
variable_declarators : 106 108 137
variable_literal     : 56
while_statement      : 114

Parsing method: LALR

state 0

    (0) S' -> . ProgramStructure
    (1) ProgramStructure -> . ProgramStructure class_and_objects
    (2) ProgramStructure -> . class_and_objects
    (3) class_and_objects -> . SingletonObject
    (4) class_and_objects -> . class_declaration
    (5) SingletonObject -> . ObjectDeclare block
    (139) class_declaration -> . class_header class_body
    (6) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (7) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (140) class_header -> . class_header_name class_header_extends_opt
    (141) class_header_name -> . class_header_name1 LPAREN constructor_arguement_list_opt RPAREN
    (142) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (94) modifier_opts -> . modifier
    (95) modifier_opts -> . empty
    (153) modifier -> . KWRD_PROTECTED
    (154) modifier -> . KWRD_PRIVATE
    (170) empty -> .

    KWRD_OBJECT     shift and go to state 4
    KWRD_PROTECTED  shift and go to state 10
    KWRD_PRIVATE    shift and go to state 14
    KWRD_CLASS      reduce using rule 170 (empty -> .)

    class_header_name              shift and go to state 3
    ProgramStructure               shift and go to state 6
    ObjectDeclare                  shift and go to state 1
    class_header_name1             shift and go to state 2
    class_declaration              shift and go to state 11
    class_and_objects              shift and go to state 12
    empty                          shift and go to state 5
    SingletonObject                shift and go to state 7
    modifier                       shift and go to state 13
    class_header                   shift and go to state 8
    modifier_opts                  shift and go to state 9

state 1

    (5) SingletonObject -> ObjectDeclare . block
    (84) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 15

    block                          shift and go to state 16

state 2

    (141) class_header_name -> class_header_name1 . LPAREN constructor_arguement_list_opt RPAREN

    LPAREN          shift and go to state 17


state 3

    (140) class_header -> class_header_name . class_header_extends_opt
    (143) class_header_extends_opt -> . class_header_extends
    (144) class_header_extends_opt -> . empty
    (145) class_header_extends -> . KWRD_EXTNDS name LPAREN func_arguement_list_opt RPAREN
    (170) empty -> .

    KWRD_EXTNDS     shift and go to state 20
    BLOCK_BEGIN     reduce using rule 170 (empty -> .)

    class_header_extends           shift and go to state 18
    class_header_extends_opt       shift and go to state 19
    empty                          shift and go to state 21

state 4

    (6) ObjectDeclare -> KWRD_OBJECT . IDENTIFIER
    (7) ObjectDeclare -> KWRD_OBJECT . IDENTIFIER KWRD_EXTNDS IDENTIFIER

    IDENTIFIER      shift and go to state 22


state 5

    (95) modifier_opts -> empty .

    KWRD_DEF        reduce using rule 95 (modifier_opts -> empty .)
    KWRD_CLASS      reduce using rule 95 (modifier_opts -> empty .)
    KWRD_VAR        reduce using rule 95 (modifier_opts -> empty .)
    KWRD_VAL        reduce using rule 95 (modifier_opts -> empty .)


state 6

    (0) S' -> ProgramStructure .
    (1) ProgramStructure -> ProgramStructure . class_and_objects
    (3) class_and_objects -> . SingletonObject
    (4) class_and_objects -> . class_declaration
    (5) SingletonObject -> . ObjectDeclare block
    (139) class_declaration -> . class_header class_body
    (6) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (7) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (140) class_header -> . class_header_name class_header_extends_opt
    (141) class_header_name -> . class_header_name1 LPAREN constructor_arguement_list_opt RPAREN
    (142) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (94) modifier_opts -> . modifier
    (95) modifier_opts -> . empty
    (153) modifier -> . KWRD_PROTECTED
    (154) modifier -> . KWRD_PRIVATE
    (170) empty -> .

    KWRD_OBJECT     shift and go to state 4
    KWRD_PROTECTED  shift and go to state 10
    KWRD_PRIVATE    shift and go to state 14
    KWRD_CLASS      reduce using rule 170 (empty -> .)

    class_header_name              shift and go to state 3
    ObjectDeclare                  shift and go to state 1
    class_header_name1             shift and go to state 2
    class_declaration              shift and go to state 11
    class_and_objects              shift and go to state 23
    empty                          shift and go to state 5
    SingletonObject                shift and go to state 7
    modifier                       shift and go to state 13
    class_header                   shift and go to state 8
    modifier_opts                  shift and go to state 9

state 7

    (3) class_and_objects -> SingletonObject .

    KWRD_OBJECT     reduce using rule 3 (class_and_objects -> SingletonObject .)
    KWRD_PROTECTED  reduce using rule 3 (class_and_objects -> SingletonObject .)
    KWRD_PRIVATE    reduce using rule 3 (class_and_objects -> SingletonObject .)
    $end            reduce using rule 3 (class_and_objects -> SingletonObject .)
    KWRD_CLASS      reduce using rule 3 (class_and_objects -> SingletonObject .)


state 8

    (139) class_declaration -> class_header . class_body
    (146) class_body -> . block
    (84) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 15

    class_body                     shift and go to state 24
    block                          shift and go to state 25

state 9

    (142) class_header_name1 -> modifier_opts . KWRD_CLASS name

    KWRD_CLASS      shift and go to state 26


state 10

    (153) modifier -> KWRD_PROTECTED .

    KWRD_DEF        reduce using rule 153 (modifier -> KWRD_PROTECTED .)
    KWRD_CLASS      reduce using rule 153 (modifier -> KWRD_PROTECTED .)
    KWRD_VAR        reduce using rule 153 (modifier -> KWRD_PROTECTED .)
    KWRD_VAL        reduce using rule 153 (modifier -> KWRD_PROTECTED .)


state 11

    (4) class_and_objects -> class_declaration .

    KWRD_OBJECT     reduce using rule 4 (class_and_objects -> class_declaration .)
    KWRD_PROTECTED  reduce using rule 4 (class_and_objects -> class_declaration .)
    KWRD_PRIVATE    reduce using rule 4 (class_and_objects -> class_declaration .)
    $end            reduce using rule 4 (class_and_objects -> class_declaration .)
    KWRD_CLASS      reduce using rule 4 (class_and_objects -> class_declaration .)


state 12

    (2) ProgramStructure -> class_and_objects .

    KWRD_OBJECT     reduce using rule 2 (ProgramStructure -> class_and_objects .)
    KWRD_PROTECTED  reduce using rule 2 (ProgramStructure -> class_and_objects .)
    KWRD_PRIVATE    reduce using rule 2 (ProgramStructure -> class_and_objects .)
    $end            reduce using rule 2 (ProgramStructure -> class_and_objects .)
    KWRD_CLASS      reduce using rule 2 (ProgramStructure -> class_and_objects .)


state 13

    (94) modifier_opts -> modifier .

    KWRD_DEF        reduce using rule 94 (modifier_opts -> modifier .)
    KWRD_CLASS      reduce using rule 94 (modifier_opts -> modifier .)
    KWRD_VAR        reduce using rule 94 (modifier_opts -> modifier .)
    KWRD_VAL        reduce using rule 94 (modifier_opts -> modifier .)


state 14

    (154) modifier -> KWRD_PRIVATE .

    KWRD_DEF        reduce using rule 154 (modifier -> KWRD_PRIVATE .)
    KWRD_CLASS      reduce using rule 154 (modifier -> KWRD_PRIVATE .)
    KWRD_VAR        reduce using rule 154 (modifier -> KWRD_PRIVATE .)
    KWRD_VAL        reduce using rule 154 (modifier -> KWRD_PRIVATE .)


state 15

    (84) block -> BLOCK_BEGIN . block_statements_opt BLOCK_END
    (85) block_statements_opt -> . block_statements
    (86) block_statements_opt -> . empty
    (87) block_statements -> . block_statement
    (88) block_statements -> . block_statements block_statement
    (170) empty -> .
    (89) block_statement -> . local_variable_declaration_statement
    (90) block_statement -> . statement
    (91) block_statement -> . class_declaration
    (92) block_statement -> . SingletonObject
    (93) block_statement -> . method_declaration
    (98) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (111) statement -> . normal_statement
    (112) statement -> . if_then_statement
    (113) statement -> . if_then_else_statement
    (114) statement -> . while_statement
    (115) statement -> . do_while_statement
    (139) class_declaration -> . class_header class_body
    (5) SingletonObject -> . ObjectDeclare block
    (147) method_declaration -> . method_header method_body
    (99) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (116) normal_statement -> . block
    (117) normal_statement -> . expression_statement
    (118) normal_statement -> . empty_statement
    (119) normal_statement -> . return_statement
    (123) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (124) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (128) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (129) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (140) class_header -> . class_header_name class_header_extends_opt
    (6) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (7) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (148) method_header -> . method_header_name LPAREN func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (94) modifier_opts -> . modifier
    (95) modifier_opts -> . empty
    (84) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (120) expression_statement -> . statement_expression STATE_END
    (130) empty_statement -> . STATE_END
    (131) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (141) class_header_name -> . class_header_name1 LPAREN constructor_arguement_list_opt RPAREN
    (151) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (153) modifier -> . KWRD_PROTECTED
    (154) modifier -> . KWRD_PRIVATE
    (121) statement_expression -> . assignment
    (122) statement_expression -> . method_invocation
    (142) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name

    BLOCK_END       reduce using rule 170 (empty -> .)
    KWRD_DEF        reduce using rule 170 (empty -> .)
    KWRD_CLASS      reduce using rule 170 (empty -> .)
    KWRD_VAR        reduce using rule 170 (empty -> .)
    KWRD_VAL        reduce using rule 170 (empty -> .)
    KWRD_IF         shift and go to state 55
    KWRD_WHILE      shift and go to state 44
    KWRD_DO         shift and go to state 50
    KWRD_OBJECT     shift and go to state 4
    BLOCK_BEGIN     shift and go to state 15
    STATE_END       shift and go to state 27
    KWRD_RETURN     shift and go to state 53
    KWRD_PROTECTED  shift and go to state 10
    KWRD_PRIVATE    shift and go to state 14
    IDENTIFIER      shift and go to state 43

    expression_statement           shift and go to state 28
    normal_statement               shift and go to state 29
    ObjectDeclare                  shift and go to state 1
    class_header_name1             shift and go to state 2
    if_then_statement              shift and go to state 31
    array_access                   shift and go to state 32
    block_statements_opt           shift and go to state 33
    qualified_name                 shift and go to state 34
    valid_variable                 shift and go to state 35
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 36
    block_statement                shift and go to state 37
    return_statement               shift and go to state 38
    while_statement                shift and go to state 39
    statement                      shift and go to state 40
    statement_expression           shift and go to state 42
    method_invocation              shift and go to state 41
    simple_name                    shift and go to state 30
    empty                          shift and go to state 45
    block_statements               shift and go to state 46
    local_variable_declaration_statement shift and go to state 47
    do_while_statement             shift and go to state 48
    assignment                     shift and go to state 49
    SingletonObject                shift and go to state 51
    method_header_name             shift and go to state 52
    class_header                   shift and go to state 8
    modifier_opts                  shift and go to state 54
    name                           shift and go to state 56
    method_header                  shift and go to state 57
    empty_statement                shift and go to state 58
    class_declaration              shift and go to state 59
    local_variable_declaration     shift and go to state 60
    modifier                       shift and go to state 13
    block                          shift and go to state 61
    if_then_else_statement         shift and go to state 62

state 16

    (5) SingletonObject -> ObjectDeclare block .

    KWRD_IF         reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_WHILE      reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_DO         reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_OBJECT     reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    BLOCK_BEGIN     reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    STATE_END       reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_RETURN     reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_PROTECTED  reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_PRIVATE    reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    IDENTIFIER      reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_DEF        reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_CLASS      reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_VAR        reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    KWRD_VAL        reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    BLOCK_END       reduce using rule 5 (SingletonObject -> ObjectDeclare block .)
    $end            reduce using rule 5 (SingletonObject -> ObjectDeclare block .)


state 17

    (141) class_header_name -> class_header_name1 LPAREN . constructor_arguement_list_opt RPAREN
    (132) constructor_arguement_list_opt -> . constructor_arguement_list
    (133) constructor_arguement_list_opt -> . empty
    (134) constructor_arguement_list -> . constructor_arguement_list_declarator
    (135) constructor_arguement_list -> . constructor_arguement_list COMMA constructor_arguement_list_declarator
    (170) empty -> .
    (136) constructor_arguement_list_declarator -> . declaration_keyword IDENTIFIER COLON type
    (96) declaration_keyword -> . KWRD_VAR
    (97) declaration_keyword -> . KWRD_VAL

    RPAREN          reduce using rule 170 (empty -> .)
    KWRD_VAR        shift and go to state 66
    KWRD_VAL        shift and go to state 67

    constructor_arguement_list_opt shift and go to state 63
    declaration_keyword            shift and go to state 64
    constructor_arguement_list     shift and go to state 65
    constructor_arguement_list_declarator shift and go to state 68
    empty                          shift and go to state 69

state 18

    (143) class_header_extends_opt -> class_header_extends .

    BLOCK_BEGIN     reduce using rule 143 (class_header_extends_opt -> class_header_extends .)


state 19

    (140) class_header -> class_header_name class_header_extends_opt .

    BLOCK_BEGIN     reduce using rule 140 (class_header -> class_header_name class_header_extends_opt .)


state 20

    (145) class_header_extends -> KWRD_EXTNDS . name LPAREN func_arguement_list_opt RPAREN
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name

    IDENTIFIER      shift and go to state 43

    name                           shift and go to state 70
    qualified_name                 shift and go to state 34
    simple_name                    shift and go to state 30

state 21

    (144) class_header_extends_opt -> empty .

    BLOCK_BEGIN     reduce using rule 144 (class_header_extends_opt -> empty .)


state 22

    (6) ObjectDeclare -> KWRD_OBJECT IDENTIFIER .
    (7) ObjectDeclare -> KWRD_OBJECT IDENTIFIER . KWRD_EXTNDS IDENTIFIER

    BLOCK_BEGIN     reduce using rule 6 (ObjectDeclare -> KWRD_OBJECT IDENTIFIER .)
    KWRD_EXTNDS     shift and go to state 71


state 23

    (1) ProgramStructure -> ProgramStructure class_and_objects .

    KWRD_OBJECT     reduce using rule 1 (ProgramStructure -> ProgramStructure class_and_objects .)
    KWRD_PROTECTED  reduce using rule 1 (ProgramStructure -> ProgramStructure class_and_objects .)
    KWRD_PRIVATE    reduce using rule 1 (ProgramStructure -> ProgramStructure class_and_objects .)
    $end            reduce using rule 1 (ProgramStructure -> ProgramStructure class_and_objects .)
    KWRD_CLASS      reduce using rule 1 (ProgramStructure -> ProgramStructure class_and_objects .)


state 24

    (139) class_declaration -> class_header class_body .

    KWRD_IF         reduce using rule 139 (class_declaration -> class_header class_body .)
    KWRD_WHILE      reduce using rule 139 (class_declaration -> class_header class_body .)
    KWRD_DO         reduce using rule 139 (class_declaration -> class_header class_body .)
    KWRD_OBJECT     reduce using rule 139 (class_declaration -> class_header class_body .)
    BLOCK_BEGIN     reduce using rule 139 (class_declaration -> class_header class_body .)
    STATE_END       reduce using rule 139 (class_declaration -> class_header class_body .)
    KWRD_RETURN     reduce using rule 139 (class_declaration -> class_header class_body .)
    KWRD_PROTECTED  reduce using rule 139 (class_declaration -> class_header class_body .)
    KWRD_PRIVATE    reduce using rule 139 (class_declaration -> class_header class_body .)
    IDENTIFIER      reduce using rule 139 (class_declaration -> class_header class_body .)
    KWRD_DEF        reduce using rule 139 (class_declaration -> class_header class_body .)
    KWRD_CLASS      reduce using rule 139 (class_declaration -> class_header class_body .)
    KWRD_VAR        reduce using rule 139 (class_declaration -> class_header class_body .)
    KWRD_VAL        reduce using rule 139 (class_declaration -> class_header class_body .)
    BLOCK_END       reduce using rule 139 (class_declaration -> class_header class_body .)
    $end            reduce using rule 139 (class_declaration -> class_header class_body .)


state 25

    (146) class_body -> block .

    KWRD_OBJECT     reduce using rule 146 (class_body -> block .)
    KWRD_PROTECTED  reduce using rule 146 (class_body -> block .)
    KWRD_PRIVATE    reduce using rule 146 (class_body -> block .)
    $end            reduce using rule 146 (class_body -> block .)
    KWRD_CLASS      reduce using rule 146 (class_body -> block .)
    KWRD_IF         reduce using rule 146 (class_body -> block .)
    KWRD_WHILE      reduce using rule 146 (class_body -> block .)
    KWRD_DO         reduce using rule 146 (class_body -> block .)
    BLOCK_BEGIN     reduce using rule 146 (class_body -> block .)
    STATE_END       reduce using rule 146 (class_body -> block .)
    KWRD_RETURN     reduce using rule 146 (class_body -> block .)
    IDENTIFIER      reduce using rule 146 (class_body -> block .)
    KWRD_DEF        reduce using rule 146 (class_body -> block .)
    KWRD_VAR        reduce using rule 146 (class_body -> block .)
    KWRD_VAL        reduce using rule 146 (class_body -> block .)
    BLOCK_END       reduce using rule 146 (class_body -> block .)


state 26

    (142) class_header_name1 -> modifier_opts KWRD_CLASS . name
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name

    IDENTIFIER      shift and go to state 43

    simple_name                    shift and go to state 30
    qualified_name                 shift and go to state 34
    name                           shift and go to state 72

state 27

    (130) empty_statement -> STATE_END .

    KWRD_WHILE      reduce using rule 130 (empty_statement -> STATE_END .)
    KWRD_IF         reduce using rule 130 (empty_statement -> STATE_END .)
    KWRD_DO         reduce using rule 130 (empty_statement -> STATE_END .)
    KWRD_OBJECT     reduce using rule 130 (empty_statement -> STATE_END .)
    BLOCK_BEGIN     reduce using rule 130 (empty_statement -> STATE_END .)
    STATE_END       reduce using rule 130 (empty_statement -> STATE_END .)
    KWRD_RETURN     reduce using rule 130 (empty_statement -> STATE_END .)
    KWRD_PROTECTED  reduce using rule 130 (empty_statement -> STATE_END .)
    KWRD_PRIVATE    reduce using rule 130 (empty_statement -> STATE_END .)
    IDENTIFIER      reduce using rule 130 (empty_statement -> STATE_END .)
    KWRD_DEF        reduce using rule 130 (empty_statement -> STATE_END .)
    KWRD_CLASS      reduce using rule 130 (empty_statement -> STATE_END .)
    KWRD_VAR        reduce using rule 130 (empty_statement -> STATE_END .)
    KWRD_VAL        reduce using rule 130 (empty_statement -> STATE_END .)
    BLOCK_END       reduce using rule 130 (empty_statement -> STATE_END .)
    KWRD_ELSE       reduce using rule 130 (empty_statement -> STATE_END .)


state 28

    (117) normal_statement -> expression_statement .

    KWRD_IF         reduce using rule 117 (normal_statement -> expression_statement .)
    KWRD_WHILE      reduce using rule 117 (normal_statement -> expression_statement .)
    KWRD_DO         reduce using rule 117 (normal_statement -> expression_statement .)
    KWRD_OBJECT     reduce using rule 117 (normal_statement -> expression_statement .)
    BLOCK_BEGIN     reduce using rule 117 (normal_statement -> expression_statement .)
    STATE_END       reduce using rule 117 (normal_statement -> expression_statement .)
    KWRD_RETURN     reduce using rule 117 (normal_statement -> expression_statement .)
    KWRD_PROTECTED  reduce using rule 117 (normal_statement -> expression_statement .)
    KWRD_PRIVATE    reduce using rule 117 (normal_statement -> expression_statement .)
    IDENTIFIER      reduce using rule 117 (normal_statement -> expression_statement .)
    KWRD_DEF        reduce using rule 117 (normal_statement -> expression_statement .)
    KWRD_CLASS      reduce using rule 117 (normal_statement -> expression_statement .)
    KWRD_VAR        reduce using rule 117 (normal_statement -> expression_statement .)
    KWRD_VAL        reduce using rule 117 (normal_statement -> expression_statement .)
    BLOCK_END       reduce using rule 117 (normal_statement -> expression_statement .)
    KWRD_ELSE       reduce using rule 117 (normal_statement -> expression_statement .)


state 29

    (111) statement -> normal_statement .

    KWRD_IF         reduce using rule 111 (statement -> normal_statement .)
    KWRD_WHILE      reduce using rule 111 (statement -> normal_statement .)
    KWRD_DO         reduce using rule 111 (statement -> normal_statement .)
    KWRD_OBJECT     reduce using rule 111 (statement -> normal_statement .)
    BLOCK_BEGIN     reduce using rule 111 (statement -> normal_statement .)
    STATE_END       reduce using rule 111 (statement -> normal_statement .)
    KWRD_RETURN     reduce using rule 111 (statement -> normal_statement .)
    KWRD_PROTECTED  reduce using rule 111 (statement -> normal_statement .)
    KWRD_PRIVATE    reduce using rule 111 (statement -> normal_statement .)
    IDENTIFIER      reduce using rule 111 (statement -> normal_statement .)
    KWRD_DEF        reduce using rule 111 (statement -> normal_statement .)
    KWRD_CLASS      reduce using rule 111 (statement -> normal_statement .)
    KWRD_VAR        reduce using rule 111 (statement -> normal_statement .)
    KWRD_VAL        reduce using rule 111 (statement -> normal_statement .)
    BLOCK_END       reduce using rule 111 (statement -> normal_statement .)


state 30

    (76) name -> simple_name .

    DOT             reduce using rule 76 (name -> simple_name .)
    RBPAREN         reduce using rule 76 (name -> simple_name .)
    LPAREN          reduce using rule 76 (name -> simple_name .)
    LBPAREN         reduce using rule 76 (name -> simple_name .)
    ASSIGN          reduce using rule 76 (name -> simple_name .)
    TIMES_ASSIGN    reduce using rule 76 (name -> simple_name .)
    DIVIDE_ASSIGN   reduce using rule 76 (name -> simple_name .)
    REMAINDER_ASSIGN reduce using rule 76 (name -> simple_name .)
    PLUS_ASSIGN     reduce using rule 76 (name -> simple_name .)
    MINUS_ASSIGN    reduce using rule 76 (name -> simple_name .)
    LSHIFT_ASSIGN   reduce using rule 76 (name -> simple_name .)
    RSHIFT_ASSIGN   reduce using rule 76 (name -> simple_name .)
    AND_ASSIGN      reduce using rule 76 (name -> simple_name .)
    OR_ASSIGN       reduce using rule 76 (name -> simple_name .)
    XOR_ASSIGN      reduce using rule 76 (name -> simple_name .)
    TIMES           reduce using rule 76 (name -> simple_name .)
    DIVIDE          reduce using rule 76 (name -> simple_name .)
    REMAINDER       reduce using rule 76 (name -> simple_name .)
    PLUS            reduce using rule 76 (name -> simple_name .)
    MINUS           reduce using rule 76 (name -> simple_name .)
    LSHIFT          reduce using rule 76 (name -> simple_name .)
    RSHIFT          reduce using rule 76 (name -> simple_name .)
    GREATER         reduce using rule 76 (name -> simple_name .)
    LESS            reduce using rule 76 (name -> simple_name .)
    GEQ             reduce using rule 76 (name -> simple_name .)
    LEQ             reduce using rule 76 (name -> simple_name .)
    EQUAL           reduce using rule 76 (name -> simple_name .)
    NEQUAL          reduce using rule 76 (name -> simple_name .)
    AND_BITWISE     reduce using rule 76 (name -> simple_name .)
    XOR             reduce using rule 76 (name -> simple_name .)
    OR_BITWISE      reduce using rule 76 (name -> simple_name .)
    AND             reduce using rule 76 (name -> simple_name .)
    OR              reduce using rule 76 (name -> simple_name .)
    STATE_END       reduce using rule 76 (name -> simple_name .)
    RPAREN          reduce using rule 76 (name -> simple_name .)
    COMMA           reduce using rule 76 (name -> simple_name .)


state 31

    (112) statement -> if_then_statement .

    KWRD_IF         reduce using rule 112 (statement -> if_then_statement .)
    KWRD_WHILE      reduce using rule 112 (statement -> if_then_statement .)
    KWRD_DO         reduce using rule 112 (statement -> if_then_statement .)
    KWRD_OBJECT     reduce using rule 112 (statement -> if_then_statement .)
    BLOCK_BEGIN     reduce using rule 112 (statement -> if_then_statement .)
    STATE_END       reduce using rule 112 (statement -> if_then_statement .)
    KWRD_RETURN     reduce using rule 112 (statement -> if_then_statement .)
    KWRD_PROTECTED  reduce using rule 112 (statement -> if_then_statement .)
    KWRD_PRIVATE    reduce using rule 112 (statement -> if_then_statement .)
    IDENTIFIER      reduce using rule 112 (statement -> if_then_statement .)
    KWRD_DEF        reduce using rule 112 (statement -> if_then_statement .)
    KWRD_CLASS      reduce using rule 112 (statement -> if_then_statement .)
    KWRD_VAR        reduce using rule 112 (statement -> if_then_statement .)
    KWRD_VAL        reduce using rule 112 (statement -> if_then_statement .)
    BLOCK_END       reduce using rule 112 (statement -> if_then_statement .)


state 32

    (81) valid_variable -> array_access .

    ASSIGN          reduce using rule 81 (valid_variable -> array_access .)
    TIMES_ASSIGN    reduce using rule 81 (valid_variable -> array_access .)
    DIVIDE_ASSIGN   reduce using rule 81 (valid_variable -> array_access .)
    REMAINDER_ASSIGN reduce using rule 81 (valid_variable -> array_access .)
    PLUS_ASSIGN     reduce using rule 81 (valid_variable -> array_access .)
    MINUS_ASSIGN    reduce using rule 81 (valid_variable -> array_access .)
    LSHIFT_ASSIGN   reduce using rule 81 (valid_variable -> array_access .)
    RSHIFT_ASSIGN   reduce using rule 81 (valid_variable -> array_access .)
    AND_ASSIGN      reduce using rule 81 (valid_variable -> array_access .)
    OR_ASSIGN       reduce using rule 81 (valid_variable -> array_access .)
    XOR_ASSIGN      reduce using rule 81 (valid_variable -> array_access .)
    TIMES           reduce using rule 81 (valid_variable -> array_access .)
    DIVIDE          reduce using rule 81 (valid_variable -> array_access .)
    REMAINDER       reduce using rule 81 (valid_variable -> array_access .)
    PLUS            reduce using rule 81 (valid_variable -> array_access .)
    MINUS           reduce using rule 81 (valid_variable -> array_access .)
    LSHIFT          reduce using rule 81 (valid_variable -> array_access .)
    RSHIFT          reduce using rule 81 (valid_variable -> array_access .)
    GREATER         reduce using rule 81 (valid_variable -> array_access .)
    LESS            reduce using rule 81 (valid_variable -> array_access .)
    GEQ             reduce using rule 81 (valid_variable -> array_access .)
    LEQ             reduce using rule 81 (valid_variable -> array_access .)
    EQUAL           reduce using rule 81 (valid_variable -> array_access .)
    NEQUAL          reduce using rule 81 (valid_variable -> array_access .)
    AND_BITWISE     reduce using rule 81 (valid_variable -> array_access .)
    XOR             reduce using rule 81 (valid_variable -> array_access .)
    OR_BITWISE      reduce using rule 81 (valid_variable -> array_access .)
    AND             reduce using rule 81 (valid_variable -> array_access .)
    OR              reduce using rule 81 (valid_variable -> array_access .)
    STATE_END       reduce using rule 81 (valid_variable -> array_access .)
    RPAREN          reduce using rule 81 (valid_variable -> array_access .)
    COMMA           reduce using rule 81 (valid_variable -> array_access .)
    RBPAREN         reduce using rule 81 (valid_variable -> array_access .)


state 33

    (84) block -> BLOCK_BEGIN block_statements_opt . BLOCK_END

    BLOCK_END       shift and go to state 73


state 34

    (77) name -> qualified_name .

    DOT             reduce using rule 77 (name -> qualified_name .)
    RBPAREN         reduce using rule 77 (name -> qualified_name .)
    LPAREN          reduce using rule 77 (name -> qualified_name .)
    LBPAREN         reduce using rule 77 (name -> qualified_name .)
    ASSIGN          reduce using rule 77 (name -> qualified_name .)
    TIMES_ASSIGN    reduce using rule 77 (name -> qualified_name .)
    DIVIDE_ASSIGN   reduce using rule 77 (name -> qualified_name .)
    REMAINDER_ASSIGN reduce using rule 77 (name -> qualified_name .)
    PLUS_ASSIGN     reduce using rule 77 (name -> qualified_name .)
    MINUS_ASSIGN    reduce using rule 77 (name -> qualified_name .)
    LSHIFT_ASSIGN   reduce using rule 77 (name -> qualified_name .)
    RSHIFT_ASSIGN   reduce using rule 77 (name -> qualified_name .)
    AND_ASSIGN      reduce using rule 77 (name -> qualified_name .)
    OR_ASSIGN       reduce using rule 77 (name -> qualified_name .)
    XOR_ASSIGN      reduce using rule 77 (name -> qualified_name .)
    TIMES           reduce using rule 77 (name -> qualified_name .)
    DIVIDE          reduce using rule 77 (name -> qualified_name .)
    REMAINDER       reduce using rule 77 (name -> qualified_name .)
    PLUS            reduce using rule 77 (name -> qualified_name .)
    MINUS           reduce using rule 77 (name -> qualified_name .)
    LSHIFT          reduce using rule 77 (name -> qualified_name .)
    RSHIFT          reduce using rule 77 (name -> qualified_name .)
    GREATER         reduce using rule 77 (name -> qualified_name .)
    LESS            reduce using rule 77 (name -> qualified_name .)
    GEQ             reduce using rule 77 (name -> qualified_name .)
    LEQ             reduce using rule 77 (name -> qualified_name .)
    EQUAL           reduce using rule 77 (name -> qualified_name .)
    NEQUAL          reduce using rule 77 (name -> qualified_name .)
    AND_BITWISE     reduce using rule 77 (name -> qualified_name .)
    XOR             reduce using rule 77 (name -> qualified_name .)
    OR_BITWISE      reduce using rule 77 (name -> qualified_name .)
    AND             reduce using rule 77 (name -> qualified_name .)
    OR              reduce using rule 77 (name -> qualified_name .)
    STATE_END       reduce using rule 77 (name -> qualified_name .)
    RPAREN          reduce using rule 77 (name -> qualified_name .)
    COMMA           reduce using rule 77 (name -> qualified_name .)


state 35

    (13) assignment -> valid_variable . assignment_operator assignment_expression
    (14) assignment_operator -> . ASSIGN
    (15) assignment_operator -> . TIMES_ASSIGN
    (16) assignment_operator -> . DIVIDE_ASSIGN
    (17) assignment_operator -> . REMAINDER_ASSIGN
    (18) assignment_operator -> . PLUS_ASSIGN
    (19) assignment_operator -> . MINUS_ASSIGN
    (20) assignment_operator -> . LSHIFT_ASSIGN
    (21) assignment_operator -> . RSHIFT_ASSIGN
    (22) assignment_operator -> . AND_ASSIGN
    (23) assignment_operator -> . OR_ASSIGN
    (24) assignment_operator -> . XOR_ASSIGN

    ASSIGN          shift and go to state 84
    TIMES_ASSIGN    shift and go to state 74
    DIVIDE_ASSIGN   shift and go to state 81
    REMAINDER_ASSIGN shift and go to state 77
    PLUS_ASSIGN     shift and go to state 83
    MINUS_ASSIGN    shift and go to state 76
    LSHIFT_ASSIGN   shift and go to state 79
    RSHIFT_ASSIGN   shift and go to state 75
    AND_ASSIGN      shift and go to state 80
    OR_ASSIGN       shift and go to state 78
    XOR_ASSIGN      shift and go to state 85

    assignment_operator            shift and go to state 82

state 36

    (93) block_statement -> method_declaration .

    KWRD_IF         reduce using rule 93 (block_statement -> method_declaration .)
    KWRD_WHILE      reduce using rule 93 (block_statement -> method_declaration .)
    KWRD_DO         reduce using rule 93 (block_statement -> method_declaration .)
    KWRD_OBJECT     reduce using rule 93 (block_statement -> method_declaration .)
    BLOCK_BEGIN     reduce using rule 93 (block_statement -> method_declaration .)
    STATE_END       reduce using rule 93 (block_statement -> method_declaration .)
    KWRD_RETURN     reduce using rule 93 (block_statement -> method_declaration .)
    KWRD_PROTECTED  reduce using rule 93 (block_statement -> method_declaration .)
    KWRD_PRIVATE    reduce using rule 93 (block_statement -> method_declaration .)
    IDENTIFIER      reduce using rule 93 (block_statement -> method_declaration .)
    KWRD_DEF        reduce using rule 93 (block_statement -> method_declaration .)
    KWRD_CLASS      reduce using rule 93 (block_statement -> method_declaration .)
    KWRD_VAR        reduce using rule 93 (block_statement -> method_declaration .)
    KWRD_VAL        reduce using rule 93 (block_statement -> method_declaration .)
    BLOCK_END       reduce using rule 93 (block_statement -> method_declaration .)


state 37

    (87) block_statements -> block_statement .

    KWRD_IF         reduce using rule 87 (block_statements -> block_statement .)
    KWRD_WHILE      reduce using rule 87 (block_statements -> block_statement .)
    KWRD_DO         reduce using rule 87 (block_statements -> block_statement .)
    KWRD_OBJECT     reduce using rule 87 (block_statements -> block_statement .)
    BLOCK_BEGIN     reduce using rule 87 (block_statements -> block_statement .)
    STATE_END       reduce using rule 87 (block_statements -> block_statement .)
    KWRD_RETURN     reduce using rule 87 (block_statements -> block_statement .)
    KWRD_PROTECTED  reduce using rule 87 (block_statements -> block_statement .)
    KWRD_PRIVATE    reduce using rule 87 (block_statements -> block_statement .)
    IDENTIFIER      reduce using rule 87 (block_statements -> block_statement .)
    KWRD_DEF        reduce using rule 87 (block_statements -> block_statement .)
    KWRD_CLASS      reduce using rule 87 (block_statements -> block_statement .)
    KWRD_VAR        reduce using rule 87 (block_statements -> block_statement .)
    KWRD_VAL        reduce using rule 87 (block_statements -> block_statement .)
    BLOCK_END       reduce using rule 87 (block_statements -> block_statement .)


state 38

    (119) normal_statement -> return_statement .

    KWRD_IF         reduce using rule 119 (normal_statement -> return_statement .)
    KWRD_WHILE      reduce using rule 119 (normal_statement -> return_statement .)
    KWRD_DO         reduce using rule 119 (normal_statement -> return_statement .)
    KWRD_OBJECT     reduce using rule 119 (normal_statement -> return_statement .)
    BLOCK_BEGIN     reduce using rule 119 (normal_statement -> return_statement .)
    STATE_END       reduce using rule 119 (normal_statement -> return_statement .)
    KWRD_RETURN     reduce using rule 119 (normal_statement -> return_statement .)
    KWRD_PROTECTED  reduce using rule 119 (normal_statement -> return_statement .)
    KWRD_PRIVATE    reduce using rule 119 (normal_statement -> return_statement .)
    IDENTIFIER      reduce using rule 119 (normal_statement -> return_statement .)
    KWRD_DEF        reduce using rule 119 (normal_statement -> return_statement .)
    KWRD_CLASS      reduce using rule 119 (normal_statement -> return_statement .)
    KWRD_VAR        reduce using rule 119 (normal_statement -> return_statement .)
    KWRD_VAL        reduce using rule 119 (normal_statement -> return_statement .)
    BLOCK_END       reduce using rule 119 (normal_statement -> return_statement .)
    KWRD_ELSE       reduce using rule 119 (normal_statement -> return_statement .)


state 39

    (114) statement -> while_statement .

    KWRD_IF         reduce using rule 114 (statement -> while_statement .)
    KWRD_WHILE      reduce using rule 114 (statement -> while_statement .)
    KWRD_DO         reduce using rule 114 (statement -> while_statement .)
    KWRD_OBJECT     reduce using rule 114 (statement -> while_statement .)
    BLOCK_BEGIN     reduce using rule 114 (statement -> while_statement .)
    STATE_END       reduce using rule 114 (statement -> while_statement .)
    KWRD_RETURN     reduce using rule 114 (statement -> while_statement .)
    KWRD_PROTECTED  reduce using rule 114 (statement -> while_statement .)
    KWRD_PRIVATE    reduce using rule 114 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 114 (statement -> while_statement .)
    KWRD_DEF        reduce using rule 114 (statement -> while_statement .)
    KWRD_CLASS      reduce using rule 114 (statement -> while_statement .)
    KWRD_VAR        reduce using rule 114 (statement -> while_statement .)
    KWRD_VAL        reduce using rule 114 (statement -> while_statement .)
    BLOCK_END       reduce using rule 114 (statement -> while_statement .)


state 40

    (90) block_statement -> statement .

    KWRD_IF         reduce using rule 90 (block_statement -> statement .)
    KWRD_WHILE      reduce using rule 90 (block_statement -> statement .)
    KWRD_DO         reduce using rule 90 (block_statement -> statement .)
    KWRD_OBJECT     reduce using rule 90 (block_statement -> statement .)
    BLOCK_BEGIN     reduce using rule 90 (block_statement -> statement .)
    STATE_END       reduce using rule 90 (block_statement -> statement .)
    KWRD_RETURN     reduce using rule 90 (block_statement -> statement .)
    KWRD_PROTECTED  reduce using rule 90 (block_statement -> statement .)
    KWRD_PRIVATE    reduce using rule 90 (block_statement -> statement .)
    IDENTIFIER      reduce using rule 90 (block_statement -> statement .)
    KWRD_DEF        reduce using rule 90 (block_statement -> statement .)
    KWRD_CLASS      reduce using rule 90 (block_statement -> statement .)
    KWRD_VAR        reduce using rule 90 (block_statement -> statement .)
    KWRD_VAL        reduce using rule 90 (block_statement -> statement .)
    BLOCK_END       reduce using rule 90 (block_statement -> statement .)


state 41

    (122) statement_expression -> method_invocation .

    STATE_END       reduce using rule 122 (statement_expression -> method_invocation .)


state 42

    (120) expression_statement -> statement_expression . STATE_END

    STATE_END       shift and go to state 86


state 43

    (78) simple_name -> IDENTIFIER .

    LBPAREN         reduce using rule 78 (simple_name -> IDENTIFIER .)
    LPAREN          reduce using rule 78 (simple_name -> IDENTIFIER .)
    DOT             reduce using rule 78 (simple_name -> IDENTIFIER .)
    TIMES           reduce using rule 78 (simple_name -> IDENTIFIER .)
    DIVIDE          reduce using rule 78 (simple_name -> IDENTIFIER .)
    REMAINDER       reduce using rule 78 (simple_name -> IDENTIFIER .)
    PLUS            reduce using rule 78 (simple_name -> IDENTIFIER .)
    MINUS           reduce using rule 78 (simple_name -> IDENTIFIER .)
    LSHIFT          reduce using rule 78 (simple_name -> IDENTIFIER .)
    RSHIFT          reduce using rule 78 (simple_name -> IDENTIFIER .)
    GREATER         reduce using rule 78 (simple_name -> IDENTIFIER .)
    LESS            reduce using rule 78 (simple_name -> IDENTIFIER .)
    GEQ             reduce using rule 78 (simple_name -> IDENTIFIER .)
    LEQ             reduce using rule 78 (simple_name -> IDENTIFIER .)
    EQUAL           reduce using rule 78 (simple_name -> IDENTIFIER .)
    NEQUAL          reduce using rule 78 (simple_name -> IDENTIFIER .)
    AND_BITWISE     reduce using rule 78 (simple_name -> IDENTIFIER .)
    XOR             reduce using rule 78 (simple_name -> IDENTIFIER .)
    OR_BITWISE      reduce using rule 78 (simple_name -> IDENTIFIER .)
    AND             reduce using rule 78 (simple_name -> IDENTIFIER .)
    OR              reduce using rule 78 (simple_name -> IDENTIFIER .)
    STATE_END       reduce using rule 78 (simple_name -> IDENTIFIER .)
    RPAREN          reduce using rule 78 (simple_name -> IDENTIFIER .)
    COMMA           reduce using rule 78 (simple_name -> IDENTIFIER .)
    RBPAREN         reduce using rule 78 (simple_name -> IDENTIFIER .)
    ASSIGN          reduce using rule 78 (simple_name -> IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 78 (simple_name -> IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 78 (simple_name -> IDENTIFIER .)
    REMAINDER_ASSIGN reduce using rule 78 (simple_name -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 78 (simple_name -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 78 (simple_name -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 78 (simple_name -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 78 (simple_name -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 78 (simple_name -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 78 (simple_name -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 78 (simple_name -> IDENTIFIER .)


state 44

    (128) while_statement -> KWRD_WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 87


state 45

    (86) block_statements_opt -> empty .
    (95) modifier_opts -> empty .

    BLOCK_END       reduce using rule 86 (block_statements_opt -> empty .)
    KWRD_DEF        reduce using rule 95 (modifier_opts -> empty .)
    KWRD_CLASS      reduce using rule 95 (modifier_opts -> empty .)
    KWRD_VAR        reduce using rule 95 (modifier_opts -> empty .)
    KWRD_VAL        reduce using rule 95 (modifier_opts -> empty .)


state 46

    (85) block_statements_opt -> block_statements .
    (88) block_statements -> block_statements . block_statement
    (89) block_statement -> . local_variable_declaration_statement
    (90) block_statement -> . statement
    (91) block_statement -> . class_declaration
    (92) block_statement -> . SingletonObject
    (93) block_statement -> . method_declaration
    (98) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (111) statement -> . normal_statement
    (112) statement -> . if_then_statement
    (113) statement -> . if_then_else_statement
    (114) statement -> . while_statement
    (115) statement -> . do_while_statement
    (139) class_declaration -> . class_header class_body
    (5) SingletonObject -> . ObjectDeclare block
    (147) method_declaration -> . method_header method_body
    (99) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (116) normal_statement -> . block
    (117) normal_statement -> . expression_statement
    (118) normal_statement -> . empty_statement
    (119) normal_statement -> . return_statement
    (123) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (124) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (128) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (129) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (140) class_header -> . class_header_name class_header_extends_opt
    (6) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (7) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (148) method_header -> . method_header_name LPAREN func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (94) modifier_opts -> . modifier
    (95) modifier_opts -> . empty
    (84) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (120) expression_statement -> . statement_expression STATE_END
    (130) empty_statement -> . STATE_END
    (131) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (141) class_header_name -> . class_header_name1 LPAREN constructor_arguement_list_opt RPAREN
    (151) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (153) modifier -> . KWRD_PROTECTED
    (154) modifier -> . KWRD_PRIVATE
    (170) empty -> .
    (121) statement_expression -> . assignment
    (122) statement_expression -> . method_invocation
    (142) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name

    BLOCK_END       reduce using rule 85 (block_statements_opt -> block_statements .)
    KWRD_IF         shift and go to state 55
    KWRD_WHILE      shift and go to state 44
    KWRD_DO         shift and go to state 50
    KWRD_OBJECT     shift and go to state 4
    BLOCK_BEGIN     shift and go to state 15
    STATE_END       shift and go to state 27
    KWRD_RETURN     shift and go to state 53
    KWRD_PROTECTED  shift and go to state 10
    KWRD_PRIVATE    shift and go to state 14
    KWRD_DEF        reduce using rule 170 (empty -> .)
    KWRD_CLASS      reduce using rule 170 (empty -> .)
    KWRD_VAR        reduce using rule 170 (empty -> .)
    KWRD_VAL        reduce using rule 170 (empty -> .)
    IDENTIFIER      shift and go to state 43

    expression_statement           shift and go to state 28
    method_header                  shift and go to state 57
    normal_statement               shift and go to state 29
    ObjectDeclare                  shift and go to state 1
    class_header_name1             shift and go to state 2
    if_then_statement              shift and go to state 31
    array_access                   shift and go to state 32
    qualified_name                 shift and go to state 34
    valid_variable                 shift and go to state 35
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 36
    block_statement                shift and go to state 88
    return_statement               shift and go to state 38
    while_statement                shift and go to state 39
    statement                      shift and go to state 40
    statement_expression           shift and go to state 42
    method_invocation              shift and go to state 41
    simple_name                    shift and go to state 30
    empty                          shift and go to state 5
    local_variable_declaration_statement shift and go to state 47
    do_while_statement             shift and go to state 48
    assignment                     shift and go to state 49
    SingletonObject                shift and go to state 51
    method_header_name             shift and go to state 52
    class_header                   shift and go to state 8
    modifier_opts                  shift and go to state 54
    name                           shift and go to state 56
    empty_statement                shift and go to state 58
    class_declaration              shift and go to state 59
    local_variable_declaration     shift and go to state 60
    modifier                       shift and go to state 13
    block                          shift and go to state 61
    if_then_else_statement         shift and go to state 62

state 47

    (89) block_statement -> local_variable_declaration_statement .

    KWRD_IF         reduce using rule 89 (block_statement -> local_variable_declaration_statement .)
    KWRD_WHILE      reduce using rule 89 (block_statement -> local_variable_declaration_statement .)
    KWRD_DO         reduce using rule 89 (block_statement -> local_variable_declaration_statement .)
    KWRD_OBJECT     reduce using rule 89 (block_statement -> local_variable_declaration_statement .)
    BLOCK_BEGIN     reduce using rule 89 (block_statement -> local_variable_declaration_statement .)
    STATE_END       reduce using rule 89 (block_statement -> local_variable_declaration_statement .)
    KWRD_RETURN     reduce using rule 89 (block_statement -> local_variable_declaration_statement .)
    KWRD_PROTECTED  reduce using rule 89 (block_statement -> local_variable_declaration_statement .)
    KWRD_PRIVATE    reduce using rule 89 (block_statement -> local_variable_declaration_statement .)
    IDENTIFIER      reduce using rule 89 (block_statement -> local_variable_declaration_statement .)
    KWRD_DEF        reduce using rule 89 (block_statement -> local_variable_declaration_statement .)
    KWRD_CLASS      reduce using rule 89 (block_statement -> local_variable_declaration_statement .)
    KWRD_VAR        reduce using rule 89 (block_statement -> local_variable_declaration_statement .)
    KWRD_VAL        reduce using rule 89 (block_statement -> local_variable_declaration_statement .)
    BLOCK_END       reduce using rule 89 (block_statement -> local_variable_declaration_statement .)


state 48

    (115) statement -> do_while_statement .

    KWRD_IF         reduce using rule 115 (statement -> do_while_statement .)
    KWRD_WHILE      reduce using rule 115 (statement -> do_while_statement .)
    KWRD_DO         reduce using rule 115 (statement -> do_while_statement .)
    KWRD_OBJECT     reduce using rule 115 (statement -> do_while_statement .)
    BLOCK_BEGIN     reduce using rule 115 (statement -> do_while_statement .)
    STATE_END       reduce using rule 115 (statement -> do_while_statement .)
    KWRD_RETURN     reduce using rule 115 (statement -> do_while_statement .)
    KWRD_PROTECTED  reduce using rule 115 (statement -> do_while_statement .)
    KWRD_PRIVATE    reduce using rule 115 (statement -> do_while_statement .)
    IDENTIFIER      reduce using rule 115 (statement -> do_while_statement .)
    KWRD_DEF        reduce using rule 115 (statement -> do_while_statement .)
    KWRD_CLASS      reduce using rule 115 (statement -> do_while_statement .)
    KWRD_VAR        reduce using rule 115 (statement -> do_while_statement .)
    KWRD_VAL        reduce using rule 115 (statement -> do_while_statement .)
    BLOCK_END       reduce using rule 115 (statement -> do_while_statement .)


state 49

    (121) statement_expression -> assignment .

    STATE_END       reduce using rule 121 (statement_expression -> assignment .)


state 50

    (129) do_while_statement -> KWRD_DO . statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (111) statement -> . normal_statement
    (112) statement -> . if_then_statement
    (113) statement -> . if_then_else_statement
    (114) statement -> . while_statement
    (115) statement -> . do_while_statement
    (116) normal_statement -> . block
    (117) normal_statement -> . expression_statement
    (118) normal_statement -> . empty_statement
    (119) normal_statement -> . return_statement
    (123) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (124) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (128) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (129) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (84) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (120) expression_statement -> . statement_expression STATE_END
    (130) empty_statement -> . STATE_END
    (131) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (121) statement_expression -> . assignment
    (122) statement_expression -> . method_invocation
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name

    KWRD_IF         shift and go to state 55
    KWRD_WHILE      shift and go to state 44
    KWRD_DO         shift and go to state 50
    BLOCK_BEGIN     shift and go to state 15
    STATE_END       shift and go to state 27
    KWRD_RETURN     shift and go to state 53
    IDENTIFIER      shift and go to state 43

    expression_statement           shift and go to state 28
    normal_statement               shift and go to state 29
    if_then_statement              shift and go to state 31
    array_access                   shift and go to state 32
    qualified_name                 shift and go to state 34
    valid_variable                 shift and go to state 35
    return_statement               shift and go to state 38
    while_statement                shift and go to state 39
    statement                      shift and go to state 89
    statement_expression           shift and go to state 42
    method_invocation              shift and go to state 41
    simple_name                    shift and go to state 30
    do_while_statement             shift and go to state 48
    assignment                     shift and go to state 49
    name                           shift and go to state 56
    empty_statement                shift and go to state 58
    block                          shift and go to state 61
    if_then_else_statement         shift and go to state 62

state 51

    (92) block_statement -> SingletonObject .

    KWRD_IF         reduce using rule 92 (block_statement -> SingletonObject .)
    KWRD_WHILE      reduce using rule 92 (block_statement -> SingletonObject .)
    KWRD_DO         reduce using rule 92 (block_statement -> SingletonObject .)
    KWRD_OBJECT     reduce using rule 92 (block_statement -> SingletonObject .)
    BLOCK_BEGIN     reduce using rule 92 (block_statement -> SingletonObject .)
    STATE_END       reduce using rule 92 (block_statement -> SingletonObject .)
    KWRD_RETURN     reduce using rule 92 (block_statement -> SingletonObject .)
    KWRD_PROTECTED  reduce using rule 92 (block_statement -> SingletonObject .)
    KWRD_PRIVATE    reduce using rule 92 (block_statement -> SingletonObject .)
    IDENTIFIER      reduce using rule 92 (block_statement -> SingletonObject .)
    KWRD_DEF        reduce using rule 92 (block_statement -> SingletonObject .)
    KWRD_CLASS      reduce using rule 92 (block_statement -> SingletonObject .)
    KWRD_VAR        reduce using rule 92 (block_statement -> SingletonObject .)
    KWRD_VAL        reduce using rule 92 (block_statement -> SingletonObject .)
    BLOCK_END       reduce using rule 92 (block_statement -> SingletonObject .)


state 52

    (148) method_header -> method_header_name . LPAREN func_arguement_list_opt RPAREN COLON method_return_type ASSIGN

    LPAREN          shift and go to state 90


state 53

    (131) return_statement -> KWRD_RETURN . expression_optional STATE_END
    (9) expression_optional -> . expression
    (10) expression_optional -> . empty
    (8) expression -> . assignment_expression
    (170) empty -> .
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    STATE_END       reduce using rule 170 (empty -> .)
    IDENTIFIER      shift and go to state 43
    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    unary_expression               shift and go to state 91
    exclusive_or_expression        shift and go to state 92
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    array_access                   shift and go to state 32
    additive_expression            shift and go to state 117
    simple_name                    shift and go to state 30
    expression_optional            shift and go to state 98
    valid_variable                 shift and go to state 99
    inclusive_or_expression        shift and go to state 100
    literal                        shift and go to state 101
    and_expression                 shift and go to state 104
    relational_expression          shift and go to state 108
    method_invocation              shift and go to state 105
    conditional_or_expression      shift and go to state 106
    empty                          shift and go to state 107
    assignment_expression          shift and go to state 111
    qualified_name                 shift and go to state 34
    assignment                     shift and go to state 113
    multiplicative_expression      shift and go to state 114
    shift_expression               shift and go to state 119
    equality_expression            shift and go to state 120
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 123
    expression                     shift and go to state 126
    conditional_and_expression     shift and go to state 124

state 54

    (99) local_variable_declaration -> modifier_opts . declaration_keyword variable_declaration_body
    (151) method_header_name -> modifier_opts . KWRD_DEF IDENTIFIER
    (142) class_header_name1 -> modifier_opts . KWRD_CLASS name
    (96) declaration_keyword -> . KWRD_VAR
    (97) declaration_keyword -> . KWRD_VAL

    KWRD_DEF        shift and go to state 127
    KWRD_CLASS      shift and go to state 26
    KWRD_VAR        shift and go to state 66
    KWRD_VAL        shift and go to state 67

    declaration_keyword            shift and go to state 128

state 55

    (123) if_then_statement -> KWRD_IF . LPAREN expression RPAREN statement
    (124) if_then_else_statement -> KWRD_IF . LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement

    LPAREN          shift and go to state 129


state 56

    (70) method_invocation -> name . LPAREN argument_list_opt RPAREN
    (80) valid_variable -> name .
    (71) array_access -> name . LBPAREN expression RBPAREN
    (79) qualified_name -> name . DOT simple_name

    LPAREN          shift and go to state 130
    ASSIGN          reduce using rule 80 (valid_variable -> name .)
    TIMES_ASSIGN    reduce using rule 80 (valid_variable -> name .)
    DIVIDE_ASSIGN   reduce using rule 80 (valid_variable -> name .)
    REMAINDER_ASSIGN reduce using rule 80 (valid_variable -> name .)
    PLUS_ASSIGN     reduce using rule 80 (valid_variable -> name .)
    MINUS_ASSIGN    reduce using rule 80 (valid_variable -> name .)
    LSHIFT_ASSIGN   reduce using rule 80 (valid_variable -> name .)
    RSHIFT_ASSIGN   reduce using rule 80 (valid_variable -> name .)
    AND_ASSIGN      reduce using rule 80 (valid_variable -> name .)
    OR_ASSIGN       reduce using rule 80 (valid_variable -> name .)
    XOR_ASSIGN      reduce using rule 80 (valid_variable -> name .)
    LBPAREN         shift and go to state 131
    DOT             shift and go to state 132


state 57

    (147) method_declaration -> method_header . method_body
    (152) method_body -> . block
    (84) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END

    BLOCK_BEGIN     shift and go to state 15

    method_body                    shift and go to state 133
    block                          shift and go to state 134

state 58

    (118) normal_statement -> empty_statement .

    KWRD_IF         reduce using rule 118 (normal_statement -> empty_statement .)
    KWRD_WHILE      reduce using rule 118 (normal_statement -> empty_statement .)
    KWRD_DO         reduce using rule 118 (normal_statement -> empty_statement .)
    KWRD_OBJECT     reduce using rule 118 (normal_statement -> empty_statement .)
    BLOCK_BEGIN     reduce using rule 118 (normal_statement -> empty_statement .)
    STATE_END       reduce using rule 118 (normal_statement -> empty_statement .)
    KWRD_RETURN     reduce using rule 118 (normal_statement -> empty_statement .)
    KWRD_PROTECTED  reduce using rule 118 (normal_statement -> empty_statement .)
    KWRD_PRIVATE    reduce using rule 118 (normal_statement -> empty_statement .)
    IDENTIFIER      reduce using rule 118 (normal_statement -> empty_statement .)
    KWRD_DEF        reduce using rule 118 (normal_statement -> empty_statement .)
    KWRD_CLASS      reduce using rule 118 (normal_statement -> empty_statement .)
    KWRD_VAR        reduce using rule 118 (normal_statement -> empty_statement .)
    KWRD_VAL        reduce using rule 118 (normal_statement -> empty_statement .)
    BLOCK_END       reduce using rule 118 (normal_statement -> empty_statement .)
    KWRD_ELSE       reduce using rule 118 (normal_statement -> empty_statement .)


state 59

    (91) block_statement -> class_declaration .

    KWRD_IF         reduce using rule 91 (block_statement -> class_declaration .)
    KWRD_WHILE      reduce using rule 91 (block_statement -> class_declaration .)
    KWRD_DO         reduce using rule 91 (block_statement -> class_declaration .)
    KWRD_OBJECT     reduce using rule 91 (block_statement -> class_declaration .)
    BLOCK_BEGIN     reduce using rule 91 (block_statement -> class_declaration .)
    STATE_END       reduce using rule 91 (block_statement -> class_declaration .)
    KWRD_RETURN     reduce using rule 91 (block_statement -> class_declaration .)
    KWRD_PROTECTED  reduce using rule 91 (block_statement -> class_declaration .)
    KWRD_PRIVATE    reduce using rule 91 (block_statement -> class_declaration .)
    IDENTIFIER      reduce using rule 91 (block_statement -> class_declaration .)
    KWRD_DEF        reduce using rule 91 (block_statement -> class_declaration .)
    KWRD_CLASS      reduce using rule 91 (block_statement -> class_declaration .)
    KWRD_VAR        reduce using rule 91 (block_statement -> class_declaration .)
    KWRD_VAL        reduce using rule 91 (block_statement -> class_declaration .)
    BLOCK_END       reduce using rule 91 (block_statement -> class_declaration .)


state 60

    (98) local_variable_declaration_statement -> local_variable_declaration . STATE_END

    STATE_END       shift and go to state 135


state 61

    (116) normal_statement -> block .

    KWRD_IF         reduce using rule 116 (normal_statement -> block .)
    KWRD_WHILE      reduce using rule 116 (normal_statement -> block .)
    KWRD_DO         reduce using rule 116 (normal_statement -> block .)
    KWRD_OBJECT     reduce using rule 116 (normal_statement -> block .)
    BLOCK_BEGIN     reduce using rule 116 (normal_statement -> block .)
    STATE_END       reduce using rule 116 (normal_statement -> block .)
    KWRD_RETURN     reduce using rule 116 (normal_statement -> block .)
    KWRD_PROTECTED  reduce using rule 116 (normal_statement -> block .)
    KWRD_PRIVATE    reduce using rule 116 (normal_statement -> block .)
    IDENTIFIER      reduce using rule 116 (normal_statement -> block .)
    KWRD_DEF        reduce using rule 116 (normal_statement -> block .)
    KWRD_CLASS      reduce using rule 116 (normal_statement -> block .)
    KWRD_VAR        reduce using rule 116 (normal_statement -> block .)
    KWRD_VAL        reduce using rule 116 (normal_statement -> block .)
    BLOCK_END       reduce using rule 116 (normal_statement -> block .)
    KWRD_ELSE       reduce using rule 116 (normal_statement -> block .)


state 62

    (113) statement -> if_then_else_statement .

    KWRD_IF         reduce using rule 113 (statement -> if_then_else_statement .)
    KWRD_WHILE      reduce using rule 113 (statement -> if_then_else_statement .)
    KWRD_DO         reduce using rule 113 (statement -> if_then_else_statement .)
    KWRD_OBJECT     reduce using rule 113 (statement -> if_then_else_statement .)
    BLOCK_BEGIN     reduce using rule 113 (statement -> if_then_else_statement .)
    STATE_END       reduce using rule 113 (statement -> if_then_else_statement .)
    KWRD_RETURN     reduce using rule 113 (statement -> if_then_else_statement .)
    KWRD_PROTECTED  reduce using rule 113 (statement -> if_then_else_statement .)
    KWRD_PRIVATE    reduce using rule 113 (statement -> if_then_else_statement .)
    IDENTIFIER      reduce using rule 113 (statement -> if_then_else_statement .)
    KWRD_DEF        reduce using rule 113 (statement -> if_then_else_statement .)
    KWRD_CLASS      reduce using rule 113 (statement -> if_then_else_statement .)
    KWRD_VAR        reduce using rule 113 (statement -> if_then_else_statement .)
    KWRD_VAL        reduce using rule 113 (statement -> if_then_else_statement .)
    BLOCK_END       reduce using rule 113 (statement -> if_then_else_statement .)


state 63

    (141) class_header_name -> class_header_name1 LPAREN constructor_arguement_list_opt . RPAREN

    RPAREN          shift and go to state 136


state 64

    (136) constructor_arguement_list_declarator -> declaration_keyword . IDENTIFIER COLON type

    IDENTIFIER      shift and go to state 137


state 65

    (132) constructor_arguement_list_opt -> constructor_arguement_list .
    (135) constructor_arguement_list -> constructor_arguement_list . COMMA constructor_arguement_list_declarator

    RPAREN          reduce using rule 132 (constructor_arguement_list_opt -> constructor_arguement_list .)
    COMMA           shift and go to state 138


state 66

    (96) declaration_keyword -> KWRD_VAR .

    IDENTIFIER      reduce using rule 96 (declaration_keyword -> KWRD_VAR .)
    LPAREN          reduce using rule 96 (declaration_keyword -> KWRD_VAR .)


state 67

    (97) declaration_keyword -> KWRD_VAL .

    IDENTIFIER      reduce using rule 97 (declaration_keyword -> KWRD_VAL .)
    LPAREN          reduce using rule 97 (declaration_keyword -> KWRD_VAL .)


state 68

    (134) constructor_arguement_list -> constructor_arguement_list_declarator .

    COMMA           reduce using rule 134 (constructor_arguement_list -> constructor_arguement_list_declarator .)
    RPAREN          reduce using rule 134 (constructor_arguement_list -> constructor_arguement_list_declarator .)


state 69

    (133) constructor_arguement_list_opt -> empty .

    RPAREN          reduce using rule 133 (constructor_arguement_list_opt -> empty .)


state 70

    (145) class_header_extends -> KWRD_EXTNDS name . LPAREN func_arguement_list_opt RPAREN
    (79) qualified_name -> name . DOT simple_name

    LPAREN          shift and go to state 139
    DOT             shift and go to state 132


state 71

    (7) ObjectDeclare -> KWRD_OBJECT IDENTIFIER KWRD_EXTNDS . IDENTIFIER

    IDENTIFIER      shift and go to state 140


state 72

    (142) class_header_name1 -> modifier_opts KWRD_CLASS name .
    (79) qualified_name -> name . DOT simple_name

    LPAREN          reduce using rule 142 (class_header_name1 -> modifier_opts KWRD_CLASS name .)
    DOT             shift and go to state 132


state 73

    (84) block -> BLOCK_BEGIN block_statements_opt BLOCK_END .

    KWRD_IF         reduce using rule 84 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_WHILE      reduce using rule 84 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_DO         reduce using rule 84 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_OBJECT     reduce using rule 84 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 84 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    STATE_END       reduce using rule 84 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_RETURN     reduce using rule 84 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_PROTECTED  reduce using rule 84 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_PRIVATE    reduce using rule 84 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    IDENTIFIER      reduce using rule 84 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_DEF        reduce using rule 84 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_CLASS      reduce using rule 84 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_VAR        reduce using rule 84 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_VAL        reduce using rule 84 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    BLOCK_END       reduce using rule 84 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    KWRD_ELSE       reduce using rule 84 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)
    $end            reduce using rule 84 (block -> BLOCK_BEGIN block_statements_opt BLOCK_END .)


state 74

    (15) assignment_operator -> TIMES_ASSIGN .

    IDENTIFIER      reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    PLUS            reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    MINUS           reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    TILDA           reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    NOT             reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    LPAREN          reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    CHARACTER       reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    STRING_CONST    reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    BOOL_CONSTT     reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    BOOL_CONSTF     reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    KWRD_NULL       reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    FLOAT_CONST     reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)
    INT_CONST       reduce using rule 15 (assignment_operator -> TIMES_ASSIGN .)


state 75

    (21) assignment_operator -> RSHIFT_ASSIGN .

    IDENTIFIER      reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    PLUS            reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    MINUS           reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    TILDA           reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    NOT             reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    LPAREN          reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    CHARACTER       reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    STRING_CONST    reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    BOOL_CONSTT     reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    BOOL_CONSTF     reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    KWRD_NULL       reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    FLOAT_CONST     reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)
    INT_CONST       reduce using rule 21 (assignment_operator -> RSHIFT_ASSIGN .)


state 76

    (19) assignment_operator -> MINUS_ASSIGN .

    IDENTIFIER      reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    PLUS            reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    MINUS           reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    TILDA           reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    NOT             reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    LPAREN          reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    CHARACTER       reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    STRING_CONST    reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    BOOL_CONSTT     reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    BOOL_CONSTF     reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    KWRD_NULL       reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    FLOAT_CONST     reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)
    INT_CONST       reduce using rule 19 (assignment_operator -> MINUS_ASSIGN .)


state 77

    (17) assignment_operator -> REMAINDER_ASSIGN .

    IDENTIFIER      reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    PLUS            reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    MINUS           reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    TILDA           reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    NOT             reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    LPAREN          reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    CHARACTER       reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    STRING_CONST    reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    BOOL_CONSTT     reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    BOOL_CONSTF     reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    KWRD_NULL       reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    FLOAT_CONST     reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)
    INT_CONST       reduce using rule 17 (assignment_operator -> REMAINDER_ASSIGN .)


state 78

    (23) assignment_operator -> OR_ASSIGN .

    IDENTIFIER      reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    PLUS            reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    MINUS           reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    TILDA           reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    NOT             reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    LPAREN          reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    CHARACTER       reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    STRING_CONST    reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    BOOL_CONSTT     reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    BOOL_CONSTF     reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    KWRD_NULL       reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    FLOAT_CONST     reduce using rule 23 (assignment_operator -> OR_ASSIGN .)
    INT_CONST       reduce using rule 23 (assignment_operator -> OR_ASSIGN .)


state 79

    (20) assignment_operator -> LSHIFT_ASSIGN .

    IDENTIFIER      reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    PLUS            reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    MINUS           reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    TILDA           reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    NOT             reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    LPAREN          reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    CHARACTER       reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    STRING_CONST    reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    BOOL_CONSTT     reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    BOOL_CONSTF     reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    KWRD_NULL       reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    FLOAT_CONST     reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)
    INT_CONST       reduce using rule 20 (assignment_operator -> LSHIFT_ASSIGN .)


state 80

    (22) assignment_operator -> AND_ASSIGN .

    IDENTIFIER      reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    PLUS            reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    MINUS           reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    TILDA           reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    NOT             reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    LPAREN          reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    CHARACTER       reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    STRING_CONST    reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    BOOL_CONSTT     reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    BOOL_CONSTF     reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    KWRD_NULL       reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    FLOAT_CONST     reduce using rule 22 (assignment_operator -> AND_ASSIGN .)
    INT_CONST       reduce using rule 22 (assignment_operator -> AND_ASSIGN .)


state 81

    (16) assignment_operator -> DIVIDE_ASSIGN .

    IDENTIFIER      reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    PLUS            reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    TILDA           reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    NOT             reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    CHARACTER       reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    STRING_CONST    reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    BOOL_CONSTT     reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    BOOL_CONSTF     reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    KWRD_NULL       reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    FLOAT_CONST     reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)
    INT_CONST       reduce using rule 16 (assignment_operator -> DIVIDE_ASSIGN .)


state 82

    (13) assignment -> valid_variable assignment_operator . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 43
    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    unary_expression               shift and go to state 91
    exclusive_or_expression        shift and go to state 92
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    array_access                   shift and go to state 32
    additive_expression            shift and go to state 117
    simple_name                    shift and go to state 30
    valid_variable                 shift and go to state 99
    inclusive_or_expression        shift and go to state 100
    literal                        shift and go to state 101
    and_expression                 shift and go to state 104
    relational_expression          shift and go to state 108
    method_invocation              shift and go to state 105
    conditional_or_expression      shift and go to state 106
    assignment_expression          shift and go to state 141
    qualified_name                 shift and go to state 34
    assignment                     shift and go to state 113
    multiplicative_expression      shift and go to state 114
    shift_expression               shift and go to state 119
    equality_expression            shift and go to state 120
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 123
    conditional_and_expression     shift and go to state 124

state 83

    (18) assignment_operator -> PLUS_ASSIGN .

    IDENTIFIER      reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    PLUS            reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    MINUS           reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    TILDA           reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    NOT             reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    CHARACTER       reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    STRING_CONST    reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    BOOL_CONSTT     reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    BOOL_CONSTF     reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    KWRD_NULL       reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    FLOAT_CONST     reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)
    INT_CONST       reduce using rule 18 (assignment_operator -> PLUS_ASSIGN .)


state 84

    (14) assignment_operator -> ASSIGN .

    IDENTIFIER      reduce using rule 14 (assignment_operator -> ASSIGN .)
    PLUS            reduce using rule 14 (assignment_operator -> ASSIGN .)
    MINUS           reduce using rule 14 (assignment_operator -> ASSIGN .)
    TILDA           reduce using rule 14 (assignment_operator -> ASSIGN .)
    NOT             reduce using rule 14 (assignment_operator -> ASSIGN .)
    LPAREN          reduce using rule 14 (assignment_operator -> ASSIGN .)
    CHARACTER       reduce using rule 14 (assignment_operator -> ASSIGN .)
    STRING_CONST    reduce using rule 14 (assignment_operator -> ASSIGN .)
    BOOL_CONSTT     reduce using rule 14 (assignment_operator -> ASSIGN .)
    BOOL_CONSTF     reduce using rule 14 (assignment_operator -> ASSIGN .)
    KWRD_NULL       reduce using rule 14 (assignment_operator -> ASSIGN .)
    FLOAT_CONST     reduce using rule 14 (assignment_operator -> ASSIGN .)
    INT_CONST       reduce using rule 14 (assignment_operator -> ASSIGN .)


state 85

    (24) assignment_operator -> XOR_ASSIGN .

    IDENTIFIER      reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    PLUS            reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    MINUS           reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    TILDA           reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    NOT             reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    LPAREN          reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    CHARACTER       reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    STRING_CONST    reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    BOOL_CONSTT     reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    BOOL_CONSTF     reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    KWRD_NULL       reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    FLOAT_CONST     reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)
    INT_CONST       reduce using rule 24 (assignment_operator -> XOR_ASSIGN .)


state 86

    (120) expression_statement -> statement_expression STATE_END .

    KWRD_IF         reduce using rule 120 (expression_statement -> statement_expression STATE_END .)
    KWRD_WHILE      reduce using rule 120 (expression_statement -> statement_expression STATE_END .)
    KWRD_DO         reduce using rule 120 (expression_statement -> statement_expression STATE_END .)
    KWRD_OBJECT     reduce using rule 120 (expression_statement -> statement_expression STATE_END .)
    BLOCK_BEGIN     reduce using rule 120 (expression_statement -> statement_expression STATE_END .)
    STATE_END       reduce using rule 120 (expression_statement -> statement_expression STATE_END .)
    KWRD_RETURN     reduce using rule 120 (expression_statement -> statement_expression STATE_END .)
    KWRD_PROTECTED  reduce using rule 120 (expression_statement -> statement_expression STATE_END .)
    KWRD_PRIVATE    reduce using rule 120 (expression_statement -> statement_expression STATE_END .)
    IDENTIFIER      reduce using rule 120 (expression_statement -> statement_expression STATE_END .)
    KWRD_DEF        reduce using rule 120 (expression_statement -> statement_expression STATE_END .)
    KWRD_CLASS      reduce using rule 120 (expression_statement -> statement_expression STATE_END .)
    KWRD_VAR        reduce using rule 120 (expression_statement -> statement_expression STATE_END .)
    KWRD_VAL        reduce using rule 120 (expression_statement -> statement_expression STATE_END .)
    BLOCK_END       reduce using rule 120 (expression_statement -> statement_expression STATE_END .)
    KWRD_ELSE       reduce using rule 120 (expression_statement -> statement_expression STATE_END .)


state 87

    (128) while_statement -> KWRD_WHILE LPAREN . expression RPAREN statement
    (8) expression -> . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 43
    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    unary_expression               shift and go to state 91
    exclusive_or_expression        shift and go to state 92
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    array_access                   shift and go to state 32
    additive_expression            shift and go to state 117
    simple_name                    shift and go to state 30
    valid_variable                 shift and go to state 99
    inclusive_or_expression        shift and go to state 100
    literal                        shift and go to state 101
    and_expression                 shift and go to state 104
    relational_expression          shift and go to state 108
    method_invocation              shift and go to state 105
    conditional_or_expression      shift and go to state 106
    assignment_expression          shift and go to state 111
    qualified_name                 shift and go to state 34
    assignment                     shift and go to state 113
    multiplicative_expression      shift and go to state 114
    shift_expression               shift and go to state 119
    equality_expression            shift and go to state 120
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 123
    expression                     shift and go to state 142
    conditional_and_expression     shift and go to state 124

state 88

    (88) block_statements -> block_statements block_statement .

    KWRD_IF         reduce using rule 88 (block_statements -> block_statements block_statement .)
    KWRD_WHILE      reduce using rule 88 (block_statements -> block_statements block_statement .)
    KWRD_DO         reduce using rule 88 (block_statements -> block_statements block_statement .)
    KWRD_OBJECT     reduce using rule 88 (block_statements -> block_statements block_statement .)
    BLOCK_BEGIN     reduce using rule 88 (block_statements -> block_statements block_statement .)
    STATE_END       reduce using rule 88 (block_statements -> block_statements block_statement .)
    KWRD_RETURN     reduce using rule 88 (block_statements -> block_statements block_statement .)
    KWRD_PROTECTED  reduce using rule 88 (block_statements -> block_statements block_statement .)
    KWRD_PRIVATE    reduce using rule 88 (block_statements -> block_statements block_statement .)
    IDENTIFIER      reduce using rule 88 (block_statements -> block_statements block_statement .)
    KWRD_DEF        reduce using rule 88 (block_statements -> block_statements block_statement .)
    KWRD_CLASS      reduce using rule 88 (block_statements -> block_statements block_statement .)
    KWRD_VAR        reduce using rule 88 (block_statements -> block_statements block_statement .)
    KWRD_VAL        reduce using rule 88 (block_statements -> block_statements block_statement .)
    BLOCK_END       reduce using rule 88 (block_statements -> block_statements block_statement .)


state 89

    (129) do_while_statement -> KWRD_DO statement . KWRD_WHILE LPAREN expression RPAREN STATE_END

    KWRD_WHILE      shift and go to state 143


state 90

    (148) method_header -> method_header_name LPAREN . func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (137) func_arguement_list_opt -> . variable_declarators
    (138) func_arguement_list_opt -> . empty
    (107) variable_declarators -> . variable_declarator
    (108) variable_declarators -> . variable_declarators COMMA variable_declarator
    (170) empty -> .
    (109) variable_declarator -> . variable_declarator_id
    (110) variable_declarator_id -> . IDENTIFIER COLON type

    RPAREN          reduce using rule 170 (empty -> .)
    IDENTIFIER      shift and go to state 148

    func_arguement_list_opt        shift and go to state 144
    variable_declarators           shift and go to state 146
    variable_declarator            shift and go to state 147
    variable_declarator_id         shift and go to state 145
    empty                          shift and go to state 149

state 91

    (49) multiplicative_expression -> unary_expression .

    TIMES           reduce using rule 49 (multiplicative_expression -> unary_expression .)
    DIVIDE          reduce using rule 49 (multiplicative_expression -> unary_expression .)
    REMAINDER       reduce using rule 49 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 49 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 49 (multiplicative_expression -> unary_expression .)
    LSHIFT          reduce using rule 49 (multiplicative_expression -> unary_expression .)
    RSHIFT          reduce using rule 49 (multiplicative_expression -> unary_expression .)
    GREATER         reduce using rule 49 (multiplicative_expression -> unary_expression .)
    LESS            reduce using rule 49 (multiplicative_expression -> unary_expression .)
    GEQ             reduce using rule 49 (multiplicative_expression -> unary_expression .)
    LEQ             reduce using rule 49 (multiplicative_expression -> unary_expression .)
    EQUAL           reduce using rule 49 (multiplicative_expression -> unary_expression .)
    NEQUAL          reduce using rule 49 (multiplicative_expression -> unary_expression .)
    AND_BITWISE     reduce using rule 49 (multiplicative_expression -> unary_expression .)
    XOR             reduce using rule 49 (multiplicative_expression -> unary_expression .)
    OR_BITWISE      reduce using rule 49 (multiplicative_expression -> unary_expression .)
    AND             reduce using rule 49 (multiplicative_expression -> unary_expression .)
    OR              reduce using rule 49 (multiplicative_expression -> unary_expression .)
    STATE_END       reduce using rule 49 (multiplicative_expression -> unary_expression .)
    RPAREN          reduce using rule 49 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 49 (multiplicative_expression -> unary_expression .)
    RBPAREN         reduce using rule 49 (multiplicative_expression -> unary_expression .)


state 92

    (29) inclusive_or_expression -> exclusive_or_expression .
    (32) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR_BITWISE      reduce using rule 29 (inclusive_or_expression -> exclusive_or_expression .)
    AND             reduce using rule 29 (inclusive_or_expression -> exclusive_or_expression .)
    OR              reduce using rule 29 (inclusive_or_expression -> exclusive_or_expression .)
    STATE_END       reduce using rule 29 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 29 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 29 (inclusive_or_expression -> exclusive_or_expression .)
    RBPAREN         reduce using rule 29 (inclusive_or_expression -> exclusive_or_expression .)
    XOR             shift and go to state 150


state 93

    (63) literal -> CHARACTER .

    TIMES           reduce using rule 63 (literal -> CHARACTER .)
    DIVIDE          reduce using rule 63 (literal -> CHARACTER .)
    REMAINDER       reduce using rule 63 (literal -> CHARACTER .)
    PLUS            reduce using rule 63 (literal -> CHARACTER .)
    MINUS           reduce using rule 63 (literal -> CHARACTER .)
    LSHIFT          reduce using rule 63 (literal -> CHARACTER .)
    RSHIFT          reduce using rule 63 (literal -> CHARACTER .)
    GREATER         reduce using rule 63 (literal -> CHARACTER .)
    LESS            reduce using rule 63 (literal -> CHARACTER .)
    GEQ             reduce using rule 63 (literal -> CHARACTER .)
    LEQ             reduce using rule 63 (literal -> CHARACTER .)
    EQUAL           reduce using rule 63 (literal -> CHARACTER .)
    NEQUAL          reduce using rule 63 (literal -> CHARACTER .)
    AND_BITWISE     reduce using rule 63 (literal -> CHARACTER .)
    XOR             reduce using rule 63 (literal -> CHARACTER .)
    OR_BITWISE      reduce using rule 63 (literal -> CHARACTER .)
    AND             reduce using rule 63 (literal -> CHARACTER .)
    OR              reduce using rule 63 (literal -> CHARACTER .)
    STATE_END       reduce using rule 63 (literal -> CHARACTER .)
    RPAREN          reduce using rule 63 (literal -> CHARACTER .)
    COMMA           reduce using rule 63 (literal -> CHARACTER .)
    RBPAREN         reduce using rule 63 (literal -> CHARACTER .)


state 94

    (55) unary_expression -> unary_expression_not_plus_minus .

    TIMES           reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    DIVIDE          reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    REMAINDER       reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    PLUS            reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    MINUS           reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    LSHIFT          reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    RSHIFT          reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    GREATER         reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    LESS            reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    GEQ             reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    LEQ             reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    EQUAL           reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    NEQUAL          reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    AND_BITWISE     reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    XOR             reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    OR_BITWISE      reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    AND             reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    OR              reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    STATE_END       reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    RPAREN          reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    COMMA           reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)
    RBPAREN         reduce using rule 55 (unary_expression -> unary_expression_not_plus_minus .)


state 95

    (68) int_float -> FLOAT_CONST .

    TIMES           reduce using rule 68 (int_float -> FLOAT_CONST .)
    DIVIDE          reduce using rule 68 (int_float -> FLOAT_CONST .)
    REMAINDER       reduce using rule 68 (int_float -> FLOAT_CONST .)
    PLUS            reduce using rule 68 (int_float -> FLOAT_CONST .)
    MINUS           reduce using rule 68 (int_float -> FLOAT_CONST .)
    LSHIFT          reduce using rule 68 (int_float -> FLOAT_CONST .)
    RSHIFT          reduce using rule 68 (int_float -> FLOAT_CONST .)
    GREATER         reduce using rule 68 (int_float -> FLOAT_CONST .)
    LESS            reduce using rule 68 (int_float -> FLOAT_CONST .)
    GEQ             reduce using rule 68 (int_float -> FLOAT_CONST .)
    LEQ             reduce using rule 68 (int_float -> FLOAT_CONST .)
    EQUAL           reduce using rule 68 (int_float -> FLOAT_CONST .)
    NEQUAL          reduce using rule 68 (int_float -> FLOAT_CONST .)
    AND_BITWISE     reduce using rule 68 (int_float -> FLOAT_CONST .)
    XOR             reduce using rule 68 (int_float -> FLOAT_CONST .)
    OR_BITWISE      reduce using rule 68 (int_float -> FLOAT_CONST .)
    AND             reduce using rule 68 (int_float -> FLOAT_CONST .)
    OR              reduce using rule 68 (int_float -> FLOAT_CONST .)
    STATE_END       reduce using rule 68 (int_float -> FLOAT_CONST .)
    RPAREN          reduce using rule 68 (int_float -> FLOAT_CONST .)
    COMMA           reduce using rule 68 (int_float -> FLOAT_CONST .)
    RBPAREN         reduce using rule 68 (int_float -> FLOAT_CONST .)


state 96

    (54) unary_expression -> MINUS . unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    qualified_name                 shift and go to state 34
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 153
    unary_expression               shift and go to state 151
    valid_variable                 shift and go to state 152
    array_access                   shift and go to state 32
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    literal                        shift and go to state 101
    method_invocation              shift and go to state 105
    simple_name                    shift and go to state 30

state 97

    (65) literal -> BOOL_CONSTT .

    TIMES           reduce using rule 65 (literal -> BOOL_CONSTT .)
    DIVIDE          reduce using rule 65 (literal -> BOOL_CONSTT .)
    REMAINDER       reduce using rule 65 (literal -> BOOL_CONSTT .)
    PLUS            reduce using rule 65 (literal -> BOOL_CONSTT .)
    MINUS           reduce using rule 65 (literal -> BOOL_CONSTT .)
    LSHIFT          reduce using rule 65 (literal -> BOOL_CONSTT .)
    RSHIFT          reduce using rule 65 (literal -> BOOL_CONSTT .)
    GREATER         reduce using rule 65 (literal -> BOOL_CONSTT .)
    LESS            reduce using rule 65 (literal -> BOOL_CONSTT .)
    GEQ             reduce using rule 65 (literal -> BOOL_CONSTT .)
    LEQ             reduce using rule 65 (literal -> BOOL_CONSTT .)
    EQUAL           reduce using rule 65 (literal -> BOOL_CONSTT .)
    NEQUAL          reduce using rule 65 (literal -> BOOL_CONSTT .)
    AND_BITWISE     reduce using rule 65 (literal -> BOOL_CONSTT .)
    XOR             reduce using rule 65 (literal -> BOOL_CONSTT .)
    OR_BITWISE      reduce using rule 65 (literal -> BOOL_CONSTT .)
    AND             reduce using rule 65 (literal -> BOOL_CONSTT .)
    OR              reduce using rule 65 (literal -> BOOL_CONSTT .)
    STATE_END       reduce using rule 65 (literal -> BOOL_CONSTT .)
    RPAREN          reduce using rule 65 (literal -> BOOL_CONSTT .)
    COMMA           reduce using rule 65 (literal -> BOOL_CONSTT .)
    RBPAREN         reduce using rule 65 (literal -> BOOL_CONSTT .)


state 98

    (131) return_statement -> KWRD_RETURN expression_optional . STATE_END

    STATE_END       shift and go to state 154


state 99

    (13) assignment -> valid_variable . assignment_operator assignment_expression
    (82) variable_literal -> valid_variable .
    (14) assignment_operator -> . ASSIGN
    (15) assignment_operator -> . TIMES_ASSIGN
    (16) assignment_operator -> . DIVIDE_ASSIGN
    (17) assignment_operator -> . REMAINDER_ASSIGN
    (18) assignment_operator -> . PLUS_ASSIGN
    (19) assignment_operator -> . MINUS_ASSIGN
    (20) assignment_operator -> . LSHIFT_ASSIGN
    (21) assignment_operator -> . RSHIFT_ASSIGN
    (22) assignment_operator -> . AND_ASSIGN
    (23) assignment_operator -> . OR_ASSIGN
    (24) assignment_operator -> . XOR_ASSIGN

    TIMES           reduce using rule 82 (variable_literal -> valid_variable .)
    DIVIDE          reduce using rule 82 (variable_literal -> valid_variable .)
    REMAINDER       reduce using rule 82 (variable_literal -> valid_variable .)
    PLUS            reduce using rule 82 (variable_literal -> valid_variable .)
    MINUS           reduce using rule 82 (variable_literal -> valid_variable .)
    LSHIFT          reduce using rule 82 (variable_literal -> valid_variable .)
    RSHIFT          reduce using rule 82 (variable_literal -> valid_variable .)
    GREATER         reduce using rule 82 (variable_literal -> valid_variable .)
    LESS            reduce using rule 82 (variable_literal -> valid_variable .)
    GEQ             reduce using rule 82 (variable_literal -> valid_variable .)
    LEQ             reduce using rule 82 (variable_literal -> valid_variable .)
    EQUAL           reduce using rule 82 (variable_literal -> valid_variable .)
    NEQUAL          reduce using rule 82 (variable_literal -> valid_variable .)
    AND_BITWISE     reduce using rule 82 (variable_literal -> valid_variable .)
    XOR             reduce using rule 82 (variable_literal -> valid_variable .)
    OR_BITWISE      reduce using rule 82 (variable_literal -> valid_variable .)
    AND             reduce using rule 82 (variable_literal -> valid_variable .)
    OR              reduce using rule 82 (variable_literal -> valid_variable .)
    RBPAREN         reduce using rule 82 (variable_literal -> valid_variable .)
    RPAREN          reduce using rule 82 (variable_literal -> valid_variable .)
    STATE_END       reduce using rule 82 (variable_literal -> valid_variable .)
    COMMA           reduce using rule 82 (variable_literal -> valid_variable .)
    ASSIGN          shift and go to state 84
    TIMES_ASSIGN    shift and go to state 74
    DIVIDE_ASSIGN   shift and go to state 81
    REMAINDER_ASSIGN shift and go to state 77
    PLUS_ASSIGN     shift and go to state 83
    MINUS_ASSIGN    shift and go to state 76
    LSHIFT_ASSIGN   shift and go to state 79
    RSHIFT_ASSIGN   shift and go to state 75
    AND_ASSIGN      shift and go to state 80
    OR_ASSIGN       shift and go to state 78
    XOR_ASSIGN      shift and go to state 85

    assignment_operator            shift and go to state 82

state 100

    (27) conditional_and_expression -> inclusive_or_expression .
    (30) inclusive_or_expression -> inclusive_or_expression . OR_BITWISE exclusive_or_expression

    AND             reduce using rule 27 (conditional_and_expression -> inclusive_or_expression .)
    OR              reduce using rule 27 (conditional_and_expression -> inclusive_or_expression .)
    RBPAREN         reduce using rule 27 (conditional_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 27 (conditional_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 27 (conditional_and_expression -> inclusive_or_expression .)
    STATE_END       reduce using rule 27 (conditional_and_expression -> inclusive_or_expression .)
    OR_BITWISE      shift and go to state 155


state 101

    (60) primary -> literal .

    TIMES           reduce using rule 60 (primary -> literal .)
    DIVIDE          reduce using rule 60 (primary -> literal .)
    REMAINDER       reduce using rule 60 (primary -> literal .)
    PLUS            reduce using rule 60 (primary -> literal .)
    MINUS           reduce using rule 60 (primary -> literal .)
    LSHIFT          reduce using rule 60 (primary -> literal .)
    RSHIFT          reduce using rule 60 (primary -> literal .)
    GREATER         reduce using rule 60 (primary -> literal .)
    LESS            reduce using rule 60 (primary -> literal .)
    GEQ             reduce using rule 60 (primary -> literal .)
    LEQ             reduce using rule 60 (primary -> literal .)
    EQUAL           reduce using rule 60 (primary -> literal .)
    NEQUAL          reduce using rule 60 (primary -> literal .)
    AND_BITWISE     reduce using rule 60 (primary -> literal .)
    XOR             reduce using rule 60 (primary -> literal .)
    OR_BITWISE      reduce using rule 60 (primary -> literal .)
    AND             reduce using rule 60 (primary -> literal .)
    OR              reduce using rule 60 (primary -> literal .)
    STATE_END       reduce using rule 60 (primary -> literal .)
    RPAREN          reduce using rule 60 (primary -> literal .)
    COMMA           reduce using rule 60 (primary -> literal .)
    RBPAREN         reduce using rule 60 (primary -> literal .)


state 102

    (57) unary_expression_not_plus_minus -> TILDA . unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    qualified_name                 shift and go to state 34
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 153
    unary_expression               shift and go to state 156
    valid_variable                 shift and go to state 152
    array_access                   shift and go to state 32
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    literal                        shift and go to state 101
    method_invocation              shift and go to state 105
    simple_name                    shift and go to state 30

state 103

    (53) unary_expression -> PLUS . unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    qualified_name                 shift and go to state 34
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 153
    unary_expression               shift and go to state 157
    valid_variable                 shift and go to state 152
    array_access                   shift and go to state 32
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    literal                        shift and go to state 101
    method_invocation              shift and go to state 105
    simple_name                    shift and go to state 30

state 104

    (31) exclusive_or_expression -> and_expression .
    (34) and_expression -> and_expression . AND_BITWISE equality_expression

    XOR             reduce using rule 31 (exclusive_or_expression -> and_expression .)
    OR_BITWISE      reduce using rule 31 (exclusive_or_expression -> and_expression .)
    AND             reduce using rule 31 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 31 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 31 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 31 (exclusive_or_expression -> and_expression .)
    STATE_END       reduce using rule 31 (exclusive_or_expression -> and_expression .)
    RBPAREN         reduce using rule 31 (exclusive_or_expression -> and_expression .)
    AND_BITWISE     shift and go to state 158


state 105

    (61) primary -> method_invocation .

    TIMES           reduce using rule 61 (primary -> method_invocation .)
    DIVIDE          reduce using rule 61 (primary -> method_invocation .)
    REMAINDER       reduce using rule 61 (primary -> method_invocation .)
    PLUS            reduce using rule 61 (primary -> method_invocation .)
    MINUS           reduce using rule 61 (primary -> method_invocation .)
    LSHIFT          reduce using rule 61 (primary -> method_invocation .)
    RSHIFT          reduce using rule 61 (primary -> method_invocation .)
    GREATER         reduce using rule 61 (primary -> method_invocation .)
    LESS            reduce using rule 61 (primary -> method_invocation .)
    GEQ             reduce using rule 61 (primary -> method_invocation .)
    LEQ             reduce using rule 61 (primary -> method_invocation .)
    EQUAL           reduce using rule 61 (primary -> method_invocation .)
    NEQUAL          reduce using rule 61 (primary -> method_invocation .)
    AND_BITWISE     reduce using rule 61 (primary -> method_invocation .)
    XOR             reduce using rule 61 (primary -> method_invocation .)
    OR_BITWISE      reduce using rule 61 (primary -> method_invocation .)
    AND             reduce using rule 61 (primary -> method_invocation .)
    OR              reduce using rule 61 (primary -> method_invocation .)
    STATE_END       reduce using rule 61 (primary -> method_invocation .)
    RPAREN          reduce using rule 61 (primary -> method_invocation .)
    COMMA           reduce using rule 61 (primary -> method_invocation .)
    RBPAREN         reduce using rule 61 (primary -> method_invocation .)


state 106

    (12) assignment_expression -> conditional_or_expression .
    (26) conditional_or_expression -> conditional_or_expression . OR conditional_and_expression

    RPAREN          reduce using rule 12 (assignment_expression -> conditional_or_expression .)
    COMMA           reduce using rule 12 (assignment_expression -> conditional_or_expression .)
    STATE_END       reduce using rule 12 (assignment_expression -> conditional_or_expression .)
    RBPAREN         reduce using rule 12 (assignment_expression -> conditional_or_expression .)
    OR              shift and go to state 159


state 107

    (10) expression_optional -> empty .

    STATE_END       reduce using rule 10 (expression_optional -> empty .)


state 108

    (35) equality_expression -> relational_expression .
    (39) relational_expression -> relational_expression . GREATER shift_expression
    (40) relational_expression -> relational_expression . LESS shift_expression
    (41) relational_expression -> relational_expression . GEQ shift_expression
    (42) relational_expression -> relational_expression . LEQ shift_expression

    EQUAL           reduce using rule 35 (equality_expression -> relational_expression .)
    NEQUAL          reduce using rule 35 (equality_expression -> relational_expression .)
    AND_BITWISE     reduce using rule 35 (equality_expression -> relational_expression .)
    XOR             reduce using rule 35 (equality_expression -> relational_expression .)
    OR_BITWISE      reduce using rule 35 (equality_expression -> relational_expression .)
    AND             reduce using rule 35 (equality_expression -> relational_expression .)
    OR              reduce using rule 35 (equality_expression -> relational_expression .)
    STATE_END       reduce using rule 35 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 35 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 35 (equality_expression -> relational_expression .)
    RBPAREN         reduce using rule 35 (equality_expression -> relational_expression .)
    GREATER         shift and go to state 161
    LESS            shift and go to state 162
    GEQ             shift and go to state 160
    LEQ             shift and go to state 163


state 109

    (67) literal -> KWRD_NULL .

    TIMES           reduce using rule 67 (literal -> KWRD_NULL .)
    DIVIDE          reduce using rule 67 (literal -> KWRD_NULL .)
    REMAINDER       reduce using rule 67 (literal -> KWRD_NULL .)
    PLUS            reduce using rule 67 (literal -> KWRD_NULL .)
    MINUS           reduce using rule 67 (literal -> KWRD_NULL .)
    LSHIFT          reduce using rule 67 (literal -> KWRD_NULL .)
    RSHIFT          reduce using rule 67 (literal -> KWRD_NULL .)
    GREATER         reduce using rule 67 (literal -> KWRD_NULL .)
    LESS            reduce using rule 67 (literal -> KWRD_NULL .)
    GEQ             reduce using rule 67 (literal -> KWRD_NULL .)
    LEQ             reduce using rule 67 (literal -> KWRD_NULL .)
    EQUAL           reduce using rule 67 (literal -> KWRD_NULL .)
    NEQUAL          reduce using rule 67 (literal -> KWRD_NULL .)
    AND_BITWISE     reduce using rule 67 (literal -> KWRD_NULL .)
    XOR             reduce using rule 67 (literal -> KWRD_NULL .)
    OR_BITWISE      reduce using rule 67 (literal -> KWRD_NULL .)
    AND             reduce using rule 67 (literal -> KWRD_NULL .)
    OR              reduce using rule 67 (literal -> KWRD_NULL .)
    STATE_END       reduce using rule 67 (literal -> KWRD_NULL .)
    RPAREN          reduce using rule 67 (literal -> KWRD_NULL .)
    COMMA           reduce using rule 67 (literal -> KWRD_NULL .)
    RBPAREN         reduce using rule 67 (literal -> KWRD_NULL .)


state 110

    (64) literal -> STRING_CONST .

    TIMES           reduce using rule 64 (literal -> STRING_CONST .)
    DIVIDE          reduce using rule 64 (literal -> STRING_CONST .)
    REMAINDER       reduce using rule 64 (literal -> STRING_CONST .)
    PLUS            reduce using rule 64 (literal -> STRING_CONST .)
    MINUS           reduce using rule 64 (literal -> STRING_CONST .)
    LSHIFT          reduce using rule 64 (literal -> STRING_CONST .)
    RSHIFT          reduce using rule 64 (literal -> STRING_CONST .)
    GREATER         reduce using rule 64 (literal -> STRING_CONST .)
    LESS            reduce using rule 64 (literal -> STRING_CONST .)
    GEQ             reduce using rule 64 (literal -> STRING_CONST .)
    LEQ             reduce using rule 64 (literal -> STRING_CONST .)
    EQUAL           reduce using rule 64 (literal -> STRING_CONST .)
    NEQUAL          reduce using rule 64 (literal -> STRING_CONST .)
    AND_BITWISE     reduce using rule 64 (literal -> STRING_CONST .)
    XOR             reduce using rule 64 (literal -> STRING_CONST .)
    OR_BITWISE      reduce using rule 64 (literal -> STRING_CONST .)
    AND             reduce using rule 64 (literal -> STRING_CONST .)
    OR              reduce using rule 64 (literal -> STRING_CONST .)
    STATE_END       reduce using rule 64 (literal -> STRING_CONST .)
    RPAREN          reduce using rule 64 (literal -> STRING_CONST .)
    COMMA           reduce using rule 64 (literal -> STRING_CONST .)
    RBPAREN         reduce using rule 64 (literal -> STRING_CONST .)


state 111

    (8) expression -> assignment_expression .

    STATE_END       reduce using rule 8 (expression -> assignment_expression .)
    COMMA           reduce using rule 8 (expression -> assignment_expression .)
    RPAREN          reduce using rule 8 (expression -> assignment_expression .)
    RBPAREN         reduce using rule 8 (expression -> assignment_expression .)


state 112

    (66) literal -> BOOL_CONSTF .

    TIMES           reduce using rule 66 (literal -> BOOL_CONSTF .)
    DIVIDE          reduce using rule 66 (literal -> BOOL_CONSTF .)
    REMAINDER       reduce using rule 66 (literal -> BOOL_CONSTF .)
    PLUS            reduce using rule 66 (literal -> BOOL_CONSTF .)
    MINUS           reduce using rule 66 (literal -> BOOL_CONSTF .)
    LSHIFT          reduce using rule 66 (literal -> BOOL_CONSTF .)
    RSHIFT          reduce using rule 66 (literal -> BOOL_CONSTF .)
    GREATER         reduce using rule 66 (literal -> BOOL_CONSTF .)
    LESS            reduce using rule 66 (literal -> BOOL_CONSTF .)
    GEQ             reduce using rule 66 (literal -> BOOL_CONSTF .)
    LEQ             reduce using rule 66 (literal -> BOOL_CONSTF .)
    EQUAL           reduce using rule 66 (literal -> BOOL_CONSTF .)
    NEQUAL          reduce using rule 66 (literal -> BOOL_CONSTF .)
    AND_BITWISE     reduce using rule 66 (literal -> BOOL_CONSTF .)
    XOR             reduce using rule 66 (literal -> BOOL_CONSTF .)
    OR_BITWISE      reduce using rule 66 (literal -> BOOL_CONSTF .)
    AND             reduce using rule 66 (literal -> BOOL_CONSTF .)
    OR              reduce using rule 66 (literal -> BOOL_CONSTF .)
    STATE_END       reduce using rule 66 (literal -> BOOL_CONSTF .)
    RPAREN          reduce using rule 66 (literal -> BOOL_CONSTF .)
    COMMA           reduce using rule 66 (literal -> BOOL_CONSTF .)
    RBPAREN         reduce using rule 66 (literal -> BOOL_CONSTF .)


state 113

    (11) assignment_expression -> assignment .

    RPAREN          reduce using rule 11 (assignment_expression -> assignment .)
    COMMA           reduce using rule 11 (assignment_expression -> assignment .)
    STATE_END       reduce using rule 11 (assignment_expression -> assignment .)
    RBPAREN         reduce using rule 11 (assignment_expression -> assignment .)


state 114

    (46) additive_expression -> multiplicative_expression .
    (50) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (51) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (52) multiplicative_expression -> multiplicative_expression . REMAINDER unary_expression

    PLUS            reduce using rule 46 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 46 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 46 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 46 (additive_expression -> multiplicative_expression .)
    GREATER         reduce using rule 46 (additive_expression -> multiplicative_expression .)
    LESS            reduce using rule 46 (additive_expression -> multiplicative_expression .)
    GEQ             reduce using rule 46 (additive_expression -> multiplicative_expression .)
    LEQ             reduce using rule 46 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 46 (additive_expression -> multiplicative_expression .)
    NEQUAL          reduce using rule 46 (additive_expression -> multiplicative_expression .)
    AND_BITWISE     reduce using rule 46 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 46 (additive_expression -> multiplicative_expression .)
    OR_BITWISE      reduce using rule 46 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 46 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 46 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 46 (additive_expression -> multiplicative_expression .)
    STATE_END       reduce using rule 46 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 46 (additive_expression -> multiplicative_expression .)
    RBPAREN         reduce using rule 46 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 166
    DIVIDE          shift and go to state 165
    REMAINDER       shift and go to state 164


state 115

    (69) int_float -> INT_CONST .

    TIMES           reduce using rule 69 (int_float -> INT_CONST .)
    DIVIDE          reduce using rule 69 (int_float -> INT_CONST .)
    REMAINDER       reduce using rule 69 (int_float -> INT_CONST .)
    PLUS            reduce using rule 69 (int_float -> INT_CONST .)
    MINUS           reduce using rule 69 (int_float -> INT_CONST .)
    LSHIFT          reduce using rule 69 (int_float -> INT_CONST .)
    RSHIFT          reduce using rule 69 (int_float -> INT_CONST .)
    GREATER         reduce using rule 69 (int_float -> INT_CONST .)
    LESS            reduce using rule 69 (int_float -> INT_CONST .)
    GEQ             reduce using rule 69 (int_float -> INT_CONST .)
    LEQ             reduce using rule 69 (int_float -> INT_CONST .)
    EQUAL           reduce using rule 69 (int_float -> INT_CONST .)
    NEQUAL          reduce using rule 69 (int_float -> INT_CONST .)
    AND_BITWISE     reduce using rule 69 (int_float -> INT_CONST .)
    XOR             reduce using rule 69 (int_float -> INT_CONST .)
    OR_BITWISE      reduce using rule 69 (int_float -> INT_CONST .)
    AND             reduce using rule 69 (int_float -> INT_CONST .)
    OR              reduce using rule 69 (int_float -> INT_CONST .)
    STATE_END       reduce using rule 69 (int_float -> INT_CONST .)
    RPAREN          reduce using rule 69 (int_float -> INT_CONST .)
    COMMA           reduce using rule 69 (int_float -> INT_CONST .)
    RBPAREN         reduce using rule 69 (int_float -> INT_CONST .)


state 116

    (83) variable_literal -> primary .

    TIMES           reduce using rule 83 (variable_literal -> primary .)
    DIVIDE          reduce using rule 83 (variable_literal -> primary .)
    REMAINDER       reduce using rule 83 (variable_literal -> primary .)
    PLUS            reduce using rule 83 (variable_literal -> primary .)
    MINUS           reduce using rule 83 (variable_literal -> primary .)
    LSHIFT          reduce using rule 83 (variable_literal -> primary .)
    RSHIFT          reduce using rule 83 (variable_literal -> primary .)
    GREATER         reduce using rule 83 (variable_literal -> primary .)
    LESS            reduce using rule 83 (variable_literal -> primary .)
    GEQ             reduce using rule 83 (variable_literal -> primary .)
    LEQ             reduce using rule 83 (variable_literal -> primary .)
    EQUAL           reduce using rule 83 (variable_literal -> primary .)
    NEQUAL          reduce using rule 83 (variable_literal -> primary .)
    AND_BITWISE     reduce using rule 83 (variable_literal -> primary .)
    XOR             reduce using rule 83 (variable_literal -> primary .)
    OR_BITWISE      reduce using rule 83 (variable_literal -> primary .)
    AND             reduce using rule 83 (variable_literal -> primary .)
    OR              reduce using rule 83 (variable_literal -> primary .)
    RBPAREN         reduce using rule 83 (variable_literal -> primary .)
    STATE_END       reduce using rule 83 (variable_literal -> primary .)
    RPAREN          reduce using rule 83 (variable_literal -> primary .)
    COMMA           reduce using rule 83 (variable_literal -> primary .)


state 117

    (43) shift_expression -> additive_expression .
    (47) additive_expression -> additive_expression . PLUS multiplicative_expression
    (48) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 43 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 43 (shift_expression -> additive_expression .)
    GREATER         reduce using rule 43 (shift_expression -> additive_expression .)
    LESS            reduce using rule 43 (shift_expression -> additive_expression .)
    GEQ             reduce using rule 43 (shift_expression -> additive_expression .)
    LEQ             reduce using rule 43 (shift_expression -> additive_expression .)
    EQUAL           reduce using rule 43 (shift_expression -> additive_expression .)
    NEQUAL          reduce using rule 43 (shift_expression -> additive_expression .)
    AND_BITWISE     reduce using rule 43 (shift_expression -> additive_expression .)
    XOR             reduce using rule 43 (shift_expression -> additive_expression .)
    OR_BITWISE      reduce using rule 43 (shift_expression -> additive_expression .)
    AND             reduce using rule 43 (shift_expression -> additive_expression .)
    OR              reduce using rule 43 (shift_expression -> additive_expression .)
    STATE_END       reduce using rule 43 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 43 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 43 (shift_expression -> additive_expression .)
    RBPAREN         reduce using rule 43 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 167
    MINUS           shift and go to state 168


state 118

    (59) unary_expression_not_plus_minus -> LPAREN . expression RPAREN
    (8) expression -> . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 43
    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    unary_expression               shift and go to state 91
    exclusive_or_expression        shift and go to state 92
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    array_access                   shift and go to state 32
    additive_expression            shift and go to state 117
    simple_name                    shift and go to state 30
    valid_variable                 shift and go to state 99
    inclusive_or_expression        shift and go to state 100
    literal                        shift and go to state 101
    and_expression                 shift and go to state 104
    relational_expression          shift and go to state 108
    method_invocation              shift and go to state 105
    conditional_or_expression      shift and go to state 106
    assignment_expression          shift and go to state 111
    qualified_name                 shift and go to state 34
    assignment                     shift and go to state 113
    multiplicative_expression      shift and go to state 114
    shift_expression               shift and go to state 119
    equality_expression            shift and go to state 120
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 123
    expression                     shift and go to state 169
    conditional_and_expression     shift and go to state 124

state 119

    (38) relational_expression -> shift_expression .
    (44) shift_expression -> shift_expression . LSHIFT additive_expression
    (45) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 38 (relational_expression -> shift_expression .)
    LESS            reduce using rule 38 (relational_expression -> shift_expression .)
    GEQ             reduce using rule 38 (relational_expression -> shift_expression .)
    LEQ             reduce using rule 38 (relational_expression -> shift_expression .)
    EQUAL           reduce using rule 38 (relational_expression -> shift_expression .)
    NEQUAL          reduce using rule 38 (relational_expression -> shift_expression .)
    AND_BITWISE     reduce using rule 38 (relational_expression -> shift_expression .)
    XOR             reduce using rule 38 (relational_expression -> shift_expression .)
    OR_BITWISE      reduce using rule 38 (relational_expression -> shift_expression .)
    AND             reduce using rule 38 (relational_expression -> shift_expression .)
    OR              reduce using rule 38 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 38 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 38 (relational_expression -> shift_expression .)
    STATE_END       reduce using rule 38 (relational_expression -> shift_expression .)
    RBPAREN         reduce using rule 38 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 171
    RSHIFT          shift and go to state 170


state 120

    (33) and_expression -> equality_expression .
    (36) equality_expression -> equality_expression . EQUAL relational_expression
    (37) equality_expression -> equality_expression . NEQUAL relational_expression

    AND_BITWISE     reduce using rule 33 (and_expression -> equality_expression .)
    XOR             reduce using rule 33 (and_expression -> equality_expression .)
    OR_BITWISE      reduce using rule 33 (and_expression -> equality_expression .)
    AND             reduce using rule 33 (and_expression -> equality_expression .)
    OR              reduce using rule 33 (and_expression -> equality_expression .)
    STATE_END       reduce using rule 33 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 33 (and_expression -> equality_expression .)
    COMMA           reduce using rule 33 (and_expression -> equality_expression .)
    RBPAREN         reduce using rule 33 (and_expression -> equality_expression .)
    EQUAL           shift and go to state 173
    NEQUAL          shift and go to state 172


state 121

    (62) literal -> int_float .

    TIMES           reduce using rule 62 (literal -> int_float .)
    DIVIDE          reduce using rule 62 (literal -> int_float .)
    REMAINDER       reduce using rule 62 (literal -> int_float .)
    PLUS            reduce using rule 62 (literal -> int_float .)
    MINUS           reduce using rule 62 (literal -> int_float .)
    LSHIFT          reduce using rule 62 (literal -> int_float .)
    RSHIFT          reduce using rule 62 (literal -> int_float .)
    GREATER         reduce using rule 62 (literal -> int_float .)
    LESS            reduce using rule 62 (literal -> int_float .)
    GEQ             reduce using rule 62 (literal -> int_float .)
    LEQ             reduce using rule 62 (literal -> int_float .)
    EQUAL           reduce using rule 62 (literal -> int_float .)
    NEQUAL          reduce using rule 62 (literal -> int_float .)
    AND_BITWISE     reduce using rule 62 (literal -> int_float .)
    XOR             reduce using rule 62 (literal -> int_float .)
    OR_BITWISE      reduce using rule 62 (literal -> int_float .)
    AND             reduce using rule 62 (literal -> int_float .)
    OR              reduce using rule 62 (literal -> int_float .)
    STATE_END       reduce using rule 62 (literal -> int_float .)
    RPAREN          reduce using rule 62 (literal -> int_float .)
    COMMA           reduce using rule 62 (literal -> int_float .)
    RBPAREN         reduce using rule 62 (literal -> int_float .)


state 122

    (56) unary_expression_not_plus_minus -> variable_literal .

    TIMES           reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)
    DIVIDE          reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)
    REMAINDER       reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)
    PLUS            reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)
    MINUS           reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)
    LSHIFT          reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)
    RSHIFT          reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)
    GREATER         reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)
    LESS            reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)
    GEQ             reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)
    LEQ             reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)
    EQUAL           reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)
    NEQUAL          reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)
    AND_BITWISE     reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)
    XOR             reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)
    OR_BITWISE      reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)
    AND             reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)
    OR              reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)
    STATE_END       reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)
    RPAREN          reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)
    COMMA           reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)
    RBPAREN         reduce using rule 56 (unary_expression_not_plus_minus -> variable_literal .)


state 123

    (80) valid_variable -> name .
    (71) array_access -> name . LBPAREN expression RBPAREN
    (79) qualified_name -> name . DOT simple_name
    (70) method_invocation -> name . LPAREN argument_list_opt RPAREN

    ASSIGN          reduce using rule 80 (valid_variable -> name .)
    TIMES_ASSIGN    reduce using rule 80 (valid_variable -> name .)
    DIVIDE_ASSIGN   reduce using rule 80 (valid_variable -> name .)
    REMAINDER_ASSIGN reduce using rule 80 (valid_variable -> name .)
    PLUS_ASSIGN     reduce using rule 80 (valid_variable -> name .)
    MINUS_ASSIGN    reduce using rule 80 (valid_variable -> name .)
    LSHIFT_ASSIGN   reduce using rule 80 (valid_variable -> name .)
    RSHIFT_ASSIGN   reduce using rule 80 (valid_variable -> name .)
    AND_ASSIGN      reduce using rule 80 (valid_variable -> name .)
    OR_ASSIGN       reduce using rule 80 (valid_variable -> name .)
    XOR_ASSIGN      reduce using rule 80 (valid_variable -> name .)
    TIMES           reduce using rule 80 (valid_variable -> name .)
    DIVIDE          reduce using rule 80 (valid_variable -> name .)
    REMAINDER       reduce using rule 80 (valid_variable -> name .)
    PLUS            reduce using rule 80 (valid_variable -> name .)
    MINUS           reduce using rule 80 (valid_variable -> name .)
    LSHIFT          reduce using rule 80 (valid_variable -> name .)
    RSHIFT          reduce using rule 80 (valid_variable -> name .)
    GREATER         reduce using rule 80 (valid_variable -> name .)
    LESS            reduce using rule 80 (valid_variable -> name .)
    GEQ             reduce using rule 80 (valid_variable -> name .)
    LEQ             reduce using rule 80 (valid_variable -> name .)
    EQUAL           reduce using rule 80 (valid_variable -> name .)
    NEQUAL          reduce using rule 80 (valid_variable -> name .)
    AND_BITWISE     reduce using rule 80 (valid_variable -> name .)
    XOR             reduce using rule 80 (valid_variable -> name .)
    OR_BITWISE      reduce using rule 80 (valid_variable -> name .)
    AND             reduce using rule 80 (valid_variable -> name .)
    OR              reduce using rule 80 (valid_variable -> name .)
    COMMA           reduce using rule 80 (valid_variable -> name .)
    RPAREN          reduce using rule 80 (valid_variable -> name .)
    RBPAREN         reduce using rule 80 (valid_variable -> name .)
    STATE_END       reduce using rule 80 (valid_variable -> name .)
    LBPAREN         shift and go to state 131
    DOT             shift and go to state 132
    LPAREN          shift and go to state 130


state 124

    (25) conditional_or_expression -> conditional_and_expression .
    (28) conditional_and_expression -> conditional_and_expression . AND inclusive_or_expression

    OR              reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    RPAREN          reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    COMMA           reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    STATE_END       reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    RBPAREN         reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    AND             shift and go to state 174


state 125

    (58) unary_expression_not_plus_minus -> NOT . unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    qualified_name                 shift and go to state 34
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 153
    unary_expression               shift and go to state 175
    valid_variable                 shift and go to state 152
    array_access                   shift and go to state 32
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    literal                        shift and go to state 101
    method_invocation              shift and go to state 105
    simple_name                    shift and go to state 30

state 126

    (9) expression_optional -> expression .

    STATE_END       reduce using rule 9 (expression_optional -> expression .)


state 127

    (151) method_header_name -> modifier_opts KWRD_DEF . IDENTIFIER

    IDENTIFIER      shift and go to state 176


state 128

    (99) local_variable_declaration -> modifier_opts declaration_keyword . variable_declaration_body
    (105) variable_declaration_body -> . variable_declarator ASSIGN variable_declaration_initializer
    (106) variable_declaration_body -> . LPAREN variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list RPAREN
    (109) variable_declarator -> . variable_declarator_id
    (110) variable_declarator_id -> . IDENTIFIER COLON type

    LPAREN          shift and go to state 179
    IDENTIFIER      shift and go to state 148

    variable_declaration_body      shift and go to state 177
    variable_declarator            shift and go to state 178
    variable_declarator_id         shift and go to state 145

state 129

    (123) if_then_statement -> KWRD_IF LPAREN . expression RPAREN statement
    (124) if_then_else_statement -> KWRD_IF LPAREN . expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (8) expression -> . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 43
    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    unary_expression               shift and go to state 91
    exclusive_or_expression        shift and go to state 92
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    array_access                   shift and go to state 32
    additive_expression            shift and go to state 117
    simple_name                    shift and go to state 30
    valid_variable                 shift and go to state 99
    inclusive_or_expression        shift and go to state 100
    literal                        shift and go to state 101
    and_expression                 shift and go to state 104
    relational_expression          shift and go to state 108
    method_invocation              shift and go to state 105
    conditional_or_expression      shift and go to state 106
    assignment_expression          shift and go to state 111
    qualified_name                 shift and go to state 34
    assignment                     shift and go to state 113
    multiplicative_expression      shift and go to state 114
    shift_expression               shift and go to state 119
    equality_expression            shift and go to state 120
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 123
    expression                     shift and go to state 180
    conditional_and_expression     shift and go to state 124

state 130

    (70) method_invocation -> name LPAREN . argument_list_opt RPAREN
    (72) argument_list_opt -> . argument_list
    (73) argument_list_opt -> . empty
    (74) argument_list -> . expression
    (75) argument_list -> . argument_list COMMA expression
    (170) empty -> .
    (8) expression -> . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    RPAREN          reduce using rule 170 (empty -> .)
    IDENTIFIER      shift and go to state 43
    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    and_expression                 shift and go to state 104
    exclusive_or_expression        shift and go to state 92
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    array_access                   shift and go to state 32
    additive_expression            shift and go to state 117
    simple_name                    shift and go to state 30
    unary_expression               shift and go to state 91
    valid_variable                 shift and go to state 99
    inclusive_or_expression        shift and go to state 100
    literal                        shift and go to state 101
    relational_expression          shift and go to state 108
    method_invocation              shift and go to state 105
    conditional_or_expression      shift and go to state 106
    empty                          shift and go to state 182
    argument_list                  shift and go to state 181
    assignment_expression          shift and go to state 111
    qualified_name                 shift and go to state 34
    assignment                     shift and go to state 113
    multiplicative_expression      shift and go to state 114
    shift_expression               shift and go to state 119
    equality_expression            shift and go to state 120
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 123
    argument_list_opt              shift and go to state 183
    expression                     shift and go to state 184
    conditional_and_expression     shift and go to state 124

state 131

    (71) array_access -> name LBPAREN . expression RBPAREN
    (8) expression -> . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 43
    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    unary_expression               shift and go to state 91
    exclusive_or_expression        shift and go to state 92
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    array_access                   shift and go to state 32
    additive_expression            shift and go to state 117
    simple_name                    shift and go to state 30
    valid_variable                 shift and go to state 99
    inclusive_or_expression        shift and go to state 100
    literal                        shift and go to state 101
    and_expression                 shift and go to state 104
    relational_expression          shift and go to state 108
    method_invocation              shift and go to state 105
    conditional_or_expression      shift and go to state 106
    assignment_expression          shift and go to state 111
    qualified_name                 shift and go to state 34
    assignment                     shift and go to state 113
    multiplicative_expression      shift and go to state 114
    shift_expression               shift and go to state 119
    equality_expression            shift and go to state 120
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 123
    expression                     shift and go to state 185
    conditional_and_expression     shift and go to state 124

state 132

    (79) qualified_name -> name DOT . simple_name
    (78) simple_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 43

    simple_name                    shift and go to state 186

state 133

    (147) method_declaration -> method_header method_body .

    KWRD_IF         reduce using rule 147 (method_declaration -> method_header method_body .)
    KWRD_WHILE      reduce using rule 147 (method_declaration -> method_header method_body .)
    KWRD_DO         reduce using rule 147 (method_declaration -> method_header method_body .)
    KWRD_OBJECT     reduce using rule 147 (method_declaration -> method_header method_body .)
    BLOCK_BEGIN     reduce using rule 147 (method_declaration -> method_header method_body .)
    STATE_END       reduce using rule 147 (method_declaration -> method_header method_body .)
    KWRD_RETURN     reduce using rule 147 (method_declaration -> method_header method_body .)
    KWRD_PROTECTED  reduce using rule 147 (method_declaration -> method_header method_body .)
    KWRD_PRIVATE    reduce using rule 147 (method_declaration -> method_header method_body .)
    IDENTIFIER      reduce using rule 147 (method_declaration -> method_header method_body .)
    KWRD_DEF        reduce using rule 147 (method_declaration -> method_header method_body .)
    KWRD_CLASS      reduce using rule 147 (method_declaration -> method_header method_body .)
    KWRD_VAR        reduce using rule 147 (method_declaration -> method_header method_body .)
    KWRD_VAL        reduce using rule 147 (method_declaration -> method_header method_body .)
    BLOCK_END       reduce using rule 147 (method_declaration -> method_header method_body .)


state 134

    (152) method_body -> block .

    KWRD_IF         reduce using rule 152 (method_body -> block .)
    KWRD_WHILE      reduce using rule 152 (method_body -> block .)
    KWRD_DO         reduce using rule 152 (method_body -> block .)
    KWRD_OBJECT     reduce using rule 152 (method_body -> block .)
    BLOCK_BEGIN     reduce using rule 152 (method_body -> block .)
    STATE_END       reduce using rule 152 (method_body -> block .)
    KWRD_RETURN     reduce using rule 152 (method_body -> block .)
    KWRD_PROTECTED  reduce using rule 152 (method_body -> block .)
    KWRD_PRIVATE    reduce using rule 152 (method_body -> block .)
    IDENTIFIER      reduce using rule 152 (method_body -> block .)
    KWRD_DEF        reduce using rule 152 (method_body -> block .)
    KWRD_CLASS      reduce using rule 152 (method_body -> block .)
    KWRD_VAR        reduce using rule 152 (method_body -> block .)
    KWRD_VAL        reduce using rule 152 (method_body -> block .)
    BLOCK_END       reduce using rule 152 (method_body -> block .)


state 135

    (98) local_variable_declaration_statement -> local_variable_declaration STATE_END .

    KWRD_IF         reduce using rule 98 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_WHILE      reduce using rule 98 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_DO         reduce using rule 98 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_OBJECT     reduce using rule 98 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    BLOCK_BEGIN     reduce using rule 98 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    STATE_END       reduce using rule 98 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_RETURN     reduce using rule 98 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_PROTECTED  reduce using rule 98 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_PRIVATE    reduce using rule 98 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    IDENTIFIER      reduce using rule 98 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_DEF        reduce using rule 98 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_CLASS      reduce using rule 98 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_VAR        reduce using rule 98 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_VAL        reduce using rule 98 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    BLOCK_END       reduce using rule 98 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)


state 136

    (141) class_header_name -> class_header_name1 LPAREN constructor_arguement_list_opt RPAREN .

    KWRD_EXTNDS     reduce using rule 141 (class_header_name -> class_header_name1 LPAREN constructor_arguement_list_opt RPAREN .)
    BLOCK_BEGIN     reduce using rule 141 (class_header_name -> class_header_name1 LPAREN constructor_arguement_list_opt RPAREN .)


state 137

    (136) constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER . COLON type

    COLON           shift and go to state 187


state 138

    (135) constructor_arguement_list -> constructor_arguement_list COMMA . constructor_arguement_list_declarator
    (136) constructor_arguement_list_declarator -> . declaration_keyword IDENTIFIER COLON type
    (96) declaration_keyword -> . KWRD_VAR
    (97) declaration_keyword -> . KWRD_VAL

    KWRD_VAR        shift and go to state 66
    KWRD_VAL        shift and go to state 67

    declaration_keyword            shift and go to state 64
    constructor_arguement_list_declarator shift and go to state 188

state 139

    (145) class_header_extends -> KWRD_EXTNDS name LPAREN . func_arguement_list_opt RPAREN
    (137) func_arguement_list_opt -> . variable_declarators
    (138) func_arguement_list_opt -> . empty
    (107) variable_declarators -> . variable_declarator
    (108) variable_declarators -> . variable_declarators COMMA variable_declarator
    (170) empty -> .
    (109) variable_declarator -> . variable_declarator_id
    (110) variable_declarator_id -> . IDENTIFIER COLON type

    RPAREN          reduce using rule 170 (empty -> .)
    IDENTIFIER      shift and go to state 148

    func_arguement_list_opt        shift and go to state 189
    variable_declarators           shift and go to state 146
    variable_declarator            shift and go to state 147
    variable_declarator_id         shift and go to state 145
    empty                          shift and go to state 149

state 140

    (7) ObjectDeclare -> KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER .

    BLOCK_BEGIN     reduce using rule 7 (ObjectDeclare -> KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER .)


state 141

    (13) assignment -> valid_variable assignment_operator assignment_expression .

    STATE_END       reduce using rule 13 (assignment -> valid_variable assignment_operator assignment_expression .)
    RPAREN          reduce using rule 13 (assignment -> valid_variable assignment_operator assignment_expression .)
    COMMA           reduce using rule 13 (assignment -> valid_variable assignment_operator assignment_expression .)
    RBPAREN         reduce using rule 13 (assignment -> valid_variable assignment_operator assignment_expression .)


state 142

    (128) while_statement -> KWRD_WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 190


state 143

    (129) do_while_statement -> KWRD_DO statement KWRD_WHILE . LPAREN expression RPAREN STATE_END

    LPAREN          shift and go to state 191


state 144

    (148) method_header -> method_header_name LPAREN func_arguement_list_opt . RPAREN COLON method_return_type ASSIGN

    RPAREN          shift and go to state 192


state 145

    (109) variable_declarator -> variable_declarator_id .

    COMMA           reduce using rule 109 (variable_declarator -> variable_declarator_id .)
    RPAREN          reduce using rule 109 (variable_declarator -> variable_declarator_id .)
    ASSIGN          reduce using rule 109 (variable_declarator -> variable_declarator_id .)


state 146

    (137) func_arguement_list_opt -> variable_declarators .
    (108) variable_declarators -> variable_declarators . COMMA variable_declarator

    RPAREN          reduce using rule 137 (func_arguement_list_opt -> variable_declarators .)
    COMMA           shift and go to state 193


state 147

    (107) variable_declarators -> variable_declarator .

    COMMA           reduce using rule 107 (variable_declarators -> variable_declarator .)
    RPAREN          reduce using rule 107 (variable_declarators -> variable_declarator .)


state 148

    (110) variable_declarator_id -> IDENTIFIER . COLON type

    COLON           shift and go to state 194


state 149

    (138) func_arguement_list_opt -> empty .

    RPAREN          reduce using rule 138 (func_arguement_list_opt -> empty .)


state 150

    (32) exclusive_or_expression -> exclusive_or_expression XOR . and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    qualified_name                 shift and go to state 34
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    unary_expression               shift and go to state 91
    and_expression                 shift and go to state 195
    valid_variable                 shift and go to state 152
    multiplicative_expression      shift and go to state 114
    array_access                   shift and go to state 32
    primary                        shift and go to state 116
    name                           shift and go to state 153
    unary_expression_not_plus_minus shift and go to state 94
    literal                        shift and go to state 101
    equality_expression            shift and go to state 120
    method_invocation              shift and go to state 105
    simple_name                    shift and go to state 30
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 117
    relational_expression          shift and go to state 108

state 151

    (54) unary_expression -> MINUS unary_expression .

    TIMES           reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    REMAINDER       reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    LSHIFT          reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    RSHIFT          reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    GREATER         reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    LESS            reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    GEQ             reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    LEQ             reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    EQUAL           reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    NEQUAL          reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    AND_BITWISE     reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    XOR             reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    OR_BITWISE      reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    AND             reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    OR              reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    STATE_END       reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    RBPAREN         reduce using rule 54 (unary_expression -> MINUS unary_expression .)


state 152

    (82) variable_literal -> valid_variable .

    TIMES           reduce using rule 82 (variable_literal -> valid_variable .)
    DIVIDE          reduce using rule 82 (variable_literal -> valid_variable .)
    REMAINDER       reduce using rule 82 (variable_literal -> valid_variable .)
    PLUS            reduce using rule 82 (variable_literal -> valid_variable .)
    MINUS           reduce using rule 82 (variable_literal -> valid_variable .)
    LSHIFT          reduce using rule 82 (variable_literal -> valid_variable .)
    RSHIFT          reduce using rule 82 (variable_literal -> valid_variable .)
    GREATER         reduce using rule 82 (variable_literal -> valid_variable .)
    LESS            reduce using rule 82 (variable_literal -> valid_variable .)
    GEQ             reduce using rule 82 (variable_literal -> valid_variable .)
    LEQ             reduce using rule 82 (variable_literal -> valid_variable .)
    EQUAL           reduce using rule 82 (variable_literal -> valid_variable .)
    NEQUAL          reduce using rule 82 (variable_literal -> valid_variable .)
    AND_BITWISE     reduce using rule 82 (variable_literal -> valid_variable .)
    XOR             reduce using rule 82 (variable_literal -> valid_variable .)
    OR_BITWISE      reduce using rule 82 (variable_literal -> valid_variable .)
    AND             reduce using rule 82 (variable_literal -> valid_variable .)
    OR              reduce using rule 82 (variable_literal -> valid_variable .)
    STATE_END       reduce using rule 82 (variable_literal -> valid_variable .)
    RPAREN          reduce using rule 82 (variable_literal -> valid_variable .)
    COMMA           reduce using rule 82 (variable_literal -> valid_variable .)
    RBPAREN         reduce using rule 82 (variable_literal -> valid_variable .)


state 153

    (80) valid_variable -> name .
    (71) array_access -> name . LBPAREN expression RBPAREN
    (70) method_invocation -> name . LPAREN argument_list_opt RPAREN
    (79) qualified_name -> name . DOT simple_name

    TIMES           reduce using rule 80 (valid_variable -> name .)
    DIVIDE          reduce using rule 80 (valid_variable -> name .)
    REMAINDER       reduce using rule 80 (valid_variable -> name .)
    PLUS            reduce using rule 80 (valid_variable -> name .)
    MINUS           reduce using rule 80 (valid_variable -> name .)
    LSHIFT          reduce using rule 80 (valid_variable -> name .)
    RSHIFT          reduce using rule 80 (valid_variable -> name .)
    GREATER         reduce using rule 80 (valid_variable -> name .)
    LESS            reduce using rule 80 (valid_variable -> name .)
    GEQ             reduce using rule 80 (valid_variable -> name .)
    LEQ             reduce using rule 80 (valid_variable -> name .)
    EQUAL           reduce using rule 80 (valid_variable -> name .)
    NEQUAL          reduce using rule 80 (valid_variable -> name .)
    AND_BITWISE     reduce using rule 80 (valid_variable -> name .)
    XOR             reduce using rule 80 (valid_variable -> name .)
    OR_BITWISE      reduce using rule 80 (valid_variable -> name .)
    AND             reduce using rule 80 (valid_variable -> name .)
    OR              reduce using rule 80 (valid_variable -> name .)
    STATE_END       reduce using rule 80 (valid_variable -> name .)
    RPAREN          reduce using rule 80 (valid_variable -> name .)
    COMMA           reduce using rule 80 (valid_variable -> name .)
    RBPAREN         reduce using rule 80 (valid_variable -> name .)
    LBPAREN         shift and go to state 131
    LPAREN          shift and go to state 130
    DOT             shift and go to state 132


state 154

    (131) return_statement -> KWRD_RETURN expression_optional STATE_END .

    KWRD_IF         reduce using rule 131 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_WHILE      reduce using rule 131 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_DO         reduce using rule 131 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_OBJECT     reduce using rule 131 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    BLOCK_BEGIN     reduce using rule 131 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    STATE_END       reduce using rule 131 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_RETURN     reduce using rule 131 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_PROTECTED  reduce using rule 131 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_PRIVATE    reduce using rule 131 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    IDENTIFIER      reduce using rule 131 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_DEF        reduce using rule 131 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_CLASS      reduce using rule 131 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_VAR        reduce using rule 131 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_VAL        reduce using rule 131 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    BLOCK_END       reduce using rule 131 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_ELSE       reduce using rule 131 (return_statement -> KWRD_RETURN expression_optional STATE_END .)


state 155

    (30) inclusive_or_expression -> inclusive_or_expression OR_BITWISE . exclusive_or_expression
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    unary_expression               shift and go to state 91
    exclusive_or_expression        shift and go to state 196
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    array_access                   shift and go to state 32
    additive_expression            shift and go to state 117
    simple_name                    shift and go to state 30
    valid_variable                 shift and go to state 152
    literal                        shift and go to state 101
    and_expression                 shift and go to state 104
    method_invocation              shift and go to state 105
    relational_expression          shift and go to state 108
    qualified_name                 shift and go to state 34
    multiplicative_expression      shift and go to state 114
    shift_expression               shift and go to state 119
    equality_expression            shift and go to state 120
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 153

state 156

    (57) unary_expression_not_plus_minus -> TILDA unary_expression .

    TIMES           reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    DIVIDE          reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    REMAINDER       reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    PLUS            reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    MINUS           reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    LSHIFT          reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    RSHIFT          reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    GREATER         reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    LESS            reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    GEQ             reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    LEQ             reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    EQUAL           reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    NEQUAL          reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    AND_BITWISE     reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    XOR             reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    OR_BITWISE      reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    AND             reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    OR              reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    STATE_END       reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    RPAREN          reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    COMMA           reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    RBPAREN         reduce using rule 57 (unary_expression_not_plus_minus -> TILDA unary_expression .)


state 157

    (53) unary_expression -> PLUS unary_expression .

    TIMES           reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    DIVIDE          reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    REMAINDER       reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    LSHIFT          reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    RSHIFT          reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    GREATER         reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    LESS            reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    GEQ             reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    LEQ             reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    EQUAL           reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    NEQUAL          reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    AND_BITWISE     reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    XOR             reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    OR_BITWISE      reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    AND             reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    OR              reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    STATE_END       reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    RPAREN          reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 53 (unary_expression -> PLUS unary_expression .)
    RBPAREN         reduce using rule 53 (unary_expression -> PLUS unary_expression .)


state 158

    (34) and_expression -> and_expression AND_BITWISE . equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    qualified_name                 shift and go to state 34
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    unary_expression               shift and go to state 91
    valid_variable                 shift and go to state 152
    array_access                   shift and go to state 32
    multiplicative_expression      shift and go to state 114
    primary                        shift and go to state 116
    name                           shift and go to state 153
    unary_expression_not_plus_minus shift and go to state 94
    literal                        shift and go to state 101
    equality_expression            shift and go to state 197
    method_invocation              shift and go to state 105
    simple_name                    shift and go to state 30
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 117
    relational_expression          shift and go to state 108

state 159

    (26) conditional_or_expression -> conditional_or_expression OR . conditional_and_expression
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    unary_expression               shift and go to state 91
    exclusive_or_expression        shift and go to state 92
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    array_access                   shift and go to state 32
    additive_expression            shift and go to state 117
    simple_name                    shift and go to state 30
    valid_variable                 shift and go to state 152
    inclusive_or_expression        shift and go to state 100
    literal                        shift and go to state 101
    and_expression                 shift and go to state 104
    method_invocation              shift and go to state 105
    relational_expression          shift and go to state 108
    qualified_name                 shift and go to state 34
    multiplicative_expression      shift and go to state 114
    shift_expression               shift and go to state 119
    equality_expression            shift and go to state 120
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 153
    conditional_and_expression     shift and go to state 198

state 160

    (41) relational_expression -> relational_expression GEQ . shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    qualified_name                 shift and go to state 34
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 153
    unary_expression               shift and go to state 91
    valid_variable                 shift and go to state 152
    array_access                   shift and go to state 32
    multiplicative_expression      shift and go to state 114
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    literal                        shift and go to state 101
    method_invocation              shift and go to state 105
    shift_expression               shift and go to state 199
    additive_expression            shift and go to state 117
    simple_name                    shift and go to state 30

state 161

    (39) relational_expression -> relational_expression GREATER . shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    qualified_name                 shift and go to state 34
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 153
    unary_expression               shift and go to state 91
    valid_variable                 shift and go to state 152
    array_access                   shift and go to state 32
    multiplicative_expression      shift and go to state 114
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    literal                        shift and go to state 101
    method_invocation              shift and go to state 105
    shift_expression               shift and go to state 200
    additive_expression            shift and go to state 117
    simple_name                    shift and go to state 30

state 162

    (40) relational_expression -> relational_expression LESS . shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    qualified_name                 shift and go to state 34
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 153
    unary_expression               shift and go to state 91
    valid_variable                 shift and go to state 152
    array_access                   shift and go to state 32
    multiplicative_expression      shift and go to state 114
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    literal                        shift and go to state 101
    method_invocation              shift and go to state 105
    shift_expression               shift and go to state 201
    additive_expression            shift and go to state 117
    simple_name                    shift and go to state 30

state 163

    (42) relational_expression -> relational_expression LEQ . shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    qualified_name                 shift and go to state 34
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 153
    unary_expression               shift and go to state 91
    valid_variable                 shift and go to state 152
    array_access                   shift and go to state 32
    multiplicative_expression      shift and go to state 114
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    literal                        shift and go to state 101
    method_invocation              shift and go to state 105
    shift_expression               shift and go to state 202
    additive_expression            shift and go to state 117
    simple_name                    shift and go to state 30

state 164

    (52) multiplicative_expression -> multiplicative_expression REMAINDER . unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    qualified_name                 shift and go to state 34
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 153
    unary_expression               shift and go to state 203
    valid_variable                 shift and go to state 152
    array_access                   shift and go to state 32
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    literal                        shift and go to state 101
    method_invocation              shift and go to state 105
    simple_name                    shift and go to state 30

state 165

    (51) multiplicative_expression -> multiplicative_expression DIVIDE . unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    qualified_name                 shift and go to state 34
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 153
    unary_expression               shift and go to state 204
    valid_variable                 shift and go to state 152
    array_access                   shift and go to state 32
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    literal                        shift and go to state 101
    method_invocation              shift and go to state 105
    simple_name                    shift and go to state 30

state 166

    (50) multiplicative_expression -> multiplicative_expression TIMES . unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    qualified_name                 shift and go to state 34
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 153
    unary_expression               shift and go to state 205
    valid_variable                 shift and go to state 152
    array_access                   shift and go to state 32
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    literal                        shift and go to state 101
    method_invocation              shift and go to state 105
    simple_name                    shift and go to state 30

state 167

    (47) additive_expression -> additive_expression PLUS . multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    qualified_name                 shift and go to state 34
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 153
    unary_expression               shift and go to state 91
    valid_variable                 shift and go to state 152
    array_access                   shift and go to state 32
    multiplicative_expression      shift and go to state 206
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    literal                        shift and go to state 101
    method_invocation              shift and go to state 105
    simple_name                    shift and go to state 30

state 168

    (48) additive_expression -> additive_expression MINUS . multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    qualified_name                 shift and go to state 34
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 153
    unary_expression               shift and go to state 91
    valid_variable                 shift and go to state 152
    array_access                   shift and go to state 32
    multiplicative_expression      shift and go to state 207
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    literal                        shift and go to state 101
    method_invocation              shift and go to state 105
    simple_name                    shift and go to state 30

state 169

    (59) unary_expression_not_plus_minus -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 208


state 170

    (45) shift_expression -> shift_expression RSHIFT . additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    qualified_name                 shift and go to state 34
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 153
    unary_expression               shift and go to state 91
    valid_variable                 shift and go to state 152
    array_access                   shift and go to state 32
    multiplicative_expression      shift and go to state 114
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    literal                        shift and go to state 101
    method_invocation              shift and go to state 105
    additive_expression            shift and go to state 209
    simple_name                    shift and go to state 30

state 171

    (44) shift_expression -> shift_expression LSHIFT . additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    qualified_name                 shift and go to state 34
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 153
    unary_expression               shift and go to state 91
    valid_variable                 shift and go to state 152
    array_access                   shift and go to state 32
    multiplicative_expression      shift and go to state 114
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    literal                        shift and go to state 101
    method_invocation              shift and go to state 105
    additive_expression            shift and go to state 210
    simple_name                    shift and go to state 30

state 172

    (37) equality_expression -> equality_expression NEQUAL . relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    qualified_name                 shift and go to state 34
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 153
    unary_expression               shift and go to state 91
    valid_variable                 shift and go to state 152
    array_access                   shift and go to state 32
    multiplicative_expression      shift and go to state 114
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    literal                        shift and go to state 101
    relational_expression          shift and go to state 211
    method_invocation              shift and go to state 105
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 117
    simple_name                    shift and go to state 30

state 173

    (36) equality_expression -> equality_expression EQUAL . relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    qualified_name                 shift and go to state 34
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 153
    unary_expression               shift and go to state 91
    valid_variable                 shift and go to state 152
    array_access                   shift and go to state 32
    multiplicative_expression      shift and go to state 114
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    literal                        shift and go to state 101
    relational_expression          shift and go to state 212
    method_invocation              shift and go to state 105
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 117
    simple_name                    shift and go to state 30

state 174

    (28) conditional_and_expression -> conditional_and_expression AND . inclusive_or_expression
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    IDENTIFIER      shift and go to state 43
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    unary_expression               shift and go to state 91
    exclusive_or_expression        shift and go to state 92
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    array_access                   shift and go to state 32
    additive_expression            shift and go to state 117
    simple_name                    shift and go to state 30
    valid_variable                 shift and go to state 152
    inclusive_or_expression        shift and go to state 213
    literal                        shift and go to state 101
    and_expression                 shift and go to state 104
    method_invocation              shift and go to state 105
    relational_expression          shift and go to state 108
    qualified_name                 shift and go to state 34
    multiplicative_expression      shift and go to state 114
    shift_expression               shift and go to state 119
    equality_expression            shift and go to state 120
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 153

state 175

    (58) unary_expression_not_plus_minus -> NOT unary_expression .

    TIMES           reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    DIVIDE          reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    REMAINDER       reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    PLUS            reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    MINUS           reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    LSHIFT          reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    RSHIFT          reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    GREATER         reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    LESS            reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    GEQ             reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    LEQ             reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    EQUAL           reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    NEQUAL          reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    AND_BITWISE     reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    XOR             reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    OR_BITWISE      reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    AND             reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    OR              reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    STATE_END       reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    RPAREN          reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    COMMA           reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)
    RBPAREN         reduce using rule 58 (unary_expression_not_plus_minus -> NOT unary_expression .)


state 176

    (151) method_header_name -> modifier_opts KWRD_DEF IDENTIFIER .

    LPAREN          reduce using rule 151 (method_header_name -> modifier_opts KWRD_DEF IDENTIFIER .)


state 177

    (99) local_variable_declaration -> modifier_opts declaration_keyword variable_declaration_body .

    STATE_END       reduce using rule 99 (local_variable_declaration -> modifier_opts declaration_keyword variable_declaration_body .)


state 178

    (105) variable_declaration_body -> variable_declarator . ASSIGN variable_declaration_initializer

    ASSIGN          shift and go to state 214


state 179

    (106) variable_declaration_body -> LPAREN . variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list RPAREN
    (107) variable_declarators -> . variable_declarator
    (108) variable_declarators -> . variable_declarators COMMA variable_declarator
    (109) variable_declarator -> . variable_declarator_id
    (110) variable_declarator_id -> . IDENTIFIER COLON type

    IDENTIFIER      shift and go to state 148

    variable_declarators           shift and go to state 215
    variable_declarator_id         shift and go to state 145
    variable_declarator            shift and go to state 147

state 180

    (123) if_then_statement -> KWRD_IF LPAREN expression . RPAREN statement
    (124) if_then_else_statement -> KWRD_IF LPAREN expression . RPAREN if_then_else_intermediate KWRD_ELSE statement

    RPAREN          shift and go to state 216


state 181

    (72) argument_list_opt -> argument_list .
    (75) argument_list -> argument_list . COMMA expression

    RPAREN          reduce using rule 72 (argument_list_opt -> argument_list .)
    COMMA           shift and go to state 217


state 182

    (73) argument_list_opt -> empty .

    RPAREN          reduce using rule 73 (argument_list_opt -> empty .)


state 183

    (70) method_invocation -> name LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 218


state 184

    (74) argument_list -> expression .

    COMMA           reduce using rule 74 (argument_list -> expression .)
    RPAREN          reduce using rule 74 (argument_list -> expression .)


state 185

    (71) array_access -> name LBPAREN expression . RBPAREN

    RBPAREN         shift and go to state 219


state 186

    (79) qualified_name -> name DOT simple_name .

    LBPAREN         reduce using rule 79 (qualified_name -> name DOT simple_name .)
    LPAREN          reduce using rule 79 (qualified_name -> name DOT simple_name .)
    DOT             reduce using rule 79 (qualified_name -> name DOT simple_name .)
    TIMES           reduce using rule 79 (qualified_name -> name DOT simple_name .)
    DIVIDE          reduce using rule 79 (qualified_name -> name DOT simple_name .)
    REMAINDER       reduce using rule 79 (qualified_name -> name DOT simple_name .)
    PLUS            reduce using rule 79 (qualified_name -> name DOT simple_name .)
    MINUS           reduce using rule 79 (qualified_name -> name DOT simple_name .)
    LSHIFT          reduce using rule 79 (qualified_name -> name DOT simple_name .)
    RSHIFT          reduce using rule 79 (qualified_name -> name DOT simple_name .)
    GREATER         reduce using rule 79 (qualified_name -> name DOT simple_name .)
    LESS            reduce using rule 79 (qualified_name -> name DOT simple_name .)
    GEQ             reduce using rule 79 (qualified_name -> name DOT simple_name .)
    LEQ             reduce using rule 79 (qualified_name -> name DOT simple_name .)
    EQUAL           reduce using rule 79 (qualified_name -> name DOT simple_name .)
    NEQUAL          reduce using rule 79 (qualified_name -> name DOT simple_name .)
    AND_BITWISE     reduce using rule 79 (qualified_name -> name DOT simple_name .)
    XOR             reduce using rule 79 (qualified_name -> name DOT simple_name .)
    OR_BITWISE      reduce using rule 79 (qualified_name -> name DOT simple_name .)
    AND             reduce using rule 79 (qualified_name -> name DOT simple_name .)
    OR              reduce using rule 79 (qualified_name -> name DOT simple_name .)
    STATE_END       reduce using rule 79 (qualified_name -> name DOT simple_name .)
    RPAREN          reduce using rule 79 (qualified_name -> name DOT simple_name .)
    COMMA           reduce using rule 79 (qualified_name -> name DOT simple_name .)
    RBPAREN         reduce using rule 79 (qualified_name -> name DOT simple_name .)
    ASSIGN          reduce using rule 79 (qualified_name -> name DOT simple_name .)
    TIMES_ASSIGN    reduce using rule 79 (qualified_name -> name DOT simple_name .)
    DIVIDE_ASSIGN   reduce using rule 79 (qualified_name -> name DOT simple_name .)
    REMAINDER_ASSIGN reduce using rule 79 (qualified_name -> name DOT simple_name .)
    PLUS_ASSIGN     reduce using rule 79 (qualified_name -> name DOT simple_name .)
    MINUS_ASSIGN    reduce using rule 79 (qualified_name -> name DOT simple_name .)
    LSHIFT_ASSIGN   reduce using rule 79 (qualified_name -> name DOT simple_name .)
    RSHIFT_ASSIGN   reduce using rule 79 (qualified_name -> name DOT simple_name .)
    AND_ASSIGN      reduce using rule 79 (qualified_name -> name DOT simple_name .)
    OR_ASSIGN       reduce using rule 79 (qualified_name -> name DOT simple_name .)
    XOR_ASSIGN      reduce using rule 79 (qualified_name -> name DOT simple_name .)


state 187

    (136) constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER COLON . type
    (155) type -> . primitive_type
    (156) type -> . reference_type
    (157) primitive_type -> . TYPE_INT
    (158) primitive_type -> . TYPE_FLOAT
    (159) primitive_type -> . TYPE_CHAR
    (160) primitive_type -> . TYPE_STRING
    (161) primitive_type -> . TYPE_BOOLEAN
    (162) reference_type -> . class_data_type
    (163) reference_type -> . array_data_type
    (164) class_data_type -> . name
    (165) array_data_type -> . KWRD_ARRAY LBPAREN type RBPAREN
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name

    TYPE_INT        shift and go to state 220
    TYPE_FLOAT      shift and go to state 230
    TYPE_CHAR       shift and go to state 227
    TYPE_STRING     shift and go to state 221
    TYPE_BOOLEAN    shift and go to state 223
    KWRD_ARRAY      shift and go to state 228
    IDENTIFIER      shift and go to state 43

    name                           shift and go to state 222
    qualified_name                 shift and go to state 34
    reference_type                 shift and go to state 224
    primitive_type                 shift and go to state 225
    class_data_type                shift and go to state 226
    type                           shift and go to state 229
    array_data_type                shift and go to state 231
    simple_name                    shift and go to state 30

state 188

    (135) constructor_arguement_list -> constructor_arguement_list COMMA constructor_arguement_list_declarator .

    COMMA           reduce using rule 135 (constructor_arguement_list -> constructor_arguement_list COMMA constructor_arguement_list_declarator .)
    RPAREN          reduce using rule 135 (constructor_arguement_list -> constructor_arguement_list COMMA constructor_arguement_list_declarator .)


state 189

    (145) class_header_extends -> KWRD_EXTNDS name LPAREN func_arguement_list_opt . RPAREN

    RPAREN          shift and go to state 232


state 190

    (128) while_statement -> KWRD_WHILE LPAREN expression RPAREN . statement
    (111) statement -> . normal_statement
    (112) statement -> . if_then_statement
    (113) statement -> . if_then_else_statement
    (114) statement -> . while_statement
    (115) statement -> . do_while_statement
    (116) normal_statement -> . block
    (117) normal_statement -> . expression_statement
    (118) normal_statement -> . empty_statement
    (119) normal_statement -> . return_statement
    (123) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (124) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (128) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (129) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (84) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (120) expression_statement -> . statement_expression STATE_END
    (130) empty_statement -> . STATE_END
    (131) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (121) statement_expression -> . assignment
    (122) statement_expression -> . method_invocation
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name

    KWRD_IF         shift and go to state 55
    KWRD_WHILE      shift and go to state 44
    KWRD_DO         shift and go to state 50
    BLOCK_BEGIN     shift and go to state 15
    STATE_END       shift and go to state 27
    KWRD_RETURN     shift and go to state 53
    IDENTIFIER      shift and go to state 43

    expression_statement           shift and go to state 28
    normal_statement               shift and go to state 29
    if_then_statement              shift and go to state 31
    array_access                   shift and go to state 32
    qualified_name                 shift and go to state 34
    valid_variable                 shift and go to state 35
    return_statement               shift and go to state 38
    while_statement                shift and go to state 39
    statement                      shift and go to state 233
    statement_expression           shift and go to state 42
    method_invocation              shift and go to state 41
    simple_name                    shift and go to state 30
    do_while_statement             shift and go to state 48
    assignment                     shift and go to state 49
    name                           shift and go to state 56
    empty_statement                shift and go to state 58
    block                          shift and go to state 61
    if_then_else_statement         shift and go to state 62

state 191

    (129) do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN . expression RPAREN STATE_END
    (8) expression -> . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 43
    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    unary_expression               shift and go to state 91
    exclusive_or_expression        shift and go to state 92
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    array_access                   shift and go to state 32
    additive_expression            shift and go to state 117
    simple_name                    shift and go to state 30
    valid_variable                 shift and go to state 99
    inclusive_or_expression        shift and go to state 100
    literal                        shift and go to state 101
    and_expression                 shift and go to state 104
    relational_expression          shift and go to state 108
    method_invocation              shift and go to state 105
    conditional_or_expression      shift and go to state 106
    assignment_expression          shift and go to state 111
    qualified_name                 shift and go to state 34
    assignment                     shift and go to state 113
    multiplicative_expression      shift and go to state 114
    shift_expression               shift and go to state 119
    equality_expression            shift and go to state 120
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 123
    expression                     shift and go to state 234
    conditional_and_expression     shift and go to state 124

state 192

    (148) method_header -> method_header_name LPAREN func_arguement_list_opt RPAREN . COLON method_return_type ASSIGN

    COLON           shift and go to state 235


state 193

    (108) variable_declarators -> variable_declarators COMMA . variable_declarator
    (109) variable_declarator -> . variable_declarator_id
    (110) variable_declarator_id -> . IDENTIFIER COLON type

    IDENTIFIER      shift and go to state 148

    variable_declarator_id         shift and go to state 145
    variable_declarator            shift and go to state 236

state 194

    (110) variable_declarator_id -> IDENTIFIER COLON . type
    (155) type -> . primitive_type
    (156) type -> . reference_type
    (157) primitive_type -> . TYPE_INT
    (158) primitive_type -> . TYPE_FLOAT
    (159) primitive_type -> . TYPE_CHAR
    (160) primitive_type -> . TYPE_STRING
    (161) primitive_type -> . TYPE_BOOLEAN
    (162) reference_type -> . class_data_type
    (163) reference_type -> . array_data_type
    (164) class_data_type -> . name
    (165) array_data_type -> . KWRD_ARRAY LBPAREN type RBPAREN
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name

    TYPE_INT        shift and go to state 220
    TYPE_FLOAT      shift and go to state 230
    TYPE_CHAR       shift and go to state 227
    TYPE_STRING     shift and go to state 221
    TYPE_BOOLEAN    shift and go to state 223
    KWRD_ARRAY      shift and go to state 228
    IDENTIFIER      shift and go to state 43

    name                           shift and go to state 222
    qualified_name                 shift and go to state 34
    reference_type                 shift and go to state 224
    primitive_type                 shift and go to state 225
    class_data_type                shift and go to state 226
    type                           shift and go to state 237
    array_data_type                shift and go to state 231
    simple_name                    shift and go to state 30

state 195

    (32) exclusive_or_expression -> exclusive_or_expression XOR and_expression .
    (34) and_expression -> and_expression . AND_BITWISE equality_expression

    XOR             reduce using rule 32 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR_BITWISE      reduce using rule 32 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND             reduce using rule 32 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR              reduce using rule 32 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COMMA           reduce using rule 32 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RPAREN          reduce using rule 32 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    STATE_END       reduce using rule 32 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBPAREN         reduce using rule 32 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND_BITWISE     shift and go to state 158


state 196

    (30) inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .
    (32) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR_BITWISE      reduce using rule 30 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    AND             reduce using rule 30 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    OR              reduce using rule 30 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    STATE_END       reduce using rule 30 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    RPAREN          reduce using rule 30 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    COMMA           reduce using rule 30 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    RBPAREN         reduce using rule 30 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    XOR             shift and go to state 150


state 197

    (34) and_expression -> and_expression AND_BITWISE equality_expression .
    (36) equality_expression -> equality_expression . EQUAL relational_expression
    (37) equality_expression -> equality_expression . NEQUAL relational_expression

    AND_BITWISE     reduce using rule 34 (and_expression -> and_expression AND_BITWISE equality_expression .)
    XOR             reduce using rule 34 (and_expression -> and_expression AND_BITWISE equality_expression .)
    OR_BITWISE      reduce using rule 34 (and_expression -> and_expression AND_BITWISE equality_expression .)
    AND             reduce using rule 34 (and_expression -> and_expression AND_BITWISE equality_expression .)
    OR              reduce using rule 34 (and_expression -> and_expression AND_BITWISE equality_expression .)
    STATE_END       reduce using rule 34 (and_expression -> and_expression AND_BITWISE equality_expression .)
    RPAREN          reduce using rule 34 (and_expression -> and_expression AND_BITWISE equality_expression .)
    COMMA           reduce using rule 34 (and_expression -> and_expression AND_BITWISE equality_expression .)
    RBPAREN         reduce using rule 34 (and_expression -> and_expression AND_BITWISE equality_expression .)
    EQUAL           shift and go to state 173
    NEQUAL          shift and go to state 172


state 198

    (26) conditional_or_expression -> conditional_or_expression OR conditional_and_expression .
    (28) conditional_and_expression -> conditional_and_expression . AND inclusive_or_expression

    OR              reduce using rule 26 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    RPAREN          reduce using rule 26 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    COMMA           reduce using rule 26 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    STATE_END       reduce using rule 26 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    RBPAREN         reduce using rule 26 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    AND             shift and go to state 174


state 199

    (41) relational_expression -> relational_expression GEQ shift_expression .
    (44) shift_expression -> shift_expression . LSHIFT additive_expression
    (45) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    LESS            reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    GEQ             reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    LEQ             reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    EQUAL           reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    NEQUAL          reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    AND_BITWISE     reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    XOR             reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    OR_BITWISE      reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    AND             reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    OR              reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    RPAREN          reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    COMMA           reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    STATE_END       reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    RBPAREN         reduce using rule 41 (relational_expression -> relational_expression GEQ shift_expression .)
    LSHIFT          shift and go to state 171
    RSHIFT          shift and go to state 170


state 200

    (39) relational_expression -> relational_expression GREATER shift_expression .
    (44) shift_expression -> shift_expression . LSHIFT additive_expression
    (45) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    LESS            reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    GEQ             reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    LEQ             reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    EQUAL           reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    NEQUAL          reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    AND_BITWISE     reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    XOR             reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    OR_BITWISE      reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    AND             reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    OR              reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    RPAREN          reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    COMMA           reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    STATE_END       reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    RBPAREN         reduce using rule 39 (relational_expression -> relational_expression GREATER shift_expression .)
    LSHIFT          shift and go to state 171
    RSHIFT          shift and go to state 170


state 201

    (40) relational_expression -> relational_expression LESS shift_expression .
    (44) shift_expression -> shift_expression . LSHIFT additive_expression
    (45) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    LESS            reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    GEQ             reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    LEQ             reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    EQUAL           reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    NEQUAL          reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    AND_BITWISE     reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    XOR             reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    OR_BITWISE      reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    AND             reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    OR              reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    RPAREN          reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    COMMA           reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    STATE_END       reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    RBPAREN         reduce using rule 40 (relational_expression -> relational_expression LESS shift_expression .)
    LSHIFT          shift and go to state 171
    RSHIFT          shift and go to state 170


state 202

    (42) relational_expression -> relational_expression LEQ shift_expression .
    (44) shift_expression -> shift_expression . LSHIFT additive_expression
    (45) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    LESS            reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    GEQ             reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    LEQ             reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    EQUAL           reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    NEQUAL          reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    AND_BITWISE     reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    XOR             reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    OR_BITWISE      reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    AND             reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    OR              reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    RPAREN          reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    COMMA           reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    STATE_END       reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    RBPAREN         reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    LSHIFT          shift and go to state 171
    RSHIFT          shift and go to state 170


state 203

    (52) multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .

    TIMES           reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    DIVIDE          reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    REMAINDER       reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    PLUS            reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    MINUS           reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    LSHIFT          reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    RSHIFT          reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    GREATER         reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    LESS            reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    GEQ             reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    LEQ             reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    EQUAL           reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    NEQUAL          reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    AND_BITWISE     reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    XOR             reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    OR_BITWISE      reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    AND             reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    OR              reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    STATE_END       reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    RPAREN          reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    COMMA           reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    RBPAREN         reduce using rule 52 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)


state 204

    (51) multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .

    TIMES           reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DIVIDE          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    REMAINDER       reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    PLUS            reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MINUS           reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LSHIFT          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RSHIFT          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GREATER         reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LESS            reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GEQ             reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LEQ             reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    EQUAL           reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    NEQUAL          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AND_BITWISE     reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    XOR             reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OR_BITWISE      reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AND             reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OR              reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    STATE_END       reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RPAREN          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COMMA           reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RBPAREN         reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)


state 205

    (50) multiplicative_expression -> multiplicative_expression TIMES unary_expression .

    TIMES           reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DIVIDE          reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    REMAINDER       reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    PLUS            reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MINUS           reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LSHIFT          reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RSHIFT          reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GREATER         reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LESS            reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GEQ             reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LEQ             reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    EQUAL           reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    NEQUAL          reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    AND_BITWISE     reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    XOR             reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OR_BITWISE      reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    AND             reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OR              reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    STATE_END       reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RPAREN          reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    COMMA           reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RBPAREN         reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)


state 206

    (47) additive_expression -> additive_expression PLUS multiplicative_expression .
    (50) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (51) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (52) multiplicative_expression -> multiplicative_expression . REMAINDER unary_expression

    PLUS            reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LSHIFT          reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSHIFT          reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER         reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS            reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GEQ             reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LEQ             reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUAL           reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NEQUAL          reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND_BITWISE     reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR_BITWISE      reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STATE_END       reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBPAREN         reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 166
    DIVIDE          shift and go to state 165
    REMAINDER       shift and go to state 164


state 207

    (48) additive_expression -> additive_expression MINUS multiplicative_expression .
    (50) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (51) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (52) multiplicative_expression -> multiplicative_expression . REMAINDER unary_expression

    PLUS            reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LSHIFT          reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSHIFT          reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER         reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS            reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GEQ             reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LEQ             reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUAL           reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NEQUAL          reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND_BITWISE     reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR_BITWISE      reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STATE_END       reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBPAREN         reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 166
    DIVIDE          shift and go to state 165
    REMAINDER       shift and go to state 164


state 208

    (59) unary_expression_not_plus_minus -> LPAREN expression RPAREN .

    TIMES           reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    REMAINDER       reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    LESS            reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    GEQ             reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    LEQ             reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    NEQUAL          reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    AND_BITWISE     reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    XOR             reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    OR_BITWISE      reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    AND             reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    OR              reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    STATE_END       reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)
    RBPAREN         reduce using rule 59 (unary_expression_not_plus_minus -> LPAREN expression RPAREN .)


state 209

    (45) shift_expression -> shift_expression RSHIFT additive_expression .
    (47) additive_expression -> additive_expression . PLUS multiplicative_expression
    (48) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GREATER         reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LESS            reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GEQ             reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LEQ             reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQUAL           reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NEQUAL          reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND_BITWISE     reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOR             reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR_BITWISE      reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND             reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR              reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    STATE_END       reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBPAREN         reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUS            shift and go to state 167
    MINUS           shift and go to state 168


state 210

    (44) shift_expression -> shift_expression LSHIFT additive_expression .
    (47) additive_expression -> additive_expression . PLUS multiplicative_expression
    (48) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GREATER         reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LESS            reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GEQ             reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LEQ             reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQUAL           reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NEQUAL          reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND_BITWISE     reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOR             reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR_BITWISE      reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND             reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR              reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    STATE_END       reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBPAREN         reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUS            shift and go to state 167
    MINUS           shift and go to state 168


state 211

    (37) equality_expression -> equality_expression NEQUAL relational_expression .
    (39) relational_expression -> relational_expression . GREATER shift_expression
    (40) relational_expression -> relational_expression . LESS shift_expression
    (41) relational_expression -> relational_expression . GEQ shift_expression
    (42) relational_expression -> relational_expression . LEQ shift_expression

    EQUAL           reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    NEQUAL          reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    AND_BITWISE     reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    XOR             reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    OR_BITWISE      reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    AND             reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    OR              reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    STATE_END       reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    RPAREN          reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    COMMA           reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    RBPAREN         reduce using rule 37 (equality_expression -> equality_expression NEQUAL relational_expression .)
    GREATER         shift and go to state 161
    LESS            shift and go to state 162
    GEQ             shift and go to state 160
    LEQ             shift and go to state 163


state 212

    (36) equality_expression -> equality_expression EQUAL relational_expression .
    (39) relational_expression -> relational_expression . GREATER shift_expression
    (40) relational_expression -> relational_expression . LESS shift_expression
    (41) relational_expression -> relational_expression . GEQ shift_expression
    (42) relational_expression -> relational_expression . LEQ shift_expression

    EQUAL           reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    NEQUAL          reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND_BITWISE     reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    XOR             reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR_BITWISE      reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND             reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR              reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    STATE_END       reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    RPAREN          reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    COMMA           reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    RBPAREN         reduce using rule 36 (equality_expression -> equality_expression EQUAL relational_expression .)
    GREATER         shift and go to state 161
    LESS            shift and go to state 162
    GEQ             shift and go to state 160
    LEQ             shift and go to state 163


state 213

    (28) conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .
    (30) inclusive_or_expression -> inclusive_or_expression . OR_BITWISE exclusive_or_expression

    AND             reduce using rule 28 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    OR              reduce using rule 28 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    RBPAREN         reduce using rule 28 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    COMMA           reduce using rule 28 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    RPAREN          reduce using rule 28 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    STATE_END       reduce using rule 28 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    OR_BITWISE      shift and go to state 155


state 214

    (105) variable_declaration_body -> variable_declarator ASSIGN . variable_declaration_initializer
    (100) variable_declaration_initializer -> . expression
    (101) variable_declaration_initializer -> . array_initializer
    (102) variable_declaration_initializer -> . class_initializer
    (8) expression -> . assignment_expression
    (166) array_initializer -> . KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN
    (167) array_initializer -> . KWRD_ARRAY LPAREN argument_list_opt RPAREN
    (168) class_initializer -> . KWRD_NEW name LPAREN argument_list_opt RPAREN
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    KWRD_NEW        shift and go to state 240
    KWRD_ARRAY      shift and go to state 239
    IDENTIFIER      shift and go to state 43
    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    variable_declaration_initializer shift and go to state 238
    unary_expression               shift and go to state 91
    exclusive_or_expression        shift and go to state 92
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    array_access                   shift and go to state 32
    and_expression                 shift and go to state 104
    simple_name                    shift and go to state 30
    valid_variable                 shift and go to state 99
    inclusive_or_expression        shift and go to state 100
    literal                        shift and go to state 101
    relational_expression          shift and go to state 108
    method_invocation              shift and go to state 105
    conditional_or_expression      shift and go to state 106
    assignment_expression          shift and go to state 111
    qualified_name                 shift and go to state 34
    assignment                     shift and go to state 113
    multiplicative_expression      shift and go to state 114
    additive_expression            shift and go to state 117
    class_initializer              shift and go to state 241
    shift_expression               shift and go to state 119
    equality_expression            shift and go to state 120
    array_initializer              shift and go to state 242
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 123
    expression                     shift and go to state 243
    conditional_and_expression     shift and go to state 124

state 215

    (106) variable_declaration_body -> LPAREN variable_declarators . RPAREN ASSIGN LPAREN variable_arguement_list RPAREN
    (108) variable_declarators -> variable_declarators . COMMA variable_declarator

    RPAREN          shift and go to state 244
    COMMA           shift and go to state 193


state 216

    (123) if_then_statement -> KWRD_IF LPAREN expression RPAREN . statement
    (124) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN . if_then_else_intermediate KWRD_ELSE statement
    (111) statement -> . normal_statement
    (112) statement -> . if_then_statement
    (113) statement -> . if_then_else_statement
    (114) statement -> . while_statement
    (115) statement -> . do_while_statement
    (126) if_then_else_intermediate -> . normal_statement
    (127) if_then_else_intermediate -> . if_then_else_statement_precedence
    (116) normal_statement -> . block
    (117) normal_statement -> . expression_statement
    (118) normal_statement -> . empty_statement
    (119) normal_statement -> . return_statement
    (123) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (124) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (128) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (129) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (125) if_then_else_statement_precedence -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
    (84) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (120) expression_statement -> . statement_expression STATE_END
    (130) empty_statement -> . STATE_END
    (131) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (121) statement_expression -> . assignment
    (122) statement_expression -> . method_invocation
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name

    KWRD_IF         shift and go to state 249
    KWRD_WHILE      shift and go to state 44
    KWRD_DO         shift and go to state 50
    BLOCK_BEGIN     shift and go to state 15
    STATE_END       shift and go to state 27
    KWRD_RETURN     shift and go to state 53
    IDENTIFIER      shift and go to state 43

    expression_statement           shift and go to state 28
    if_then_else_statement_precedence shift and go to state 245
    normal_statement               shift and go to state 246
    if_then_else_intermediate      shift and go to state 247
    if_then_statement              shift and go to state 31
    array_access                   shift and go to state 32
    qualified_name                 shift and go to state 34
    valid_variable                 shift and go to state 35
    return_statement               shift and go to state 38
    while_statement                shift and go to state 39
    statement                      shift and go to state 248
    statement_expression           shift and go to state 42
    method_invocation              shift and go to state 41
    simple_name                    shift and go to state 30
    do_while_statement             shift and go to state 48
    assignment                     shift and go to state 49
    name                           shift and go to state 56
    empty_statement                shift and go to state 58
    block                          shift and go to state 61
    if_then_else_statement         shift and go to state 62

state 217

    (75) argument_list -> argument_list COMMA . expression
    (8) expression -> . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 43
    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    unary_expression               shift and go to state 91
    exclusive_or_expression        shift and go to state 92
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    array_access                   shift and go to state 32
    additive_expression            shift and go to state 117
    simple_name                    shift and go to state 30
    valid_variable                 shift and go to state 99
    inclusive_or_expression        shift and go to state 100
    literal                        shift and go to state 101
    and_expression                 shift and go to state 104
    relational_expression          shift and go to state 108
    method_invocation              shift and go to state 105
    conditional_or_expression      shift and go to state 106
    assignment_expression          shift and go to state 111
    qualified_name                 shift and go to state 34
    assignment                     shift and go to state 113
    multiplicative_expression      shift and go to state 114
    shift_expression               shift and go to state 119
    equality_expression            shift and go to state 120
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 123
    expression                     shift and go to state 250
    conditional_and_expression     shift and go to state 124

state 218

    (70) method_invocation -> name LPAREN argument_list_opt RPAREN .

    TIMES           reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    DIVIDE          reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    REMAINDER       reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    PLUS            reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    MINUS           reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    LSHIFT          reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    RSHIFT          reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    GREATER         reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    LESS            reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    GEQ             reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    LEQ             reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    EQUAL           reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    NEQUAL          reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    AND_BITWISE     reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    XOR             reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    OR_BITWISE      reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    STATE_END       reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    RBPAREN         reduce using rule 70 (method_invocation -> name LPAREN argument_list_opt RPAREN .)


state 219

    (71) array_access -> name LBPAREN expression RBPAREN .

    ASSIGN          reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    TIMES_ASSIGN    reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    DIVIDE_ASSIGN   reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    REMAINDER_ASSIGN reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    PLUS_ASSIGN     reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    MINUS_ASSIGN    reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    LSHIFT_ASSIGN   reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    RSHIFT_ASSIGN   reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    AND_ASSIGN      reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    OR_ASSIGN       reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    XOR_ASSIGN      reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    TIMES           reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    DIVIDE          reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    REMAINDER       reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    PLUS            reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    MINUS           reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    LSHIFT          reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    RSHIFT          reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    GREATER         reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    LESS            reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    GEQ             reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    LEQ             reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    EQUAL           reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    NEQUAL          reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    AND_BITWISE     reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    XOR             reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    OR_BITWISE      reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    AND             reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    OR              reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    RBPAREN         reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    COMMA           reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    RPAREN          reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)
    STATE_END       reduce using rule 71 (array_access -> name LBPAREN expression RBPAREN .)


state 220

    (157) primitive_type -> TYPE_INT .

    COMMA           reduce using rule 157 (primitive_type -> TYPE_INT .)
    RPAREN          reduce using rule 157 (primitive_type -> TYPE_INT .)
    ASSIGN          reduce using rule 157 (primitive_type -> TYPE_INT .)
    RBPAREN         reduce using rule 157 (primitive_type -> TYPE_INT .)


state 221

    (160) primitive_type -> TYPE_STRING .

    COMMA           reduce using rule 160 (primitive_type -> TYPE_STRING .)
    RPAREN          reduce using rule 160 (primitive_type -> TYPE_STRING .)
    ASSIGN          reduce using rule 160 (primitive_type -> TYPE_STRING .)
    RBPAREN         reduce using rule 160 (primitive_type -> TYPE_STRING .)


state 222

    (164) class_data_type -> name .
    (79) qualified_name -> name . DOT simple_name

    COMMA           reduce using rule 164 (class_data_type -> name .)
    RPAREN          reduce using rule 164 (class_data_type -> name .)
    ASSIGN          reduce using rule 164 (class_data_type -> name .)
    RBPAREN         reduce using rule 164 (class_data_type -> name .)
    DOT             shift and go to state 132


state 223

    (161) primitive_type -> TYPE_BOOLEAN .

    COMMA           reduce using rule 161 (primitive_type -> TYPE_BOOLEAN .)
    RPAREN          reduce using rule 161 (primitive_type -> TYPE_BOOLEAN .)
    ASSIGN          reduce using rule 161 (primitive_type -> TYPE_BOOLEAN .)
    RBPAREN         reduce using rule 161 (primitive_type -> TYPE_BOOLEAN .)


state 224

    (156) type -> reference_type .

    COMMA           reduce using rule 156 (type -> reference_type .)
    RPAREN          reduce using rule 156 (type -> reference_type .)
    ASSIGN          reduce using rule 156 (type -> reference_type .)
    RBPAREN         reduce using rule 156 (type -> reference_type .)


state 225

    (155) type -> primitive_type .

    COMMA           reduce using rule 155 (type -> primitive_type .)
    RPAREN          reduce using rule 155 (type -> primitive_type .)
    ASSIGN          reduce using rule 155 (type -> primitive_type .)
    RBPAREN         reduce using rule 155 (type -> primitive_type .)


state 226

    (162) reference_type -> class_data_type .

    COMMA           reduce using rule 162 (reference_type -> class_data_type .)
    RPAREN          reduce using rule 162 (reference_type -> class_data_type .)
    ASSIGN          reduce using rule 162 (reference_type -> class_data_type .)
    RBPAREN         reduce using rule 162 (reference_type -> class_data_type .)


state 227

    (159) primitive_type -> TYPE_CHAR .

    COMMA           reduce using rule 159 (primitive_type -> TYPE_CHAR .)
    RPAREN          reduce using rule 159 (primitive_type -> TYPE_CHAR .)
    ASSIGN          reduce using rule 159 (primitive_type -> TYPE_CHAR .)
    RBPAREN         reduce using rule 159 (primitive_type -> TYPE_CHAR .)


state 228

    (165) array_data_type -> KWRD_ARRAY . LBPAREN type RBPAREN

    LBPAREN         shift and go to state 251


state 229

    (136) constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER COLON type .

    COMMA           reduce using rule 136 (constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER COLON type .)
    RPAREN          reduce using rule 136 (constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER COLON type .)


state 230

    (158) primitive_type -> TYPE_FLOAT .

    COMMA           reduce using rule 158 (primitive_type -> TYPE_FLOAT .)
    RPAREN          reduce using rule 158 (primitive_type -> TYPE_FLOAT .)
    ASSIGN          reduce using rule 158 (primitive_type -> TYPE_FLOAT .)
    RBPAREN         reduce using rule 158 (primitive_type -> TYPE_FLOAT .)


state 231

    (163) reference_type -> array_data_type .

    COMMA           reduce using rule 163 (reference_type -> array_data_type .)
    RPAREN          reduce using rule 163 (reference_type -> array_data_type .)
    ASSIGN          reduce using rule 163 (reference_type -> array_data_type .)
    RBPAREN         reduce using rule 163 (reference_type -> array_data_type .)


state 232

    (145) class_header_extends -> KWRD_EXTNDS name LPAREN func_arguement_list_opt RPAREN .

    BLOCK_BEGIN     reduce using rule 145 (class_header_extends -> KWRD_EXTNDS name LPAREN func_arguement_list_opt RPAREN .)


state 233

    (128) while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .

    KWRD_WHILE      reduce using rule 128 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_IF         reduce using rule 128 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_DO         reduce using rule 128 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_OBJECT     reduce using rule 128 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    BLOCK_BEGIN     reduce using rule 128 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    STATE_END       reduce using rule 128 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_RETURN     reduce using rule 128 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_PROTECTED  reduce using rule 128 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_PRIVATE    reduce using rule 128 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 128 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_DEF        reduce using rule 128 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_CLASS      reduce using rule 128 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_VAR        reduce using rule 128 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    KWRD_VAL        reduce using rule 128 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)
    BLOCK_END       reduce using rule 128 (while_statement -> KWRD_WHILE LPAREN expression RPAREN statement .)


state 234

    (129) do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression . RPAREN STATE_END

    RPAREN          shift and go to state 252


state 235

    (148) method_header -> method_header_name LPAREN func_arguement_list_opt RPAREN COLON . method_return_type ASSIGN
    (149) method_return_type -> . type
    (150) method_return_type -> . TYPE_VOID
    (155) type -> . primitive_type
    (156) type -> . reference_type
    (157) primitive_type -> . TYPE_INT
    (158) primitive_type -> . TYPE_FLOAT
    (159) primitive_type -> . TYPE_CHAR
    (160) primitive_type -> . TYPE_STRING
    (161) primitive_type -> . TYPE_BOOLEAN
    (162) reference_type -> . class_data_type
    (163) reference_type -> . array_data_type
    (164) class_data_type -> . name
    (165) array_data_type -> . KWRD_ARRAY LBPAREN type RBPAREN
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name

    TYPE_VOID       shift and go to state 253
    TYPE_INT        shift and go to state 220
    TYPE_FLOAT      shift and go to state 230
    TYPE_CHAR       shift and go to state 227
    TYPE_STRING     shift and go to state 221
    TYPE_BOOLEAN    shift and go to state 223
    KWRD_ARRAY      shift and go to state 228
    IDENTIFIER      shift and go to state 43

    name                           shift and go to state 222
    qualified_name                 shift and go to state 34
    method_return_type             shift and go to state 255
    reference_type                 shift and go to state 224
    primitive_type                 shift and go to state 225
    class_data_type                shift and go to state 226
    type                           shift and go to state 254
    array_data_type                shift and go to state 231
    simple_name                    shift and go to state 30

state 236

    (108) variable_declarators -> variable_declarators COMMA variable_declarator .

    COMMA           reduce using rule 108 (variable_declarators -> variable_declarators COMMA variable_declarator .)
    RPAREN          reduce using rule 108 (variable_declarators -> variable_declarators COMMA variable_declarator .)


state 237

    (110) variable_declarator_id -> IDENTIFIER COLON type .

    COMMA           reduce using rule 110 (variable_declarator_id -> IDENTIFIER COLON type .)
    RPAREN          reduce using rule 110 (variable_declarator_id -> IDENTIFIER COLON type .)
    ASSIGN          reduce using rule 110 (variable_declarator_id -> IDENTIFIER COLON type .)


state 238

    (105) variable_declaration_body -> variable_declarator ASSIGN variable_declaration_initializer .

    STATE_END       reduce using rule 105 (variable_declaration_body -> variable_declarator ASSIGN variable_declaration_initializer .)


state 239

    (167) array_initializer -> KWRD_ARRAY . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 256


state 240

    (166) array_initializer -> KWRD_NEW . KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN
    (168) class_initializer -> KWRD_NEW . name LPAREN argument_list_opt RPAREN
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name

    KWRD_ARRAY      shift and go to state 258
    IDENTIFIER      shift and go to state 43

    simple_name                    shift and go to state 30
    name                           shift and go to state 257
    qualified_name                 shift and go to state 34

state 241

    (102) variable_declaration_initializer -> class_initializer .

    RPAREN          reduce using rule 102 (variable_declaration_initializer -> class_initializer .)
    COMMA           reduce using rule 102 (variable_declaration_initializer -> class_initializer .)
    STATE_END       reduce using rule 102 (variable_declaration_initializer -> class_initializer .)


state 242

    (101) variable_declaration_initializer -> array_initializer .

    RPAREN          reduce using rule 101 (variable_declaration_initializer -> array_initializer .)
    COMMA           reduce using rule 101 (variable_declaration_initializer -> array_initializer .)
    STATE_END       reduce using rule 101 (variable_declaration_initializer -> array_initializer .)


state 243

    (100) variable_declaration_initializer -> expression .

    RPAREN          reduce using rule 100 (variable_declaration_initializer -> expression .)
    COMMA           reduce using rule 100 (variable_declaration_initializer -> expression .)
    STATE_END       reduce using rule 100 (variable_declaration_initializer -> expression .)


state 244

    (106) variable_declaration_body -> LPAREN variable_declarators RPAREN . ASSIGN LPAREN variable_arguement_list RPAREN

    ASSIGN          shift and go to state 259


state 245

    (127) if_then_else_intermediate -> if_then_else_statement_precedence .

    KWRD_ELSE       reduce using rule 127 (if_then_else_intermediate -> if_then_else_statement_precedence .)


state 246

    (111) statement -> normal_statement .
    (126) if_then_else_intermediate -> normal_statement .

    KWRD_IF         reduce using rule 111 (statement -> normal_statement .)
    KWRD_WHILE      reduce using rule 111 (statement -> normal_statement .)
    KWRD_DO         reduce using rule 111 (statement -> normal_statement .)
    KWRD_OBJECT     reduce using rule 111 (statement -> normal_statement .)
    BLOCK_BEGIN     reduce using rule 111 (statement -> normal_statement .)
    STATE_END       reduce using rule 111 (statement -> normal_statement .)
    KWRD_RETURN     reduce using rule 111 (statement -> normal_statement .)
    KWRD_PROTECTED  reduce using rule 111 (statement -> normal_statement .)
    KWRD_PRIVATE    reduce using rule 111 (statement -> normal_statement .)
    IDENTIFIER      reduce using rule 111 (statement -> normal_statement .)
    KWRD_DEF        reduce using rule 111 (statement -> normal_statement .)
    KWRD_CLASS      reduce using rule 111 (statement -> normal_statement .)
    KWRD_VAR        reduce using rule 111 (statement -> normal_statement .)
    KWRD_VAL        reduce using rule 111 (statement -> normal_statement .)
    BLOCK_END       reduce using rule 111 (statement -> normal_statement .)
    KWRD_ELSE       reduce using rule 126 (if_then_else_intermediate -> normal_statement .)


state 247

    (124) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate . KWRD_ELSE statement

    KWRD_ELSE       shift and go to state 260


state 248

    (123) if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .

    KWRD_IF         reduce using rule 123 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_WHILE      reduce using rule 123 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_DO         reduce using rule 123 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_OBJECT     reduce using rule 123 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    BLOCK_BEGIN     reduce using rule 123 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    STATE_END       reduce using rule 123 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_RETURN     reduce using rule 123 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_PROTECTED  reduce using rule 123 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_PRIVATE    reduce using rule 123 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 123 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_DEF        reduce using rule 123 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_CLASS      reduce using rule 123 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_VAR        reduce using rule 123 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    KWRD_VAL        reduce using rule 123 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)
    BLOCK_END       reduce using rule 123 (if_then_statement -> KWRD_IF LPAREN expression RPAREN statement .)


state 249

    (123) if_then_statement -> KWRD_IF . LPAREN expression RPAREN statement
    (124) if_then_else_statement -> KWRD_IF . LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (125) if_then_else_statement_precedence -> KWRD_IF . LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate

    LPAREN          shift and go to state 261


state 250

    (75) argument_list -> argument_list COMMA expression .

    COMMA           reduce using rule 75 (argument_list -> argument_list COMMA expression .)
    RPAREN          reduce using rule 75 (argument_list -> argument_list COMMA expression .)


state 251

    (165) array_data_type -> KWRD_ARRAY LBPAREN . type RBPAREN
    (155) type -> . primitive_type
    (156) type -> . reference_type
    (157) primitive_type -> . TYPE_INT
    (158) primitive_type -> . TYPE_FLOAT
    (159) primitive_type -> . TYPE_CHAR
    (160) primitive_type -> . TYPE_STRING
    (161) primitive_type -> . TYPE_BOOLEAN
    (162) reference_type -> . class_data_type
    (163) reference_type -> . array_data_type
    (164) class_data_type -> . name
    (165) array_data_type -> . KWRD_ARRAY LBPAREN type RBPAREN
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name

    TYPE_INT        shift and go to state 220
    TYPE_FLOAT      shift and go to state 230
    TYPE_CHAR       shift and go to state 227
    TYPE_STRING     shift and go to state 221
    TYPE_BOOLEAN    shift and go to state 223
    KWRD_ARRAY      shift and go to state 228
    IDENTIFIER      shift and go to state 43

    name                           shift and go to state 222
    qualified_name                 shift and go to state 34
    reference_type                 shift and go to state 224
    primitive_type                 shift and go to state 225
    class_data_type                shift and go to state 226
    type                           shift and go to state 262
    array_data_type                shift and go to state 231
    simple_name                    shift and go to state 30

state 252

    (129) do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN . STATE_END

    STATE_END       shift and go to state 263


state 253

    (150) method_return_type -> TYPE_VOID .

    ASSIGN          reduce using rule 150 (method_return_type -> TYPE_VOID .)


state 254

    (149) method_return_type -> type .

    ASSIGN          reduce using rule 149 (method_return_type -> type .)


state 255

    (148) method_header -> method_header_name LPAREN func_arguement_list_opt RPAREN COLON method_return_type . ASSIGN

    ASSIGN          shift and go to state 264


state 256

    (167) array_initializer -> KWRD_ARRAY LPAREN . argument_list_opt RPAREN
    (72) argument_list_opt -> . argument_list
    (73) argument_list_opt -> . empty
    (74) argument_list -> . expression
    (75) argument_list -> . argument_list COMMA expression
    (170) empty -> .
    (8) expression -> . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    RPAREN          reduce using rule 170 (empty -> .)
    IDENTIFIER      shift and go to state 43
    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    and_expression                 shift and go to state 104
    exclusive_or_expression        shift and go to state 92
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    array_access                   shift and go to state 32
    additive_expression            shift and go to state 117
    simple_name                    shift and go to state 30
    unary_expression               shift and go to state 91
    valid_variable                 shift and go to state 99
    inclusive_or_expression        shift and go to state 100
    literal                        shift and go to state 101
    relational_expression          shift and go to state 108
    method_invocation              shift and go to state 105
    conditional_or_expression      shift and go to state 106
    empty                          shift and go to state 182
    argument_list                  shift and go to state 181
    assignment_expression          shift and go to state 111
    qualified_name                 shift and go to state 34
    assignment                     shift and go to state 113
    multiplicative_expression      shift and go to state 114
    shift_expression               shift and go to state 119
    equality_expression            shift and go to state 120
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 123
    argument_list_opt              shift and go to state 265
    expression                     shift and go to state 184
    conditional_and_expression     shift and go to state 124

state 257

    (168) class_initializer -> KWRD_NEW name . LPAREN argument_list_opt RPAREN
    (79) qualified_name -> name . DOT simple_name

    LPAREN          shift and go to state 266
    DOT             shift and go to state 132


state 258

    (166) array_initializer -> KWRD_NEW KWRD_ARRAY . LBPAREN type RBPAREN LPAREN INT_CONST RPAREN

    LBPAREN         shift and go to state 267


state 259

    (106) variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN . LPAREN variable_arguement_list RPAREN

    LPAREN          shift and go to state 268


state 260

    (124) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE . statement
    (111) statement -> . normal_statement
    (112) statement -> . if_then_statement
    (113) statement -> . if_then_else_statement
    (114) statement -> . while_statement
    (115) statement -> . do_while_statement
    (116) normal_statement -> . block
    (117) normal_statement -> . expression_statement
    (118) normal_statement -> . empty_statement
    (119) normal_statement -> . return_statement
    (123) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (124) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (128) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (129) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (84) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (120) expression_statement -> . statement_expression STATE_END
    (130) empty_statement -> . STATE_END
    (131) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (121) statement_expression -> . assignment
    (122) statement_expression -> . method_invocation
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name

    KWRD_IF         shift and go to state 55
    KWRD_WHILE      shift and go to state 44
    KWRD_DO         shift and go to state 50
    BLOCK_BEGIN     shift and go to state 15
    STATE_END       shift and go to state 27
    KWRD_RETURN     shift and go to state 53
    IDENTIFIER      shift and go to state 43

    expression_statement           shift and go to state 28
    normal_statement               shift and go to state 29
    if_then_statement              shift and go to state 31
    array_access                   shift and go to state 32
    qualified_name                 shift and go to state 34
    valid_variable                 shift and go to state 35
    return_statement               shift and go to state 38
    while_statement                shift and go to state 39
    statement                      shift and go to state 269
    statement_expression           shift and go to state 42
    method_invocation              shift and go to state 41
    simple_name                    shift and go to state 30
    do_while_statement             shift and go to state 48
    assignment                     shift and go to state 49
    name                           shift and go to state 56
    empty_statement                shift and go to state 58
    block                          shift and go to state 61
    if_then_else_statement         shift and go to state 62

state 261

    (123) if_then_statement -> KWRD_IF LPAREN . expression RPAREN statement
    (124) if_then_else_statement -> KWRD_IF LPAREN . expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (125) if_then_else_statement_precedence -> KWRD_IF LPAREN . expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
    (8) expression -> . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 43
    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    unary_expression               shift and go to state 91
    exclusive_or_expression        shift and go to state 92
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    array_access                   shift and go to state 32
    additive_expression            shift and go to state 117
    simple_name                    shift and go to state 30
    valid_variable                 shift and go to state 99
    inclusive_or_expression        shift and go to state 100
    literal                        shift and go to state 101
    and_expression                 shift and go to state 104
    relational_expression          shift and go to state 108
    method_invocation              shift and go to state 105
    conditional_or_expression      shift and go to state 106
    assignment_expression          shift and go to state 111
    qualified_name                 shift and go to state 34
    assignment                     shift and go to state 113
    multiplicative_expression      shift and go to state 114
    shift_expression               shift and go to state 119
    equality_expression            shift and go to state 120
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 123
    expression                     shift and go to state 270
    conditional_and_expression     shift and go to state 124

state 262

    (165) array_data_type -> KWRD_ARRAY LBPAREN type . RBPAREN

    RBPAREN         shift and go to state 271


state 263

    (129) do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .

    KWRD_IF         reduce using rule 129 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_WHILE      reduce using rule 129 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_DO         reduce using rule 129 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_OBJECT     reduce using rule 129 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    BLOCK_BEGIN     reduce using rule 129 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    STATE_END       reduce using rule 129 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_RETURN     reduce using rule 129 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_PROTECTED  reduce using rule 129 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_PRIVATE    reduce using rule 129 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    IDENTIFIER      reduce using rule 129 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_DEF        reduce using rule 129 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_CLASS      reduce using rule 129 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_VAR        reduce using rule 129 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_VAL        reduce using rule 129 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    BLOCK_END       reduce using rule 129 (do_while_statement -> KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END .)


state 264

    (148) method_header -> method_header_name LPAREN func_arguement_list_opt RPAREN COLON method_return_type ASSIGN .

    BLOCK_BEGIN     reduce using rule 148 (method_header -> method_header_name LPAREN func_arguement_list_opt RPAREN COLON method_return_type ASSIGN .)


state 265

    (167) array_initializer -> KWRD_ARRAY LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 272


state 266

    (168) class_initializer -> KWRD_NEW name LPAREN . argument_list_opt RPAREN
    (72) argument_list_opt -> . argument_list
    (73) argument_list_opt -> . empty
    (74) argument_list -> . expression
    (75) argument_list -> . argument_list COMMA expression
    (170) empty -> .
    (8) expression -> . assignment_expression
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    RPAREN          reduce using rule 170 (empty -> .)
    IDENTIFIER      shift and go to state 43
    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    and_expression                 shift and go to state 104
    exclusive_or_expression        shift and go to state 92
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    array_access                   shift and go to state 32
    additive_expression            shift and go to state 117
    simple_name                    shift and go to state 30
    unary_expression               shift and go to state 91
    valid_variable                 shift and go to state 99
    inclusive_or_expression        shift and go to state 100
    literal                        shift and go to state 101
    relational_expression          shift and go to state 108
    method_invocation              shift and go to state 105
    conditional_or_expression      shift and go to state 106
    empty                          shift and go to state 182
    argument_list                  shift and go to state 181
    assignment_expression          shift and go to state 111
    qualified_name                 shift and go to state 34
    assignment                     shift and go to state 113
    multiplicative_expression      shift and go to state 114
    shift_expression               shift and go to state 119
    equality_expression            shift and go to state 120
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 123
    argument_list_opt              shift and go to state 273
    expression                     shift and go to state 184
    conditional_and_expression     shift and go to state 124

state 267

    (166) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN . type RBPAREN LPAREN INT_CONST RPAREN
    (155) type -> . primitive_type
    (156) type -> . reference_type
    (157) primitive_type -> . TYPE_INT
    (158) primitive_type -> . TYPE_FLOAT
    (159) primitive_type -> . TYPE_CHAR
    (160) primitive_type -> . TYPE_STRING
    (161) primitive_type -> . TYPE_BOOLEAN
    (162) reference_type -> . class_data_type
    (163) reference_type -> . array_data_type
    (164) class_data_type -> . name
    (165) array_data_type -> . KWRD_ARRAY LBPAREN type RBPAREN
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name

    TYPE_INT        shift and go to state 220
    TYPE_FLOAT      shift and go to state 230
    TYPE_CHAR       shift and go to state 227
    TYPE_STRING     shift and go to state 221
    TYPE_BOOLEAN    shift and go to state 223
    KWRD_ARRAY      shift and go to state 228
    IDENTIFIER      shift and go to state 43

    name                           shift and go to state 222
    qualified_name                 shift and go to state 34
    reference_type                 shift and go to state 224
    primitive_type                 shift and go to state 225
    class_data_type                shift and go to state 226
    type                           shift and go to state 274
    array_data_type                shift and go to state 231
    simple_name                    shift and go to state 30

state 268

    (106) variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN . variable_arguement_list RPAREN
    (103) variable_arguement_list -> . variable_declaration_initializer
    (104) variable_arguement_list -> . variable_arguement_list COMMA variable_declaration_initializer
    (100) variable_declaration_initializer -> . expression
    (101) variable_declaration_initializer -> . array_initializer
    (102) variable_declaration_initializer -> . class_initializer
    (8) expression -> . assignment_expression
    (166) array_initializer -> . KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN
    (167) array_initializer -> . KWRD_ARRAY LPAREN argument_list_opt RPAREN
    (168) class_initializer -> . KWRD_NEW name LPAREN argument_list_opt RPAREN
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    KWRD_NEW        shift and go to state 240
    KWRD_ARRAY      shift and go to state 239
    IDENTIFIER      shift and go to state 43
    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    variable_declaration_initializer shift and go to state 275
    unary_expression               shift and go to state 91
    exclusive_or_expression        shift and go to state 92
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    variable_arguement_list        shift and go to state 276
    array_access                   shift and go to state 32
    and_expression                 shift and go to state 104
    simple_name                    shift and go to state 30
    valid_variable                 shift and go to state 99
    inclusive_or_expression        shift and go to state 100
    literal                        shift and go to state 101
    relational_expression          shift and go to state 108
    method_invocation              shift and go to state 105
    conditional_or_expression      shift and go to state 106
    assignment_expression          shift and go to state 111
    qualified_name                 shift and go to state 34
    assignment                     shift and go to state 113
    multiplicative_expression      shift and go to state 114
    additive_expression            shift and go to state 117
    class_initializer              shift and go to state 241
    shift_expression               shift and go to state 119
    equality_expression            shift and go to state 120
    array_initializer              shift and go to state 242
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 123
    expression                     shift and go to state 243
    conditional_and_expression     shift and go to state 124

state 269

    (124) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .

    KWRD_WHILE      reduce using rule 124 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_IF         reduce using rule 124 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_DO         reduce using rule 124 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_OBJECT     reduce using rule 124 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    BLOCK_BEGIN     reduce using rule 124 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    STATE_END       reduce using rule 124 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_RETURN     reduce using rule 124 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_PROTECTED  reduce using rule 124 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_PRIVATE    reduce using rule 124 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    IDENTIFIER      reduce using rule 124 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_DEF        reduce using rule 124 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_CLASS      reduce using rule 124 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_VAR        reduce using rule 124 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    KWRD_VAL        reduce using rule 124 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)
    BLOCK_END       reduce using rule 124 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement .)


state 270

    (123) if_then_statement -> KWRD_IF LPAREN expression . RPAREN statement
    (124) if_then_else_statement -> KWRD_IF LPAREN expression . RPAREN if_then_else_intermediate KWRD_ELSE statement
    (125) if_then_else_statement_precedence -> KWRD_IF LPAREN expression . RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate

    RPAREN          shift and go to state 277


state 271

    (165) array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN .

    COMMA           reduce using rule 165 (array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN .)
    RPAREN          reduce using rule 165 (array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN .)
    ASSIGN          reduce using rule 165 (array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN .)
    RBPAREN         reduce using rule 165 (array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN .)


state 272

    (167) array_initializer -> KWRD_ARRAY LPAREN argument_list_opt RPAREN .

    RPAREN          reduce using rule 167 (array_initializer -> KWRD_ARRAY LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 167 (array_initializer -> KWRD_ARRAY LPAREN argument_list_opt RPAREN .)
    STATE_END       reduce using rule 167 (array_initializer -> KWRD_ARRAY LPAREN argument_list_opt RPAREN .)


state 273

    (168) class_initializer -> KWRD_NEW name LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 278


state 274

    (166) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type . RBPAREN LPAREN INT_CONST RPAREN

    RBPAREN         shift and go to state 279


state 275

    (103) variable_arguement_list -> variable_declaration_initializer .

    RPAREN          reduce using rule 103 (variable_arguement_list -> variable_declaration_initializer .)
    COMMA           reduce using rule 103 (variable_arguement_list -> variable_declaration_initializer .)


state 276

    (106) variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list . RPAREN
    (104) variable_arguement_list -> variable_arguement_list . COMMA variable_declaration_initializer

    RPAREN          shift and go to state 280
    COMMA           shift and go to state 281


state 277

    (123) if_then_statement -> KWRD_IF LPAREN expression RPAREN . statement
    (124) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN . if_then_else_intermediate KWRD_ELSE statement
    (125) if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN . if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
    (111) statement -> . normal_statement
    (112) statement -> . if_then_statement
    (113) statement -> . if_then_else_statement
    (114) statement -> . while_statement
    (115) statement -> . do_while_statement
    (126) if_then_else_intermediate -> . normal_statement
    (127) if_then_else_intermediate -> . if_then_else_statement_precedence
    (116) normal_statement -> . block
    (117) normal_statement -> . expression_statement
    (118) normal_statement -> . empty_statement
    (119) normal_statement -> . return_statement
    (123) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (124) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (128) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (129) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (125) if_then_else_statement_precedence -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
    (84) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (120) expression_statement -> . statement_expression STATE_END
    (130) empty_statement -> . STATE_END
    (131) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (121) statement_expression -> . assignment
    (122) statement_expression -> . method_invocation
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name

    KWRD_IF         shift and go to state 249
    KWRD_WHILE      shift and go to state 44
    KWRD_DO         shift and go to state 50
    BLOCK_BEGIN     shift and go to state 15
    STATE_END       shift and go to state 27
    KWRD_RETURN     shift and go to state 53
    IDENTIFIER      shift and go to state 43

    expression_statement           shift and go to state 28
    if_then_else_statement_precedence shift and go to state 245
    normal_statement               shift and go to state 246
    if_then_else_intermediate      shift and go to state 282
    if_then_statement              shift and go to state 31
    array_access                   shift and go to state 32
    qualified_name                 shift and go to state 34
    valid_variable                 shift and go to state 35
    return_statement               shift and go to state 38
    while_statement                shift and go to state 39
    statement                      shift and go to state 248
    statement_expression           shift and go to state 42
    method_invocation              shift and go to state 41
    simple_name                    shift and go to state 30
    do_while_statement             shift and go to state 48
    assignment                     shift and go to state 49
    name                           shift and go to state 56
    empty_statement                shift and go to state 58
    block                          shift and go to state 61
    if_then_else_statement         shift and go to state 62

state 278

    (168) class_initializer -> KWRD_NEW name LPAREN argument_list_opt RPAREN .

    RPAREN          reduce using rule 168 (class_initializer -> KWRD_NEW name LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 168 (class_initializer -> KWRD_NEW name LPAREN argument_list_opt RPAREN .)
    STATE_END       reduce using rule 168 (class_initializer -> KWRD_NEW name LPAREN argument_list_opt RPAREN .)


state 279

    (166) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN . LPAREN INT_CONST RPAREN

    LPAREN          shift and go to state 283


state 280

    (106) variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list RPAREN .

    STATE_END       reduce using rule 106 (variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list RPAREN .)


state 281

    (104) variable_arguement_list -> variable_arguement_list COMMA . variable_declaration_initializer
    (100) variable_declaration_initializer -> . expression
    (101) variable_declaration_initializer -> . array_initializer
    (102) variable_declaration_initializer -> . class_initializer
    (8) expression -> . assignment_expression
    (166) array_initializer -> . KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN
    (167) array_initializer -> . KWRD_ARRAY LPAREN argument_list_opt RPAREN
    (168) class_initializer -> . KWRD_NEW name LPAREN argument_list_opt RPAREN
    (11) assignment_expression -> . assignment
    (12) assignment_expression -> . conditional_or_expression
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (27) conditional_and_expression -> . inclusive_or_expression
    (28) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (29) inclusive_or_expression -> . exclusive_or_expression
    (30) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name
    (31) exclusive_or_expression -> . and_expression
    (32) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (33) and_expression -> . equality_expression
    (34) and_expression -> . and_expression AND_BITWISE equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQUAL relational_expression
    (37) equality_expression -> . equality_expression NEQUAL relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression GREATER shift_expression
    (40) relational_expression -> . relational_expression LESS shift_expression
    (41) relational_expression -> . relational_expression GEQ shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) multiplicative_expression -> . unary_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (52) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (53) unary_expression -> . PLUS unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . unary_expression_not_plus_minus
    (56) unary_expression_not_plus_minus -> . variable_literal
    (57) unary_expression_not_plus_minus -> . TILDA unary_expression
    (58) unary_expression_not_plus_minus -> . NOT unary_expression
    (59) unary_expression_not_plus_minus -> . LPAREN expression RPAREN
    (82) variable_literal -> . valid_variable
    (83) variable_literal -> . primary
    (60) primary -> . literal
    (61) primary -> . method_invocation
    (62) literal -> . int_float
    (63) literal -> . CHARACTER
    (64) literal -> . STRING_CONST
    (65) literal -> . BOOL_CONSTT
    (66) literal -> . BOOL_CONSTF
    (67) literal -> . KWRD_NULL
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (68) int_float -> . FLOAT_CONST
    (69) int_float -> . INT_CONST

    KWRD_NEW        shift and go to state 240
    KWRD_ARRAY      shift and go to state 239
    IDENTIFIER      shift and go to state 43
    PLUS            shift and go to state 103
    MINUS           shift and go to state 96
    TILDA           shift and go to state 102
    NOT             shift and go to state 125
    LPAREN          shift and go to state 118
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 110
    BOOL_CONSTT     shift and go to state 97
    BOOL_CONSTF     shift and go to state 112
    KWRD_NULL       shift and go to state 109
    FLOAT_CONST     shift and go to state 95
    INT_CONST       shift and go to state 115

    variable_declaration_initializer shift and go to state 284
    unary_expression               shift and go to state 91
    exclusive_or_expression        shift and go to state 92
    primary                        shift and go to state 116
    unary_expression_not_plus_minus shift and go to state 94
    array_access                   shift and go to state 32
    and_expression                 shift and go to state 104
    simple_name                    shift and go to state 30
    valid_variable                 shift and go to state 99
    inclusive_or_expression        shift and go to state 100
    literal                        shift and go to state 101
    relational_expression          shift and go to state 108
    method_invocation              shift and go to state 105
    conditional_or_expression      shift and go to state 106
    assignment_expression          shift and go to state 111
    qualified_name                 shift and go to state 34
    assignment                     shift and go to state 113
    multiplicative_expression      shift and go to state 114
    additive_expression            shift and go to state 117
    class_initializer              shift and go to state 241
    shift_expression               shift and go to state 119
    equality_expression            shift and go to state 120
    array_initializer              shift and go to state 242
    int_float                      shift and go to state 121
    variable_literal               shift and go to state 122
    name                           shift and go to state 123
    expression                     shift and go to state 243
    conditional_and_expression     shift and go to state 124

state 282

    (124) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate . KWRD_ELSE statement
    (125) if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate . KWRD_ELSE if_then_else_intermediate

    KWRD_ELSE       shift and go to state 285


state 283

    (166) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN . INT_CONST RPAREN

    INT_CONST       shift and go to state 286


state 284

    (104) variable_arguement_list -> variable_arguement_list COMMA variable_declaration_initializer .

    RPAREN          reduce using rule 104 (variable_arguement_list -> variable_arguement_list COMMA variable_declaration_initializer .)
    COMMA           reduce using rule 104 (variable_arguement_list -> variable_arguement_list COMMA variable_declaration_initializer .)


state 285

    (124) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE . statement
    (125) if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE . if_then_else_intermediate
    (111) statement -> . normal_statement
    (112) statement -> . if_then_statement
    (113) statement -> . if_then_else_statement
    (114) statement -> . while_statement
    (115) statement -> . do_while_statement
    (126) if_then_else_intermediate -> . normal_statement
    (127) if_then_else_intermediate -> . if_then_else_statement_precedence
    (116) normal_statement -> . block
    (117) normal_statement -> . expression_statement
    (118) normal_statement -> . empty_statement
    (119) normal_statement -> . return_statement
    (123) if_then_statement -> . KWRD_IF LPAREN expression RPAREN statement
    (124) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE statement
    (128) while_statement -> . KWRD_WHILE LPAREN expression RPAREN statement
    (129) do_while_statement -> . KWRD_DO statement KWRD_WHILE LPAREN expression RPAREN STATE_END
    (125) if_then_else_statement_precedence -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
    (84) block -> . BLOCK_BEGIN block_statements_opt BLOCK_END
    (120) expression_statement -> . statement_expression STATE_END
    (130) empty_statement -> . STATE_END
    (131) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (121) statement_expression -> . assignment
    (122) statement_expression -> . method_invocation
    (13) assignment -> . valid_variable assignment_operator assignment_expression
    (70) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (80) valid_variable -> . name
    (81) valid_variable -> . array_access
    (76) name -> . simple_name
    (77) name -> . qualified_name
    (71) array_access -> . name LBPAREN expression RBPAREN
    (78) simple_name -> . IDENTIFIER
    (79) qualified_name -> . name DOT simple_name

    KWRD_IF         shift and go to state 249
    KWRD_WHILE      shift and go to state 44
    KWRD_DO         shift and go to state 50
    BLOCK_BEGIN     shift and go to state 15
    STATE_END       shift and go to state 27
    KWRD_RETURN     shift and go to state 53
    IDENTIFIER      shift and go to state 43

    expression_statement           shift and go to state 28
    if_then_else_statement_precedence shift and go to state 245
    normal_statement               shift and go to state 246
    if_then_else_intermediate      shift and go to state 287
    if_then_statement              shift and go to state 31
    array_access                   shift and go to state 32
    qualified_name                 shift and go to state 34
    valid_variable                 shift and go to state 35
    return_statement               shift and go to state 38
    while_statement                shift and go to state 39
    statement                      shift and go to state 269
    statement_expression           shift and go to state 42
    method_invocation              shift and go to state 41
    simple_name                    shift and go to state 30
    do_while_statement             shift and go to state 48
    assignment                     shift and go to state 49
    name                           shift and go to state 56
    empty_statement                shift and go to state 58
    block                          shift and go to state 61
    if_then_else_statement         shift and go to state 62

state 286

    (166) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST . RPAREN

    RPAREN          shift and go to state 288


state 287

    (125) if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate .

    KWRD_ELSE       reduce using rule 125 (if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate .)


state 288

    (166) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN .

    RPAREN          reduce using rule 166 (array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN .)
    COMMA           reduce using rule 166 (array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN .)
    STATE_END       reduce using rule 166 (array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN .)

