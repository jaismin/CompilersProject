package examples 	// KWRD_PACKAGE IDENTIFIER 

/** Quick sort, imperative style */
object sort { 	// KWRD_OBJECT IDENTIFIER BLOCK_BEGIN 

  /** Nested methods can use and even update everything 
   *  visible in their scope (including local variables or 
   *  arguments of enclosing methods). 
   */
  def sort(a: Array[Int]) { 	// KWRD_DEF IDENTIFIER LPAREN IDENTIFIER COLON KWRD_ARRAY LBPAREN TYPE_INT RBPAREN RPAREN BLOCK_BEGIN 

    def swap(i: Int, j: Int) { 	// KWRD_DEF IDENTIFIER LPAREN IDENTIFIER COLON TYPE_INT COMMA IDENTIFIER COLON TYPE_INT RPAREN BLOCK_BEGIN 
      val t = a(i); a(i) = a(j); a(j) = t 	// KWRD_VAL IDENTIFIER ASSIGN IDENTIFIER LPAREN IDENTIFIER RPAREN STATE_END IDENTIFIER LPAREN IDENTIFIER RPAREN ASSIGN IDENTIFIER LPAREN IDENTIFIER RPAREN STATE_END IDENTIFIER LPAREN IDENTIFIER RPAREN ASSIGN IDENTIFIER 
    } 	// BLOCK_END 

    def sort1(l: Int, r: Int) { 	// KWRD_DEF IDENTIFIER LPAREN IDENTIFIER COLON TYPE_INT COMMA IDENTIFIER COLON TYPE_INT RPAREN BLOCK_BEGIN 
      val pivot = a((l + r) / 2) 	// KWRD_VAL IDENTIFIER ASSIGN IDENTIFIER LPAREN LPAREN IDENTIFIER PLUS IDENTIFIER RPAREN DIVIDE INT_CONST RPAREN 
      var i = l 	// KWRD_VAR IDENTIFIER ASSIGN IDENTIFIER 
      var j = r 	// KWRD_VAR IDENTIFIER ASSIGN IDENTIFIER 
      while (i <= j) { 	// KWRD_WHILE LPAREN IDENTIFIER LEQ IDENTIFIER RPAREN BLOCK_BEGIN 
        while (a(i) < pivot) i += 1 	// KWRD_WHILE LPAREN IDENTIFIER LPAREN IDENTIFIER RPAREN LESS IDENTIFIER RPAREN IDENTIFIER PLUS ASSIGN INT_CONST 
        while (a(j) > pivot) j -= 1 	// KWRD_WHILE LPAREN IDENTIFIER LPAREN IDENTIFIER RPAREN GREATER IDENTIFIER RPAREN IDENTIFIER MINUS ASSIGN INT_CONST 
        if (i <= j) { 	// KWRD_IF LPAREN IDENTIFIER LEQ IDENTIFIER RPAREN BLOCK_BEGIN 
          swap(i, j) 	// IDENTIFIER LPAREN IDENTIFIER COMMA IDENTIFIER RPAREN 
          i += 1 	// IDENTIFIER PLUS ASSIGN INT_CONST 
          j -= 1 	// IDENTIFIER MINUS ASSIGN INT_CONST 
        } 	// BLOCK_END 
      } 	// BLOCK_END 
      if (l < j) sort1(l, j) 	// KWRD_IF LPAREN IDENTIFIER LESS IDENTIFIER RPAREN IDENTIFIER LPAREN IDENTIFIER COMMA IDENTIFIER RPAREN 
      if (j < r) sort1(i, r) 	// KWRD_IF LPAREN IDENTIFIER LESS IDENTIFIER RPAREN IDENTIFIER LPAREN IDENTIFIER COMMA IDENTIFIER RPAREN 
    } 	// BLOCK_END 

    if (a.length > 0) 	// KWRD_IF LPAREN IDENTIFIER DOT IDENTIFIER GREATER INT_CONST RPAREN 
      sort1(0, a.length - 1) 	// IDENTIFIER LPAREN INT_CONST COMMA IDENTIFIER DOT IDENTIFIER MINUS INT_CONST RPAREN 
  } 	// BLOCK_END 

  def println(ar: Array[Int]) { 	// KWRD_DEF IDENTIFIER LPAREN IDENTIFIER COLON KWRD_ARRAY LBPAREN TYPE_INT RBPAREN RPAREN BLOCK_BEGIN 
    def print1 = { 	// KWRD_DEF IDENTIFIER ASSIGN BLOCK_BEGIN 
      def iter(i: Int): String = 	// KWRD_DEF IDENTIFIER LPAREN IDENTIFIER COLON TYPE_INT RPAREN COLON TYPE_STRING ASSIGN 
        ar(i) + (if (i < ar.length-1) "," + iter(i+1) else "") 	// IDENTIFIER LPAREN IDENTIFIER RPAREN PLUS LPAREN KWRD_IF LPAREN IDENTIFIER LESS IDENTIFIER DOT IDENTIFIER MINUS INT_CONST RPAREN STRING_CONST PLUS IDENTIFIER LPAREN IDENTIFIER PLUS INT_CONST RPAREN KWRD_ELSE STRING_CONST RPAREN 
      if (ar.length == 0) "" else iter(0) 	// KWRD_IF LPAREN IDENTIFIER DOT IDENTIFIER EQUAL INT_CONST RPAREN STRING_CONST KWRD_ELSE IDENTIFIER LPAREN INT_CONST RPAREN 
    } 	// BLOCK_END 
    Console.println("[" + print1 + "]") 	// IDENTIFIER DOT IDENTIFIER LPAREN STRING_CONST PLUS IDENTIFIER PLUS STRING_CONST RPAREN 
  } 	// BLOCK_END 

  def main(args: Array[String]) { 	// KWRD_DEF IDENTIFIER LPAREN IDENTIFIER COLON KWRD_ARRAY LBPAREN TYPE_STRING RBPAREN RPAREN BLOCK_BEGIN 
    val ar = Array(6, 2, 8, 5, 1) 	// KWRD_VAL IDENTIFIER ASSIGN KWRD_ARRAY LPAREN INT_CONST COMMA INT_CONST COMMA INT_CONST COMMA INT_CONST COMMA INT_CONST RPAREN 
    println(ar) 	// IDENTIFIER LPAREN IDENTIFIER RPAREN 
    sort(ar) 	// IDENTIFIER LPAREN IDENTIFIER RPAREN 
    println(ar) 	// IDENTIFIER LPAREN IDENTIFIER RPAREN 
  } 	// BLOCK_END 

} 	// BLOCK_END
