Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    KWRD_TYPE
    LOWER_BOUND
    KWRD_LAZY
    VIEWABLE
    KWRD_THIS
    KWRD_WITH
    KWRD_FORSOME
    KWRD_TRY
    NIL
    KWRD_SUPER
    KWRD_TO
    KWRD_PACKAGE
    EXACTEQ
    KWRD_ABST
    KWRD_FOREACH
    KWRD_STATIC
    UNDER
    UPPER_BOUND
    VIEW
    INNER_CLASS
    KWRD_THROW
    KWRD_MACRO
    KWRD_PUBLIC
    KWRD_FINAL
    COMM
    KWRD_IMPLICIT
    KWRD_SEALED
    KWRD_FINALLY
    SUBTYPE
    QUESTION
    KWRD_IMPORT
    KWRD_YIELD
    KWRD_OVERRIDE
    newline
    AT
    KWRD_TRAIT
    KWRD_CATCH

Grammar

Rule 0     S' -> start_here
Rule 1     start_here -> ProgramStructure end_here
Rule 2     end_here -> empty
Rule 3     ProgramStructure -> ProgramStructure class_and_objects
Rule 4     ProgramStructure -> class_and_objects
Rule 5     class_and_objects -> SingletonObject
Rule 6     class_and_objects -> class_declaration
Rule 7     SingletonObject -> ObjectDeclare block
Rule 8     ObjectDeclare -> KWRD_OBJECT IDENTIFIER
Rule 9     ObjectDeclare -> KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
Rule 10    expression -> assignment_expression
Rule 11    expression_optional -> expression
Rule 12    expression_optional -> empty
Rule 13    assignment_expression -> assignment
Rule 14    assignment_expression -> conditional_or_expression
Rule 15    assignment -> valid_variable assignment_operator assignment_expression
Rule 16    assignment_operator -> ASSIGN
Rule 17    assignment_operator -> TIMES_ASSIGN
Rule 18    assignment_operator -> DIVIDE_ASSIGN
Rule 19    assignment_operator -> REMAINDER_ASSIGN
Rule 20    assignment_operator -> PLUS_ASSIGN
Rule 21    assignment_operator -> MINUS_ASSIGN
Rule 22    assignment_operator -> LSHIFT_ASSIGN
Rule 23    assignment_operator -> RSHIFT_ASSIGN
Rule 24    assignment_operator -> AND_ASSIGN
Rule 25    assignment_operator -> OR_ASSIGN
Rule 26    assignment_operator -> XOR_ASSIGN
Rule 27    Marker -> empty
Rule 28    conditional_or_expression -> conditional_and_expression
Rule 29    conditional_or_expression -> conditional_or_expression OR Marker conditional_and_expression
Rule 30    conditional_and_expression -> inclusive_or_expression
Rule 31    conditional_and_expression -> conditional_and_expression AND Marker inclusive_or_expression
Rule 32    inclusive_or_expression -> exclusive_or_expression
Rule 33    inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression
Rule 34    exclusive_or_expression -> and_expression
Rule 35    exclusive_or_expression -> exclusive_or_expression XOR and_expression
Rule 36    and_expression -> equality_expression
Rule 37    and_expression -> and_expression AND_BITWISE equality_expression
Rule 38    equality_expression -> relational_expression
Rule 39    equality_expression -> equality_expression EQUAL relational_expression
Rule 40    equality_expression -> equality_expression NEQUAL relational_expression
Rule 41    relational_expression -> shift_expression
Rule 42    relational_expression -> relational_expression GREATER shift_expression
Rule 43    relational_expression -> relational_expression LESS shift_expression
Rule 44    relational_expression -> relational_expression GEQ shift_expression
Rule 45    relational_expression -> relational_expression LEQ shift_expression
Rule 46    shift_expression -> additive_expression
Rule 47    shift_expression -> shift_expression LSHIFT additive_expression
Rule 48    shift_expression -> shift_expression RSHIFT additive_expression
Rule 49    additive_expression -> multiplicative_expression
Rule 50    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 51    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 52    multiplicative_expression -> unary_expression
Rule 53    multiplicative_expression -> multiplicative_expression TIMES unary_expression
Rule 54    multiplicative_expression -> multiplicative_expression DIVIDE unary_expression
Rule 55    multiplicative_expression -> multiplicative_expression REMAINDER unary_expression
Rule 56    unary_expression -> PLUS unary_expression
Rule 57    unary_expression -> MINUS unary_expression
Rule 58    unary_expression -> unary_expression_not_plus_minus
Rule 59    unary_expression_not_plus_minus -> base_variable_set
Rule 60    unary_expression_not_plus_minus -> NOT unary_expression
Rule 61    unary_expression_not_plus_minus -> cast_expression
Rule 62    unary_expression_not_plus_minus -> TILDA unary_expression
Rule 63    base_variable_set -> variable_literal
Rule 64    base_variable_set -> LPAREN expression RPAREN
Rule 65    cast_expression -> LPAREN primitive_type RPAREN unary_expression
Rule 66    primary -> literal
Rule 67    primary -> method_invocation
Rule 68    literal -> int_float
Rule 69    literal -> CHARACTER
Rule 70    literal -> STRING_CONST
Rule 71    literal -> BOOL_CONSTT
Rule 72    literal -> BOOL_CONSTF
Rule 73    literal -> KWRD_NULL
Rule 74    int_float -> FLOAT_CONST
Rule 75    int_float -> INT_CONST
Rule 76    method_invocation -> name LPAREN argument_list_opt RPAREN
Rule 77    array_access -> name LBPAREN expression RBPAREN
Rule 78    argument_list_opt -> argument_list
Rule 79    argument_list_opt -> empty
Rule 80    argument_list -> expression
Rule 81    argument_list -> argument_list COMMA expression
Rule 82    name -> simple_name
Rule 83    name -> qualified_name
Rule 84    simple_name -> IDENTIFIER
Rule 85    qualified_name -> name DOT simple_name
Rule 86    valid_variable -> name
Rule 87    valid_variable -> array_access
Rule 88    variable_literal -> valid_variable
Rule 89    variable_literal -> primary
Rule 90    block -> start_scope block_statements_opt end_scope
Rule 91    start_scope -> BLOCK_BEGIN
Rule 92    end_scope -> BLOCK_END
Rule 93    block_statements_opt -> block_statements
Rule 94    block_statements_opt -> empty
Rule 95    block_statements -> block_statement
Rule 96    block_statements -> block_statements block_statement
Rule 97    block_statement -> local_variable_declaration_statement
Rule 98    block_statement -> statement
Rule 99    block_statement -> class_declaration
Rule 100   block_statement -> SingletonObject
Rule 101   block_statement -> method_declaration
Rule 102   modifier_opts -> modifier
Rule 103   modifier_opts -> empty
Rule 104   declaration_keyword -> KWRD_VAR
Rule 105   declaration_keyword -> KWRD_VAL
Rule 106   local_variable_declaration_statement -> local_variable_declaration STATE_END
Rule 107   local_variable_declaration -> modifier_opts declaration_keyword variable_declaration_body
Rule 108   variable_declaration_initializer -> expression
Rule 109   variable_declaration_initializer -> array_initializer
Rule 110   variable_declaration_initializer -> class_initializer
Rule 111   variable_arguement_list -> variable_declaration_initializer
Rule 112   variable_arguement_list -> variable_arguement_list COMMA variable_declaration_initializer
Rule 113   variable_declaration_body -> variable_declarator ASSIGN variable_declaration_initializer
Rule 114   variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list RPAREN
Rule 115   variable_declaration_body -> IDENTIFIER ASSIGN LPAREN func_arguement_list_opt RPAREN FUNTYPE expression
Rule 116   variable_declarators -> variable_declarator
Rule 117   variable_declarators -> variable_declarators COMMA variable_declarator
Rule 118   variable_declarator -> variable_declarator_id
Rule 119   variable_declarator_id -> IDENTIFIER COLON type
Rule 120   statement -> normal_statement
Rule 121   statement -> if_else_statement
Rule 122   statement -> while_statement
Rule 123   statement -> do_while_statement
Rule 124   statement -> for_statement
Rule 125   normal_statement -> block
Rule 126   normal_statement -> expression_statement
Rule 127   normal_statement -> empty_statement
Rule 128   normal_statement -> return_statement
Rule 129   normal_statement -> switch_statement
Rule 130   expression_statement -> statement_expression STATE_END
Rule 131   statement_expression -> assignment
Rule 132   statement_expression -> method_invocation
Rule 133   start_scope_if -> BLOCK_BEGIN
Rule 134   end_scope_if -> BLOCK_END
Rule 135   MarkIfStart -> empty
Rule 136   MarkIfEnd -> empty
Rule 137   if_else_block -> start_scope_if block_statements_opt end_scope_if
Rule 138   if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd
Rule 139   if_else_begin -> if_else_starting if_else_ending
Rule 140   if_else_starting -> KWRD_IF LPAREN expression RPAREN
Rule 141   if_else_ending -> if_else_block
Rule 142   if_else_intermediate -> KWRD_ELSE if_else_end
Rule 143   if_else_intermediate -> empty
Rule 144   MarkBeforeElse -> empty
Rule 145   if_else_end -> MarkBeforeElse if_else_block
Rule 146   if_else_end -> if_else_begin if_else_intermediate
Rule 147   while_statement -> while_header while_body
Rule 148   while_header -> while_begin LPAREN expression RPAREN
Rule 149   while_body -> block
Rule 150   while_begin -> KWRD_WHILE
Rule 151   do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END
Rule 152   do_while_statement_begin -> KWRD_DO
Rule 153   for_statement -> KWRD_FOR LPAREN for_loop RPAREN block
Rule 154   for_loop -> IDENTIFIER CHOOSE expression KWRD_UNTIL expression for_step_opts
Rule 155   for_step_opts -> KWRD_BY expression
Rule 156   for_step_opts -> empty
Rule 157   switch_statement -> expression KWRD_MATCH switch_block
Rule 158   switch_block -> BLOCK_BEGIN BLOCK_END
Rule 159   switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END
Rule 160   switch_block -> BLOCK_BEGIN switch_labels BLOCK_END
Rule 161   switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END
Rule 162   switch_block_statements -> switch_block_statement
Rule 163   switch_block_statements -> switch_block_statements switch_block_statement
Rule 164   switch_block_statement -> switch_labels block_statements
Rule 165   switch_labels -> switch_label
Rule 166   switch_labels -> switch_labels switch_label
Rule 167   switch_label -> KWRD_CASE expression FUNTYPE
Rule 168   empty_statement -> STATE_END
Rule 169   return_statement -> KWRD_RETURN expression_optional STATE_END
Rule 170   constructor_arguement_list_opt -> constructor_arguement_list
Rule 171   constructor_arguement_list_opt -> empty
Rule 172   constructor_arguement_list -> constructor_arguement_list_declarator
Rule 173   constructor_arguement_list -> constructor_arguement_list COMMA constructor_arguement_list_declarator
Rule 174   constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER COLON type
Rule 175   func_arguement_list_opt -> variable_declarators
Rule 176   func_arguement_list_opt -> empty
Rule 177   class_declaration -> class_header class_body
Rule 178   class_header -> class_header_name class_header_extends_opt
Rule 179   class_header_name -> class_header_name1 func_args_start constructor_arguement_list_opt RPAREN
Rule 180   class_header_name1 -> modifier_opts KWRD_CLASS name
Rule 181   class_header_extends_opt -> class_header_extends
Rule 182   class_header_extends_opt -> empty
Rule 183   class_header_extends -> KWRD_EXTNDS name LPAREN func_arguement_list_opt RPAREN
Rule 184   class_body -> class_body_start block_statements_opt end_scope
Rule 185   class_body_start -> BLOCK_BEGIN
Rule 186   method_declaration -> method_header method_body
Rule 187   method_header -> method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
Rule 188   func_args_start -> LPAREN
Rule 189   method_return_type -> type
Rule 190   method_return_type -> TYPE_VOID
Rule 191   method_header_name -> modifier_opts KWRD_DEF IDENTIFIER
Rule 192   method_body -> method_start_scope block_statements_opt method_end_scope
Rule 193   method_start_scope -> BLOCK_BEGIN
Rule 194   method_end_scope -> BLOCK_END
Rule 195   modifier -> KWRD_PROTECTED
Rule 196   modifier -> KWRD_PRIVATE
Rule 197   type -> primitive_type
Rule 198   type -> reference_type
Rule 199   primitive_type -> TYPE_INT
Rule 200   primitive_type -> TYPE_FLOAT
Rule 201   primitive_type -> TYPE_CHAR
Rule 202   primitive_type -> TYPE_STRING
Rule 203   primitive_type -> TYPE_BOOLEAN
Rule 204   reference_type -> class_data_type
Rule 205   reference_type -> array_data_type
Rule 206   class_data_type -> name
Rule 207   array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN
Rule 208   array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN
Rule 209   array_initializer -> KWRD_ARRAY LPAREN argument_list_opt RPAREN
Rule 210   class_initializer -> KWRD_NEW name LPAREN argument_list_opt RPAREN
Rule 211   empty -> <empty>

Terminals, with rules where they appear

AND                  : 31
AND_ASSIGN           : 24
AND_BITWISE          : 37
ASSIGN               : 16 113 114 115 187
AT                   : 
BLOCK_BEGIN          : 91 133 158 159 160 161 185 193
BLOCK_END            : 92 134 158 159 160 161 194
BOOL_CONSTF          : 72
BOOL_CONSTT          : 71
CHARACTER            : 69
CHOOSE               : 154
COLON                : 119 174 187
COMM                 : 
COMMA                : 81 112 117 173
DIVIDE               : 54
DIVIDE_ASSIGN        : 18
DOT                  : 85
EQUAL                : 39
EXACTEQ              : 
FLOAT_CONST          : 74
FUNTYPE              : 115 167
GEQ                  : 44
GREATER              : 42
IDENTIFIER           : 8 9 9 84 115 119 154 174 191
INNER_CLASS          : 
INT_CONST            : 75 208
KWRD_ABST            : 
KWRD_ARRAY           : 207 208 209
KWRD_BY              : 155
KWRD_CASE            : 167
KWRD_CATCH           : 
KWRD_CLASS           : 180
KWRD_DEF             : 191
KWRD_DO              : 152
KWRD_ELSE            : 142
KWRD_EXTNDS          : 9 183
KWRD_FINAL           : 
KWRD_FINALLY         : 
KWRD_FOR             : 153
KWRD_FOREACH         : 
KWRD_FORSOME         : 
KWRD_IF              : 140
KWRD_IMPLICIT        : 
KWRD_IMPORT          : 
KWRD_LAZY            : 
KWRD_MACRO           : 
KWRD_MATCH           : 157
KWRD_NEW             : 208 210
KWRD_NULL            : 73
KWRD_OBJECT          : 8 9
KWRD_OVERRIDE        : 
KWRD_PACKAGE         : 
KWRD_PRIVATE         : 196
KWRD_PROTECTED       : 195
KWRD_PUBLIC          : 
KWRD_RETURN          : 169
KWRD_SEALED          : 
KWRD_STATIC          : 
KWRD_SUPER           : 
KWRD_THIS            : 
KWRD_THROW           : 
KWRD_TO              : 
KWRD_TRAIT           : 
KWRD_TRY             : 
KWRD_TYPE            : 
KWRD_UNTIL           : 154
KWRD_VAL             : 105
KWRD_VAR             : 104
KWRD_WHILE           : 150 151
KWRD_WITH            : 
KWRD_YIELD           : 
LBPAREN              : 77 207 208
LEQ                  : 45
LESS                 : 43
LOWER_BOUND          : 
LPAREN               : 64 65 76 114 114 115 140 148 151 153 183 188 208 209 210
LSHIFT               : 47
LSHIFT_ASSIGN        : 22
MINUS                : 51 57
MINUS_ASSIGN         : 21
NEQUAL               : 40
NIL                  : 
NOT                  : 60
OR                   : 29
OR_ASSIGN            : 25
OR_BITWISE           : 33
PLUS                 : 50 56
PLUS_ASSIGN          : 20
QUESTION             : 
RBPAREN              : 77 207 208
REMAINDER            : 55
REMAINDER_ASSIGN     : 19
RPAREN               : 64 65 76 114 114 115 140 148 151 153 179 183 187 208 209 210
RSHIFT               : 48
RSHIFT_ASSIGN        : 23
STATE_END            : 106 130 151 168 169
STRING_CONST         : 70
SUBTYPE              : 
TILDA                : 62
TIMES                : 53
TIMES_ASSIGN         : 17
TYPE_BOOLEAN         : 203
TYPE_CHAR            : 201
TYPE_FLOAT           : 200
TYPE_INT             : 199
TYPE_STRING          : 202
TYPE_VOID            : 190
UNDER                : 
UPPER_BOUND          : 
VIEW                 : 
VIEWABLE             : 
XOR                  : 35
XOR_ASSIGN           : 26
error                : 
newline              : 

Nonterminals, with rules where they appear

MarkBeforeElse       : 145
MarkIfEnd            : 138
MarkIfStart          : 138
Marker               : 29 31
ObjectDeclare        : 7
ProgramStructure     : 1 3
SingletonObject      : 5 100
additive_expression  : 46 47 48 50 51
and_expression       : 34 35 37
argument_list        : 78 81
argument_list_opt    : 76 209 210
array_access         : 87
array_data_type      : 205
array_initializer    : 109
assignment           : 13 131
assignment_expression : 10 15
assignment_operator  : 15
base_variable_set    : 59
block                : 7 125 149 151 153
block_statement      : 95 96
block_statements     : 93 96 164
block_statements_opt : 90 137 184 192
cast_expression      : 61
class_and_objects    : 3 4
class_body           : 177
class_body_start     : 184
class_data_type      : 204
class_declaration    : 6 99
class_header         : 177
class_header_extends : 181
class_header_extends_opt : 178
class_header_name    : 178
class_header_name1   : 179
class_initializer    : 110
conditional_and_expression : 28 29 31
conditional_or_expression : 14 29
constructor_arguement_list : 170 173
constructor_arguement_list_declarator : 172 173
constructor_arguement_list_opt : 179
declaration_keyword  : 107 174
do_while_statement   : 123
do_while_statement_begin : 151
empty                : 2 12 27 79 94 103 135 136 143 144 156 171 176 182
empty_statement      : 127
end_here             : 1
end_scope            : 90 184
end_scope_if         : 137
equality_expression  : 36 37 39 40
exclusive_or_expression : 32 33 35
expression           : 11 64 77 80 81 108 115 140 148 151 154 154 155 157 167
expression_optional  : 169
expression_statement : 126
for_loop             : 153
for_statement        : 124
for_step_opts        : 154
func_args_start      : 179 187
func_arguement_list_opt : 115 183 187
if_else_begin        : 138 146
if_else_block        : 141 145
if_else_end          : 142
if_else_ending       : 139
if_else_intermediate : 138 146
if_else_starting     : 139
if_else_statement    : 121
inclusive_or_expression : 30 31 33
int_float            : 68
literal              : 66
local_variable_declaration : 106
local_variable_declaration_statement : 97
method_body          : 186
method_declaration   : 101
method_end_scope     : 192
method_header        : 186
method_header_name   : 187
method_invocation    : 67 132
method_return_type   : 187
method_start_scope   : 192
modifier             : 102
modifier_opts        : 107 180 191
multiplicative_expression : 49 50 51 53 54 55
name                 : 76 77 85 86 180 183 206 210
normal_statement     : 120
primary              : 89
primitive_type       : 65 197
qualified_name       : 83
reference_type       : 198
relational_expression : 38 39 40 42 43 44 45
return_statement     : 128
shift_expression     : 41 42 43 44 45 47 48
simple_name          : 82 85
start_here           : 0
start_scope          : 90
start_scope_if       : 137
statement            : 98
statement_expression : 130
switch_block         : 157
switch_block_statement : 162 163
switch_block_statements : 159 161 163
switch_label         : 165 166
switch_labels        : 160 161 164 166
switch_statement     : 129
type                 : 119 174 189 207 208
unary_expression     : 52 53 54 55 56 57 60 62 65
unary_expression_not_plus_minus : 58
valid_variable       : 15 88
variable_arguement_list : 112 114
variable_declaration_body : 107
variable_declaration_initializer : 111 112 113
variable_declarator  : 113 116 117
variable_declarator_id : 118
variable_declarators : 114 117 175
variable_literal     : 63
while_begin          : 148
while_body           : 147
while_header         : 147
while_statement      : 122

Parsing method: LALR

state 0

    (0) S' -> . start_here
    (1) start_here -> . ProgramStructure end_here
    (3) ProgramStructure -> . ProgramStructure class_and_objects
    (4) ProgramStructure -> . class_and_objects
    (5) class_and_objects -> . SingletonObject
    (6) class_and_objects -> . class_declaration
    (7) SingletonObject -> . ObjectDeclare block
    (177) class_declaration -> . class_header class_body
    (8) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (9) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (178) class_header -> . class_header_name class_header_extends_opt
    (179) class_header_name -> . class_header_name1 func_args_start constructor_arguement_list_opt RPAREN
    (180) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (102) modifier_opts -> . modifier
    (103) modifier_opts -> . empty
    (195) modifier -> . KWRD_PROTECTED
    (196) modifier -> . KWRD_PRIVATE
    (211) empty -> .

    KWRD_OBJECT     shift and go to state 4
    KWRD_PROTECTED  shift and go to state 11
    KWRD_PRIVATE    shift and go to state 15
    KWRD_CLASS      reduce using rule 211 (empty -> .)

    class_header_name1             shift and go to state 2
    class_header_name              shift and go to state 3
    ProgramStructure               shift and go to state 6
    ObjectDeclare                  shift and go to state 1
    start_here                     shift and go to state 7
    class_declaration              shift and go to state 12
    class_and_objects              shift and go to state 13
    empty                          shift and go to state 5
    SingletonObject                shift and go to state 8
    modifier                       shift and go to state 14
    class_header                   shift and go to state 9
    modifier_opts                  shift and go to state 10

state 1

    (7) SingletonObject -> ObjectDeclare . block
    (90) block -> . start_scope block_statements_opt end_scope
    (91) start_scope -> . BLOCK_BEGIN

    BLOCK_BEGIN     shift and go to state 16

    start_scope                    shift and go to state 17
    block                          shift and go to state 18

state 2

    (179) class_header_name -> class_header_name1 . func_args_start constructor_arguement_list_opt RPAREN
    (188) func_args_start -> . LPAREN

    LPAREN          shift and go to state 20

    func_args_start                shift and go to state 19

state 3

    (178) class_header -> class_header_name . class_header_extends_opt
    (181) class_header_extends_opt -> . class_header_extends
    (182) class_header_extends_opt -> . empty
    (183) class_header_extends -> . KWRD_EXTNDS name LPAREN func_arguement_list_opt RPAREN
    (211) empty -> .

    KWRD_EXTNDS     shift and go to state 23
    BLOCK_BEGIN     reduce using rule 211 (empty -> .)

    class_header_extends           shift and go to state 21
    class_header_extends_opt       shift and go to state 22
    empty                          shift and go to state 24

state 4

    (8) ObjectDeclare -> KWRD_OBJECT . IDENTIFIER
    (9) ObjectDeclare -> KWRD_OBJECT . IDENTIFIER KWRD_EXTNDS IDENTIFIER

    IDENTIFIER      shift and go to state 25


state 5

    (103) modifier_opts -> empty .

    KWRD_CLASS      reduce using rule 103 (modifier_opts -> empty .)


state 6

    (1) start_here -> ProgramStructure . end_here
    (3) ProgramStructure -> ProgramStructure . class_and_objects
    (2) end_here -> . empty
    (5) class_and_objects -> . SingletonObject
    (6) class_and_objects -> . class_declaration
    (211) empty -> .
    (7) SingletonObject -> . ObjectDeclare block
    (177) class_declaration -> . class_header class_body
    (8) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (9) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (178) class_header -> . class_header_name class_header_extends_opt
    (179) class_header_name -> . class_header_name1 func_args_start constructor_arguement_list_opt RPAREN
    (180) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (102) modifier_opts -> . modifier
    (103) modifier_opts -> . empty
    (195) modifier -> . KWRD_PROTECTED
    (196) modifier -> . KWRD_PRIVATE

    $end            reduce using rule 211 (empty -> .)
    KWRD_CLASS      reduce using rule 211 (empty -> .)
    KWRD_OBJECT     shift and go to state 4
    KWRD_PROTECTED  shift and go to state 11
    KWRD_PRIVATE    shift and go to state 15

    class_header_name              shift and go to state 3
    ObjectDeclare                  shift and go to state 1
    class_header_name1             shift and go to state 2
    class_declaration              shift and go to state 12
    class_and_objects              shift and go to state 28
    SingletonObject                shift and go to state 8
    end_here                       shift and go to state 26
    modifier                       shift and go to state 14
    class_header                   shift and go to state 9
    modifier_opts                  shift and go to state 10
    empty                          shift and go to state 27

state 7

    (0) S' -> start_here .



state 8

    (5) class_and_objects -> SingletonObject .

    KWRD_OBJECT     reduce using rule 5 (class_and_objects -> SingletonObject .)
    KWRD_PROTECTED  reduce using rule 5 (class_and_objects -> SingletonObject .)
    KWRD_PRIVATE    reduce using rule 5 (class_and_objects -> SingletonObject .)
    KWRD_CLASS      reduce using rule 5 (class_and_objects -> SingletonObject .)
    $end            reduce using rule 5 (class_and_objects -> SingletonObject .)


state 9

    (177) class_declaration -> class_header . class_body
    (184) class_body -> . class_body_start block_statements_opt end_scope
    (185) class_body_start -> . BLOCK_BEGIN

    BLOCK_BEGIN     shift and go to state 31

    class_body_start               shift and go to state 29
    class_body                     shift and go to state 30

state 10

    (180) class_header_name1 -> modifier_opts . KWRD_CLASS name

    KWRD_CLASS      shift and go to state 32


state 11

    (195) modifier -> KWRD_PROTECTED .

    KWRD_DEF        reduce using rule 195 (modifier -> KWRD_PROTECTED .)
    KWRD_CLASS      reduce using rule 195 (modifier -> KWRD_PROTECTED .)
    KWRD_VAR        reduce using rule 195 (modifier -> KWRD_PROTECTED .)
    KWRD_VAL        reduce using rule 195 (modifier -> KWRD_PROTECTED .)


state 12

    (6) class_and_objects -> class_declaration .

    KWRD_OBJECT     reduce using rule 6 (class_and_objects -> class_declaration .)
    KWRD_PROTECTED  reduce using rule 6 (class_and_objects -> class_declaration .)
    KWRD_PRIVATE    reduce using rule 6 (class_and_objects -> class_declaration .)
    KWRD_CLASS      reduce using rule 6 (class_and_objects -> class_declaration .)
    $end            reduce using rule 6 (class_and_objects -> class_declaration .)


state 13

    (4) ProgramStructure -> class_and_objects .

    KWRD_OBJECT     reduce using rule 4 (ProgramStructure -> class_and_objects .)
    KWRD_PROTECTED  reduce using rule 4 (ProgramStructure -> class_and_objects .)
    KWRD_PRIVATE    reduce using rule 4 (ProgramStructure -> class_and_objects .)
    KWRD_CLASS      reduce using rule 4 (ProgramStructure -> class_and_objects .)
    $end            reduce using rule 4 (ProgramStructure -> class_and_objects .)


state 14

    (102) modifier_opts -> modifier .

    KWRD_DEF        reduce using rule 102 (modifier_opts -> modifier .)
    KWRD_CLASS      reduce using rule 102 (modifier_opts -> modifier .)
    KWRD_VAR        reduce using rule 102 (modifier_opts -> modifier .)
    KWRD_VAL        reduce using rule 102 (modifier_opts -> modifier .)


state 15

    (196) modifier -> KWRD_PRIVATE .

    KWRD_DEF        reduce using rule 196 (modifier -> KWRD_PRIVATE .)
    KWRD_CLASS      reduce using rule 196 (modifier -> KWRD_PRIVATE .)
    KWRD_VAR        reduce using rule 196 (modifier -> KWRD_PRIVATE .)
    KWRD_VAL        reduce using rule 196 (modifier -> KWRD_PRIVATE .)


state 16

    (91) start_scope -> BLOCK_BEGIN .

    KWRD_FOR        reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    KWRD_OBJECT     reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    STATE_END       reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    KWRD_RETURN     reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    KWRD_DO         reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    KWRD_PROTECTED  reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    KWRD_PRIVATE    reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    BLOCK_BEGIN     reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    KWRD_WHILE      reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    IDENTIFIER      reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    PLUS            reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    MINUS           reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    NOT             reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    TILDA           reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    LPAREN          reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    CHARACTER       reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    STRING_CONST    reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    BOOL_CONSTT     reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    BOOL_CONSTF     reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    KWRD_NULL       reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    FLOAT_CONST     reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    INT_CONST       reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    BLOCK_END       reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    KWRD_DEF        reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    KWRD_CLASS      reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    KWRD_VAR        reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    KWRD_VAL        reduce using rule 91 (start_scope -> BLOCK_BEGIN .)
    KWRD_IF         reduce using rule 91 (start_scope -> BLOCK_BEGIN .)


state 17

    (90) block -> start_scope . block_statements_opt end_scope
    (93) block_statements_opt -> . block_statements
    (94) block_statements_opt -> . empty
    (95) block_statements -> . block_statement
    (96) block_statements -> . block_statements block_statement
    (211) empty -> .
    (97) block_statement -> . local_variable_declaration_statement
    (98) block_statement -> . statement
    (99) block_statement -> . class_declaration
    (100) block_statement -> . SingletonObject
    (101) block_statement -> . method_declaration
    (106) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (120) statement -> . normal_statement
    (121) statement -> . if_else_statement
    (122) statement -> . while_statement
    (123) statement -> . do_while_statement
    (124) statement -> . for_statement
    (177) class_declaration -> . class_header class_body
    (7) SingletonObject -> . ObjectDeclare block
    (186) method_declaration -> . method_header method_body
    (107) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (125) normal_statement -> . block
    (126) normal_statement -> . expression_statement
    (127) normal_statement -> . empty_statement
    (128) normal_statement -> . return_statement
    (129) normal_statement -> . switch_statement
    (138) if_else_statement -> . MarkIfStart if_else_begin if_else_intermediate MarkIfEnd
    (147) while_statement -> . while_header while_body
    (151) do_while_statement -> . do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END
    (153) for_statement -> . KWRD_FOR LPAREN for_loop RPAREN block
    (178) class_header -> . class_header_name class_header_extends_opt
    (8) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (9) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (187) method_header -> . method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (102) modifier_opts -> . modifier
    (103) modifier_opts -> . empty
    (90) block -> . start_scope block_statements_opt end_scope
    (130) expression_statement -> . statement_expression STATE_END
    (168) empty_statement -> . STATE_END
    (169) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (157) switch_statement -> . expression KWRD_MATCH switch_block
    (135) MarkIfStart -> . empty
    (148) while_header -> . while_begin LPAREN expression RPAREN
    (152) do_while_statement_begin -> . KWRD_DO
    (179) class_header_name -> . class_header_name1 func_args_start constructor_arguement_list_opt RPAREN
    (191) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (195) modifier -> . KWRD_PROTECTED
    (196) modifier -> . KWRD_PRIVATE
    (91) start_scope -> . BLOCK_BEGIN
    (131) statement_expression -> . assignment
    (132) statement_expression -> . method_invocation
    (10) expression -> . assignment_expression
    (150) while_begin -> . KWRD_WHILE
    (180) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (77) array_access -> . name LBPAREN expression RBPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    BLOCK_END       reduce using rule 211 (empty -> .)
    KWRD_DEF        reduce using rule 211 (empty -> .)
    KWRD_CLASS      reduce using rule 211 (empty -> .)
    KWRD_VAR        reduce using rule 211 (empty -> .)
    KWRD_VAL        reduce using rule 211 (empty -> .)
    KWRD_IF         reduce using rule 211 (empty -> .)
    KWRD_FOR        shift and go to state 58
    KWRD_OBJECT     shift and go to state 4
    STATE_END       shift and go to state 55
    KWRD_RETURN     shift and go to state 51
    KWRD_DO         shift and go to state 48
    KWRD_PROTECTED  shift and go to state 11
    KWRD_PRIVATE    shift and go to state 15
    BLOCK_BEGIN     shift and go to state 16
    KWRD_WHILE      shift and go to state 53
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    expression_statement           shift and go to state 33
    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    normal_statement               shift and go to state 92
    ObjectDeclare                  shift and go to state 1
    relational_expression          shift and go to state 80
    do_while_statement_begin       shift and go to state 73
    array_access                   shift and go to state 36
    MarkIfStart                    shift and go to state 59
    switch_statement               shift and go to state 60
    assignment_expression          shift and go to state 99
    block_statements_opt           shift and go to state 40
    primary                        shift and go to state 72
    qualified_name                 shift and go to state 85
    base_variable_set              shift and go to state 95
    if_else_statement              shift and go to state 76
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 88
    cast_expression                shift and go to state 86
    block_statement                shift and go to state 77
    shift_expression               shift and go to state 65
    return_statement               shift and go to state 96
    while_statement                shift and go to state 42
    and_expression                 shift and go to state 94
    statement                      shift and go to state 81
    statement_expression           shift and go to state 45
    method_invocation              shift and go to state 82
    simple_name                    shift and go to state 74
    conditional_or_expression      shift and go to state 62
    empty                          shift and go to state 84
    block_statements               shift and go to state 97
    for_statement                  shift and go to state 34
    local_variable_declaration_statement shift and go to state 46
    do_while_statement             shift and go to state 63
    int_float                      shift and go to state 47
    assignment                     shift and go to state 100
    multiplicative_expression      shift and go to state 64
    literal                        shift and go to state 78
    class_header_name1             shift and go to state 2
    additive_expression            shift and go to state 61
    SingletonObject                shift and go to state 49
    start_scope                    shift and go to state 17
    method_header_name             shift and go to state 50
    class_header                   shift and go to state 9
    modifier_opts                  shift and go to state 102
    equality_expression            shift and go to state 87
    variable_literal               shift and go to state 66
    name                           shift and go to state 52
    unary_expression_not_plus_minus shift and go to state 57
    while_header                   shift and go to state 54
    while_begin                    shift and go to state 103
    valid_variable                 shift and go to state 104
    method_header                  shift and go to state 89
    empty_statement                shift and go to state 90
    class_declaration              shift and go to state 105
    inclusive_or_expression        shift and go to state 41
    expression                     shift and go to state 69
    local_variable_declaration     shift and go to state 91
    modifier                       shift and go to state 14
    conditional_and_expression     shift and go to state 67
    block                          shift and go to state 70

state 18

    (7) SingletonObject -> ObjectDeclare block .

    KWRD_OBJECT     reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_PROTECTED  reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_PRIVATE    reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_CLASS      reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    $end            reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_FOR        reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    STATE_END       reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_RETURN     reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_DO         reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    BLOCK_BEGIN     reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_WHILE      reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    IDENTIFIER      reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    PLUS            reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    MINUS           reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    NOT             reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    TILDA           reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    LPAREN          reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    CHARACTER       reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    STRING_CONST    reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    BOOL_CONSTT     reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    BOOL_CONSTF     reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_NULL       reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    FLOAT_CONST     reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    INT_CONST       reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_DEF        reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_VAR        reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_VAL        reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_IF         reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    BLOCK_END       reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_CASE       reduce using rule 7 (SingletonObject -> ObjectDeclare block .)


state 19

    (179) class_header_name -> class_header_name1 func_args_start . constructor_arguement_list_opt RPAREN
    (170) constructor_arguement_list_opt -> . constructor_arguement_list
    (171) constructor_arguement_list_opt -> . empty
    (172) constructor_arguement_list -> . constructor_arguement_list_declarator
    (173) constructor_arguement_list -> . constructor_arguement_list COMMA constructor_arguement_list_declarator
    (211) empty -> .
    (174) constructor_arguement_list_declarator -> . declaration_keyword IDENTIFIER COLON type
    (104) declaration_keyword -> . KWRD_VAR
    (105) declaration_keyword -> . KWRD_VAL

    RPAREN          reduce using rule 211 (empty -> .)
    KWRD_VAR        shift and go to state 109
    KWRD_VAL        shift and go to state 110

    constructor_arguement_list_opt shift and go to state 106
    declaration_keyword            shift and go to state 107
    constructor_arguement_list     shift and go to state 108
    constructor_arguement_list_declarator shift and go to state 111
    empty                          shift and go to state 112

state 20

    (188) func_args_start -> LPAREN .

    IDENTIFIER      reduce using rule 188 (func_args_start -> LPAREN .)
    RPAREN          reduce using rule 188 (func_args_start -> LPAREN .)
    KWRD_VAR        reduce using rule 188 (func_args_start -> LPAREN .)
    KWRD_VAL        reduce using rule 188 (func_args_start -> LPAREN .)


state 21

    (181) class_header_extends_opt -> class_header_extends .

    BLOCK_BEGIN     reduce using rule 181 (class_header_extends_opt -> class_header_extends .)


state 22

    (178) class_header -> class_header_name class_header_extends_opt .

    BLOCK_BEGIN     reduce using rule 178 (class_header -> class_header_name class_header_extends_opt .)


state 23

    (183) class_header_extends -> KWRD_EXTNDS . name LPAREN func_arguement_list_opt RPAREN
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name

    IDENTIFIER      shift and go to state 83

    name                           shift and go to state 113
    qualified_name                 shift and go to state 85
    simple_name                    shift and go to state 74

state 24

    (182) class_header_extends_opt -> empty .

    BLOCK_BEGIN     reduce using rule 182 (class_header_extends_opt -> empty .)


state 25

    (8) ObjectDeclare -> KWRD_OBJECT IDENTIFIER .
    (9) ObjectDeclare -> KWRD_OBJECT IDENTIFIER . KWRD_EXTNDS IDENTIFIER

    BLOCK_BEGIN     reduce using rule 8 (ObjectDeclare -> KWRD_OBJECT IDENTIFIER .)
    KWRD_EXTNDS     shift and go to state 114


state 26

    (1) start_here -> ProgramStructure end_here .

    $end            reduce using rule 1 (start_here -> ProgramStructure end_here .)


state 27

    (2) end_here -> empty .
    (103) modifier_opts -> empty .

    $end            reduce using rule 2 (end_here -> empty .)
    KWRD_CLASS      reduce using rule 103 (modifier_opts -> empty .)


state 28

    (3) ProgramStructure -> ProgramStructure class_and_objects .

    KWRD_OBJECT     reduce using rule 3 (ProgramStructure -> ProgramStructure class_and_objects .)
    KWRD_PROTECTED  reduce using rule 3 (ProgramStructure -> ProgramStructure class_and_objects .)
    KWRD_PRIVATE    reduce using rule 3 (ProgramStructure -> ProgramStructure class_and_objects .)
    KWRD_CLASS      reduce using rule 3 (ProgramStructure -> ProgramStructure class_and_objects .)
    $end            reduce using rule 3 (ProgramStructure -> ProgramStructure class_and_objects .)


state 29

    (184) class_body -> class_body_start . block_statements_opt end_scope
    (93) block_statements_opt -> . block_statements
    (94) block_statements_opt -> . empty
    (95) block_statements -> . block_statement
    (96) block_statements -> . block_statements block_statement
    (211) empty -> .
    (97) block_statement -> . local_variable_declaration_statement
    (98) block_statement -> . statement
    (99) block_statement -> . class_declaration
    (100) block_statement -> . SingletonObject
    (101) block_statement -> . method_declaration
    (106) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (120) statement -> . normal_statement
    (121) statement -> . if_else_statement
    (122) statement -> . while_statement
    (123) statement -> . do_while_statement
    (124) statement -> . for_statement
    (177) class_declaration -> . class_header class_body
    (7) SingletonObject -> . ObjectDeclare block
    (186) method_declaration -> . method_header method_body
    (107) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (125) normal_statement -> . block
    (126) normal_statement -> . expression_statement
    (127) normal_statement -> . empty_statement
    (128) normal_statement -> . return_statement
    (129) normal_statement -> . switch_statement
    (138) if_else_statement -> . MarkIfStart if_else_begin if_else_intermediate MarkIfEnd
    (147) while_statement -> . while_header while_body
    (151) do_while_statement -> . do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END
    (153) for_statement -> . KWRD_FOR LPAREN for_loop RPAREN block
    (178) class_header -> . class_header_name class_header_extends_opt
    (8) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (9) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (187) method_header -> . method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (102) modifier_opts -> . modifier
    (103) modifier_opts -> . empty
    (90) block -> . start_scope block_statements_opt end_scope
    (130) expression_statement -> . statement_expression STATE_END
    (168) empty_statement -> . STATE_END
    (169) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (157) switch_statement -> . expression KWRD_MATCH switch_block
    (135) MarkIfStart -> . empty
    (148) while_header -> . while_begin LPAREN expression RPAREN
    (152) do_while_statement_begin -> . KWRD_DO
    (179) class_header_name -> . class_header_name1 func_args_start constructor_arguement_list_opt RPAREN
    (191) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (195) modifier -> . KWRD_PROTECTED
    (196) modifier -> . KWRD_PRIVATE
    (91) start_scope -> . BLOCK_BEGIN
    (131) statement_expression -> . assignment
    (132) statement_expression -> . method_invocation
    (10) expression -> . assignment_expression
    (150) while_begin -> . KWRD_WHILE
    (180) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (77) array_access -> . name LBPAREN expression RBPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    BLOCK_END       reduce using rule 211 (empty -> .)
    KWRD_DEF        reduce using rule 211 (empty -> .)
    KWRD_CLASS      reduce using rule 211 (empty -> .)
    KWRD_VAR        reduce using rule 211 (empty -> .)
    KWRD_VAL        reduce using rule 211 (empty -> .)
    KWRD_IF         reduce using rule 211 (empty -> .)
    KWRD_FOR        shift and go to state 58
    KWRD_OBJECT     shift and go to state 4
    STATE_END       shift and go to state 55
    KWRD_RETURN     shift and go to state 51
    KWRD_DO         shift and go to state 48
    KWRD_PROTECTED  shift and go to state 11
    KWRD_PRIVATE    shift and go to state 15
    BLOCK_BEGIN     shift and go to state 16
    KWRD_WHILE      shift and go to state 53
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    expression_statement           shift and go to state 33
    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    normal_statement               shift and go to state 92
    ObjectDeclare                  shift and go to state 1
    relational_expression          shift and go to state 80
    do_while_statement_begin       shift and go to state 73
    array_access                   shift and go to state 36
    MarkIfStart                    shift and go to state 59
    switch_statement               shift and go to state 60
    assignment_expression          shift and go to state 99
    block_statements_opt           shift and go to state 115
    primary                        shift and go to state 72
    qualified_name                 shift and go to state 85
    base_variable_set              shift and go to state 95
    if_else_statement              shift and go to state 76
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 88
    cast_expression                shift and go to state 86
    block_statement                shift and go to state 77
    shift_expression               shift and go to state 65
    return_statement               shift and go to state 96
    while_statement                shift and go to state 42
    and_expression                 shift and go to state 94
    statement                      shift and go to state 81
    statement_expression           shift and go to state 45
    method_invocation              shift and go to state 82
    simple_name                    shift and go to state 74
    conditional_or_expression      shift and go to state 62
    empty                          shift and go to state 84
    block_statements               shift and go to state 97
    for_statement                  shift and go to state 34
    local_variable_declaration_statement shift and go to state 46
    do_while_statement             shift and go to state 63
    int_float                      shift and go to state 47
    assignment                     shift and go to state 100
    multiplicative_expression      shift and go to state 64
    literal                        shift and go to state 78
    class_header_name1             shift and go to state 2
    additive_expression            shift and go to state 61
    SingletonObject                shift and go to state 49
    start_scope                    shift and go to state 17
    method_header_name             shift and go to state 50
    class_header                   shift and go to state 9
    modifier_opts                  shift and go to state 102
    equality_expression            shift and go to state 87
    variable_literal               shift and go to state 66
    name                           shift and go to state 52
    unary_expression_not_plus_minus shift and go to state 57
    while_header                   shift and go to state 54
    valid_variable                 shift and go to state 104
    method_header                  shift and go to state 89
    empty_statement                shift and go to state 90
    class_declaration              shift and go to state 105
    inclusive_or_expression        shift and go to state 41
    expression                     shift and go to state 69
    local_variable_declaration     shift and go to state 91
    modifier                       shift and go to state 14
    while_begin                    shift and go to state 103
    block                          shift and go to state 70
    conditional_and_expression     shift and go to state 67

state 30

    (177) class_declaration -> class_header class_body .

    KWRD_OBJECT     reduce using rule 177 (class_declaration -> class_header class_body .)
    KWRD_PROTECTED  reduce using rule 177 (class_declaration -> class_header class_body .)
    KWRD_PRIVATE    reduce using rule 177 (class_declaration -> class_header class_body .)
    KWRD_CLASS      reduce using rule 177 (class_declaration -> class_header class_body .)
    $end            reduce using rule 177 (class_declaration -> class_header class_body .)
    KWRD_FOR        reduce using rule 177 (class_declaration -> class_header class_body .)
    STATE_END       reduce using rule 177 (class_declaration -> class_header class_body .)
    KWRD_RETURN     reduce using rule 177 (class_declaration -> class_header class_body .)
    KWRD_DO         reduce using rule 177 (class_declaration -> class_header class_body .)
    BLOCK_BEGIN     reduce using rule 177 (class_declaration -> class_header class_body .)
    KWRD_WHILE      reduce using rule 177 (class_declaration -> class_header class_body .)
    IDENTIFIER      reduce using rule 177 (class_declaration -> class_header class_body .)
    PLUS            reduce using rule 177 (class_declaration -> class_header class_body .)
    MINUS           reduce using rule 177 (class_declaration -> class_header class_body .)
    NOT             reduce using rule 177 (class_declaration -> class_header class_body .)
    TILDA           reduce using rule 177 (class_declaration -> class_header class_body .)
    LPAREN          reduce using rule 177 (class_declaration -> class_header class_body .)
    CHARACTER       reduce using rule 177 (class_declaration -> class_header class_body .)
    STRING_CONST    reduce using rule 177 (class_declaration -> class_header class_body .)
    BOOL_CONSTT     reduce using rule 177 (class_declaration -> class_header class_body .)
    BOOL_CONSTF     reduce using rule 177 (class_declaration -> class_header class_body .)
    KWRD_NULL       reduce using rule 177 (class_declaration -> class_header class_body .)
    FLOAT_CONST     reduce using rule 177 (class_declaration -> class_header class_body .)
    INT_CONST       reduce using rule 177 (class_declaration -> class_header class_body .)
    KWRD_DEF        reduce using rule 177 (class_declaration -> class_header class_body .)
    KWRD_VAR        reduce using rule 177 (class_declaration -> class_header class_body .)
    KWRD_VAL        reduce using rule 177 (class_declaration -> class_header class_body .)
    KWRD_IF         reduce using rule 177 (class_declaration -> class_header class_body .)
    BLOCK_END       reduce using rule 177 (class_declaration -> class_header class_body .)
    KWRD_CASE       reduce using rule 177 (class_declaration -> class_header class_body .)


state 31

    (185) class_body_start -> BLOCK_BEGIN .

    KWRD_FOR        reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    KWRD_OBJECT     reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    STATE_END       reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    KWRD_RETURN     reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    KWRD_DO         reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    KWRD_PROTECTED  reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    KWRD_PRIVATE    reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    BLOCK_BEGIN     reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    KWRD_WHILE      reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    IDENTIFIER      reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    PLUS            reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    MINUS           reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    NOT             reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    TILDA           reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    LPAREN          reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    CHARACTER       reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    STRING_CONST    reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    BOOL_CONSTT     reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    BOOL_CONSTF     reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    KWRD_NULL       reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    FLOAT_CONST     reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    INT_CONST       reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    BLOCK_END       reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    KWRD_DEF        reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    KWRD_CLASS      reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    KWRD_VAR        reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    KWRD_VAL        reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)
    KWRD_IF         reduce using rule 185 (class_body_start -> BLOCK_BEGIN .)


state 32

    (180) class_header_name1 -> modifier_opts KWRD_CLASS . name
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name

    IDENTIFIER      shift and go to state 83

    simple_name                    shift and go to state 74
    qualified_name                 shift and go to state 85
    name                           shift and go to state 116

state 33

    (126) normal_statement -> expression_statement .

    KWRD_FOR        reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_OBJECT     reduce using rule 126 (normal_statement -> expression_statement .)
    STATE_END       reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_RETURN     reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_DO         reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_PROTECTED  reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_PRIVATE    reduce using rule 126 (normal_statement -> expression_statement .)
    BLOCK_BEGIN     reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_WHILE      reduce using rule 126 (normal_statement -> expression_statement .)
    IDENTIFIER      reduce using rule 126 (normal_statement -> expression_statement .)
    PLUS            reduce using rule 126 (normal_statement -> expression_statement .)
    MINUS           reduce using rule 126 (normal_statement -> expression_statement .)
    NOT             reduce using rule 126 (normal_statement -> expression_statement .)
    TILDA           reduce using rule 126 (normal_statement -> expression_statement .)
    LPAREN          reduce using rule 126 (normal_statement -> expression_statement .)
    CHARACTER       reduce using rule 126 (normal_statement -> expression_statement .)
    STRING_CONST    reduce using rule 126 (normal_statement -> expression_statement .)
    BOOL_CONSTT     reduce using rule 126 (normal_statement -> expression_statement .)
    BOOL_CONSTF     reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_NULL       reduce using rule 126 (normal_statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 126 (normal_statement -> expression_statement .)
    INT_CONST       reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_DEF        reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_CLASS      reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_VAR        reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_VAL        reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_IF         reduce using rule 126 (normal_statement -> expression_statement .)
    BLOCK_END       reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_CASE       reduce using rule 126 (normal_statement -> expression_statement .)


state 34

    (124) statement -> for_statement .

    KWRD_FOR        reduce using rule 124 (statement -> for_statement .)
    KWRD_OBJECT     reduce using rule 124 (statement -> for_statement .)
    STATE_END       reduce using rule 124 (statement -> for_statement .)
    KWRD_RETURN     reduce using rule 124 (statement -> for_statement .)
    KWRD_DO         reduce using rule 124 (statement -> for_statement .)
    KWRD_PROTECTED  reduce using rule 124 (statement -> for_statement .)
    KWRD_PRIVATE    reduce using rule 124 (statement -> for_statement .)
    BLOCK_BEGIN     reduce using rule 124 (statement -> for_statement .)
    KWRD_WHILE      reduce using rule 124 (statement -> for_statement .)
    IDENTIFIER      reduce using rule 124 (statement -> for_statement .)
    PLUS            reduce using rule 124 (statement -> for_statement .)
    MINUS           reduce using rule 124 (statement -> for_statement .)
    NOT             reduce using rule 124 (statement -> for_statement .)
    TILDA           reduce using rule 124 (statement -> for_statement .)
    LPAREN          reduce using rule 124 (statement -> for_statement .)
    CHARACTER       reduce using rule 124 (statement -> for_statement .)
    STRING_CONST    reduce using rule 124 (statement -> for_statement .)
    BOOL_CONSTT     reduce using rule 124 (statement -> for_statement .)
    BOOL_CONSTF     reduce using rule 124 (statement -> for_statement .)
    KWRD_NULL       reduce using rule 124 (statement -> for_statement .)
    FLOAT_CONST     reduce using rule 124 (statement -> for_statement .)
    INT_CONST       reduce using rule 124 (statement -> for_statement .)
    KWRD_DEF        reduce using rule 124 (statement -> for_statement .)
    KWRD_CLASS      reduce using rule 124 (statement -> for_statement .)
    KWRD_VAR        reduce using rule 124 (statement -> for_statement .)
    KWRD_VAL        reduce using rule 124 (statement -> for_statement .)
    KWRD_IF         reduce using rule 124 (statement -> for_statement .)
    BLOCK_END       reduce using rule 124 (statement -> for_statement .)
    KWRD_CASE       reduce using rule 124 (statement -> for_statement .)


state 35

    (74) int_float -> FLOAT_CONST .

    TIMES           reduce using rule 74 (int_float -> FLOAT_CONST .)
    DIVIDE          reduce using rule 74 (int_float -> FLOAT_CONST .)
    REMAINDER       reduce using rule 74 (int_float -> FLOAT_CONST .)
    PLUS            reduce using rule 74 (int_float -> FLOAT_CONST .)
    MINUS           reduce using rule 74 (int_float -> FLOAT_CONST .)
    LSHIFT          reduce using rule 74 (int_float -> FLOAT_CONST .)
    RSHIFT          reduce using rule 74 (int_float -> FLOAT_CONST .)
    GREATER         reduce using rule 74 (int_float -> FLOAT_CONST .)
    LESS            reduce using rule 74 (int_float -> FLOAT_CONST .)
    GEQ             reduce using rule 74 (int_float -> FLOAT_CONST .)
    LEQ             reduce using rule 74 (int_float -> FLOAT_CONST .)
    EQUAL           reduce using rule 74 (int_float -> FLOAT_CONST .)
    NEQUAL          reduce using rule 74 (int_float -> FLOAT_CONST .)
    AND_BITWISE     reduce using rule 74 (int_float -> FLOAT_CONST .)
    XOR             reduce using rule 74 (int_float -> FLOAT_CONST .)
    OR_BITWISE      reduce using rule 74 (int_float -> FLOAT_CONST .)
    AND             reduce using rule 74 (int_float -> FLOAT_CONST .)
    OR              reduce using rule 74 (int_float -> FLOAT_CONST .)
    FUNTYPE         reduce using rule 74 (int_float -> FLOAT_CONST .)
    KWRD_BY         reduce using rule 74 (int_float -> FLOAT_CONST .)
    RPAREN          reduce using rule 74 (int_float -> FLOAT_CONST .)
    KWRD_MATCH      reduce using rule 74 (int_float -> FLOAT_CONST .)
    COMMA           reduce using rule 74 (int_float -> FLOAT_CONST .)
    STATE_END       reduce using rule 74 (int_float -> FLOAT_CONST .)
    RBPAREN         reduce using rule 74 (int_float -> FLOAT_CONST .)
    KWRD_UNTIL      reduce using rule 74 (int_float -> FLOAT_CONST .)


state 36

    (87) valid_variable -> array_access .

    ASSIGN          reduce using rule 87 (valid_variable -> array_access .)
    TIMES_ASSIGN    reduce using rule 87 (valid_variable -> array_access .)
    DIVIDE_ASSIGN   reduce using rule 87 (valid_variable -> array_access .)
    REMAINDER_ASSIGN reduce using rule 87 (valid_variable -> array_access .)
    PLUS_ASSIGN     reduce using rule 87 (valid_variable -> array_access .)
    MINUS_ASSIGN    reduce using rule 87 (valid_variable -> array_access .)
    LSHIFT_ASSIGN   reduce using rule 87 (valid_variable -> array_access .)
    RSHIFT_ASSIGN   reduce using rule 87 (valid_variable -> array_access .)
    AND_ASSIGN      reduce using rule 87 (valid_variable -> array_access .)
    OR_ASSIGN       reduce using rule 87 (valid_variable -> array_access .)
    XOR_ASSIGN      reduce using rule 87 (valid_variable -> array_access .)
    TIMES           reduce using rule 87 (valid_variable -> array_access .)
    DIVIDE          reduce using rule 87 (valid_variable -> array_access .)
    REMAINDER       reduce using rule 87 (valid_variable -> array_access .)
    PLUS            reduce using rule 87 (valid_variable -> array_access .)
    MINUS           reduce using rule 87 (valid_variable -> array_access .)
    LSHIFT          reduce using rule 87 (valid_variable -> array_access .)
    RSHIFT          reduce using rule 87 (valid_variable -> array_access .)
    GREATER         reduce using rule 87 (valid_variable -> array_access .)
    LESS            reduce using rule 87 (valid_variable -> array_access .)
    GEQ             reduce using rule 87 (valid_variable -> array_access .)
    LEQ             reduce using rule 87 (valid_variable -> array_access .)
    EQUAL           reduce using rule 87 (valid_variable -> array_access .)
    NEQUAL          reduce using rule 87 (valid_variable -> array_access .)
    AND_BITWISE     reduce using rule 87 (valid_variable -> array_access .)
    XOR             reduce using rule 87 (valid_variable -> array_access .)
    OR_BITWISE      reduce using rule 87 (valid_variable -> array_access .)
    AND             reduce using rule 87 (valid_variable -> array_access .)
    OR              reduce using rule 87 (valid_variable -> array_access .)
    KWRD_MATCH      reduce using rule 87 (valid_variable -> array_access .)
    STATE_END       reduce using rule 87 (valid_variable -> array_access .)
    RPAREN          reduce using rule 87 (valid_variable -> array_access .)
    COMMA           reduce using rule 87 (valid_variable -> array_access .)
    RBPAREN         reduce using rule 87 (valid_variable -> array_access .)
    KWRD_UNTIL      reduce using rule 87 (valid_variable -> array_access .)
    FUNTYPE         reduce using rule 87 (valid_variable -> array_access .)
    KWRD_BY         reduce using rule 87 (valid_variable -> array_access .)


state 37

    (57) unary_expression -> MINUS . unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 85
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    unary_expression               shift and go to state 117
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 118
    array_access                   shift and go to state 36
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    literal                        shift and go to state 78
    method_invocation              shift and go to state 119
    cast_expression                shift and go to state 86
    simple_name                    shift and go to state 74
    name                           shift and go to state 120

state 38

    (70) literal -> STRING_CONST .

    TIMES           reduce using rule 70 (literal -> STRING_CONST .)
    DIVIDE          reduce using rule 70 (literal -> STRING_CONST .)
    REMAINDER       reduce using rule 70 (literal -> STRING_CONST .)
    PLUS            reduce using rule 70 (literal -> STRING_CONST .)
    MINUS           reduce using rule 70 (literal -> STRING_CONST .)
    LSHIFT          reduce using rule 70 (literal -> STRING_CONST .)
    RSHIFT          reduce using rule 70 (literal -> STRING_CONST .)
    GREATER         reduce using rule 70 (literal -> STRING_CONST .)
    LESS            reduce using rule 70 (literal -> STRING_CONST .)
    GEQ             reduce using rule 70 (literal -> STRING_CONST .)
    LEQ             reduce using rule 70 (literal -> STRING_CONST .)
    EQUAL           reduce using rule 70 (literal -> STRING_CONST .)
    NEQUAL          reduce using rule 70 (literal -> STRING_CONST .)
    AND_BITWISE     reduce using rule 70 (literal -> STRING_CONST .)
    XOR             reduce using rule 70 (literal -> STRING_CONST .)
    OR_BITWISE      reduce using rule 70 (literal -> STRING_CONST .)
    AND             reduce using rule 70 (literal -> STRING_CONST .)
    OR              reduce using rule 70 (literal -> STRING_CONST .)
    RPAREN          reduce using rule 70 (literal -> STRING_CONST .)
    COMMA           reduce using rule 70 (literal -> STRING_CONST .)
    KWRD_MATCH      reduce using rule 70 (literal -> STRING_CONST .)
    STATE_END       reduce using rule 70 (literal -> STRING_CONST .)
    RBPAREN         reduce using rule 70 (literal -> STRING_CONST .)
    KWRD_UNTIL      reduce using rule 70 (literal -> STRING_CONST .)
    FUNTYPE         reduce using rule 70 (literal -> STRING_CONST .)
    KWRD_BY         reduce using rule 70 (literal -> STRING_CONST .)


state 39

    (72) literal -> BOOL_CONSTF .

    TIMES           reduce using rule 72 (literal -> BOOL_CONSTF .)
    DIVIDE          reduce using rule 72 (literal -> BOOL_CONSTF .)
    REMAINDER       reduce using rule 72 (literal -> BOOL_CONSTF .)
    PLUS            reduce using rule 72 (literal -> BOOL_CONSTF .)
    MINUS           reduce using rule 72 (literal -> BOOL_CONSTF .)
    LSHIFT          reduce using rule 72 (literal -> BOOL_CONSTF .)
    RSHIFT          reduce using rule 72 (literal -> BOOL_CONSTF .)
    GREATER         reduce using rule 72 (literal -> BOOL_CONSTF .)
    LESS            reduce using rule 72 (literal -> BOOL_CONSTF .)
    GEQ             reduce using rule 72 (literal -> BOOL_CONSTF .)
    LEQ             reduce using rule 72 (literal -> BOOL_CONSTF .)
    EQUAL           reduce using rule 72 (literal -> BOOL_CONSTF .)
    NEQUAL          reduce using rule 72 (literal -> BOOL_CONSTF .)
    AND_BITWISE     reduce using rule 72 (literal -> BOOL_CONSTF .)
    XOR             reduce using rule 72 (literal -> BOOL_CONSTF .)
    OR_BITWISE      reduce using rule 72 (literal -> BOOL_CONSTF .)
    AND             reduce using rule 72 (literal -> BOOL_CONSTF .)
    OR              reduce using rule 72 (literal -> BOOL_CONSTF .)
    RPAREN          reduce using rule 72 (literal -> BOOL_CONSTF .)
    COMMA           reduce using rule 72 (literal -> BOOL_CONSTF .)
    KWRD_MATCH      reduce using rule 72 (literal -> BOOL_CONSTF .)
    STATE_END       reduce using rule 72 (literal -> BOOL_CONSTF .)
    RBPAREN         reduce using rule 72 (literal -> BOOL_CONSTF .)
    KWRD_UNTIL      reduce using rule 72 (literal -> BOOL_CONSTF .)
    FUNTYPE         reduce using rule 72 (literal -> BOOL_CONSTF .)
    KWRD_BY         reduce using rule 72 (literal -> BOOL_CONSTF .)


state 40

    (90) block -> start_scope block_statements_opt . end_scope
    (92) end_scope -> . BLOCK_END

    BLOCK_END       shift and go to state 121

    end_scope                      shift and go to state 122

state 41

    (30) conditional_and_expression -> inclusive_or_expression .
    (33) inclusive_or_expression -> inclusive_or_expression . OR_BITWISE exclusive_or_expression

    AND             reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    OR              reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    KWRD_MATCH      reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    STATE_END       reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    RBPAREN         reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    KWRD_UNTIL      reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    FUNTYPE         reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    KWRD_BY         reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    OR_BITWISE      shift and go to state 123


state 42

    (122) statement -> while_statement .

    KWRD_FOR        reduce using rule 122 (statement -> while_statement .)
    KWRD_OBJECT     reduce using rule 122 (statement -> while_statement .)
    STATE_END       reduce using rule 122 (statement -> while_statement .)
    KWRD_RETURN     reduce using rule 122 (statement -> while_statement .)
    KWRD_DO         reduce using rule 122 (statement -> while_statement .)
    KWRD_PROTECTED  reduce using rule 122 (statement -> while_statement .)
    KWRD_PRIVATE    reduce using rule 122 (statement -> while_statement .)
    BLOCK_BEGIN     reduce using rule 122 (statement -> while_statement .)
    KWRD_WHILE      reduce using rule 122 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 122 (statement -> while_statement .)
    PLUS            reduce using rule 122 (statement -> while_statement .)
    MINUS           reduce using rule 122 (statement -> while_statement .)
    NOT             reduce using rule 122 (statement -> while_statement .)
    TILDA           reduce using rule 122 (statement -> while_statement .)
    LPAREN          reduce using rule 122 (statement -> while_statement .)
    CHARACTER       reduce using rule 122 (statement -> while_statement .)
    STRING_CONST    reduce using rule 122 (statement -> while_statement .)
    BOOL_CONSTT     reduce using rule 122 (statement -> while_statement .)
    BOOL_CONSTF     reduce using rule 122 (statement -> while_statement .)
    KWRD_NULL       reduce using rule 122 (statement -> while_statement .)
    FLOAT_CONST     reduce using rule 122 (statement -> while_statement .)
    INT_CONST       reduce using rule 122 (statement -> while_statement .)
    KWRD_DEF        reduce using rule 122 (statement -> while_statement .)
    KWRD_CLASS      reduce using rule 122 (statement -> while_statement .)
    KWRD_VAR        reduce using rule 122 (statement -> while_statement .)
    KWRD_VAL        reduce using rule 122 (statement -> while_statement .)
    KWRD_IF         reduce using rule 122 (statement -> while_statement .)
    BLOCK_END       reduce using rule 122 (statement -> while_statement .)
    KWRD_CASE       reduce using rule 122 (statement -> while_statement .)


state 43

    (71) literal -> BOOL_CONSTT .

    TIMES           reduce using rule 71 (literal -> BOOL_CONSTT .)
    DIVIDE          reduce using rule 71 (literal -> BOOL_CONSTT .)
    REMAINDER       reduce using rule 71 (literal -> BOOL_CONSTT .)
    PLUS            reduce using rule 71 (literal -> BOOL_CONSTT .)
    MINUS           reduce using rule 71 (literal -> BOOL_CONSTT .)
    LSHIFT          reduce using rule 71 (literal -> BOOL_CONSTT .)
    RSHIFT          reduce using rule 71 (literal -> BOOL_CONSTT .)
    GREATER         reduce using rule 71 (literal -> BOOL_CONSTT .)
    LESS            reduce using rule 71 (literal -> BOOL_CONSTT .)
    GEQ             reduce using rule 71 (literal -> BOOL_CONSTT .)
    LEQ             reduce using rule 71 (literal -> BOOL_CONSTT .)
    EQUAL           reduce using rule 71 (literal -> BOOL_CONSTT .)
    NEQUAL          reduce using rule 71 (literal -> BOOL_CONSTT .)
    AND_BITWISE     reduce using rule 71 (literal -> BOOL_CONSTT .)
    XOR             reduce using rule 71 (literal -> BOOL_CONSTT .)
    OR_BITWISE      reduce using rule 71 (literal -> BOOL_CONSTT .)
    AND             reduce using rule 71 (literal -> BOOL_CONSTT .)
    OR              reduce using rule 71 (literal -> BOOL_CONSTT .)
    RPAREN          reduce using rule 71 (literal -> BOOL_CONSTT .)
    COMMA           reduce using rule 71 (literal -> BOOL_CONSTT .)
    KWRD_MATCH      reduce using rule 71 (literal -> BOOL_CONSTT .)
    STATE_END       reduce using rule 71 (literal -> BOOL_CONSTT .)
    RBPAREN         reduce using rule 71 (literal -> BOOL_CONSTT .)
    KWRD_UNTIL      reduce using rule 71 (literal -> BOOL_CONSTT .)
    FUNTYPE         reduce using rule 71 (literal -> BOOL_CONSTT .)
    KWRD_BY         reduce using rule 71 (literal -> BOOL_CONSTT .)


state 44

    (56) unary_expression -> PLUS . unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 85
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    unary_expression               shift and go to state 124
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 118
    array_access                   shift and go to state 36
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    literal                        shift and go to state 78
    method_invocation              shift and go to state 119
    cast_expression                shift and go to state 86
    simple_name                    shift and go to state 74
    name                           shift and go to state 120

state 45

    (130) expression_statement -> statement_expression . STATE_END

    STATE_END       shift and go to state 125


state 46

    (97) block_statement -> local_variable_declaration_statement .

    KWRD_FOR        reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    KWRD_OBJECT     reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    STATE_END       reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    KWRD_RETURN     reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    KWRD_DO         reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    KWRD_PROTECTED  reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    KWRD_PRIVATE    reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    BLOCK_BEGIN     reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    KWRD_WHILE      reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    IDENTIFIER      reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    PLUS            reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    MINUS           reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    NOT             reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    TILDA           reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    LPAREN          reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    CHARACTER       reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    STRING_CONST    reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    BOOL_CONSTT     reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    BOOL_CONSTF     reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    KWRD_NULL       reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    FLOAT_CONST     reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    INT_CONST       reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    KWRD_DEF        reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    KWRD_CLASS      reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    KWRD_VAR        reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    KWRD_VAL        reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    KWRD_IF         reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    BLOCK_END       reduce using rule 97 (block_statement -> local_variable_declaration_statement .)
    KWRD_CASE       reduce using rule 97 (block_statement -> local_variable_declaration_statement .)


state 47

    (68) literal -> int_float .

    TIMES           reduce using rule 68 (literal -> int_float .)
    DIVIDE          reduce using rule 68 (literal -> int_float .)
    REMAINDER       reduce using rule 68 (literal -> int_float .)
    PLUS            reduce using rule 68 (literal -> int_float .)
    MINUS           reduce using rule 68 (literal -> int_float .)
    LSHIFT          reduce using rule 68 (literal -> int_float .)
    RSHIFT          reduce using rule 68 (literal -> int_float .)
    GREATER         reduce using rule 68 (literal -> int_float .)
    LESS            reduce using rule 68 (literal -> int_float .)
    GEQ             reduce using rule 68 (literal -> int_float .)
    LEQ             reduce using rule 68 (literal -> int_float .)
    EQUAL           reduce using rule 68 (literal -> int_float .)
    NEQUAL          reduce using rule 68 (literal -> int_float .)
    AND_BITWISE     reduce using rule 68 (literal -> int_float .)
    XOR             reduce using rule 68 (literal -> int_float .)
    OR_BITWISE      reduce using rule 68 (literal -> int_float .)
    AND             reduce using rule 68 (literal -> int_float .)
    OR              reduce using rule 68 (literal -> int_float .)
    RPAREN          reduce using rule 68 (literal -> int_float .)
    COMMA           reduce using rule 68 (literal -> int_float .)
    KWRD_MATCH      reduce using rule 68 (literal -> int_float .)
    STATE_END       reduce using rule 68 (literal -> int_float .)
    RBPAREN         reduce using rule 68 (literal -> int_float .)
    KWRD_UNTIL      reduce using rule 68 (literal -> int_float .)
    FUNTYPE         reduce using rule 68 (literal -> int_float .)
    KWRD_BY         reduce using rule 68 (literal -> int_float .)


state 48

    (152) do_while_statement_begin -> KWRD_DO .

    BLOCK_BEGIN     reduce using rule 152 (do_while_statement_begin -> KWRD_DO .)


state 49

    (100) block_statement -> SingletonObject .

    KWRD_FOR        reduce using rule 100 (block_statement -> SingletonObject .)
    KWRD_OBJECT     reduce using rule 100 (block_statement -> SingletonObject .)
    STATE_END       reduce using rule 100 (block_statement -> SingletonObject .)
    KWRD_RETURN     reduce using rule 100 (block_statement -> SingletonObject .)
    KWRD_DO         reduce using rule 100 (block_statement -> SingletonObject .)
    KWRD_PROTECTED  reduce using rule 100 (block_statement -> SingletonObject .)
    KWRD_PRIVATE    reduce using rule 100 (block_statement -> SingletonObject .)
    BLOCK_BEGIN     reduce using rule 100 (block_statement -> SingletonObject .)
    KWRD_WHILE      reduce using rule 100 (block_statement -> SingletonObject .)
    IDENTIFIER      reduce using rule 100 (block_statement -> SingletonObject .)
    PLUS            reduce using rule 100 (block_statement -> SingletonObject .)
    MINUS           reduce using rule 100 (block_statement -> SingletonObject .)
    NOT             reduce using rule 100 (block_statement -> SingletonObject .)
    TILDA           reduce using rule 100 (block_statement -> SingletonObject .)
    LPAREN          reduce using rule 100 (block_statement -> SingletonObject .)
    CHARACTER       reduce using rule 100 (block_statement -> SingletonObject .)
    STRING_CONST    reduce using rule 100 (block_statement -> SingletonObject .)
    BOOL_CONSTT     reduce using rule 100 (block_statement -> SingletonObject .)
    BOOL_CONSTF     reduce using rule 100 (block_statement -> SingletonObject .)
    KWRD_NULL       reduce using rule 100 (block_statement -> SingletonObject .)
    FLOAT_CONST     reduce using rule 100 (block_statement -> SingletonObject .)
    INT_CONST       reduce using rule 100 (block_statement -> SingletonObject .)
    KWRD_DEF        reduce using rule 100 (block_statement -> SingletonObject .)
    KWRD_CLASS      reduce using rule 100 (block_statement -> SingletonObject .)
    KWRD_VAR        reduce using rule 100 (block_statement -> SingletonObject .)
    KWRD_VAL        reduce using rule 100 (block_statement -> SingletonObject .)
    KWRD_IF         reduce using rule 100 (block_statement -> SingletonObject .)
    BLOCK_END       reduce using rule 100 (block_statement -> SingletonObject .)
    KWRD_CASE       reduce using rule 100 (block_statement -> SingletonObject .)


state 50

    (187) method_header -> method_header_name . func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (188) func_args_start -> . LPAREN

    LPAREN          shift and go to state 20

    func_args_start                shift and go to state 126

state 51

    (169) return_statement -> KWRD_RETURN . expression_optional STATE_END
    (11) expression_optional -> . expression
    (12) expression_optional -> . empty
    (10) expression -> . assignment_expression
    (211) empty -> .
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    STATE_END       reduce using rule 211 (empty -> .)
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    and_expression                 shift and go to state 94
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    additive_expression            shift and go to state 61
    simple_name                    shift and go to state 74
    expression_optional            shift and go to state 127
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 104
    inclusive_or_expression        shift and go to state 41
    literal                        shift and go to state 78
    relational_expression          shift and go to state 80
    cast_expression                shift and go to state 86
    conditional_or_expression      shift and go to state 62
    empty                          shift and go to state 128
    assignment_expression          shift and go to state 99
    qualified_name                 shift and go to state 85
    assignment                     shift and go to state 129
    multiplicative_expression      shift and go to state 64
    method_invocation              shift and go to state 119
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 130
    unary_expression               shift and go to state 56
    expression                     shift and go to state 131
    conditional_and_expression     shift and go to state 67

state 52

    (76) method_invocation -> name . LPAREN argument_list_opt RPAREN
    (86) valid_variable -> name .
    (77) array_access -> name . LBPAREN expression RBPAREN
    (85) qualified_name -> name . DOT simple_name

    LPAREN          shift and go to state 132
    ASSIGN          reduce using rule 86 (valid_variable -> name .)
    TIMES_ASSIGN    reduce using rule 86 (valid_variable -> name .)
    DIVIDE_ASSIGN   reduce using rule 86 (valid_variable -> name .)
    REMAINDER_ASSIGN reduce using rule 86 (valid_variable -> name .)
    PLUS_ASSIGN     reduce using rule 86 (valid_variable -> name .)
    MINUS_ASSIGN    reduce using rule 86 (valid_variable -> name .)
    LSHIFT_ASSIGN   reduce using rule 86 (valid_variable -> name .)
    RSHIFT_ASSIGN   reduce using rule 86 (valid_variable -> name .)
    AND_ASSIGN      reduce using rule 86 (valid_variable -> name .)
    OR_ASSIGN       reduce using rule 86 (valid_variable -> name .)
    XOR_ASSIGN      reduce using rule 86 (valid_variable -> name .)
    TIMES           reduce using rule 86 (valid_variable -> name .)
    DIVIDE          reduce using rule 86 (valid_variable -> name .)
    REMAINDER       reduce using rule 86 (valid_variable -> name .)
    PLUS            reduce using rule 86 (valid_variable -> name .)
    MINUS           reduce using rule 86 (valid_variable -> name .)
    LSHIFT          reduce using rule 86 (valid_variable -> name .)
    RSHIFT          reduce using rule 86 (valid_variable -> name .)
    GREATER         reduce using rule 86 (valid_variable -> name .)
    LESS            reduce using rule 86 (valid_variable -> name .)
    GEQ             reduce using rule 86 (valid_variable -> name .)
    LEQ             reduce using rule 86 (valid_variable -> name .)
    EQUAL           reduce using rule 86 (valid_variable -> name .)
    NEQUAL          reduce using rule 86 (valid_variable -> name .)
    AND_BITWISE     reduce using rule 86 (valid_variable -> name .)
    XOR             reduce using rule 86 (valid_variable -> name .)
    OR_BITWISE      reduce using rule 86 (valid_variable -> name .)
    AND             reduce using rule 86 (valid_variable -> name .)
    OR              reduce using rule 86 (valid_variable -> name .)
    KWRD_MATCH      reduce using rule 86 (valid_variable -> name .)
    LBPAREN         shift and go to state 133
    DOT             shift and go to state 134


state 53

    (150) while_begin -> KWRD_WHILE .

    LPAREN          reduce using rule 150 (while_begin -> KWRD_WHILE .)


state 54

    (147) while_statement -> while_header . while_body
    (149) while_body -> . block
    (90) block -> . start_scope block_statements_opt end_scope
    (91) start_scope -> . BLOCK_BEGIN

    BLOCK_BEGIN     shift and go to state 16

    start_scope                    shift and go to state 17
    while_body                     shift and go to state 135
    block                          shift and go to state 136

state 55

    (168) empty_statement -> STATE_END .

    KWRD_FOR        reduce using rule 168 (empty_statement -> STATE_END .)
    KWRD_OBJECT     reduce using rule 168 (empty_statement -> STATE_END .)
    STATE_END       reduce using rule 168 (empty_statement -> STATE_END .)
    KWRD_RETURN     reduce using rule 168 (empty_statement -> STATE_END .)
    KWRD_DO         reduce using rule 168 (empty_statement -> STATE_END .)
    KWRD_PROTECTED  reduce using rule 168 (empty_statement -> STATE_END .)
    KWRD_PRIVATE    reduce using rule 168 (empty_statement -> STATE_END .)
    BLOCK_BEGIN     reduce using rule 168 (empty_statement -> STATE_END .)
    KWRD_WHILE      reduce using rule 168 (empty_statement -> STATE_END .)
    IDENTIFIER      reduce using rule 168 (empty_statement -> STATE_END .)
    PLUS            reduce using rule 168 (empty_statement -> STATE_END .)
    MINUS           reduce using rule 168 (empty_statement -> STATE_END .)
    NOT             reduce using rule 168 (empty_statement -> STATE_END .)
    TILDA           reduce using rule 168 (empty_statement -> STATE_END .)
    LPAREN          reduce using rule 168 (empty_statement -> STATE_END .)
    CHARACTER       reduce using rule 168 (empty_statement -> STATE_END .)
    STRING_CONST    reduce using rule 168 (empty_statement -> STATE_END .)
    BOOL_CONSTT     reduce using rule 168 (empty_statement -> STATE_END .)
    BOOL_CONSTF     reduce using rule 168 (empty_statement -> STATE_END .)
    KWRD_NULL       reduce using rule 168 (empty_statement -> STATE_END .)
    FLOAT_CONST     reduce using rule 168 (empty_statement -> STATE_END .)
    INT_CONST       reduce using rule 168 (empty_statement -> STATE_END .)
    KWRD_DEF        reduce using rule 168 (empty_statement -> STATE_END .)
    KWRD_CLASS      reduce using rule 168 (empty_statement -> STATE_END .)
    KWRD_VAR        reduce using rule 168 (empty_statement -> STATE_END .)
    KWRD_VAL        reduce using rule 168 (empty_statement -> STATE_END .)
    KWRD_IF         reduce using rule 168 (empty_statement -> STATE_END .)
    BLOCK_END       reduce using rule 168 (empty_statement -> STATE_END .)
    KWRD_CASE       reduce using rule 168 (empty_statement -> STATE_END .)


state 56

    (52) multiplicative_expression -> unary_expression .

    TIMES           reduce using rule 52 (multiplicative_expression -> unary_expression .)
    DIVIDE          reduce using rule 52 (multiplicative_expression -> unary_expression .)
    REMAINDER       reduce using rule 52 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 52 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 52 (multiplicative_expression -> unary_expression .)
    LSHIFT          reduce using rule 52 (multiplicative_expression -> unary_expression .)
    RSHIFT          reduce using rule 52 (multiplicative_expression -> unary_expression .)
    GREATER         reduce using rule 52 (multiplicative_expression -> unary_expression .)
    LESS            reduce using rule 52 (multiplicative_expression -> unary_expression .)
    GEQ             reduce using rule 52 (multiplicative_expression -> unary_expression .)
    LEQ             reduce using rule 52 (multiplicative_expression -> unary_expression .)
    EQUAL           reduce using rule 52 (multiplicative_expression -> unary_expression .)
    NEQUAL          reduce using rule 52 (multiplicative_expression -> unary_expression .)
    AND_BITWISE     reduce using rule 52 (multiplicative_expression -> unary_expression .)
    XOR             reduce using rule 52 (multiplicative_expression -> unary_expression .)
    OR_BITWISE      reduce using rule 52 (multiplicative_expression -> unary_expression .)
    AND             reduce using rule 52 (multiplicative_expression -> unary_expression .)
    OR              reduce using rule 52 (multiplicative_expression -> unary_expression .)
    KWRD_MATCH      reduce using rule 52 (multiplicative_expression -> unary_expression .)
    STATE_END       reduce using rule 52 (multiplicative_expression -> unary_expression .)
    RPAREN          reduce using rule 52 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 52 (multiplicative_expression -> unary_expression .)
    RBPAREN         reduce using rule 52 (multiplicative_expression -> unary_expression .)
    KWRD_UNTIL      reduce using rule 52 (multiplicative_expression -> unary_expression .)
    FUNTYPE         reduce using rule 52 (multiplicative_expression -> unary_expression .)
    KWRD_BY         reduce using rule 52 (multiplicative_expression -> unary_expression .)


state 57

    (58) unary_expression -> unary_expression_not_plus_minus .

    TIMES           reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    DIVIDE          reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    REMAINDER       reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    PLUS            reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    MINUS           reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    LSHIFT          reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    RSHIFT          reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    GREATER         reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    LESS            reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    GEQ             reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    LEQ             reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    EQUAL           reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    NEQUAL          reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    AND_BITWISE     reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    XOR             reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    OR_BITWISE      reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    AND             reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    OR              reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    FUNTYPE         reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    KWRD_MATCH      reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    STATE_END       reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    RPAREN          reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    COMMA           reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    RBPAREN         reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    KWRD_UNTIL      reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)
    KWRD_BY         reduce using rule 58 (unary_expression -> unary_expression_not_plus_minus .)


state 58

    (153) for_statement -> KWRD_FOR . LPAREN for_loop RPAREN block

    LPAREN          shift and go to state 137


state 59

    (138) if_else_statement -> MarkIfStart . if_else_begin if_else_intermediate MarkIfEnd
    (139) if_else_begin -> . if_else_starting if_else_ending
    (140) if_else_starting -> . KWRD_IF LPAREN expression RPAREN

    KWRD_IF         shift and go to state 138

    if_else_begin                  shift and go to state 139
    if_else_starting               shift and go to state 140

state 60

    (129) normal_statement -> switch_statement .

    KWRD_FOR        reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_OBJECT     reduce using rule 129 (normal_statement -> switch_statement .)
    STATE_END       reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_RETURN     reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_DO         reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_PROTECTED  reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_PRIVATE    reduce using rule 129 (normal_statement -> switch_statement .)
    BLOCK_BEGIN     reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_WHILE      reduce using rule 129 (normal_statement -> switch_statement .)
    IDENTIFIER      reduce using rule 129 (normal_statement -> switch_statement .)
    PLUS            reduce using rule 129 (normal_statement -> switch_statement .)
    MINUS           reduce using rule 129 (normal_statement -> switch_statement .)
    NOT             reduce using rule 129 (normal_statement -> switch_statement .)
    TILDA           reduce using rule 129 (normal_statement -> switch_statement .)
    LPAREN          reduce using rule 129 (normal_statement -> switch_statement .)
    CHARACTER       reduce using rule 129 (normal_statement -> switch_statement .)
    STRING_CONST    reduce using rule 129 (normal_statement -> switch_statement .)
    BOOL_CONSTT     reduce using rule 129 (normal_statement -> switch_statement .)
    BOOL_CONSTF     reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_NULL       reduce using rule 129 (normal_statement -> switch_statement .)
    FLOAT_CONST     reduce using rule 129 (normal_statement -> switch_statement .)
    INT_CONST       reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_DEF        reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_CLASS      reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_VAR        reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_VAL        reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_IF         reduce using rule 129 (normal_statement -> switch_statement .)
    BLOCK_END       reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_CASE       reduce using rule 129 (normal_statement -> switch_statement .)


state 61

    (46) shift_expression -> additive_expression .
    (50) additive_expression -> additive_expression . PLUS multiplicative_expression
    (51) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 46 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 46 (shift_expression -> additive_expression .)
    GREATER         reduce using rule 46 (shift_expression -> additive_expression .)
    LESS            reduce using rule 46 (shift_expression -> additive_expression .)
    GEQ             reduce using rule 46 (shift_expression -> additive_expression .)
    LEQ             reduce using rule 46 (shift_expression -> additive_expression .)
    EQUAL           reduce using rule 46 (shift_expression -> additive_expression .)
    NEQUAL          reduce using rule 46 (shift_expression -> additive_expression .)
    AND_BITWISE     reduce using rule 46 (shift_expression -> additive_expression .)
    XOR             reduce using rule 46 (shift_expression -> additive_expression .)
    OR_BITWISE      reduce using rule 46 (shift_expression -> additive_expression .)
    AND             reduce using rule 46 (shift_expression -> additive_expression .)
    OR              reduce using rule 46 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 46 (shift_expression -> additive_expression .)
    STATE_END       reduce using rule 46 (shift_expression -> additive_expression .)
    KWRD_MATCH      reduce using rule 46 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 46 (shift_expression -> additive_expression .)
    RBPAREN         reduce using rule 46 (shift_expression -> additive_expression .)
    KWRD_UNTIL      reduce using rule 46 (shift_expression -> additive_expression .)
    FUNTYPE         reduce using rule 46 (shift_expression -> additive_expression .)
    KWRD_BY         reduce using rule 46 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142


state 62

    (14) assignment_expression -> conditional_or_expression .
    (29) conditional_or_expression -> conditional_or_expression . OR Marker conditional_and_expression

    KWRD_MATCH      reduce using rule 14 (assignment_expression -> conditional_or_expression .)
    STATE_END       reduce using rule 14 (assignment_expression -> conditional_or_expression .)
    RPAREN          reduce using rule 14 (assignment_expression -> conditional_or_expression .)
    KWRD_UNTIL      reduce using rule 14 (assignment_expression -> conditional_or_expression .)
    COMMA           reduce using rule 14 (assignment_expression -> conditional_or_expression .)
    KWRD_BY         reduce using rule 14 (assignment_expression -> conditional_or_expression .)
    RBPAREN         reduce using rule 14 (assignment_expression -> conditional_or_expression .)
    FUNTYPE         reduce using rule 14 (assignment_expression -> conditional_or_expression .)
    OR              shift and go to state 143


state 63

    (123) statement -> do_while_statement .

    KWRD_FOR        reduce using rule 123 (statement -> do_while_statement .)
    KWRD_OBJECT     reduce using rule 123 (statement -> do_while_statement .)
    STATE_END       reduce using rule 123 (statement -> do_while_statement .)
    KWRD_RETURN     reduce using rule 123 (statement -> do_while_statement .)
    KWRD_DO         reduce using rule 123 (statement -> do_while_statement .)
    KWRD_PROTECTED  reduce using rule 123 (statement -> do_while_statement .)
    KWRD_PRIVATE    reduce using rule 123 (statement -> do_while_statement .)
    BLOCK_BEGIN     reduce using rule 123 (statement -> do_while_statement .)
    KWRD_WHILE      reduce using rule 123 (statement -> do_while_statement .)
    IDENTIFIER      reduce using rule 123 (statement -> do_while_statement .)
    PLUS            reduce using rule 123 (statement -> do_while_statement .)
    MINUS           reduce using rule 123 (statement -> do_while_statement .)
    NOT             reduce using rule 123 (statement -> do_while_statement .)
    TILDA           reduce using rule 123 (statement -> do_while_statement .)
    LPAREN          reduce using rule 123 (statement -> do_while_statement .)
    CHARACTER       reduce using rule 123 (statement -> do_while_statement .)
    STRING_CONST    reduce using rule 123 (statement -> do_while_statement .)
    BOOL_CONSTT     reduce using rule 123 (statement -> do_while_statement .)
    BOOL_CONSTF     reduce using rule 123 (statement -> do_while_statement .)
    KWRD_NULL       reduce using rule 123 (statement -> do_while_statement .)
    FLOAT_CONST     reduce using rule 123 (statement -> do_while_statement .)
    INT_CONST       reduce using rule 123 (statement -> do_while_statement .)
    KWRD_DEF        reduce using rule 123 (statement -> do_while_statement .)
    KWRD_CLASS      reduce using rule 123 (statement -> do_while_statement .)
    KWRD_VAR        reduce using rule 123 (statement -> do_while_statement .)
    KWRD_VAL        reduce using rule 123 (statement -> do_while_statement .)
    KWRD_IF         reduce using rule 123 (statement -> do_while_statement .)
    BLOCK_END       reduce using rule 123 (statement -> do_while_statement .)
    KWRD_CASE       reduce using rule 123 (statement -> do_while_statement .)


state 64

    (49) additive_expression -> multiplicative_expression .
    (53) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (54) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (55) multiplicative_expression -> multiplicative_expression . REMAINDER unary_expression

    PLUS            reduce using rule 49 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 49 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 49 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 49 (additive_expression -> multiplicative_expression .)
    GREATER         reduce using rule 49 (additive_expression -> multiplicative_expression .)
    LESS            reduce using rule 49 (additive_expression -> multiplicative_expression .)
    GEQ             reduce using rule 49 (additive_expression -> multiplicative_expression .)
    LEQ             reduce using rule 49 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 49 (additive_expression -> multiplicative_expression .)
    NEQUAL          reduce using rule 49 (additive_expression -> multiplicative_expression .)
    AND_BITWISE     reduce using rule 49 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 49 (additive_expression -> multiplicative_expression .)
    OR_BITWISE      reduce using rule 49 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 49 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 49 (additive_expression -> multiplicative_expression .)
    KWRD_MATCH      reduce using rule 49 (additive_expression -> multiplicative_expression .)
    STATE_END       reduce using rule 49 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 49 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 49 (additive_expression -> multiplicative_expression .)
    RBPAREN         reduce using rule 49 (additive_expression -> multiplicative_expression .)
    KWRD_UNTIL      reduce using rule 49 (additive_expression -> multiplicative_expression .)
    FUNTYPE         reduce using rule 49 (additive_expression -> multiplicative_expression .)
    KWRD_BY         reduce using rule 49 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 145
    REMAINDER       shift and go to state 144


state 65

    (41) relational_expression -> shift_expression .
    (47) shift_expression -> shift_expression . LSHIFT additive_expression
    (48) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 41 (relational_expression -> shift_expression .)
    LESS            reduce using rule 41 (relational_expression -> shift_expression .)
    GEQ             reduce using rule 41 (relational_expression -> shift_expression .)
    LEQ             reduce using rule 41 (relational_expression -> shift_expression .)
    EQUAL           reduce using rule 41 (relational_expression -> shift_expression .)
    NEQUAL          reduce using rule 41 (relational_expression -> shift_expression .)
    AND_BITWISE     reduce using rule 41 (relational_expression -> shift_expression .)
    XOR             reduce using rule 41 (relational_expression -> shift_expression .)
    OR_BITWISE      reduce using rule 41 (relational_expression -> shift_expression .)
    AND             reduce using rule 41 (relational_expression -> shift_expression .)
    OR              reduce using rule 41 (relational_expression -> shift_expression .)
    KWRD_MATCH      reduce using rule 41 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 41 (relational_expression -> shift_expression .)
    STATE_END       reduce using rule 41 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 41 (relational_expression -> shift_expression .)
    RBPAREN         reduce using rule 41 (relational_expression -> shift_expression .)
    KWRD_UNTIL      reduce using rule 41 (relational_expression -> shift_expression .)
    FUNTYPE         reduce using rule 41 (relational_expression -> shift_expression .)
    KWRD_BY         reduce using rule 41 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 148
    RSHIFT          shift and go to state 147


state 66

    (63) base_variable_set -> variable_literal .

    TIMES           reduce using rule 63 (base_variable_set -> variable_literal .)
    DIVIDE          reduce using rule 63 (base_variable_set -> variable_literal .)
    REMAINDER       reduce using rule 63 (base_variable_set -> variable_literal .)
    PLUS            reduce using rule 63 (base_variable_set -> variable_literal .)
    MINUS           reduce using rule 63 (base_variable_set -> variable_literal .)
    LSHIFT          reduce using rule 63 (base_variable_set -> variable_literal .)
    RSHIFT          reduce using rule 63 (base_variable_set -> variable_literal .)
    GREATER         reduce using rule 63 (base_variable_set -> variable_literal .)
    LESS            reduce using rule 63 (base_variable_set -> variable_literal .)
    GEQ             reduce using rule 63 (base_variable_set -> variable_literal .)
    LEQ             reduce using rule 63 (base_variable_set -> variable_literal .)
    EQUAL           reduce using rule 63 (base_variable_set -> variable_literal .)
    NEQUAL          reduce using rule 63 (base_variable_set -> variable_literal .)
    AND_BITWISE     reduce using rule 63 (base_variable_set -> variable_literal .)
    XOR             reduce using rule 63 (base_variable_set -> variable_literal .)
    OR_BITWISE      reduce using rule 63 (base_variable_set -> variable_literal .)
    AND             reduce using rule 63 (base_variable_set -> variable_literal .)
    OR              reduce using rule 63 (base_variable_set -> variable_literal .)
    KWRD_MATCH      reduce using rule 63 (base_variable_set -> variable_literal .)
    STATE_END       reduce using rule 63 (base_variable_set -> variable_literal .)
    RPAREN          reduce using rule 63 (base_variable_set -> variable_literal .)
    COMMA           reduce using rule 63 (base_variable_set -> variable_literal .)
    RBPAREN         reduce using rule 63 (base_variable_set -> variable_literal .)
    KWRD_UNTIL      reduce using rule 63 (base_variable_set -> variable_literal .)
    FUNTYPE         reduce using rule 63 (base_variable_set -> variable_literal .)
    KWRD_BY         reduce using rule 63 (base_variable_set -> variable_literal .)


state 67

    (28) conditional_or_expression -> conditional_and_expression .
    (31) conditional_and_expression -> conditional_and_expression . AND Marker inclusive_or_expression

    OR              reduce using rule 28 (conditional_or_expression -> conditional_and_expression .)
    KWRD_MATCH      reduce using rule 28 (conditional_or_expression -> conditional_and_expression .)
    RPAREN          reduce using rule 28 (conditional_or_expression -> conditional_and_expression .)
    COMMA           reduce using rule 28 (conditional_or_expression -> conditional_and_expression .)
    STATE_END       reduce using rule 28 (conditional_or_expression -> conditional_and_expression .)
    RBPAREN         reduce using rule 28 (conditional_or_expression -> conditional_and_expression .)
    KWRD_UNTIL      reduce using rule 28 (conditional_or_expression -> conditional_and_expression .)
    FUNTYPE         reduce using rule 28 (conditional_or_expression -> conditional_and_expression .)
    KWRD_BY         reduce using rule 28 (conditional_or_expression -> conditional_and_expression .)
    AND             shift and go to state 149


state 68

    (60) unary_expression_not_plus_minus -> NOT . unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 85
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    unary_expression               shift and go to state 150
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 118
    array_access                   shift and go to state 36
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    literal                        shift and go to state 78
    method_invocation              shift and go to state 119
    cast_expression                shift and go to state 86
    simple_name                    shift and go to state 74
    name                           shift and go to state 120

state 69

    (157) switch_statement -> expression . KWRD_MATCH switch_block

    KWRD_MATCH      shift and go to state 151


state 70

    (125) normal_statement -> block .

    KWRD_FOR        reduce using rule 125 (normal_statement -> block .)
    KWRD_OBJECT     reduce using rule 125 (normal_statement -> block .)
    STATE_END       reduce using rule 125 (normal_statement -> block .)
    KWRD_RETURN     reduce using rule 125 (normal_statement -> block .)
    KWRD_DO         reduce using rule 125 (normal_statement -> block .)
    KWRD_PROTECTED  reduce using rule 125 (normal_statement -> block .)
    KWRD_PRIVATE    reduce using rule 125 (normal_statement -> block .)
    BLOCK_BEGIN     reduce using rule 125 (normal_statement -> block .)
    KWRD_WHILE      reduce using rule 125 (normal_statement -> block .)
    IDENTIFIER      reduce using rule 125 (normal_statement -> block .)
    PLUS            reduce using rule 125 (normal_statement -> block .)
    MINUS           reduce using rule 125 (normal_statement -> block .)
    NOT             reduce using rule 125 (normal_statement -> block .)
    TILDA           reduce using rule 125 (normal_statement -> block .)
    LPAREN          reduce using rule 125 (normal_statement -> block .)
    CHARACTER       reduce using rule 125 (normal_statement -> block .)
    STRING_CONST    reduce using rule 125 (normal_statement -> block .)
    BOOL_CONSTT     reduce using rule 125 (normal_statement -> block .)
    BOOL_CONSTF     reduce using rule 125 (normal_statement -> block .)
    KWRD_NULL       reduce using rule 125 (normal_statement -> block .)
    FLOAT_CONST     reduce using rule 125 (normal_statement -> block .)
    INT_CONST       reduce using rule 125 (normal_statement -> block .)
    KWRD_DEF        reduce using rule 125 (normal_statement -> block .)
    KWRD_CLASS      reduce using rule 125 (normal_statement -> block .)
    KWRD_VAR        reduce using rule 125 (normal_statement -> block .)
    KWRD_VAL        reduce using rule 125 (normal_statement -> block .)
    KWRD_IF         reduce using rule 125 (normal_statement -> block .)
    BLOCK_END       reduce using rule 125 (normal_statement -> block .)
    KWRD_CASE       reduce using rule 125 (normal_statement -> block .)


state 71

    (32) inclusive_or_expression -> exclusive_or_expression .
    (35) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR_BITWISE      reduce using rule 32 (inclusive_or_expression -> exclusive_or_expression .)
    AND             reduce using rule 32 (inclusive_or_expression -> exclusive_or_expression .)
    OR              reduce using rule 32 (inclusive_or_expression -> exclusive_or_expression .)
    STATE_END       reduce using rule 32 (inclusive_or_expression -> exclusive_or_expression .)
    KWRD_MATCH      reduce using rule 32 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 32 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 32 (inclusive_or_expression -> exclusive_or_expression .)
    RBPAREN         reduce using rule 32 (inclusive_or_expression -> exclusive_or_expression .)
    KWRD_BY         reduce using rule 32 (inclusive_or_expression -> exclusive_or_expression .)
    KWRD_UNTIL      reduce using rule 32 (inclusive_or_expression -> exclusive_or_expression .)
    FUNTYPE         reduce using rule 32 (inclusive_or_expression -> exclusive_or_expression .)
    XOR             shift and go to state 152


state 72

    (89) variable_literal -> primary .

    TIMES           reduce using rule 89 (variable_literal -> primary .)
    DIVIDE          reduce using rule 89 (variable_literal -> primary .)
    REMAINDER       reduce using rule 89 (variable_literal -> primary .)
    PLUS            reduce using rule 89 (variable_literal -> primary .)
    MINUS           reduce using rule 89 (variable_literal -> primary .)
    LSHIFT          reduce using rule 89 (variable_literal -> primary .)
    RSHIFT          reduce using rule 89 (variable_literal -> primary .)
    GREATER         reduce using rule 89 (variable_literal -> primary .)
    LESS            reduce using rule 89 (variable_literal -> primary .)
    GEQ             reduce using rule 89 (variable_literal -> primary .)
    LEQ             reduce using rule 89 (variable_literal -> primary .)
    EQUAL           reduce using rule 89 (variable_literal -> primary .)
    NEQUAL          reduce using rule 89 (variable_literal -> primary .)
    AND_BITWISE     reduce using rule 89 (variable_literal -> primary .)
    XOR             reduce using rule 89 (variable_literal -> primary .)
    OR_BITWISE      reduce using rule 89 (variable_literal -> primary .)
    AND             reduce using rule 89 (variable_literal -> primary .)
    OR              reduce using rule 89 (variable_literal -> primary .)
    KWRD_MATCH      reduce using rule 89 (variable_literal -> primary .)
    STATE_END       reduce using rule 89 (variable_literal -> primary .)
    RPAREN          reduce using rule 89 (variable_literal -> primary .)
    COMMA           reduce using rule 89 (variable_literal -> primary .)
    RBPAREN         reduce using rule 89 (variable_literal -> primary .)
    KWRD_UNTIL      reduce using rule 89 (variable_literal -> primary .)
    FUNTYPE         reduce using rule 89 (variable_literal -> primary .)
    KWRD_BY         reduce using rule 89 (variable_literal -> primary .)


state 73

    (151) do_while_statement -> do_while_statement_begin . block KWRD_WHILE LPAREN expression RPAREN STATE_END
    (90) block -> . start_scope block_statements_opt end_scope
    (91) start_scope -> . BLOCK_BEGIN

    BLOCK_BEGIN     shift and go to state 16

    start_scope                    shift and go to state 17
    block                          shift and go to state 153

state 74

    (82) name -> simple_name .

    LBPAREN         reduce using rule 82 (name -> simple_name .)
    DOT             reduce using rule 82 (name -> simple_name .)
    LPAREN          reduce using rule 82 (name -> simple_name .)
    ASSIGN          reduce using rule 82 (name -> simple_name .)
    TIMES_ASSIGN    reduce using rule 82 (name -> simple_name .)
    DIVIDE_ASSIGN   reduce using rule 82 (name -> simple_name .)
    REMAINDER_ASSIGN reduce using rule 82 (name -> simple_name .)
    PLUS_ASSIGN     reduce using rule 82 (name -> simple_name .)
    MINUS_ASSIGN    reduce using rule 82 (name -> simple_name .)
    LSHIFT_ASSIGN   reduce using rule 82 (name -> simple_name .)
    RSHIFT_ASSIGN   reduce using rule 82 (name -> simple_name .)
    AND_ASSIGN      reduce using rule 82 (name -> simple_name .)
    OR_ASSIGN       reduce using rule 82 (name -> simple_name .)
    XOR_ASSIGN      reduce using rule 82 (name -> simple_name .)
    TIMES           reduce using rule 82 (name -> simple_name .)
    DIVIDE          reduce using rule 82 (name -> simple_name .)
    REMAINDER       reduce using rule 82 (name -> simple_name .)
    PLUS            reduce using rule 82 (name -> simple_name .)
    MINUS           reduce using rule 82 (name -> simple_name .)
    LSHIFT          reduce using rule 82 (name -> simple_name .)
    RSHIFT          reduce using rule 82 (name -> simple_name .)
    GREATER         reduce using rule 82 (name -> simple_name .)
    LESS            reduce using rule 82 (name -> simple_name .)
    GEQ             reduce using rule 82 (name -> simple_name .)
    LEQ             reduce using rule 82 (name -> simple_name .)
    EQUAL           reduce using rule 82 (name -> simple_name .)
    NEQUAL          reduce using rule 82 (name -> simple_name .)
    AND_BITWISE     reduce using rule 82 (name -> simple_name .)
    XOR             reduce using rule 82 (name -> simple_name .)
    OR_BITWISE      reduce using rule 82 (name -> simple_name .)
    AND             reduce using rule 82 (name -> simple_name .)
    OR              reduce using rule 82 (name -> simple_name .)
    RPAREN          reduce using rule 82 (name -> simple_name .)
    KWRD_MATCH      reduce using rule 82 (name -> simple_name .)
    STATE_END       reduce using rule 82 (name -> simple_name .)
    COMMA           reduce using rule 82 (name -> simple_name .)
    RBPAREN         reduce using rule 82 (name -> simple_name .)
    KWRD_UNTIL      reduce using rule 82 (name -> simple_name .)
    FUNTYPE         reduce using rule 82 (name -> simple_name .)
    KWRD_BY         reduce using rule 82 (name -> simple_name .)


state 75

    (75) int_float -> INT_CONST .

    TIMES           reduce using rule 75 (int_float -> INT_CONST .)
    DIVIDE          reduce using rule 75 (int_float -> INT_CONST .)
    REMAINDER       reduce using rule 75 (int_float -> INT_CONST .)
    PLUS            reduce using rule 75 (int_float -> INT_CONST .)
    MINUS           reduce using rule 75 (int_float -> INT_CONST .)
    LSHIFT          reduce using rule 75 (int_float -> INT_CONST .)
    RSHIFT          reduce using rule 75 (int_float -> INT_CONST .)
    GREATER         reduce using rule 75 (int_float -> INT_CONST .)
    LESS            reduce using rule 75 (int_float -> INT_CONST .)
    GEQ             reduce using rule 75 (int_float -> INT_CONST .)
    LEQ             reduce using rule 75 (int_float -> INT_CONST .)
    EQUAL           reduce using rule 75 (int_float -> INT_CONST .)
    NEQUAL          reduce using rule 75 (int_float -> INT_CONST .)
    AND_BITWISE     reduce using rule 75 (int_float -> INT_CONST .)
    XOR             reduce using rule 75 (int_float -> INT_CONST .)
    OR_BITWISE      reduce using rule 75 (int_float -> INT_CONST .)
    AND             reduce using rule 75 (int_float -> INT_CONST .)
    OR              reduce using rule 75 (int_float -> INT_CONST .)
    FUNTYPE         reduce using rule 75 (int_float -> INT_CONST .)
    KWRD_BY         reduce using rule 75 (int_float -> INT_CONST .)
    RPAREN          reduce using rule 75 (int_float -> INT_CONST .)
    KWRD_MATCH      reduce using rule 75 (int_float -> INT_CONST .)
    COMMA           reduce using rule 75 (int_float -> INT_CONST .)
    STATE_END       reduce using rule 75 (int_float -> INT_CONST .)
    RBPAREN         reduce using rule 75 (int_float -> INT_CONST .)
    KWRD_UNTIL      reduce using rule 75 (int_float -> INT_CONST .)


state 76

    (121) statement -> if_else_statement .

    KWRD_FOR        reduce using rule 121 (statement -> if_else_statement .)
    KWRD_OBJECT     reduce using rule 121 (statement -> if_else_statement .)
    STATE_END       reduce using rule 121 (statement -> if_else_statement .)
    KWRD_RETURN     reduce using rule 121 (statement -> if_else_statement .)
    KWRD_DO         reduce using rule 121 (statement -> if_else_statement .)
    KWRD_PROTECTED  reduce using rule 121 (statement -> if_else_statement .)
    KWRD_PRIVATE    reduce using rule 121 (statement -> if_else_statement .)
    BLOCK_BEGIN     reduce using rule 121 (statement -> if_else_statement .)
    KWRD_WHILE      reduce using rule 121 (statement -> if_else_statement .)
    IDENTIFIER      reduce using rule 121 (statement -> if_else_statement .)
    PLUS            reduce using rule 121 (statement -> if_else_statement .)
    MINUS           reduce using rule 121 (statement -> if_else_statement .)
    NOT             reduce using rule 121 (statement -> if_else_statement .)
    TILDA           reduce using rule 121 (statement -> if_else_statement .)
    LPAREN          reduce using rule 121 (statement -> if_else_statement .)
    CHARACTER       reduce using rule 121 (statement -> if_else_statement .)
    STRING_CONST    reduce using rule 121 (statement -> if_else_statement .)
    BOOL_CONSTT     reduce using rule 121 (statement -> if_else_statement .)
    BOOL_CONSTF     reduce using rule 121 (statement -> if_else_statement .)
    KWRD_NULL       reduce using rule 121 (statement -> if_else_statement .)
    FLOAT_CONST     reduce using rule 121 (statement -> if_else_statement .)
    INT_CONST       reduce using rule 121 (statement -> if_else_statement .)
    KWRD_DEF        reduce using rule 121 (statement -> if_else_statement .)
    KWRD_CLASS      reduce using rule 121 (statement -> if_else_statement .)
    KWRD_VAR        reduce using rule 121 (statement -> if_else_statement .)
    KWRD_VAL        reduce using rule 121 (statement -> if_else_statement .)
    KWRD_IF         reduce using rule 121 (statement -> if_else_statement .)
    BLOCK_END       reduce using rule 121 (statement -> if_else_statement .)
    KWRD_CASE       reduce using rule 121 (statement -> if_else_statement .)


state 77

    (95) block_statements -> block_statement .

    KWRD_FOR        reduce using rule 95 (block_statements -> block_statement .)
    KWRD_OBJECT     reduce using rule 95 (block_statements -> block_statement .)
    STATE_END       reduce using rule 95 (block_statements -> block_statement .)
    KWRD_RETURN     reduce using rule 95 (block_statements -> block_statement .)
    KWRD_DO         reduce using rule 95 (block_statements -> block_statement .)
    KWRD_PROTECTED  reduce using rule 95 (block_statements -> block_statement .)
    KWRD_PRIVATE    reduce using rule 95 (block_statements -> block_statement .)
    BLOCK_BEGIN     reduce using rule 95 (block_statements -> block_statement .)
    KWRD_WHILE      reduce using rule 95 (block_statements -> block_statement .)
    IDENTIFIER      reduce using rule 95 (block_statements -> block_statement .)
    PLUS            reduce using rule 95 (block_statements -> block_statement .)
    MINUS           reduce using rule 95 (block_statements -> block_statement .)
    NOT             reduce using rule 95 (block_statements -> block_statement .)
    TILDA           reduce using rule 95 (block_statements -> block_statement .)
    LPAREN          reduce using rule 95 (block_statements -> block_statement .)
    CHARACTER       reduce using rule 95 (block_statements -> block_statement .)
    STRING_CONST    reduce using rule 95 (block_statements -> block_statement .)
    BOOL_CONSTT     reduce using rule 95 (block_statements -> block_statement .)
    BOOL_CONSTF     reduce using rule 95 (block_statements -> block_statement .)
    KWRD_NULL       reduce using rule 95 (block_statements -> block_statement .)
    FLOAT_CONST     reduce using rule 95 (block_statements -> block_statement .)
    INT_CONST       reduce using rule 95 (block_statements -> block_statement .)
    KWRD_DEF        reduce using rule 95 (block_statements -> block_statement .)
    KWRD_CLASS      reduce using rule 95 (block_statements -> block_statement .)
    KWRD_VAR        reduce using rule 95 (block_statements -> block_statement .)
    KWRD_VAL        reduce using rule 95 (block_statements -> block_statement .)
    KWRD_IF         reduce using rule 95 (block_statements -> block_statement .)
    BLOCK_END       reduce using rule 95 (block_statements -> block_statement .)
    KWRD_CASE       reduce using rule 95 (block_statements -> block_statement .)


state 78

    (66) primary -> literal .

    TIMES           reduce using rule 66 (primary -> literal .)
    DIVIDE          reduce using rule 66 (primary -> literal .)
    REMAINDER       reduce using rule 66 (primary -> literal .)
    PLUS            reduce using rule 66 (primary -> literal .)
    MINUS           reduce using rule 66 (primary -> literal .)
    LSHIFT          reduce using rule 66 (primary -> literal .)
    RSHIFT          reduce using rule 66 (primary -> literal .)
    GREATER         reduce using rule 66 (primary -> literal .)
    LESS            reduce using rule 66 (primary -> literal .)
    GEQ             reduce using rule 66 (primary -> literal .)
    LEQ             reduce using rule 66 (primary -> literal .)
    EQUAL           reduce using rule 66 (primary -> literal .)
    NEQUAL          reduce using rule 66 (primary -> literal .)
    AND_BITWISE     reduce using rule 66 (primary -> literal .)
    XOR             reduce using rule 66 (primary -> literal .)
    OR_BITWISE      reduce using rule 66 (primary -> literal .)
    AND             reduce using rule 66 (primary -> literal .)
    OR              reduce using rule 66 (primary -> literal .)
    KWRD_MATCH      reduce using rule 66 (primary -> literal .)
    STATE_END       reduce using rule 66 (primary -> literal .)
    RPAREN          reduce using rule 66 (primary -> literal .)
    COMMA           reduce using rule 66 (primary -> literal .)
    RBPAREN         reduce using rule 66 (primary -> literal .)
    KWRD_UNTIL      reduce using rule 66 (primary -> literal .)
    FUNTYPE         reduce using rule 66 (primary -> literal .)
    KWRD_BY         reduce using rule 66 (primary -> literal .)


state 79

    (62) unary_expression_not_plus_minus -> TILDA . unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 85
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    unary_expression               shift and go to state 154
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 118
    array_access                   shift and go to state 36
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    literal                        shift and go to state 78
    method_invocation              shift and go to state 119
    cast_expression                shift and go to state 86
    simple_name                    shift and go to state 74
    name                           shift and go to state 120

state 80

    (38) equality_expression -> relational_expression .
    (42) relational_expression -> relational_expression . GREATER shift_expression
    (43) relational_expression -> relational_expression . LESS shift_expression
    (44) relational_expression -> relational_expression . GEQ shift_expression
    (45) relational_expression -> relational_expression . LEQ shift_expression

    EQUAL           reduce using rule 38 (equality_expression -> relational_expression .)
    NEQUAL          reduce using rule 38 (equality_expression -> relational_expression .)
    AND_BITWISE     reduce using rule 38 (equality_expression -> relational_expression .)
    XOR             reduce using rule 38 (equality_expression -> relational_expression .)
    OR_BITWISE      reduce using rule 38 (equality_expression -> relational_expression .)
    AND             reduce using rule 38 (equality_expression -> relational_expression .)
    OR              reduce using rule 38 (equality_expression -> relational_expression .)
    KWRD_MATCH      reduce using rule 38 (equality_expression -> relational_expression .)
    STATE_END       reduce using rule 38 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 38 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 38 (equality_expression -> relational_expression .)
    RBPAREN         reduce using rule 38 (equality_expression -> relational_expression .)
    KWRD_UNTIL      reduce using rule 38 (equality_expression -> relational_expression .)
    FUNTYPE         reduce using rule 38 (equality_expression -> relational_expression .)
    KWRD_BY         reduce using rule 38 (equality_expression -> relational_expression .)
    GREATER         shift and go to state 156
    LESS            shift and go to state 157
    GEQ             shift and go to state 155
    LEQ             shift and go to state 158


state 81

    (98) block_statement -> statement .

    KWRD_FOR        reduce using rule 98 (block_statement -> statement .)
    KWRD_OBJECT     reduce using rule 98 (block_statement -> statement .)
    STATE_END       reduce using rule 98 (block_statement -> statement .)
    KWRD_RETURN     reduce using rule 98 (block_statement -> statement .)
    KWRD_DO         reduce using rule 98 (block_statement -> statement .)
    KWRD_PROTECTED  reduce using rule 98 (block_statement -> statement .)
    KWRD_PRIVATE    reduce using rule 98 (block_statement -> statement .)
    BLOCK_BEGIN     reduce using rule 98 (block_statement -> statement .)
    KWRD_WHILE      reduce using rule 98 (block_statement -> statement .)
    IDENTIFIER      reduce using rule 98 (block_statement -> statement .)
    PLUS            reduce using rule 98 (block_statement -> statement .)
    MINUS           reduce using rule 98 (block_statement -> statement .)
    NOT             reduce using rule 98 (block_statement -> statement .)
    TILDA           reduce using rule 98 (block_statement -> statement .)
    LPAREN          reduce using rule 98 (block_statement -> statement .)
    CHARACTER       reduce using rule 98 (block_statement -> statement .)
    STRING_CONST    reduce using rule 98 (block_statement -> statement .)
    BOOL_CONSTT     reduce using rule 98 (block_statement -> statement .)
    BOOL_CONSTF     reduce using rule 98 (block_statement -> statement .)
    KWRD_NULL       reduce using rule 98 (block_statement -> statement .)
    FLOAT_CONST     reduce using rule 98 (block_statement -> statement .)
    INT_CONST       reduce using rule 98 (block_statement -> statement .)
    KWRD_DEF        reduce using rule 98 (block_statement -> statement .)
    KWRD_CLASS      reduce using rule 98 (block_statement -> statement .)
    KWRD_VAR        reduce using rule 98 (block_statement -> statement .)
    KWRD_VAL        reduce using rule 98 (block_statement -> statement .)
    KWRD_IF         reduce using rule 98 (block_statement -> statement .)
    BLOCK_END       reduce using rule 98 (block_statement -> statement .)
    KWRD_CASE       reduce using rule 98 (block_statement -> statement .)


state 82

    (132) statement_expression -> method_invocation .
    (67) primary -> method_invocation .

    STATE_END       reduce using rule 132 (statement_expression -> method_invocation .)
    TIMES           reduce using rule 67 (primary -> method_invocation .)
    DIVIDE          reduce using rule 67 (primary -> method_invocation .)
    REMAINDER       reduce using rule 67 (primary -> method_invocation .)
    PLUS            reduce using rule 67 (primary -> method_invocation .)
    MINUS           reduce using rule 67 (primary -> method_invocation .)
    LSHIFT          reduce using rule 67 (primary -> method_invocation .)
    RSHIFT          reduce using rule 67 (primary -> method_invocation .)
    GREATER         reduce using rule 67 (primary -> method_invocation .)
    LESS            reduce using rule 67 (primary -> method_invocation .)
    GEQ             reduce using rule 67 (primary -> method_invocation .)
    LEQ             reduce using rule 67 (primary -> method_invocation .)
    EQUAL           reduce using rule 67 (primary -> method_invocation .)
    NEQUAL          reduce using rule 67 (primary -> method_invocation .)
    AND_BITWISE     reduce using rule 67 (primary -> method_invocation .)
    XOR             reduce using rule 67 (primary -> method_invocation .)
    OR_BITWISE      reduce using rule 67 (primary -> method_invocation .)
    AND             reduce using rule 67 (primary -> method_invocation .)
    OR              reduce using rule 67 (primary -> method_invocation .)
    KWRD_MATCH      reduce using rule 67 (primary -> method_invocation .)


state 83

    (84) simple_name -> IDENTIFIER .

    LBPAREN         reduce using rule 84 (simple_name -> IDENTIFIER .)
    LPAREN          reduce using rule 84 (simple_name -> IDENTIFIER .)
    DOT             reduce using rule 84 (simple_name -> IDENTIFIER .)
    TIMES           reduce using rule 84 (simple_name -> IDENTIFIER .)
    DIVIDE          reduce using rule 84 (simple_name -> IDENTIFIER .)
    REMAINDER       reduce using rule 84 (simple_name -> IDENTIFIER .)
    PLUS            reduce using rule 84 (simple_name -> IDENTIFIER .)
    MINUS           reduce using rule 84 (simple_name -> IDENTIFIER .)
    LSHIFT          reduce using rule 84 (simple_name -> IDENTIFIER .)
    RSHIFT          reduce using rule 84 (simple_name -> IDENTIFIER .)
    GREATER         reduce using rule 84 (simple_name -> IDENTIFIER .)
    LESS            reduce using rule 84 (simple_name -> IDENTIFIER .)
    GEQ             reduce using rule 84 (simple_name -> IDENTIFIER .)
    LEQ             reduce using rule 84 (simple_name -> IDENTIFIER .)
    EQUAL           reduce using rule 84 (simple_name -> IDENTIFIER .)
    NEQUAL          reduce using rule 84 (simple_name -> IDENTIFIER .)
    AND_BITWISE     reduce using rule 84 (simple_name -> IDENTIFIER .)
    XOR             reduce using rule 84 (simple_name -> IDENTIFIER .)
    OR_BITWISE      reduce using rule 84 (simple_name -> IDENTIFIER .)
    AND             reduce using rule 84 (simple_name -> IDENTIFIER .)
    OR              reduce using rule 84 (simple_name -> IDENTIFIER .)
    KWRD_MATCH      reduce using rule 84 (simple_name -> IDENTIFIER .)
    STATE_END       reduce using rule 84 (simple_name -> IDENTIFIER .)
    RPAREN          reduce using rule 84 (simple_name -> IDENTIFIER .)
    COMMA           reduce using rule 84 (simple_name -> IDENTIFIER .)
    RBPAREN         reduce using rule 84 (simple_name -> IDENTIFIER .)
    KWRD_UNTIL      reduce using rule 84 (simple_name -> IDENTIFIER .)
    FUNTYPE         reduce using rule 84 (simple_name -> IDENTIFIER .)
    KWRD_BY         reduce using rule 84 (simple_name -> IDENTIFIER .)
    ASSIGN          reduce using rule 84 (simple_name -> IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 84 (simple_name -> IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 84 (simple_name -> IDENTIFIER .)
    REMAINDER_ASSIGN reduce using rule 84 (simple_name -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 84 (simple_name -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 84 (simple_name -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 84 (simple_name -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 84 (simple_name -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 84 (simple_name -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 84 (simple_name -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 84 (simple_name -> IDENTIFIER .)


state 84

    (94) block_statements_opt -> empty .
    (103) modifier_opts -> empty .
    (135) MarkIfStart -> empty .

    BLOCK_END       reduce using rule 94 (block_statements_opt -> empty .)
    KWRD_DEF        reduce using rule 103 (modifier_opts -> empty .)
    KWRD_CLASS      reduce using rule 103 (modifier_opts -> empty .)
    KWRD_VAR        reduce using rule 103 (modifier_opts -> empty .)
    KWRD_VAL        reduce using rule 103 (modifier_opts -> empty .)
    KWRD_IF         reduce using rule 135 (MarkIfStart -> empty .)


state 85

    (83) name -> qualified_name .

    LBPAREN         reduce using rule 83 (name -> qualified_name .)
    DOT             reduce using rule 83 (name -> qualified_name .)
    LPAREN          reduce using rule 83 (name -> qualified_name .)
    ASSIGN          reduce using rule 83 (name -> qualified_name .)
    TIMES_ASSIGN    reduce using rule 83 (name -> qualified_name .)
    DIVIDE_ASSIGN   reduce using rule 83 (name -> qualified_name .)
    REMAINDER_ASSIGN reduce using rule 83 (name -> qualified_name .)
    PLUS_ASSIGN     reduce using rule 83 (name -> qualified_name .)
    MINUS_ASSIGN    reduce using rule 83 (name -> qualified_name .)
    LSHIFT_ASSIGN   reduce using rule 83 (name -> qualified_name .)
    RSHIFT_ASSIGN   reduce using rule 83 (name -> qualified_name .)
    AND_ASSIGN      reduce using rule 83 (name -> qualified_name .)
    OR_ASSIGN       reduce using rule 83 (name -> qualified_name .)
    XOR_ASSIGN      reduce using rule 83 (name -> qualified_name .)
    TIMES           reduce using rule 83 (name -> qualified_name .)
    DIVIDE          reduce using rule 83 (name -> qualified_name .)
    REMAINDER       reduce using rule 83 (name -> qualified_name .)
    PLUS            reduce using rule 83 (name -> qualified_name .)
    MINUS           reduce using rule 83 (name -> qualified_name .)
    LSHIFT          reduce using rule 83 (name -> qualified_name .)
    RSHIFT          reduce using rule 83 (name -> qualified_name .)
    GREATER         reduce using rule 83 (name -> qualified_name .)
    LESS            reduce using rule 83 (name -> qualified_name .)
    GEQ             reduce using rule 83 (name -> qualified_name .)
    LEQ             reduce using rule 83 (name -> qualified_name .)
    EQUAL           reduce using rule 83 (name -> qualified_name .)
    NEQUAL          reduce using rule 83 (name -> qualified_name .)
    AND_BITWISE     reduce using rule 83 (name -> qualified_name .)
    XOR             reduce using rule 83 (name -> qualified_name .)
    OR_BITWISE      reduce using rule 83 (name -> qualified_name .)
    AND             reduce using rule 83 (name -> qualified_name .)
    OR              reduce using rule 83 (name -> qualified_name .)
    RPAREN          reduce using rule 83 (name -> qualified_name .)
    KWRD_MATCH      reduce using rule 83 (name -> qualified_name .)
    STATE_END       reduce using rule 83 (name -> qualified_name .)
    COMMA           reduce using rule 83 (name -> qualified_name .)
    RBPAREN         reduce using rule 83 (name -> qualified_name .)
    KWRD_UNTIL      reduce using rule 83 (name -> qualified_name .)
    FUNTYPE         reduce using rule 83 (name -> qualified_name .)
    KWRD_BY         reduce using rule 83 (name -> qualified_name .)


state 86

    (61) unary_expression_not_plus_minus -> cast_expression .

    TIMES           reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    DIVIDE          reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    REMAINDER       reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    PLUS            reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    MINUS           reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    LSHIFT          reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    RSHIFT          reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    GREATER         reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    LESS            reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    GEQ             reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    LEQ             reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    EQUAL           reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    NEQUAL          reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    AND_BITWISE     reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    XOR             reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    OR_BITWISE      reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    AND             reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    OR              reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    KWRD_MATCH      reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    STATE_END       reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    RPAREN          reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    COMMA           reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    RBPAREN         reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    KWRD_UNTIL      reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    FUNTYPE         reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    KWRD_BY         reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)


state 87

    (36) and_expression -> equality_expression .
    (39) equality_expression -> equality_expression . EQUAL relational_expression
    (40) equality_expression -> equality_expression . NEQUAL relational_expression

    AND_BITWISE     reduce using rule 36 (and_expression -> equality_expression .)
    XOR             reduce using rule 36 (and_expression -> equality_expression .)
    OR_BITWISE      reduce using rule 36 (and_expression -> equality_expression .)
    AND             reduce using rule 36 (and_expression -> equality_expression .)
    OR              reduce using rule 36 (and_expression -> equality_expression .)
    KWRD_MATCH      reduce using rule 36 (and_expression -> equality_expression .)
    STATE_END       reduce using rule 36 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 36 (and_expression -> equality_expression .)
    COMMA           reduce using rule 36 (and_expression -> equality_expression .)
    RBPAREN         reduce using rule 36 (and_expression -> equality_expression .)
    KWRD_UNTIL      reduce using rule 36 (and_expression -> equality_expression .)
    FUNTYPE         reduce using rule 36 (and_expression -> equality_expression .)
    KWRD_BY         reduce using rule 36 (and_expression -> equality_expression .)
    EQUAL           shift and go to state 160
    NEQUAL          shift and go to state 159


state 88

    (101) block_statement -> method_declaration .

    KWRD_FOR        reduce using rule 101 (block_statement -> method_declaration .)
    KWRD_OBJECT     reduce using rule 101 (block_statement -> method_declaration .)
    STATE_END       reduce using rule 101 (block_statement -> method_declaration .)
    KWRD_RETURN     reduce using rule 101 (block_statement -> method_declaration .)
    KWRD_DO         reduce using rule 101 (block_statement -> method_declaration .)
    KWRD_PROTECTED  reduce using rule 101 (block_statement -> method_declaration .)
    KWRD_PRIVATE    reduce using rule 101 (block_statement -> method_declaration .)
    BLOCK_BEGIN     reduce using rule 101 (block_statement -> method_declaration .)
    KWRD_WHILE      reduce using rule 101 (block_statement -> method_declaration .)
    IDENTIFIER      reduce using rule 101 (block_statement -> method_declaration .)
    PLUS            reduce using rule 101 (block_statement -> method_declaration .)
    MINUS           reduce using rule 101 (block_statement -> method_declaration .)
    NOT             reduce using rule 101 (block_statement -> method_declaration .)
    TILDA           reduce using rule 101 (block_statement -> method_declaration .)
    LPAREN          reduce using rule 101 (block_statement -> method_declaration .)
    CHARACTER       reduce using rule 101 (block_statement -> method_declaration .)
    STRING_CONST    reduce using rule 101 (block_statement -> method_declaration .)
    BOOL_CONSTT     reduce using rule 101 (block_statement -> method_declaration .)
    BOOL_CONSTF     reduce using rule 101 (block_statement -> method_declaration .)
    KWRD_NULL       reduce using rule 101 (block_statement -> method_declaration .)
    FLOAT_CONST     reduce using rule 101 (block_statement -> method_declaration .)
    INT_CONST       reduce using rule 101 (block_statement -> method_declaration .)
    KWRD_DEF        reduce using rule 101 (block_statement -> method_declaration .)
    KWRD_CLASS      reduce using rule 101 (block_statement -> method_declaration .)
    KWRD_VAR        reduce using rule 101 (block_statement -> method_declaration .)
    KWRD_VAL        reduce using rule 101 (block_statement -> method_declaration .)
    KWRD_IF         reduce using rule 101 (block_statement -> method_declaration .)
    BLOCK_END       reduce using rule 101 (block_statement -> method_declaration .)
    KWRD_CASE       reduce using rule 101 (block_statement -> method_declaration .)


state 89

    (186) method_declaration -> method_header . method_body
    (192) method_body -> . method_start_scope block_statements_opt method_end_scope
    (193) method_start_scope -> . BLOCK_BEGIN

    BLOCK_BEGIN     shift and go to state 162

    method_body                    shift and go to state 163
    method_start_scope             shift and go to state 161

state 90

    (127) normal_statement -> empty_statement .

    KWRD_FOR        reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_OBJECT     reduce using rule 127 (normal_statement -> empty_statement .)
    STATE_END       reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_RETURN     reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_DO         reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_PROTECTED  reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_PRIVATE    reduce using rule 127 (normal_statement -> empty_statement .)
    BLOCK_BEGIN     reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_WHILE      reduce using rule 127 (normal_statement -> empty_statement .)
    IDENTIFIER      reduce using rule 127 (normal_statement -> empty_statement .)
    PLUS            reduce using rule 127 (normal_statement -> empty_statement .)
    MINUS           reduce using rule 127 (normal_statement -> empty_statement .)
    NOT             reduce using rule 127 (normal_statement -> empty_statement .)
    TILDA           reduce using rule 127 (normal_statement -> empty_statement .)
    LPAREN          reduce using rule 127 (normal_statement -> empty_statement .)
    CHARACTER       reduce using rule 127 (normal_statement -> empty_statement .)
    STRING_CONST    reduce using rule 127 (normal_statement -> empty_statement .)
    BOOL_CONSTT     reduce using rule 127 (normal_statement -> empty_statement .)
    BOOL_CONSTF     reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_NULL       reduce using rule 127 (normal_statement -> empty_statement .)
    FLOAT_CONST     reduce using rule 127 (normal_statement -> empty_statement .)
    INT_CONST       reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_DEF        reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_CLASS      reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_VAR        reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_VAL        reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_IF         reduce using rule 127 (normal_statement -> empty_statement .)
    BLOCK_END       reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_CASE       reduce using rule 127 (normal_statement -> empty_statement .)


state 91

    (106) local_variable_declaration_statement -> local_variable_declaration . STATE_END

    STATE_END       shift and go to state 164


state 92

    (120) statement -> normal_statement .

    KWRD_FOR        reduce using rule 120 (statement -> normal_statement .)
    KWRD_OBJECT     reduce using rule 120 (statement -> normal_statement .)
    STATE_END       reduce using rule 120 (statement -> normal_statement .)
    KWRD_RETURN     reduce using rule 120 (statement -> normal_statement .)
    KWRD_DO         reduce using rule 120 (statement -> normal_statement .)
    KWRD_PROTECTED  reduce using rule 120 (statement -> normal_statement .)
    KWRD_PRIVATE    reduce using rule 120 (statement -> normal_statement .)
    BLOCK_BEGIN     reduce using rule 120 (statement -> normal_statement .)
    KWRD_WHILE      reduce using rule 120 (statement -> normal_statement .)
    IDENTIFIER      reduce using rule 120 (statement -> normal_statement .)
    PLUS            reduce using rule 120 (statement -> normal_statement .)
    MINUS           reduce using rule 120 (statement -> normal_statement .)
    NOT             reduce using rule 120 (statement -> normal_statement .)
    TILDA           reduce using rule 120 (statement -> normal_statement .)
    LPAREN          reduce using rule 120 (statement -> normal_statement .)
    CHARACTER       reduce using rule 120 (statement -> normal_statement .)
    STRING_CONST    reduce using rule 120 (statement -> normal_statement .)
    BOOL_CONSTT     reduce using rule 120 (statement -> normal_statement .)
    BOOL_CONSTF     reduce using rule 120 (statement -> normal_statement .)
    KWRD_NULL       reduce using rule 120 (statement -> normal_statement .)
    FLOAT_CONST     reduce using rule 120 (statement -> normal_statement .)
    INT_CONST       reduce using rule 120 (statement -> normal_statement .)
    KWRD_DEF        reduce using rule 120 (statement -> normal_statement .)
    KWRD_CLASS      reduce using rule 120 (statement -> normal_statement .)
    KWRD_VAR        reduce using rule 120 (statement -> normal_statement .)
    KWRD_VAL        reduce using rule 120 (statement -> normal_statement .)
    KWRD_IF         reduce using rule 120 (statement -> normal_statement .)
    BLOCK_END       reduce using rule 120 (statement -> normal_statement .)
    KWRD_CASE       reduce using rule 120 (statement -> normal_statement .)


state 93

    (69) literal -> CHARACTER .

    TIMES           reduce using rule 69 (literal -> CHARACTER .)
    DIVIDE          reduce using rule 69 (literal -> CHARACTER .)
    REMAINDER       reduce using rule 69 (literal -> CHARACTER .)
    PLUS            reduce using rule 69 (literal -> CHARACTER .)
    MINUS           reduce using rule 69 (literal -> CHARACTER .)
    LSHIFT          reduce using rule 69 (literal -> CHARACTER .)
    RSHIFT          reduce using rule 69 (literal -> CHARACTER .)
    GREATER         reduce using rule 69 (literal -> CHARACTER .)
    LESS            reduce using rule 69 (literal -> CHARACTER .)
    GEQ             reduce using rule 69 (literal -> CHARACTER .)
    LEQ             reduce using rule 69 (literal -> CHARACTER .)
    EQUAL           reduce using rule 69 (literal -> CHARACTER .)
    NEQUAL          reduce using rule 69 (literal -> CHARACTER .)
    AND_BITWISE     reduce using rule 69 (literal -> CHARACTER .)
    XOR             reduce using rule 69 (literal -> CHARACTER .)
    OR_BITWISE      reduce using rule 69 (literal -> CHARACTER .)
    AND             reduce using rule 69 (literal -> CHARACTER .)
    OR              reduce using rule 69 (literal -> CHARACTER .)
    RPAREN          reduce using rule 69 (literal -> CHARACTER .)
    COMMA           reduce using rule 69 (literal -> CHARACTER .)
    KWRD_MATCH      reduce using rule 69 (literal -> CHARACTER .)
    STATE_END       reduce using rule 69 (literal -> CHARACTER .)
    RBPAREN         reduce using rule 69 (literal -> CHARACTER .)
    KWRD_UNTIL      reduce using rule 69 (literal -> CHARACTER .)
    FUNTYPE         reduce using rule 69 (literal -> CHARACTER .)
    KWRD_BY         reduce using rule 69 (literal -> CHARACTER .)


state 94

    (34) exclusive_or_expression -> and_expression .
    (37) and_expression -> and_expression . AND_BITWISE equality_expression

    XOR             reduce using rule 34 (exclusive_or_expression -> and_expression .)
    OR_BITWISE      reduce using rule 34 (exclusive_or_expression -> and_expression .)
    AND             reduce using rule 34 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 34 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 34 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 34 (exclusive_or_expression -> and_expression .)
    KWRD_MATCH      reduce using rule 34 (exclusive_or_expression -> and_expression .)
    STATE_END       reduce using rule 34 (exclusive_or_expression -> and_expression .)
    RBPAREN         reduce using rule 34 (exclusive_or_expression -> and_expression .)
    KWRD_UNTIL      reduce using rule 34 (exclusive_or_expression -> and_expression .)
    FUNTYPE         reduce using rule 34 (exclusive_or_expression -> and_expression .)
    KWRD_BY         reduce using rule 34 (exclusive_or_expression -> and_expression .)
    AND_BITWISE     shift and go to state 165


state 95

    (59) unary_expression_not_plus_minus -> base_variable_set .

    TIMES           reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    DIVIDE          reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    REMAINDER       reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    PLUS            reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    MINUS           reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    LSHIFT          reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    RSHIFT          reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    GREATER         reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    LESS            reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    GEQ             reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    LEQ             reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    EQUAL           reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    NEQUAL          reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    AND_BITWISE     reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    XOR             reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    OR_BITWISE      reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    AND             reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    OR              reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    KWRD_MATCH      reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    STATE_END       reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    RPAREN          reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    COMMA           reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    RBPAREN         reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    KWRD_UNTIL      reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    FUNTYPE         reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)
    KWRD_BY         reduce using rule 59 (unary_expression_not_plus_minus -> base_variable_set .)


state 96

    (128) normal_statement -> return_statement .

    KWRD_FOR        reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_OBJECT     reduce using rule 128 (normal_statement -> return_statement .)
    STATE_END       reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_RETURN     reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_DO         reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_PROTECTED  reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_PRIVATE    reduce using rule 128 (normal_statement -> return_statement .)
    BLOCK_BEGIN     reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_WHILE      reduce using rule 128 (normal_statement -> return_statement .)
    IDENTIFIER      reduce using rule 128 (normal_statement -> return_statement .)
    PLUS            reduce using rule 128 (normal_statement -> return_statement .)
    MINUS           reduce using rule 128 (normal_statement -> return_statement .)
    NOT             reduce using rule 128 (normal_statement -> return_statement .)
    TILDA           reduce using rule 128 (normal_statement -> return_statement .)
    LPAREN          reduce using rule 128 (normal_statement -> return_statement .)
    CHARACTER       reduce using rule 128 (normal_statement -> return_statement .)
    STRING_CONST    reduce using rule 128 (normal_statement -> return_statement .)
    BOOL_CONSTT     reduce using rule 128 (normal_statement -> return_statement .)
    BOOL_CONSTF     reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_NULL       reduce using rule 128 (normal_statement -> return_statement .)
    FLOAT_CONST     reduce using rule 128 (normal_statement -> return_statement .)
    INT_CONST       reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_DEF        reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_CLASS      reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_VAR        reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_VAL        reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_IF         reduce using rule 128 (normal_statement -> return_statement .)
    BLOCK_END       reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_CASE       reduce using rule 128 (normal_statement -> return_statement .)


state 97

    (93) block_statements_opt -> block_statements .
    (96) block_statements -> block_statements . block_statement
    (97) block_statement -> . local_variable_declaration_statement
    (98) block_statement -> . statement
    (99) block_statement -> . class_declaration
    (100) block_statement -> . SingletonObject
    (101) block_statement -> . method_declaration
    (106) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (120) statement -> . normal_statement
    (121) statement -> . if_else_statement
    (122) statement -> . while_statement
    (123) statement -> . do_while_statement
    (124) statement -> . for_statement
    (177) class_declaration -> . class_header class_body
    (7) SingletonObject -> . ObjectDeclare block
    (186) method_declaration -> . method_header method_body
    (107) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (125) normal_statement -> . block
    (126) normal_statement -> . expression_statement
    (127) normal_statement -> . empty_statement
    (128) normal_statement -> . return_statement
    (129) normal_statement -> . switch_statement
    (138) if_else_statement -> . MarkIfStart if_else_begin if_else_intermediate MarkIfEnd
    (147) while_statement -> . while_header while_body
    (151) do_while_statement -> . do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END
    (153) for_statement -> . KWRD_FOR LPAREN for_loop RPAREN block
    (178) class_header -> . class_header_name class_header_extends_opt
    (8) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (9) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (187) method_header -> . method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (102) modifier_opts -> . modifier
    (103) modifier_opts -> . empty
    (90) block -> . start_scope block_statements_opt end_scope
    (130) expression_statement -> . statement_expression STATE_END
    (168) empty_statement -> . STATE_END
    (169) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (157) switch_statement -> . expression KWRD_MATCH switch_block
    (135) MarkIfStart -> . empty
    (148) while_header -> . while_begin LPAREN expression RPAREN
    (152) do_while_statement_begin -> . KWRD_DO
    (179) class_header_name -> . class_header_name1 func_args_start constructor_arguement_list_opt RPAREN
    (191) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (195) modifier -> . KWRD_PROTECTED
    (196) modifier -> . KWRD_PRIVATE
    (211) empty -> .
    (91) start_scope -> . BLOCK_BEGIN
    (131) statement_expression -> . assignment
    (132) statement_expression -> . method_invocation
    (10) expression -> . assignment_expression
    (150) while_begin -> . KWRD_WHILE
    (180) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (77) array_access -> . name LBPAREN expression RBPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    BLOCK_END       reduce using rule 93 (block_statements_opt -> block_statements .)
    KWRD_FOR        shift and go to state 58
    KWRD_OBJECT     shift and go to state 4
    STATE_END       shift and go to state 55
    KWRD_RETURN     shift and go to state 51
    KWRD_DO         shift and go to state 48
    KWRD_PROTECTED  shift and go to state 11
    KWRD_PRIVATE    shift and go to state 15
    KWRD_DEF        reduce using rule 211 (empty -> .)
    KWRD_CLASS      reduce using rule 211 (empty -> .)
    KWRD_VAR        reduce using rule 211 (empty -> .)
    KWRD_VAL        reduce using rule 211 (empty -> .)
    KWRD_IF         reduce using rule 211 (empty -> .)
    BLOCK_BEGIN     shift and go to state 16
    KWRD_WHILE      shift and go to state 53
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    expression_statement           shift and go to state 33
    unary_expression               shift and go to state 56
    method_header                  shift and go to state 89
    exclusive_or_expression        shift and go to state 71
    normal_statement               shift and go to state 92
    ObjectDeclare                  shift and go to state 1
    unary_expression_not_plus_minus shift and go to state 57
    relational_expression          shift and go to state 80
    do_while_statement_begin       shift and go to state 73
    array_access                   shift and go to state 36
    MarkIfStart                    shift and go to state 59
    switch_statement               shift and go to state 60
    assignment_expression          shift and go to state 99
    primary                        shift and go to state 72
    qualified_name                 shift and go to state 85
    base_variable_set              shift and go to state 95
    if_else_statement              shift and go to state 76
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 88
    cast_expression                shift and go to state 86
    block_statement                shift and go to state 166
    shift_expression               shift and go to state 65
    return_statement               shift and go to state 96
    while_statement                shift and go to state 42
    and_expression                 shift and go to state 94
    statement                      shift and go to state 81
    statement_expression           shift and go to state 45
    method_invocation              shift and go to state 82
    simple_name                    shift and go to state 74
    conditional_or_expression      shift and go to state 62
    empty                          shift and go to state 167
    for_statement                  shift and go to state 34
    local_variable_declaration_statement shift and go to state 46
    do_while_statement             shift and go to state 63
    int_float                      shift and go to state 47
    assignment                     shift and go to state 100
    multiplicative_expression      shift and go to state 64
    literal                        shift and go to state 78
    class_header_name1             shift and go to state 2
    additive_expression            shift and go to state 61
    SingletonObject                shift and go to state 49
    start_scope                    shift and go to state 17
    method_header_name             shift and go to state 50
    class_header                   shift and go to state 9
    modifier_opts                  shift and go to state 102
    equality_expression            shift and go to state 87
    variable_literal               shift and go to state 66
    name                           shift and go to state 52
    while_header                   shift and go to state 54
    while_begin                    shift and go to state 103
    valid_variable                 shift and go to state 104
    empty_statement                shift and go to state 90
    class_declaration              shift and go to state 105
    inclusive_or_expression        shift and go to state 41
    expression                     shift and go to state 69
    local_variable_declaration     shift and go to state 91
    modifier                       shift and go to state 14
    conditional_and_expression     shift and go to state 67
    block                          shift and go to state 70

state 98

    (73) literal -> KWRD_NULL .

    TIMES           reduce using rule 73 (literal -> KWRD_NULL .)
    DIVIDE          reduce using rule 73 (literal -> KWRD_NULL .)
    REMAINDER       reduce using rule 73 (literal -> KWRD_NULL .)
    PLUS            reduce using rule 73 (literal -> KWRD_NULL .)
    MINUS           reduce using rule 73 (literal -> KWRD_NULL .)
    LSHIFT          reduce using rule 73 (literal -> KWRD_NULL .)
    RSHIFT          reduce using rule 73 (literal -> KWRD_NULL .)
    GREATER         reduce using rule 73 (literal -> KWRD_NULL .)
    LESS            reduce using rule 73 (literal -> KWRD_NULL .)
    GEQ             reduce using rule 73 (literal -> KWRD_NULL .)
    LEQ             reduce using rule 73 (literal -> KWRD_NULL .)
    EQUAL           reduce using rule 73 (literal -> KWRD_NULL .)
    NEQUAL          reduce using rule 73 (literal -> KWRD_NULL .)
    AND_BITWISE     reduce using rule 73 (literal -> KWRD_NULL .)
    XOR             reduce using rule 73 (literal -> KWRD_NULL .)
    OR_BITWISE      reduce using rule 73 (literal -> KWRD_NULL .)
    AND             reduce using rule 73 (literal -> KWRD_NULL .)
    OR              reduce using rule 73 (literal -> KWRD_NULL .)
    RPAREN          reduce using rule 73 (literal -> KWRD_NULL .)
    COMMA           reduce using rule 73 (literal -> KWRD_NULL .)
    KWRD_MATCH      reduce using rule 73 (literal -> KWRD_NULL .)
    STATE_END       reduce using rule 73 (literal -> KWRD_NULL .)
    RBPAREN         reduce using rule 73 (literal -> KWRD_NULL .)
    KWRD_UNTIL      reduce using rule 73 (literal -> KWRD_NULL .)
    FUNTYPE         reduce using rule 73 (literal -> KWRD_NULL .)
    KWRD_BY         reduce using rule 73 (literal -> KWRD_NULL .)


state 99

    (10) expression -> assignment_expression .

    COMMA           reduce using rule 10 (expression -> assignment_expression .)
    RPAREN          reduce using rule 10 (expression -> assignment_expression .)
    KWRD_MATCH      reduce using rule 10 (expression -> assignment_expression .)
    STATE_END       reduce using rule 10 (expression -> assignment_expression .)
    KWRD_BY         reduce using rule 10 (expression -> assignment_expression .)
    FUNTYPE         reduce using rule 10 (expression -> assignment_expression .)
    RBPAREN         reduce using rule 10 (expression -> assignment_expression .)
    KWRD_UNTIL      reduce using rule 10 (expression -> assignment_expression .)


state 100

    (131) statement_expression -> assignment .
    (13) assignment_expression -> assignment .

    STATE_END       reduce using rule 131 (statement_expression -> assignment .)
    KWRD_MATCH      reduce using rule 13 (assignment_expression -> assignment .)


state 101

    (64) base_variable_set -> LPAREN . expression RPAREN
    (65) cast_expression -> LPAREN . primitive_type RPAREN unary_expression
    (10) expression -> . assignment_expression
    (199) primitive_type -> . TYPE_INT
    (200) primitive_type -> . TYPE_FLOAT
    (201) primitive_type -> . TYPE_CHAR
    (202) primitive_type -> . TYPE_STRING
    (203) primitive_type -> . TYPE_BOOLEAN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    TYPE_INT        shift and go to state 168
    TYPE_FLOAT      shift and go to state 173
    TYPE_CHAR       shift and go to state 170
    TYPE_STRING     shift and go to state 169
    TYPE_BOOLEAN    shift and go to state 172
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    additive_expression            shift and go to state 61
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 104
    inclusive_or_expression        shift and go to state 41
    literal                        shift and go to state 78
    primitive_type                 shift and go to state 171
    and_expression                 shift and go to state 94
    relational_expression          shift and go to state 80
    cast_expression                shift and go to state 86
    conditional_or_expression      shift and go to state 62
    assignment_expression          shift and go to state 99
    qualified_name                 shift and go to state 85
    assignment                     shift and go to state 129
    multiplicative_expression      shift and go to state 64
    method_invocation              shift and go to state 119
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 130
    expression                     shift and go to state 174
    conditional_and_expression     shift and go to state 67

state 102

    (107) local_variable_declaration -> modifier_opts . declaration_keyword variable_declaration_body
    (191) method_header_name -> modifier_opts . KWRD_DEF IDENTIFIER
    (180) class_header_name1 -> modifier_opts . KWRD_CLASS name
    (104) declaration_keyword -> . KWRD_VAR
    (105) declaration_keyword -> . KWRD_VAL

    KWRD_DEF        shift and go to state 175
    KWRD_CLASS      shift and go to state 32
    KWRD_VAR        shift and go to state 109
    KWRD_VAL        shift and go to state 110

    declaration_keyword            shift and go to state 176

state 103

    (148) while_header -> while_begin . LPAREN expression RPAREN

    LPAREN          shift and go to state 177


state 104

    (15) assignment -> valid_variable . assignment_operator assignment_expression
    (88) variable_literal -> valid_variable .
    (16) assignment_operator -> . ASSIGN
    (17) assignment_operator -> . TIMES_ASSIGN
    (18) assignment_operator -> . DIVIDE_ASSIGN
    (19) assignment_operator -> . REMAINDER_ASSIGN
    (20) assignment_operator -> . PLUS_ASSIGN
    (21) assignment_operator -> . MINUS_ASSIGN
    (22) assignment_operator -> . LSHIFT_ASSIGN
    (23) assignment_operator -> . RSHIFT_ASSIGN
    (24) assignment_operator -> . AND_ASSIGN
    (25) assignment_operator -> . OR_ASSIGN
    (26) assignment_operator -> . XOR_ASSIGN

    TIMES           reduce using rule 88 (variable_literal -> valid_variable .)
    DIVIDE          reduce using rule 88 (variable_literal -> valid_variable .)
    REMAINDER       reduce using rule 88 (variable_literal -> valid_variable .)
    PLUS            reduce using rule 88 (variable_literal -> valid_variable .)
    MINUS           reduce using rule 88 (variable_literal -> valid_variable .)
    LSHIFT          reduce using rule 88 (variable_literal -> valid_variable .)
    RSHIFT          reduce using rule 88 (variable_literal -> valid_variable .)
    GREATER         reduce using rule 88 (variable_literal -> valid_variable .)
    LESS            reduce using rule 88 (variable_literal -> valid_variable .)
    GEQ             reduce using rule 88 (variable_literal -> valid_variable .)
    LEQ             reduce using rule 88 (variable_literal -> valid_variable .)
    EQUAL           reduce using rule 88 (variable_literal -> valid_variable .)
    NEQUAL          reduce using rule 88 (variable_literal -> valid_variable .)
    AND_BITWISE     reduce using rule 88 (variable_literal -> valid_variable .)
    XOR             reduce using rule 88 (variable_literal -> valid_variable .)
    OR_BITWISE      reduce using rule 88 (variable_literal -> valid_variable .)
    AND             reduce using rule 88 (variable_literal -> valid_variable .)
    OR              reduce using rule 88 (variable_literal -> valid_variable .)
    KWRD_MATCH      reduce using rule 88 (variable_literal -> valid_variable .)
    COMMA           reduce using rule 88 (variable_literal -> valid_variable .)
    RPAREN          reduce using rule 88 (variable_literal -> valid_variable .)
    FUNTYPE         reduce using rule 88 (variable_literal -> valid_variable .)
    KWRD_UNTIL      reduce using rule 88 (variable_literal -> valid_variable .)
    STATE_END       reduce using rule 88 (variable_literal -> valid_variable .)
    KWRD_BY         reduce using rule 88 (variable_literal -> valid_variable .)
    RBPAREN         reduce using rule 88 (variable_literal -> valid_variable .)
    ASSIGN          shift and go to state 188
    TIMES_ASSIGN    shift and go to state 178
    DIVIDE_ASSIGN   shift and go to state 185
    REMAINDER_ASSIGN shift and go to state 181
    PLUS_ASSIGN     shift and go to state 187
    MINUS_ASSIGN    shift and go to state 180
    LSHIFT_ASSIGN   shift and go to state 183
    RSHIFT_ASSIGN   shift and go to state 179
    AND_ASSIGN      shift and go to state 184
    OR_ASSIGN       shift and go to state 182
    XOR_ASSIGN      shift and go to state 189

    assignment_operator            shift and go to state 186

state 105

    (99) block_statement -> class_declaration .

    KWRD_FOR        reduce using rule 99 (block_statement -> class_declaration .)
    KWRD_OBJECT     reduce using rule 99 (block_statement -> class_declaration .)
    STATE_END       reduce using rule 99 (block_statement -> class_declaration .)
    KWRD_RETURN     reduce using rule 99 (block_statement -> class_declaration .)
    KWRD_DO         reduce using rule 99 (block_statement -> class_declaration .)
    KWRD_PROTECTED  reduce using rule 99 (block_statement -> class_declaration .)
    KWRD_PRIVATE    reduce using rule 99 (block_statement -> class_declaration .)
    BLOCK_BEGIN     reduce using rule 99 (block_statement -> class_declaration .)
    KWRD_WHILE      reduce using rule 99 (block_statement -> class_declaration .)
    IDENTIFIER      reduce using rule 99 (block_statement -> class_declaration .)
    PLUS            reduce using rule 99 (block_statement -> class_declaration .)
    MINUS           reduce using rule 99 (block_statement -> class_declaration .)
    NOT             reduce using rule 99 (block_statement -> class_declaration .)
    TILDA           reduce using rule 99 (block_statement -> class_declaration .)
    LPAREN          reduce using rule 99 (block_statement -> class_declaration .)
    CHARACTER       reduce using rule 99 (block_statement -> class_declaration .)
    STRING_CONST    reduce using rule 99 (block_statement -> class_declaration .)
    BOOL_CONSTT     reduce using rule 99 (block_statement -> class_declaration .)
    BOOL_CONSTF     reduce using rule 99 (block_statement -> class_declaration .)
    KWRD_NULL       reduce using rule 99 (block_statement -> class_declaration .)
    FLOAT_CONST     reduce using rule 99 (block_statement -> class_declaration .)
    INT_CONST       reduce using rule 99 (block_statement -> class_declaration .)
    KWRD_DEF        reduce using rule 99 (block_statement -> class_declaration .)
    KWRD_CLASS      reduce using rule 99 (block_statement -> class_declaration .)
    KWRD_VAR        reduce using rule 99 (block_statement -> class_declaration .)
    KWRD_VAL        reduce using rule 99 (block_statement -> class_declaration .)
    KWRD_IF         reduce using rule 99 (block_statement -> class_declaration .)
    BLOCK_END       reduce using rule 99 (block_statement -> class_declaration .)
    KWRD_CASE       reduce using rule 99 (block_statement -> class_declaration .)


state 106

    (179) class_header_name -> class_header_name1 func_args_start constructor_arguement_list_opt . RPAREN

    RPAREN          shift and go to state 190


state 107

    (174) constructor_arguement_list_declarator -> declaration_keyword . IDENTIFIER COLON type

    IDENTIFIER      shift and go to state 191


state 108

    (170) constructor_arguement_list_opt -> constructor_arguement_list .
    (173) constructor_arguement_list -> constructor_arguement_list . COMMA constructor_arguement_list_declarator

    RPAREN          reduce using rule 170 (constructor_arguement_list_opt -> constructor_arguement_list .)
    COMMA           shift and go to state 192


state 109

    (104) declaration_keyword -> KWRD_VAR .

    IDENTIFIER      reduce using rule 104 (declaration_keyword -> KWRD_VAR .)
    LPAREN          reduce using rule 104 (declaration_keyword -> KWRD_VAR .)


state 110

    (105) declaration_keyword -> KWRD_VAL .

    IDENTIFIER      reduce using rule 105 (declaration_keyword -> KWRD_VAL .)
    LPAREN          reduce using rule 105 (declaration_keyword -> KWRD_VAL .)


state 111

    (172) constructor_arguement_list -> constructor_arguement_list_declarator .

    COMMA           reduce using rule 172 (constructor_arguement_list -> constructor_arguement_list_declarator .)
    RPAREN          reduce using rule 172 (constructor_arguement_list -> constructor_arguement_list_declarator .)


state 112

    (171) constructor_arguement_list_opt -> empty .

    RPAREN          reduce using rule 171 (constructor_arguement_list_opt -> empty .)


state 113

    (183) class_header_extends -> KWRD_EXTNDS name . LPAREN func_arguement_list_opt RPAREN
    (85) qualified_name -> name . DOT simple_name

    LPAREN          shift and go to state 193
    DOT             shift and go to state 134


state 114

    (9) ObjectDeclare -> KWRD_OBJECT IDENTIFIER KWRD_EXTNDS . IDENTIFIER

    IDENTIFIER      shift and go to state 194


state 115

    (184) class_body -> class_body_start block_statements_opt . end_scope
    (92) end_scope -> . BLOCK_END

    BLOCK_END       shift and go to state 121

    end_scope                      shift and go to state 195

state 116

    (180) class_header_name1 -> modifier_opts KWRD_CLASS name .
    (85) qualified_name -> name . DOT simple_name

    LPAREN          reduce using rule 180 (class_header_name1 -> modifier_opts KWRD_CLASS name .)
    DOT             shift and go to state 134


state 117

    (57) unary_expression -> MINUS unary_expression .

    TIMES           reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    REMAINDER       reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    LSHIFT          reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    RSHIFT          reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    GREATER         reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    LESS            reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    GEQ             reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    LEQ             reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    EQUAL           reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    NEQUAL          reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    AND_BITWISE     reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    XOR             reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    OR_BITWISE      reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    AND             reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    OR              reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    FUNTYPE         reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    KWRD_MATCH      reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    STATE_END       reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    RBPAREN         reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    KWRD_UNTIL      reduce using rule 57 (unary_expression -> MINUS unary_expression .)
    KWRD_BY         reduce using rule 57 (unary_expression -> MINUS unary_expression .)


state 118

    (88) variable_literal -> valid_variable .

    TIMES           reduce using rule 88 (variable_literal -> valid_variable .)
    DIVIDE          reduce using rule 88 (variable_literal -> valid_variable .)
    REMAINDER       reduce using rule 88 (variable_literal -> valid_variable .)
    PLUS            reduce using rule 88 (variable_literal -> valid_variable .)
    MINUS           reduce using rule 88 (variable_literal -> valid_variable .)
    LSHIFT          reduce using rule 88 (variable_literal -> valid_variable .)
    RSHIFT          reduce using rule 88 (variable_literal -> valid_variable .)
    GREATER         reduce using rule 88 (variable_literal -> valid_variable .)
    LESS            reduce using rule 88 (variable_literal -> valid_variable .)
    GEQ             reduce using rule 88 (variable_literal -> valid_variable .)
    LEQ             reduce using rule 88 (variable_literal -> valid_variable .)
    EQUAL           reduce using rule 88 (variable_literal -> valid_variable .)
    NEQUAL          reduce using rule 88 (variable_literal -> valid_variable .)
    AND_BITWISE     reduce using rule 88 (variable_literal -> valid_variable .)
    XOR             reduce using rule 88 (variable_literal -> valid_variable .)
    OR_BITWISE      reduce using rule 88 (variable_literal -> valid_variable .)
    AND             reduce using rule 88 (variable_literal -> valid_variable .)
    OR              reduce using rule 88 (variable_literal -> valid_variable .)
    KWRD_MATCH      reduce using rule 88 (variable_literal -> valid_variable .)
    STATE_END       reduce using rule 88 (variable_literal -> valid_variable .)
    RPAREN          reduce using rule 88 (variable_literal -> valid_variable .)
    COMMA           reduce using rule 88 (variable_literal -> valid_variable .)
    RBPAREN         reduce using rule 88 (variable_literal -> valid_variable .)
    KWRD_UNTIL      reduce using rule 88 (variable_literal -> valid_variable .)
    FUNTYPE         reduce using rule 88 (variable_literal -> valid_variable .)
    KWRD_BY         reduce using rule 88 (variable_literal -> valid_variable .)


state 119

    (67) primary -> method_invocation .

    TIMES           reduce using rule 67 (primary -> method_invocation .)
    DIVIDE          reduce using rule 67 (primary -> method_invocation .)
    REMAINDER       reduce using rule 67 (primary -> method_invocation .)
    PLUS            reduce using rule 67 (primary -> method_invocation .)
    MINUS           reduce using rule 67 (primary -> method_invocation .)
    LSHIFT          reduce using rule 67 (primary -> method_invocation .)
    RSHIFT          reduce using rule 67 (primary -> method_invocation .)
    GREATER         reduce using rule 67 (primary -> method_invocation .)
    LESS            reduce using rule 67 (primary -> method_invocation .)
    GEQ             reduce using rule 67 (primary -> method_invocation .)
    LEQ             reduce using rule 67 (primary -> method_invocation .)
    EQUAL           reduce using rule 67 (primary -> method_invocation .)
    NEQUAL          reduce using rule 67 (primary -> method_invocation .)
    AND_BITWISE     reduce using rule 67 (primary -> method_invocation .)
    XOR             reduce using rule 67 (primary -> method_invocation .)
    OR_BITWISE      reduce using rule 67 (primary -> method_invocation .)
    AND             reduce using rule 67 (primary -> method_invocation .)
    OR              reduce using rule 67 (primary -> method_invocation .)
    KWRD_MATCH      reduce using rule 67 (primary -> method_invocation .)
    STATE_END       reduce using rule 67 (primary -> method_invocation .)
    RPAREN          reduce using rule 67 (primary -> method_invocation .)
    COMMA           reduce using rule 67 (primary -> method_invocation .)
    RBPAREN         reduce using rule 67 (primary -> method_invocation .)
    KWRD_UNTIL      reduce using rule 67 (primary -> method_invocation .)
    FUNTYPE         reduce using rule 67 (primary -> method_invocation .)
    KWRD_BY         reduce using rule 67 (primary -> method_invocation .)


state 120

    (86) valid_variable -> name .
    (77) array_access -> name . LBPAREN expression RBPAREN
    (76) method_invocation -> name . LPAREN argument_list_opt RPAREN
    (85) qualified_name -> name . DOT simple_name

    TIMES           reduce using rule 86 (valid_variable -> name .)
    DIVIDE          reduce using rule 86 (valid_variable -> name .)
    REMAINDER       reduce using rule 86 (valid_variable -> name .)
    PLUS            reduce using rule 86 (valid_variable -> name .)
    MINUS           reduce using rule 86 (valid_variable -> name .)
    LSHIFT          reduce using rule 86 (valid_variable -> name .)
    RSHIFT          reduce using rule 86 (valid_variable -> name .)
    GREATER         reduce using rule 86 (valid_variable -> name .)
    LESS            reduce using rule 86 (valid_variable -> name .)
    GEQ             reduce using rule 86 (valid_variable -> name .)
    LEQ             reduce using rule 86 (valid_variable -> name .)
    EQUAL           reduce using rule 86 (valid_variable -> name .)
    NEQUAL          reduce using rule 86 (valid_variable -> name .)
    AND_BITWISE     reduce using rule 86 (valid_variable -> name .)
    XOR             reduce using rule 86 (valid_variable -> name .)
    OR_BITWISE      reduce using rule 86 (valid_variable -> name .)
    AND             reduce using rule 86 (valid_variable -> name .)
    OR              reduce using rule 86 (valid_variable -> name .)
    KWRD_MATCH      reduce using rule 86 (valid_variable -> name .)
    STATE_END       reduce using rule 86 (valid_variable -> name .)
    RPAREN          reduce using rule 86 (valid_variable -> name .)
    COMMA           reduce using rule 86 (valid_variable -> name .)
    RBPAREN         reduce using rule 86 (valid_variable -> name .)
    KWRD_UNTIL      reduce using rule 86 (valid_variable -> name .)
    FUNTYPE         reduce using rule 86 (valid_variable -> name .)
    KWRD_BY         reduce using rule 86 (valid_variable -> name .)
    LBPAREN         shift and go to state 133
    LPAREN          shift and go to state 132
    DOT             shift and go to state 134


state 121

    (92) end_scope -> BLOCK_END .

    KWRD_OBJECT     reduce using rule 92 (end_scope -> BLOCK_END .)
    KWRD_PROTECTED  reduce using rule 92 (end_scope -> BLOCK_END .)
    KWRD_PRIVATE    reduce using rule 92 (end_scope -> BLOCK_END .)
    KWRD_CLASS      reduce using rule 92 (end_scope -> BLOCK_END .)
    $end            reduce using rule 92 (end_scope -> BLOCK_END .)
    KWRD_FOR        reduce using rule 92 (end_scope -> BLOCK_END .)
    STATE_END       reduce using rule 92 (end_scope -> BLOCK_END .)
    KWRD_RETURN     reduce using rule 92 (end_scope -> BLOCK_END .)
    KWRD_DO         reduce using rule 92 (end_scope -> BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 92 (end_scope -> BLOCK_END .)
    KWRD_WHILE      reduce using rule 92 (end_scope -> BLOCK_END .)
    IDENTIFIER      reduce using rule 92 (end_scope -> BLOCK_END .)
    PLUS            reduce using rule 92 (end_scope -> BLOCK_END .)
    MINUS           reduce using rule 92 (end_scope -> BLOCK_END .)
    NOT             reduce using rule 92 (end_scope -> BLOCK_END .)
    TILDA           reduce using rule 92 (end_scope -> BLOCK_END .)
    LPAREN          reduce using rule 92 (end_scope -> BLOCK_END .)
    CHARACTER       reduce using rule 92 (end_scope -> BLOCK_END .)
    STRING_CONST    reduce using rule 92 (end_scope -> BLOCK_END .)
    BOOL_CONSTT     reduce using rule 92 (end_scope -> BLOCK_END .)
    BOOL_CONSTF     reduce using rule 92 (end_scope -> BLOCK_END .)
    KWRD_NULL       reduce using rule 92 (end_scope -> BLOCK_END .)
    FLOAT_CONST     reduce using rule 92 (end_scope -> BLOCK_END .)
    INT_CONST       reduce using rule 92 (end_scope -> BLOCK_END .)
    KWRD_DEF        reduce using rule 92 (end_scope -> BLOCK_END .)
    KWRD_VAR        reduce using rule 92 (end_scope -> BLOCK_END .)
    KWRD_VAL        reduce using rule 92 (end_scope -> BLOCK_END .)
    KWRD_IF         reduce using rule 92 (end_scope -> BLOCK_END .)
    BLOCK_END       reduce using rule 92 (end_scope -> BLOCK_END .)
    KWRD_CASE       reduce using rule 92 (end_scope -> BLOCK_END .)


state 122

    (90) block -> start_scope block_statements_opt end_scope .

    KWRD_FOR        reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    KWRD_OBJECT     reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    STATE_END       reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    KWRD_RETURN     reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    KWRD_DO         reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    KWRD_PROTECTED  reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    KWRD_PRIVATE    reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    BLOCK_BEGIN     reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    KWRD_WHILE      reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    IDENTIFIER      reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    PLUS            reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    MINUS           reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    NOT             reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    TILDA           reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    LPAREN          reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    CHARACTER       reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    STRING_CONST    reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    BOOL_CONSTT     reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    BOOL_CONSTF     reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    KWRD_NULL       reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    FLOAT_CONST     reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    INT_CONST       reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    KWRD_DEF        reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    KWRD_CLASS      reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    KWRD_VAR        reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    KWRD_VAL        reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    KWRD_IF         reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    BLOCK_END       reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    KWRD_CASE       reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)
    $end            reduce using rule 90 (block -> start_scope block_statements_opt end_scope .)


state 123

    (33) inclusive_or_expression -> inclusive_or_expression OR_BITWISE . exclusive_or_expression
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 196
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    additive_expression            shift and go to state 61
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 118
    literal                        shift and go to state 78
    and_expression                 shift and go to state 94
    method_invocation              shift and go to state 119
    relational_expression          shift and go to state 80
    qualified_name                 shift and go to state 85
    multiplicative_expression      shift and go to state 64
    cast_expression                shift and go to state 86
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 120

state 124

    (56) unary_expression -> PLUS unary_expression .

    TIMES           reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    DIVIDE          reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    REMAINDER       reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    LSHIFT          reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    RSHIFT          reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    GREATER         reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    LESS            reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    GEQ             reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    LEQ             reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    EQUAL           reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    NEQUAL          reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    AND_BITWISE     reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    XOR             reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    OR_BITWISE      reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    AND             reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    OR              reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    FUNTYPE         reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    KWRD_MATCH      reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    STATE_END       reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    RPAREN          reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    RBPAREN         reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    KWRD_UNTIL      reduce using rule 56 (unary_expression -> PLUS unary_expression .)
    KWRD_BY         reduce using rule 56 (unary_expression -> PLUS unary_expression .)


state 125

    (130) expression_statement -> statement_expression STATE_END .

    KWRD_FOR        reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_OBJECT     reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    STATE_END       reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_RETURN     reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_DO         reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_PROTECTED  reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_PRIVATE    reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    BLOCK_BEGIN     reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_WHILE      reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    IDENTIFIER      reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    PLUS            reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    MINUS           reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    NOT             reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    TILDA           reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    LPAREN          reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    CHARACTER       reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    STRING_CONST    reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    BOOL_CONSTT     reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    BOOL_CONSTF     reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_NULL       reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    FLOAT_CONST     reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    INT_CONST       reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_DEF        reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_CLASS      reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_VAR        reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_VAL        reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_IF         reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    BLOCK_END       reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_CASE       reduce using rule 130 (expression_statement -> statement_expression STATE_END .)


state 126

    (187) method_header -> method_header_name func_args_start . func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (175) func_arguement_list_opt -> . variable_declarators
    (176) func_arguement_list_opt -> . empty
    (116) variable_declarators -> . variable_declarator
    (117) variable_declarators -> . variable_declarators COMMA variable_declarator
    (211) empty -> .
    (118) variable_declarator -> . variable_declarator_id
    (119) variable_declarator_id -> . IDENTIFIER COLON type

    RPAREN          reduce using rule 211 (empty -> .)
    IDENTIFIER      shift and go to state 198

    func_arguement_list_opt        shift and go to state 197
    variable_declarator            shift and go to state 201
    variable_declarators           shift and go to state 200
    variable_declarator_id         shift and go to state 199
    empty                          shift and go to state 202

state 127

    (169) return_statement -> KWRD_RETURN expression_optional . STATE_END

    STATE_END       shift and go to state 203


state 128

    (12) expression_optional -> empty .

    STATE_END       reduce using rule 12 (expression_optional -> empty .)


state 129

    (13) assignment_expression -> assignment .

    STATE_END       reduce using rule 13 (assignment_expression -> assignment .)
    RPAREN          reduce using rule 13 (assignment_expression -> assignment .)
    KWRD_UNTIL      reduce using rule 13 (assignment_expression -> assignment .)
    COMMA           reduce using rule 13 (assignment_expression -> assignment .)
    KWRD_BY         reduce using rule 13 (assignment_expression -> assignment .)
    RBPAREN         reduce using rule 13 (assignment_expression -> assignment .)
    KWRD_MATCH      reduce using rule 13 (assignment_expression -> assignment .)
    FUNTYPE         reduce using rule 13 (assignment_expression -> assignment .)


state 130

    (86) valid_variable -> name .
    (77) array_access -> name . LBPAREN expression RBPAREN
    (85) qualified_name -> name . DOT simple_name
    (76) method_invocation -> name . LPAREN argument_list_opt RPAREN

    ASSIGN          reduce using rule 86 (valid_variable -> name .)
    TIMES_ASSIGN    reduce using rule 86 (valid_variable -> name .)
    DIVIDE_ASSIGN   reduce using rule 86 (valid_variable -> name .)
    REMAINDER_ASSIGN reduce using rule 86 (valid_variable -> name .)
    PLUS_ASSIGN     reduce using rule 86 (valid_variable -> name .)
    MINUS_ASSIGN    reduce using rule 86 (valid_variable -> name .)
    LSHIFT_ASSIGN   reduce using rule 86 (valid_variable -> name .)
    RSHIFT_ASSIGN   reduce using rule 86 (valid_variable -> name .)
    AND_ASSIGN      reduce using rule 86 (valid_variable -> name .)
    OR_ASSIGN       reduce using rule 86 (valid_variable -> name .)
    XOR_ASSIGN      reduce using rule 86 (valid_variable -> name .)
    TIMES           reduce using rule 86 (valid_variable -> name .)
    DIVIDE          reduce using rule 86 (valid_variable -> name .)
    REMAINDER       reduce using rule 86 (valid_variable -> name .)
    PLUS            reduce using rule 86 (valid_variable -> name .)
    MINUS           reduce using rule 86 (valid_variable -> name .)
    LSHIFT          reduce using rule 86 (valid_variable -> name .)
    RSHIFT          reduce using rule 86 (valid_variable -> name .)
    GREATER         reduce using rule 86 (valid_variable -> name .)
    LESS            reduce using rule 86 (valid_variable -> name .)
    GEQ             reduce using rule 86 (valid_variable -> name .)
    LEQ             reduce using rule 86 (valid_variable -> name .)
    EQUAL           reduce using rule 86 (valid_variable -> name .)
    NEQUAL          reduce using rule 86 (valid_variable -> name .)
    AND_BITWISE     reduce using rule 86 (valid_variable -> name .)
    XOR             reduce using rule 86 (valid_variable -> name .)
    OR_BITWISE      reduce using rule 86 (valid_variable -> name .)
    AND             reduce using rule 86 (valid_variable -> name .)
    OR              reduce using rule 86 (valid_variable -> name .)
    STATE_END       reduce using rule 86 (valid_variable -> name .)
    RPAREN          reduce using rule 86 (valid_variable -> name .)
    COMMA           reduce using rule 86 (valid_variable -> name .)
    KWRD_BY         reduce using rule 86 (valid_variable -> name .)
    FUNTYPE         reduce using rule 86 (valid_variable -> name .)
    KWRD_UNTIL      reduce using rule 86 (valid_variable -> name .)
    RBPAREN         reduce using rule 86 (valid_variable -> name .)
    KWRD_MATCH      reduce using rule 86 (valid_variable -> name .)
    LBPAREN         shift and go to state 133
    DOT             shift and go to state 134
    LPAREN          shift and go to state 132


state 131

    (11) expression_optional -> expression .

    STATE_END       reduce using rule 11 (expression_optional -> expression .)


state 132

    (76) method_invocation -> name LPAREN . argument_list_opt RPAREN
    (78) argument_list_opt -> . argument_list
    (79) argument_list_opt -> . empty
    (80) argument_list -> . expression
    (81) argument_list -> . argument_list COMMA expression
    (211) empty -> .
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    RPAREN          reduce using rule 211 (empty -> .)
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    and_expression                 shift and go to state 94
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    additive_expression            shift and go to state 61
    simple_name                    shift and go to state 74
    unary_expression               shift and go to state 56
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 104
    inclusive_or_expression        shift and go to state 41
    literal                        shift and go to state 78
    relational_expression          shift and go to state 80
    cast_expression                shift and go to state 86
    conditional_or_expression      shift and go to state 62
    empty                          shift and go to state 205
    argument_list                  shift and go to state 204
    assignment_expression          shift and go to state 99
    qualified_name                 shift and go to state 85
    assignment                     shift and go to state 129
    multiplicative_expression      shift and go to state 64
    method_invocation              shift and go to state 119
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 130
    argument_list_opt              shift and go to state 206
    expression                     shift and go to state 207
    conditional_and_expression     shift and go to state 67

state 133

    (77) array_access -> name LBPAREN . expression RBPAREN
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    additive_expression            shift and go to state 61
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 104
    inclusive_or_expression        shift and go to state 41
    literal                        shift and go to state 78
    and_expression                 shift and go to state 94
    relational_expression          shift and go to state 80
    cast_expression                shift and go to state 86
    conditional_or_expression      shift and go to state 62
    assignment_expression          shift and go to state 99
    qualified_name                 shift and go to state 85
    assignment                     shift and go to state 129
    multiplicative_expression      shift and go to state 64
    method_invocation              shift and go to state 119
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 130
    expression                     shift and go to state 208
    conditional_and_expression     shift and go to state 67

state 134

    (85) qualified_name -> name DOT . simple_name
    (84) simple_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 83

    simple_name                    shift and go to state 209

state 135

    (147) while_statement -> while_header while_body .

    KWRD_FOR        reduce using rule 147 (while_statement -> while_header while_body .)
    KWRD_OBJECT     reduce using rule 147 (while_statement -> while_header while_body .)
    STATE_END       reduce using rule 147 (while_statement -> while_header while_body .)
    KWRD_RETURN     reduce using rule 147 (while_statement -> while_header while_body .)
    KWRD_DO         reduce using rule 147 (while_statement -> while_header while_body .)
    KWRD_PROTECTED  reduce using rule 147 (while_statement -> while_header while_body .)
    KWRD_PRIVATE    reduce using rule 147 (while_statement -> while_header while_body .)
    BLOCK_BEGIN     reduce using rule 147 (while_statement -> while_header while_body .)
    KWRD_WHILE      reduce using rule 147 (while_statement -> while_header while_body .)
    IDENTIFIER      reduce using rule 147 (while_statement -> while_header while_body .)
    PLUS            reduce using rule 147 (while_statement -> while_header while_body .)
    MINUS           reduce using rule 147 (while_statement -> while_header while_body .)
    NOT             reduce using rule 147 (while_statement -> while_header while_body .)
    TILDA           reduce using rule 147 (while_statement -> while_header while_body .)
    LPAREN          reduce using rule 147 (while_statement -> while_header while_body .)
    CHARACTER       reduce using rule 147 (while_statement -> while_header while_body .)
    STRING_CONST    reduce using rule 147 (while_statement -> while_header while_body .)
    BOOL_CONSTT     reduce using rule 147 (while_statement -> while_header while_body .)
    BOOL_CONSTF     reduce using rule 147 (while_statement -> while_header while_body .)
    KWRD_NULL       reduce using rule 147 (while_statement -> while_header while_body .)
    FLOAT_CONST     reduce using rule 147 (while_statement -> while_header while_body .)
    INT_CONST       reduce using rule 147 (while_statement -> while_header while_body .)
    KWRD_DEF        reduce using rule 147 (while_statement -> while_header while_body .)
    KWRD_CLASS      reduce using rule 147 (while_statement -> while_header while_body .)
    KWRD_VAR        reduce using rule 147 (while_statement -> while_header while_body .)
    KWRD_VAL        reduce using rule 147 (while_statement -> while_header while_body .)
    KWRD_IF         reduce using rule 147 (while_statement -> while_header while_body .)
    BLOCK_END       reduce using rule 147 (while_statement -> while_header while_body .)
    KWRD_CASE       reduce using rule 147 (while_statement -> while_header while_body .)


state 136

    (149) while_body -> block .

    KWRD_FOR        reduce using rule 149 (while_body -> block .)
    KWRD_OBJECT     reduce using rule 149 (while_body -> block .)
    STATE_END       reduce using rule 149 (while_body -> block .)
    KWRD_RETURN     reduce using rule 149 (while_body -> block .)
    KWRD_DO         reduce using rule 149 (while_body -> block .)
    KWRD_PROTECTED  reduce using rule 149 (while_body -> block .)
    KWRD_PRIVATE    reduce using rule 149 (while_body -> block .)
    BLOCK_BEGIN     reduce using rule 149 (while_body -> block .)
    KWRD_WHILE      reduce using rule 149 (while_body -> block .)
    IDENTIFIER      reduce using rule 149 (while_body -> block .)
    PLUS            reduce using rule 149 (while_body -> block .)
    MINUS           reduce using rule 149 (while_body -> block .)
    NOT             reduce using rule 149 (while_body -> block .)
    TILDA           reduce using rule 149 (while_body -> block .)
    LPAREN          reduce using rule 149 (while_body -> block .)
    CHARACTER       reduce using rule 149 (while_body -> block .)
    STRING_CONST    reduce using rule 149 (while_body -> block .)
    BOOL_CONSTT     reduce using rule 149 (while_body -> block .)
    BOOL_CONSTF     reduce using rule 149 (while_body -> block .)
    KWRD_NULL       reduce using rule 149 (while_body -> block .)
    FLOAT_CONST     reduce using rule 149 (while_body -> block .)
    INT_CONST       reduce using rule 149 (while_body -> block .)
    KWRD_DEF        reduce using rule 149 (while_body -> block .)
    KWRD_CLASS      reduce using rule 149 (while_body -> block .)
    KWRD_VAR        reduce using rule 149 (while_body -> block .)
    KWRD_VAL        reduce using rule 149 (while_body -> block .)
    KWRD_IF         reduce using rule 149 (while_body -> block .)
    BLOCK_END       reduce using rule 149 (while_body -> block .)
    KWRD_CASE       reduce using rule 149 (while_body -> block .)


state 137

    (153) for_statement -> KWRD_FOR LPAREN . for_loop RPAREN block
    (154) for_loop -> . IDENTIFIER CHOOSE expression KWRD_UNTIL expression for_step_opts

    IDENTIFIER      shift and go to state 211

    for_loop                       shift and go to state 210

state 138

    (140) if_else_starting -> KWRD_IF . LPAREN expression RPAREN

    LPAREN          shift and go to state 212


state 139

    (138) if_else_statement -> MarkIfStart if_else_begin . if_else_intermediate MarkIfEnd
    (142) if_else_intermediate -> . KWRD_ELSE if_else_end
    (143) if_else_intermediate -> . empty
    (211) empty -> .

    KWRD_ELSE       shift and go to state 214
    KWRD_FOR        reduce using rule 211 (empty -> .)
    KWRD_OBJECT     reduce using rule 211 (empty -> .)
    STATE_END       reduce using rule 211 (empty -> .)
    KWRD_RETURN     reduce using rule 211 (empty -> .)
    KWRD_DO         reduce using rule 211 (empty -> .)
    KWRD_PROTECTED  reduce using rule 211 (empty -> .)
    KWRD_PRIVATE    reduce using rule 211 (empty -> .)
    BLOCK_BEGIN     reduce using rule 211 (empty -> .)
    KWRD_WHILE      reduce using rule 211 (empty -> .)
    IDENTIFIER      reduce using rule 211 (empty -> .)
    PLUS            reduce using rule 211 (empty -> .)
    MINUS           reduce using rule 211 (empty -> .)
    NOT             reduce using rule 211 (empty -> .)
    TILDA           reduce using rule 211 (empty -> .)
    LPAREN          reduce using rule 211 (empty -> .)
    CHARACTER       reduce using rule 211 (empty -> .)
    STRING_CONST    reduce using rule 211 (empty -> .)
    BOOL_CONSTT     reduce using rule 211 (empty -> .)
    BOOL_CONSTF     reduce using rule 211 (empty -> .)
    KWRD_NULL       reduce using rule 211 (empty -> .)
    FLOAT_CONST     reduce using rule 211 (empty -> .)
    INT_CONST       reduce using rule 211 (empty -> .)
    KWRD_DEF        reduce using rule 211 (empty -> .)
    KWRD_CLASS      reduce using rule 211 (empty -> .)
    KWRD_VAR        reduce using rule 211 (empty -> .)
    KWRD_VAL        reduce using rule 211 (empty -> .)
    KWRD_IF         reduce using rule 211 (empty -> .)
    BLOCK_END       reduce using rule 211 (empty -> .)
    KWRD_CASE       reduce using rule 211 (empty -> .)

    if_else_intermediate           shift and go to state 213
    empty                          shift and go to state 215

state 140

    (139) if_else_begin -> if_else_starting . if_else_ending
    (141) if_else_ending -> . if_else_block
    (137) if_else_block -> . start_scope_if block_statements_opt end_scope_if
    (133) start_scope_if -> . BLOCK_BEGIN

    BLOCK_BEGIN     shift and go to state 218

    if_else_block                  shift and go to state 216
    if_else_ending                 shift and go to state 217
    start_scope_if                 shift and go to state 219

state 141

    (50) additive_expression -> additive_expression PLUS . multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 85
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    base_variable_set              shift and go to state 95
    unary_expression               shift and go to state 56
    valid_variable                 shift and go to state 118
    array_access                   shift and go to state 36
    multiplicative_expression      shift and go to state 220
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    literal                        shift and go to state 78
    method_invocation              shift and go to state 119
    cast_expression                shift and go to state 86
    simple_name                    shift and go to state 74
    name                           shift and go to state 120

state 142

    (51) additive_expression -> additive_expression MINUS . multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 85
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    base_variable_set              shift and go to state 95
    unary_expression               shift and go to state 56
    valid_variable                 shift and go to state 118
    array_access                   shift and go to state 36
    multiplicative_expression      shift and go to state 221
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    literal                        shift and go to state 78
    method_invocation              shift and go to state 119
    cast_expression                shift and go to state 86
    simple_name                    shift and go to state 74
    name                           shift and go to state 120

state 143

    (29) conditional_or_expression -> conditional_or_expression OR . Marker conditional_and_expression
    (27) Marker -> . empty
    (211) empty -> .

    PLUS            reduce using rule 211 (empty -> .)
    MINUS           reduce using rule 211 (empty -> .)
    NOT             reduce using rule 211 (empty -> .)
    TILDA           reduce using rule 211 (empty -> .)
    LPAREN          reduce using rule 211 (empty -> .)
    CHARACTER       reduce using rule 211 (empty -> .)
    STRING_CONST    reduce using rule 211 (empty -> .)
    BOOL_CONSTT     reduce using rule 211 (empty -> .)
    BOOL_CONSTF     reduce using rule 211 (empty -> .)
    KWRD_NULL       reduce using rule 211 (empty -> .)
    IDENTIFIER      reduce using rule 211 (empty -> .)
    FLOAT_CONST     reduce using rule 211 (empty -> .)
    INT_CONST       reduce using rule 211 (empty -> .)

    Marker                         shift and go to state 222
    empty                          shift and go to state 223

state 144

    (55) multiplicative_expression -> multiplicative_expression REMAINDER . unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 85
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    unary_expression               shift and go to state 224
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 118
    array_access                   shift and go to state 36
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    literal                        shift and go to state 78
    method_invocation              shift and go to state 119
    cast_expression                shift and go to state 86
    simple_name                    shift and go to state 74
    name                           shift and go to state 120

state 145

    (54) multiplicative_expression -> multiplicative_expression DIVIDE . unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 85
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    unary_expression               shift and go to state 225
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 118
    array_access                   shift and go to state 36
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    literal                        shift and go to state 78
    method_invocation              shift and go to state 119
    cast_expression                shift and go to state 86
    simple_name                    shift and go to state 74
    name                           shift and go to state 120

state 146

    (53) multiplicative_expression -> multiplicative_expression TIMES . unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 85
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    unary_expression               shift and go to state 226
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 118
    array_access                   shift and go to state 36
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    literal                        shift and go to state 78
    method_invocation              shift and go to state 119
    cast_expression                shift and go to state 86
    simple_name                    shift and go to state 74
    name                           shift and go to state 120

state 147

    (48) shift_expression -> shift_expression RSHIFT . additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 85
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    base_variable_set              shift and go to state 95
    unary_expression               shift and go to state 56
    valid_variable                 shift and go to state 118
    array_access                   shift and go to state 36
    multiplicative_expression      shift and go to state 64
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    literal                        shift and go to state 78
    method_invocation              shift and go to state 119
    cast_expression                shift and go to state 86
    simple_name                    shift and go to state 74
    additive_expression            shift and go to state 227
    name                           shift and go to state 120

state 148

    (47) shift_expression -> shift_expression LSHIFT . additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 85
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    base_variable_set              shift and go to state 95
    unary_expression               shift and go to state 56
    valid_variable                 shift and go to state 118
    array_access                   shift and go to state 36
    multiplicative_expression      shift and go to state 64
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    literal                        shift and go to state 78
    method_invocation              shift and go to state 119
    cast_expression                shift and go to state 86
    simple_name                    shift and go to state 74
    additive_expression            shift and go to state 228
    name                           shift and go to state 120

state 149

    (31) conditional_and_expression -> conditional_and_expression AND . Marker inclusive_or_expression
    (27) Marker -> . empty
    (211) empty -> .

    PLUS            reduce using rule 211 (empty -> .)
    MINUS           reduce using rule 211 (empty -> .)
    NOT             reduce using rule 211 (empty -> .)
    TILDA           reduce using rule 211 (empty -> .)
    LPAREN          reduce using rule 211 (empty -> .)
    CHARACTER       reduce using rule 211 (empty -> .)
    STRING_CONST    reduce using rule 211 (empty -> .)
    BOOL_CONSTT     reduce using rule 211 (empty -> .)
    BOOL_CONSTF     reduce using rule 211 (empty -> .)
    KWRD_NULL       reduce using rule 211 (empty -> .)
    IDENTIFIER      reduce using rule 211 (empty -> .)
    FLOAT_CONST     reduce using rule 211 (empty -> .)
    INT_CONST       reduce using rule 211 (empty -> .)

    Marker                         shift and go to state 229
    empty                          shift and go to state 223

state 150

    (60) unary_expression_not_plus_minus -> NOT unary_expression .

    TIMES           reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    DIVIDE          reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    REMAINDER       reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    PLUS            reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    MINUS           reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    LSHIFT          reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    RSHIFT          reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    GREATER         reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    LESS            reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    GEQ             reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    LEQ             reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    EQUAL           reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    NEQUAL          reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    AND_BITWISE     reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    XOR             reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    OR_BITWISE      reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    AND             reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    OR              reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    KWRD_MATCH      reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    STATE_END       reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    RPAREN          reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    COMMA           reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    RBPAREN         reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    KWRD_UNTIL      reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    FUNTYPE         reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    KWRD_BY         reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)


state 151

    (157) switch_statement -> expression KWRD_MATCH . switch_block
    (158) switch_block -> . BLOCK_BEGIN BLOCK_END
    (159) switch_block -> . BLOCK_BEGIN switch_block_statements BLOCK_END
    (160) switch_block -> . BLOCK_BEGIN switch_labels BLOCK_END
    (161) switch_block -> . BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END

    BLOCK_BEGIN     shift and go to state 230

    switch_block                   shift and go to state 231

state 152

    (35) exclusive_or_expression -> exclusive_or_expression XOR . and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 56
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    and_expression                 shift and go to state 232
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 118
    literal                        shift and go to state 78
    additive_expression            shift and go to state 61
    method_invocation              shift and go to state 119
    relational_expression          shift and go to state 80
    qualified_name                 shift and go to state 85
    multiplicative_expression      shift and go to state 64
    cast_expression                shift and go to state 86
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 120

state 153

    (151) do_while_statement -> do_while_statement_begin block . KWRD_WHILE LPAREN expression RPAREN STATE_END

    KWRD_WHILE      shift and go to state 233


state 154

    (62) unary_expression_not_plus_minus -> TILDA unary_expression .

    TIMES           reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    DIVIDE          reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    REMAINDER       reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    PLUS            reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    MINUS           reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    LSHIFT          reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    RSHIFT          reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    GREATER         reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    LESS            reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    GEQ             reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    LEQ             reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    EQUAL           reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    NEQUAL          reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    AND_BITWISE     reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    XOR             reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    OR_BITWISE      reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    AND             reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    OR              reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    KWRD_MATCH      reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    STATE_END       reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    RPAREN          reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    COMMA           reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    RBPAREN         reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    KWRD_UNTIL      reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    FUNTYPE         reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    KWRD_BY         reduce using rule 62 (unary_expression_not_plus_minus -> TILDA unary_expression .)


state 155

    (44) relational_expression -> relational_expression GEQ . shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 85
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    base_variable_set              shift and go to state 95
    unary_expression               shift and go to state 56
    valid_variable                 shift and go to state 118
    array_access                   shift and go to state 36
    multiplicative_expression      shift and go to state 64
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    literal                        shift and go to state 78
    method_invocation              shift and go to state 119
    cast_expression                shift and go to state 86
    simple_name                    shift and go to state 74
    shift_expression               shift and go to state 234
    additive_expression            shift and go to state 61
    name                           shift and go to state 120

state 156

    (42) relational_expression -> relational_expression GREATER . shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 85
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    base_variable_set              shift and go to state 95
    unary_expression               shift and go to state 56
    valid_variable                 shift and go to state 118
    array_access                   shift and go to state 36
    multiplicative_expression      shift and go to state 64
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    literal                        shift and go to state 78
    method_invocation              shift and go to state 119
    cast_expression                shift and go to state 86
    simple_name                    shift and go to state 74
    shift_expression               shift and go to state 235
    additive_expression            shift and go to state 61
    name                           shift and go to state 120

state 157

    (43) relational_expression -> relational_expression LESS . shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 85
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    base_variable_set              shift and go to state 95
    unary_expression               shift and go to state 56
    valid_variable                 shift and go to state 118
    array_access                   shift and go to state 36
    multiplicative_expression      shift and go to state 64
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    literal                        shift and go to state 78
    method_invocation              shift and go to state 119
    cast_expression                shift and go to state 86
    simple_name                    shift and go to state 74
    shift_expression               shift and go to state 236
    additive_expression            shift and go to state 61
    name                           shift and go to state 120

state 158

    (45) relational_expression -> relational_expression LEQ . shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 85
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    base_variable_set              shift and go to state 95
    unary_expression               shift and go to state 56
    valid_variable                 shift and go to state 118
    array_access                   shift and go to state 36
    multiplicative_expression      shift and go to state 64
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    literal                        shift and go to state 78
    method_invocation              shift and go to state 119
    cast_expression                shift and go to state 86
    simple_name                    shift and go to state 74
    shift_expression               shift and go to state 237
    additive_expression            shift and go to state 61
    name                           shift and go to state 120

state 159

    (40) equality_expression -> equality_expression NEQUAL . relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 56
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    additive_expression            shift and go to state 61
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 118
    literal                        shift and go to state 78
    relational_expression          shift and go to state 238
    method_invocation              shift and go to state 119
    qualified_name                 shift and go to state 85
    multiplicative_expression      shift and go to state 64
    cast_expression                shift and go to state 86
    shift_expression               shift and go to state 65
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 120

state 160

    (39) equality_expression -> equality_expression EQUAL . relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 56
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    additive_expression            shift and go to state 61
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 118
    literal                        shift and go to state 78
    relational_expression          shift and go to state 239
    method_invocation              shift and go to state 119
    qualified_name                 shift and go to state 85
    multiplicative_expression      shift and go to state 64
    cast_expression                shift and go to state 86
    shift_expression               shift and go to state 65
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 120

state 161

    (192) method_body -> method_start_scope . block_statements_opt method_end_scope
    (93) block_statements_opt -> . block_statements
    (94) block_statements_opt -> . empty
    (95) block_statements -> . block_statement
    (96) block_statements -> . block_statements block_statement
    (211) empty -> .
    (97) block_statement -> . local_variable_declaration_statement
    (98) block_statement -> . statement
    (99) block_statement -> . class_declaration
    (100) block_statement -> . SingletonObject
    (101) block_statement -> . method_declaration
    (106) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (120) statement -> . normal_statement
    (121) statement -> . if_else_statement
    (122) statement -> . while_statement
    (123) statement -> . do_while_statement
    (124) statement -> . for_statement
    (177) class_declaration -> . class_header class_body
    (7) SingletonObject -> . ObjectDeclare block
    (186) method_declaration -> . method_header method_body
    (107) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (125) normal_statement -> . block
    (126) normal_statement -> . expression_statement
    (127) normal_statement -> . empty_statement
    (128) normal_statement -> . return_statement
    (129) normal_statement -> . switch_statement
    (138) if_else_statement -> . MarkIfStart if_else_begin if_else_intermediate MarkIfEnd
    (147) while_statement -> . while_header while_body
    (151) do_while_statement -> . do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END
    (153) for_statement -> . KWRD_FOR LPAREN for_loop RPAREN block
    (178) class_header -> . class_header_name class_header_extends_opt
    (8) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (9) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (187) method_header -> . method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (102) modifier_opts -> . modifier
    (103) modifier_opts -> . empty
    (90) block -> . start_scope block_statements_opt end_scope
    (130) expression_statement -> . statement_expression STATE_END
    (168) empty_statement -> . STATE_END
    (169) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (157) switch_statement -> . expression KWRD_MATCH switch_block
    (135) MarkIfStart -> . empty
    (148) while_header -> . while_begin LPAREN expression RPAREN
    (152) do_while_statement_begin -> . KWRD_DO
    (179) class_header_name -> . class_header_name1 func_args_start constructor_arguement_list_opt RPAREN
    (191) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (195) modifier -> . KWRD_PROTECTED
    (196) modifier -> . KWRD_PRIVATE
    (91) start_scope -> . BLOCK_BEGIN
    (131) statement_expression -> . assignment
    (132) statement_expression -> . method_invocation
    (10) expression -> . assignment_expression
    (150) while_begin -> . KWRD_WHILE
    (180) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (77) array_access -> . name LBPAREN expression RBPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    BLOCK_END       reduce using rule 211 (empty -> .)
    KWRD_DEF        reduce using rule 211 (empty -> .)
    KWRD_CLASS      reduce using rule 211 (empty -> .)
    KWRD_VAR        reduce using rule 211 (empty -> .)
    KWRD_VAL        reduce using rule 211 (empty -> .)
    KWRD_IF         reduce using rule 211 (empty -> .)
    KWRD_FOR        shift and go to state 58
    KWRD_OBJECT     shift and go to state 4
    STATE_END       shift and go to state 55
    KWRD_RETURN     shift and go to state 51
    KWRD_DO         shift and go to state 48
    KWRD_PROTECTED  shift and go to state 11
    KWRD_PRIVATE    shift and go to state 15
    BLOCK_BEGIN     shift and go to state 16
    KWRD_WHILE      shift and go to state 53
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    expression_statement           shift and go to state 33
    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    normal_statement               shift and go to state 92
    ObjectDeclare                  shift and go to state 1
    relational_expression          shift and go to state 80
    do_while_statement_begin       shift and go to state 73
    array_access                   shift and go to state 36
    MarkIfStart                    shift and go to state 59
    switch_statement               shift and go to state 60
    assignment_expression          shift and go to state 99
    block_statements_opt           shift and go to state 240
    qualified_name                 shift and go to state 85
    base_variable_set              shift and go to state 95
    if_else_statement              shift and go to state 76
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 88
    cast_expression                shift and go to state 86
    block_statement                shift and go to state 77
    shift_expression               shift and go to state 65
    return_statement               shift and go to state 96
    while_statement                shift and go to state 42
    and_expression                 shift and go to state 94
    statement                      shift and go to state 81
    statement_expression           shift and go to state 45
    method_invocation              shift and go to state 82
    simple_name                    shift and go to state 74
    conditional_or_expression      shift and go to state 62
    empty                          shift and go to state 84
    block_statements               shift and go to state 97
    for_statement                  shift and go to state 34
    local_variable_declaration_statement shift and go to state 46
    do_while_statement             shift and go to state 63
    int_float                      shift and go to state 47
    assignment                     shift and go to state 100
    multiplicative_expression      shift and go to state 64
    literal                        shift and go to state 78
    class_header_name1             shift and go to state 2
    additive_expression            shift and go to state 61
    SingletonObject                shift and go to state 49
    start_scope                    shift and go to state 17
    method_header_name             shift and go to state 50
    class_header                   shift and go to state 9
    modifier_opts                  shift and go to state 102
    equality_expression            shift and go to state 87
    name                           shift and go to state 52
    variable_literal               shift and go to state 66
    unary_expression_not_plus_minus shift and go to state 57
    while_header                   shift and go to state 54
    while_begin                    shift and go to state 103
    valid_variable                 shift and go to state 104
    method_header                  shift and go to state 89
    empty_statement                shift and go to state 90
    class_declaration              shift and go to state 105
    inclusive_or_expression        shift and go to state 41
    expression                     shift and go to state 69
    local_variable_declaration     shift and go to state 91
    primary                        shift and go to state 72
    modifier                       shift and go to state 14
    conditional_and_expression     shift and go to state 67
    block                          shift and go to state 70

state 162

    (193) method_start_scope -> BLOCK_BEGIN .

    KWRD_FOR        reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    KWRD_OBJECT     reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    STATE_END       reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    KWRD_RETURN     reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    KWRD_DO         reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    KWRD_PROTECTED  reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    KWRD_PRIVATE    reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    BLOCK_BEGIN     reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    KWRD_WHILE      reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    IDENTIFIER      reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    PLUS            reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    MINUS           reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    NOT             reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    TILDA           reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    LPAREN          reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    CHARACTER       reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    STRING_CONST    reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    BOOL_CONSTT     reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    BOOL_CONSTF     reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    KWRD_NULL       reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    FLOAT_CONST     reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    INT_CONST       reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    BLOCK_END       reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    KWRD_DEF        reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    KWRD_CLASS      reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    KWRD_VAR        reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    KWRD_VAL        reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)
    KWRD_IF         reduce using rule 193 (method_start_scope -> BLOCK_BEGIN .)


state 163

    (186) method_declaration -> method_header method_body .

    KWRD_FOR        reduce using rule 186 (method_declaration -> method_header method_body .)
    KWRD_OBJECT     reduce using rule 186 (method_declaration -> method_header method_body .)
    STATE_END       reduce using rule 186 (method_declaration -> method_header method_body .)
    KWRD_RETURN     reduce using rule 186 (method_declaration -> method_header method_body .)
    KWRD_DO         reduce using rule 186 (method_declaration -> method_header method_body .)
    KWRD_PROTECTED  reduce using rule 186 (method_declaration -> method_header method_body .)
    KWRD_PRIVATE    reduce using rule 186 (method_declaration -> method_header method_body .)
    BLOCK_BEGIN     reduce using rule 186 (method_declaration -> method_header method_body .)
    KWRD_WHILE      reduce using rule 186 (method_declaration -> method_header method_body .)
    IDENTIFIER      reduce using rule 186 (method_declaration -> method_header method_body .)
    PLUS            reduce using rule 186 (method_declaration -> method_header method_body .)
    MINUS           reduce using rule 186 (method_declaration -> method_header method_body .)
    NOT             reduce using rule 186 (method_declaration -> method_header method_body .)
    TILDA           reduce using rule 186 (method_declaration -> method_header method_body .)
    LPAREN          reduce using rule 186 (method_declaration -> method_header method_body .)
    CHARACTER       reduce using rule 186 (method_declaration -> method_header method_body .)
    STRING_CONST    reduce using rule 186 (method_declaration -> method_header method_body .)
    BOOL_CONSTT     reduce using rule 186 (method_declaration -> method_header method_body .)
    BOOL_CONSTF     reduce using rule 186 (method_declaration -> method_header method_body .)
    KWRD_NULL       reduce using rule 186 (method_declaration -> method_header method_body .)
    FLOAT_CONST     reduce using rule 186 (method_declaration -> method_header method_body .)
    INT_CONST       reduce using rule 186 (method_declaration -> method_header method_body .)
    KWRD_DEF        reduce using rule 186 (method_declaration -> method_header method_body .)
    KWRD_CLASS      reduce using rule 186 (method_declaration -> method_header method_body .)
    KWRD_VAR        reduce using rule 186 (method_declaration -> method_header method_body .)
    KWRD_VAL        reduce using rule 186 (method_declaration -> method_header method_body .)
    KWRD_IF         reduce using rule 186 (method_declaration -> method_header method_body .)
    BLOCK_END       reduce using rule 186 (method_declaration -> method_header method_body .)
    KWRD_CASE       reduce using rule 186 (method_declaration -> method_header method_body .)


state 164

    (106) local_variable_declaration_statement -> local_variable_declaration STATE_END .

    KWRD_FOR        reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_OBJECT     reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    STATE_END       reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_RETURN     reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_DO         reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_PROTECTED  reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_PRIVATE    reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    BLOCK_BEGIN     reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_WHILE      reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    IDENTIFIER      reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    PLUS            reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    MINUS           reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    NOT             reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    TILDA           reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    LPAREN          reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    CHARACTER       reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    STRING_CONST    reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    BOOL_CONSTT     reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    BOOL_CONSTF     reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_NULL       reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    FLOAT_CONST     reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    INT_CONST       reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_DEF        reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_CLASS      reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_VAR        reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_VAL        reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_IF         reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    BLOCK_END       reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_CASE       reduce using rule 106 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)


state 165

    (37) and_expression -> and_expression AND_BITWISE . equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 56
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 118
    literal                        shift and go to state 78
    additive_expression            shift and go to state 61
    method_invocation              shift and go to state 119
    relational_expression          shift and go to state 80
    qualified_name                 shift and go to state 85
    multiplicative_expression      shift and go to state 64
    cast_expression                shift and go to state 86
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 241
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 120

state 166

    (96) block_statements -> block_statements block_statement .

    KWRD_FOR        reduce using rule 96 (block_statements -> block_statements block_statement .)
    KWRD_OBJECT     reduce using rule 96 (block_statements -> block_statements block_statement .)
    STATE_END       reduce using rule 96 (block_statements -> block_statements block_statement .)
    KWRD_RETURN     reduce using rule 96 (block_statements -> block_statements block_statement .)
    KWRD_DO         reduce using rule 96 (block_statements -> block_statements block_statement .)
    KWRD_PROTECTED  reduce using rule 96 (block_statements -> block_statements block_statement .)
    KWRD_PRIVATE    reduce using rule 96 (block_statements -> block_statements block_statement .)
    BLOCK_BEGIN     reduce using rule 96 (block_statements -> block_statements block_statement .)
    KWRD_WHILE      reduce using rule 96 (block_statements -> block_statements block_statement .)
    IDENTIFIER      reduce using rule 96 (block_statements -> block_statements block_statement .)
    PLUS            reduce using rule 96 (block_statements -> block_statements block_statement .)
    MINUS           reduce using rule 96 (block_statements -> block_statements block_statement .)
    NOT             reduce using rule 96 (block_statements -> block_statements block_statement .)
    TILDA           reduce using rule 96 (block_statements -> block_statements block_statement .)
    LPAREN          reduce using rule 96 (block_statements -> block_statements block_statement .)
    CHARACTER       reduce using rule 96 (block_statements -> block_statements block_statement .)
    STRING_CONST    reduce using rule 96 (block_statements -> block_statements block_statement .)
    BOOL_CONSTT     reduce using rule 96 (block_statements -> block_statements block_statement .)
    BOOL_CONSTF     reduce using rule 96 (block_statements -> block_statements block_statement .)
    KWRD_NULL       reduce using rule 96 (block_statements -> block_statements block_statement .)
    FLOAT_CONST     reduce using rule 96 (block_statements -> block_statements block_statement .)
    INT_CONST       reduce using rule 96 (block_statements -> block_statements block_statement .)
    KWRD_DEF        reduce using rule 96 (block_statements -> block_statements block_statement .)
    KWRD_CLASS      reduce using rule 96 (block_statements -> block_statements block_statement .)
    KWRD_VAR        reduce using rule 96 (block_statements -> block_statements block_statement .)
    KWRD_VAL        reduce using rule 96 (block_statements -> block_statements block_statement .)
    KWRD_IF         reduce using rule 96 (block_statements -> block_statements block_statement .)
    BLOCK_END       reduce using rule 96 (block_statements -> block_statements block_statement .)
    KWRD_CASE       reduce using rule 96 (block_statements -> block_statements block_statement .)


state 167

    (103) modifier_opts -> empty .
    (135) MarkIfStart -> empty .

    KWRD_DEF        reduce using rule 103 (modifier_opts -> empty .)
    KWRD_CLASS      reduce using rule 103 (modifier_opts -> empty .)
    KWRD_VAR        reduce using rule 103 (modifier_opts -> empty .)
    KWRD_VAL        reduce using rule 103 (modifier_opts -> empty .)
    KWRD_IF         reduce using rule 135 (MarkIfStart -> empty .)


state 168

    (199) primitive_type -> TYPE_INT .

    RBPAREN         reduce using rule 199 (primitive_type -> TYPE_INT .)
    ASSIGN          reduce using rule 199 (primitive_type -> TYPE_INT .)
    COMMA           reduce using rule 199 (primitive_type -> TYPE_INT .)
    RPAREN          reduce using rule 199 (primitive_type -> TYPE_INT .)


state 169

    (202) primitive_type -> TYPE_STRING .

    RBPAREN         reduce using rule 202 (primitive_type -> TYPE_STRING .)
    ASSIGN          reduce using rule 202 (primitive_type -> TYPE_STRING .)
    COMMA           reduce using rule 202 (primitive_type -> TYPE_STRING .)
    RPAREN          reduce using rule 202 (primitive_type -> TYPE_STRING .)


state 170

    (201) primitive_type -> TYPE_CHAR .

    RBPAREN         reduce using rule 201 (primitive_type -> TYPE_CHAR .)
    ASSIGN          reduce using rule 201 (primitive_type -> TYPE_CHAR .)
    COMMA           reduce using rule 201 (primitive_type -> TYPE_CHAR .)
    RPAREN          reduce using rule 201 (primitive_type -> TYPE_CHAR .)


state 171

    (65) cast_expression -> LPAREN primitive_type . RPAREN unary_expression

    RPAREN          shift and go to state 242


state 172

    (203) primitive_type -> TYPE_BOOLEAN .

    RBPAREN         reduce using rule 203 (primitive_type -> TYPE_BOOLEAN .)
    ASSIGN          reduce using rule 203 (primitive_type -> TYPE_BOOLEAN .)
    COMMA           reduce using rule 203 (primitive_type -> TYPE_BOOLEAN .)
    RPAREN          reduce using rule 203 (primitive_type -> TYPE_BOOLEAN .)


state 173

    (200) primitive_type -> TYPE_FLOAT .

    RBPAREN         reduce using rule 200 (primitive_type -> TYPE_FLOAT .)
    ASSIGN          reduce using rule 200 (primitive_type -> TYPE_FLOAT .)
    COMMA           reduce using rule 200 (primitive_type -> TYPE_FLOAT .)
    RPAREN          reduce using rule 200 (primitive_type -> TYPE_FLOAT .)


state 174

    (64) base_variable_set -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 243


state 175

    (191) method_header_name -> modifier_opts KWRD_DEF . IDENTIFIER

    IDENTIFIER      shift and go to state 244


state 176

    (107) local_variable_declaration -> modifier_opts declaration_keyword . variable_declaration_body
    (113) variable_declaration_body -> . variable_declarator ASSIGN variable_declaration_initializer
    (114) variable_declaration_body -> . LPAREN variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list RPAREN
    (115) variable_declaration_body -> . IDENTIFIER ASSIGN LPAREN func_arguement_list_opt RPAREN FUNTYPE expression
    (118) variable_declarator -> . variable_declarator_id
    (119) variable_declarator_id -> . IDENTIFIER COLON type

    LPAREN          shift and go to state 247
    IDENTIFIER      shift and go to state 248

    variable_declaration_body      shift and go to state 245
    variable_declarator            shift and go to state 246
    variable_declarator_id         shift and go to state 199

state 177

    (148) while_header -> while_begin LPAREN . expression RPAREN
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    additive_expression            shift and go to state 61
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 104
    inclusive_or_expression        shift and go to state 41
    literal                        shift and go to state 78
    and_expression                 shift and go to state 94
    relational_expression          shift and go to state 80
    cast_expression                shift and go to state 86
    conditional_or_expression      shift and go to state 62
    assignment_expression          shift and go to state 99
    qualified_name                 shift and go to state 85
    assignment                     shift and go to state 129
    multiplicative_expression      shift and go to state 64
    method_invocation              shift and go to state 119
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 130
    expression                     shift and go to state 249
    conditional_and_expression     shift and go to state 67

state 178

    (17) assignment_operator -> TIMES_ASSIGN .

    IDENTIFIER      reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    PLUS            reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    MINUS           reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    NOT             reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    TILDA           reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    LPAREN          reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    CHARACTER       reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    STRING_CONST    reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    BOOL_CONSTT     reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    BOOL_CONSTF     reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    KWRD_NULL       reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    FLOAT_CONST     reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    INT_CONST       reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)


state 179

    (23) assignment_operator -> RSHIFT_ASSIGN .

    IDENTIFIER      reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    PLUS            reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    MINUS           reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    NOT             reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    TILDA           reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    LPAREN          reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    CHARACTER       reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    STRING_CONST    reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    BOOL_CONSTT     reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    BOOL_CONSTF     reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    KWRD_NULL       reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    FLOAT_CONST     reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    INT_CONST       reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)


state 180

    (21) assignment_operator -> MINUS_ASSIGN .

    IDENTIFIER      reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    PLUS            reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    MINUS           reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    NOT             reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    TILDA           reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    LPAREN          reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    CHARACTER       reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    STRING_CONST    reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    BOOL_CONSTT     reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    BOOL_CONSTF     reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    KWRD_NULL       reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    FLOAT_CONST     reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    INT_CONST       reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)


state 181

    (19) assignment_operator -> REMAINDER_ASSIGN .

    IDENTIFIER      reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    PLUS            reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    MINUS           reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    NOT             reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    TILDA           reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    LPAREN          reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    CHARACTER       reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    STRING_CONST    reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    BOOL_CONSTT     reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    BOOL_CONSTF     reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    KWRD_NULL       reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    FLOAT_CONST     reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    INT_CONST       reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)


state 182

    (25) assignment_operator -> OR_ASSIGN .

    IDENTIFIER      reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    PLUS            reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    MINUS           reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    NOT             reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    TILDA           reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    LPAREN          reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    CHARACTER       reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    STRING_CONST    reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    BOOL_CONSTT     reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    BOOL_CONSTF     reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    KWRD_NULL       reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    FLOAT_CONST     reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    INT_CONST       reduce using rule 25 (assignment_operator -> OR_ASSIGN .)


state 183

    (22) assignment_operator -> LSHIFT_ASSIGN .

    IDENTIFIER      reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    PLUS            reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    MINUS           reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    NOT             reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    TILDA           reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    LPAREN          reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    CHARACTER       reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    STRING_CONST    reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    BOOL_CONSTT     reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    BOOL_CONSTF     reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    KWRD_NULL       reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    FLOAT_CONST     reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    INT_CONST       reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)


state 184

    (24) assignment_operator -> AND_ASSIGN .

    IDENTIFIER      reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    PLUS            reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    MINUS           reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    NOT             reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    TILDA           reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    LPAREN          reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    CHARACTER       reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    STRING_CONST    reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    BOOL_CONSTT     reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    BOOL_CONSTF     reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    KWRD_NULL       reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    FLOAT_CONST     reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    INT_CONST       reduce using rule 24 (assignment_operator -> AND_ASSIGN .)


state 185

    (18) assignment_operator -> DIVIDE_ASSIGN .

    IDENTIFIER      reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    PLUS            reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    NOT             reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    TILDA           reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    CHARACTER       reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    STRING_CONST    reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    BOOL_CONSTT     reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    BOOL_CONSTF     reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    KWRD_NULL       reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    FLOAT_CONST     reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    INT_CONST       reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)


state 186

    (15) assignment -> valid_variable assignment_operator . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    additive_expression            shift and go to state 61
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 104
    inclusive_or_expression        shift and go to state 41
    literal                        shift and go to state 78
    and_expression                 shift and go to state 94
    relational_expression          shift and go to state 80
    cast_expression                shift and go to state 86
    conditional_or_expression      shift and go to state 62
    assignment_expression          shift and go to state 250
    qualified_name                 shift and go to state 85
    assignment                     shift and go to state 129
    multiplicative_expression      shift and go to state 64
    method_invocation              shift and go to state 119
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 130
    conditional_and_expression     shift and go to state 67

state 187

    (20) assignment_operator -> PLUS_ASSIGN .

    IDENTIFIER      reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    PLUS            reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    MINUS           reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    NOT             reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    TILDA           reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    CHARACTER       reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    STRING_CONST    reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    BOOL_CONSTT     reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    BOOL_CONSTF     reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    KWRD_NULL       reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    FLOAT_CONST     reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    INT_CONST       reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)


state 188

    (16) assignment_operator -> ASSIGN .

    IDENTIFIER      reduce using rule 16 (assignment_operator -> ASSIGN .)
    PLUS            reduce using rule 16 (assignment_operator -> ASSIGN .)
    MINUS           reduce using rule 16 (assignment_operator -> ASSIGN .)
    NOT             reduce using rule 16 (assignment_operator -> ASSIGN .)
    TILDA           reduce using rule 16 (assignment_operator -> ASSIGN .)
    LPAREN          reduce using rule 16 (assignment_operator -> ASSIGN .)
    CHARACTER       reduce using rule 16 (assignment_operator -> ASSIGN .)
    STRING_CONST    reduce using rule 16 (assignment_operator -> ASSIGN .)
    BOOL_CONSTT     reduce using rule 16 (assignment_operator -> ASSIGN .)
    BOOL_CONSTF     reduce using rule 16 (assignment_operator -> ASSIGN .)
    KWRD_NULL       reduce using rule 16 (assignment_operator -> ASSIGN .)
    FLOAT_CONST     reduce using rule 16 (assignment_operator -> ASSIGN .)
    INT_CONST       reduce using rule 16 (assignment_operator -> ASSIGN .)


state 189

    (26) assignment_operator -> XOR_ASSIGN .

    IDENTIFIER      reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    PLUS            reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    MINUS           reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    NOT             reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    TILDA           reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    LPAREN          reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    CHARACTER       reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    STRING_CONST    reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    BOOL_CONSTT     reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    BOOL_CONSTF     reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    KWRD_NULL       reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    FLOAT_CONST     reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    INT_CONST       reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)


state 190

    (179) class_header_name -> class_header_name1 func_args_start constructor_arguement_list_opt RPAREN .

    KWRD_EXTNDS     reduce using rule 179 (class_header_name -> class_header_name1 func_args_start constructor_arguement_list_opt RPAREN .)
    BLOCK_BEGIN     reduce using rule 179 (class_header_name -> class_header_name1 func_args_start constructor_arguement_list_opt RPAREN .)


state 191

    (174) constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER . COLON type

    COLON           shift and go to state 251


state 192

    (173) constructor_arguement_list -> constructor_arguement_list COMMA . constructor_arguement_list_declarator
    (174) constructor_arguement_list_declarator -> . declaration_keyword IDENTIFIER COLON type
    (104) declaration_keyword -> . KWRD_VAR
    (105) declaration_keyword -> . KWRD_VAL

    KWRD_VAR        shift and go to state 109
    KWRD_VAL        shift and go to state 110

    declaration_keyword            shift and go to state 107
    constructor_arguement_list_declarator shift and go to state 252

state 193

    (183) class_header_extends -> KWRD_EXTNDS name LPAREN . func_arguement_list_opt RPAREN
    (175) func_arguement_list_opt -> . variable_declarators
    (176) func_arguement_list_opt -> . empty
    (116) variable_declarators -> . variable_declarator
    (117) variable_declarators -> . variable_declarators COMMA variable_declarator
    (211) empty -> .
    (118) variable_declarator -> . variable_declarator_id
    (119) variable_declarator_id -> . IDENTIFIER COLON type

    RPAREN          reduce using rule 211 (empty -> .)
    IDENTIFIER      shift and go to state 198

    func_arguement_list_opt        shift and go to state 253
    variable_declarators           shift and go to state 200
    variable_declarator            shift and go to state 201
    variable_declarator_id         shift and go to state 199
    empty                          shift and go to state 202

state 194

    (9) ObjectDeclare -> KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER .

    BLOCK_BEGIN     reduce using rule 9 (ObjectDeclare -> KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER .)


state 195

    (184) class_body -> class_body_start block_statements_opt end_scope .

    KWRD_OBJECT     reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    KWRD_PROTECTED  reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    KWRD_PRIVATE    reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    KWRD_CLASS      reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    $end            reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    KWRD_FOR        reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    STATE_END       reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    KWRD_RETURN     reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    KWRD_DO         reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    BLOCK_BEGIN     reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    KWRD_WHILE      reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    IDENTIFIER      reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    PLUS            reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    MINUS           reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    NOT             reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    TILDA           reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    LPAREN          reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    CHARACTER       reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    STRING_CONST    reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    BOOL_CONSTT     reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    BOOL_CONSTF     reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    KWRD_NULL       reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    FLOAT_CONST     reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    INT_CONST       reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    KWRD_DEF        reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    KWRD_VAR        reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    KWRD_VAL        reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    KWRD_IF         reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    BLOCK_END       reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)
    KWRD_CASE       reduce using rule 184 (class_body -> class_body_start block_statements_opt end_scope .)


state 196

    (33) inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .
    (35) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR_BITWISE      reduce using rule 33 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    AND             reduce using rule 33 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    OR              reduce using rule 33 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    STATE_END       reduce using rule 33 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    KWRD_MATCH      reduce using rule 33 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    COMMA           reduce using rule 33 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    RPAREN          reduce using rule 33 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    RBPAREN         reduce using rule 33 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    KWRD_BY         reduce using rule 33 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    KWRD_UNTIL      reduce using rule 33 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    FUNTYPE         reduce using rule 33 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    XOR             shift and go to state 152


state 197

    (187) method_header -> method_header_name func_args_start func_arguement_list_opt . RPAREN COLON method_return_type ASSIGN

    RPAREN          shift and go to state 254


state 198

    (119) variable_declarator_id -> IDENTIFIER . COLON type

    COLON           shift and go to state 255


state 199

    (118) variable_declarator -> variable_declarator_id .

    RPAREN          reduce using rule 118 (variable_declarator -> variable_declarator_id .)
    COMMA           reduce using rule 118 (variable_declarator -> variable_declarator_id .)
    ASSIGN          reduce using rule 118 (variable_declarator -> variable_declarator_id .)


state 200

    (175) func_arguement_list_opt -> variable_declarators .
    (117) variable_declarators -> variable_declarators . COMMA variable_declarator

    RPAREN          reduce using rule 175 (func_arguement_list_opt -> variable_declarators .)
    COMMA           shift and go to state 256


state 201

    (116) variable_declarators -> variable_declarator .

    RPAREN          reduce using rule 116 (variable_declarators -> variable_declarator .)
    COMMA           reduce using rule 116 (variable_declarators -> variable_declarator .)


state 202

    (176) func_arguement_list_opt -> empty .

    RPAREN          reduce using rule 176 (func_arguement_list_opt -> empty .)


state 203

    (169) return_statement -> KWRD_RETURN expression_optional STATE_END .

    KWRD_FOR        reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_OBJECT     reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    STATE_END       reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_RETURN     reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_DO         reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_PROTECTED  reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_PRIVATE    reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    BLOCK_BEGIN     reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_WHILE      reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    IDENTIFIER      reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    PLUS            reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    MINUS           reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    NOT             reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    TILDA           reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    LPAREN          reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    CHARACTER       reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    STRING_CONST    reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    BOOL_CONSTT     reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    BOOL_CONSTF     reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_NULL       reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    FLOAT_CONST     reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    INT_CONST       reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_DEF        reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_CLASS      reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_VAR        reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_VAL        reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_IF         reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    BLOCK_END       reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_CASE       reduce using rule 169 (return_statement -> KWRD_RETURN expression_optional STATE_END .)


state 204

    (78) argument_list_opt -> argument_list .
    (81) argument_list -> argument_list . COMMA expression

    RPAREN          reduce using rule 78 (argument_list_opt -> argument_list .)
    COMMA           shift and go to state 257


state 205

    (79) argument_list_opt -> empty .

    RPAREN          reduce using rule 79 (argument_list_opt -> empty .)


state 206

    (76) method_invocation -> name LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 258


state 207

    (80) argument_list -> expression .

    COMMA           reduce using rule 80 (argument_list -> expression .)
    RPAREN          reduce using rule 80 (argument_list -> expression .)


state 208

    (77) array_access -> name LBPAREN expression . RBPAREN

    RBPAREN         shift and go to state 259


state 209

    (85) qualified_name -> name DOT simple_name .

    LBPAREN         reduce using rule 85 (qualified_name -> name DOT simple_name .)
    LPAREN          reduce using rule 85 (qualified_name -> name DOT simple_name .)
    DOT             reduce using rule 85 (qualified_name -> name DOT simple_name .)
    TIMES           reduce using rule 85 (qualified_name -> name DOT simple_name .)
    DIVIDE          reduce using rule 85 (qualified_name -> name DOT simple_name .)
    REMAINDER       reduce using rule 85 (qualified_name -> name DOT simple_name .)
    PLUS            reduce using rule 85 (qualified_name -> name DOT simple_name .)
    MINUS           reduce using rule 85 (qualified_name -> name DOT simple_name .)
    LSHIFT          reduce using rule 85 (qualified_name -> name DOT simple_name .)
    RSHIFT          reduce using rule 85 (qualified_name -> name DOT simple_name .)
    GREATER         reduce using rule 85 (qualified_name -> name DOT simple_name .)
    LESS            reduce using rule 85 (qualified_name -> name DOT simple_name .)
    GEQ             reduce using rule 85 (qualified_name -> name DOT simple_name .)
    LEQ             reduce using rule 85 (qualified_name -> name DOT simple_name .)
    EQUAL           reduce using rule 85 (qualified_name -> name DOT simple_name .)
    NEQUAL          reduce using rule 85 (qualified_name -> name DOT simple_name .)
    AND_BITWISE     reduce using rule 85 (qualified_name -> name DOT simple_name .)
    XOR             reduce using rule 85 (qualified_name -> name DOT simple_name .)
    OR_BITWISE      reduce using rule 85 (qualified_name -> name DOT simple_name .)
    AND             reduce using rule 85 (qualified_name -> name DOT simple_name .)
    OR              reduce using rule 85 (qualified_name -> name DOT simple_name .)
    KWRD_MATCH      reduce using rule 85 (qualified_name -> name DOT simple_name .)
    STATE_END       reduce using rule 85 (qualified_name -> name DOT simple_name .)
    RPAREN          reduce using rule 85 (qualified_name -> name DOT simple_name .)
    COMMA           reduce using rule 85 (qualified_name -> name DOT simple_name .)
    RBPAREN         reduce using rule 85 (qualified_name -> name DOT simple_name .)
    KWRD_UNTIL      reduce using rule 85 (qualified_name -> name DOT simple_name .)
    FUNTYPE         reduce using rule 85 (qualified_name -> name DOT simple_name .)
    KWRD_BY         reduce using rule 85 (qualified_name -> name DOT simple_name .)
    ASSIGN          reduce using rule 85 (qualified_name -> name DOT simple_name .)
    TIMES_ASSIGN    reduce using rule 85 (qualified_name -> name DOT simple_name .)
    DIVIDE_ASSIGN   reduce using rule 85 (qualified_name -> name DOT simple_name .)
    REMAINDER_ASSIGN reduce using rule 85 (qualified_name -> name DOT simple_name .)
    PLUS_ASSIGN     reduce using rule 85 (qualified_name -> name DOT simple_name .)
    MINUS_ASSIGN    reduce using rule 85 (qualified_name -> name DOT simple_name .)
    LSHIFT_ASSIGN   reduce using rule 85 (qualified_name -> name DOT simple_name .)
    RSHIFT_ASSIGN   reduce using rule 85 (qualified_name -> name DOT simple_name .)
    AND_ASSIGN      reduce using rule 85 (qualified_name -> name DOT simple_name .)
    OR_ASSIGN       reduce using rule 85 (qualified_name -> name DOT simple_name .)
    XOR_ASSIGN      reduce using rule 85 (qualified_name -> name DOT simple_name .)


state 210

    (153) for_statement -> KWRD_FOR LPAREN for_loop . RPAREN block

    RPAREN          shift and go to state 260


state 211

    (154) for_loop -> IDENTIFIER . CHOOSE expression KWRD_UNTIL expression for_step_opts

    CHOOSE          shift and go to state 261


state 212

    (140) if_else_starting -> KWRD_IF LPAREN . expression RPAREN
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    additive_expression            shift and go to state 61
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 104
    inclusive_or_expression        shift and go to state 41
    literal                        shift and go to state 78
    and_expression                 shift and go to state 94
    relational_expression          shift and go to state 80
    cast_expression                shift and go to state 86
    conditional_or_expression      shift and go to state 62
    assignment_expression          shift and go to state 99
    qualified_name                 shift and go to state 85
    assignment                     shift and go to state 129
    multiplicative_expression      shift and go to state 64
    method_invocation              shift and go to state 119
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 130
    expression                     shift and go to state 262
    conditional_and_expression     shift and go to state 67

state 213

    (138) if_else_statement -> MarkIfStart if_else_begin if_else_intermediate . MarkIfEnd
    (136) MarkIfEnd -> . empty
    (211) empty -> .

    KWRD_FOR        reduce using rule 211 (empty -> .)
    KWRD_OBJECT     reduce using rule 211 (empty -> .)
    STATE_END       reduce using rule 211 (empty -> .)
    KWRD_RETURN     reduce using rule 211 (empty -> .)
    KWRD_DO         reduce using rule 211 (empty -> .)
    KWRD_PROTECTED  reduce using rule 211 (empty -> .)
    KWRD_PRIVATE    reduce using rule 211 (empty -> .)
    BLOCK_BEGIN     reduce using rule 211 (empty -> .)
    KWRD_WHILE      reduce using rule 211 (empty -> .)
    IDENTIFIER      reduce using rule 211 (empty -> .)
    PLUS            reduce using rule 211 (empty -> .)
    MINUS           reduce using rule 211 (empty -> .)
    NOT             reduce using rule 211 (empty -> .)
    TILDA           reduce using rule 211 (empty -> .)
    LPAREN          reduce using rule 211 (empty -> .)
    CHARACTER       reduce using rule 211 (empty -> .)
    STRING_CONST    reduce using rule 211 (empty -> .)
    BOOL_CONSTT     reduce using rule 211 (empty -> .)
    BOOL_CONSTF     reduce using rule 211 (empty -> .)
    KWRD_NULL       reduce using rule 211 (empty -> .)
    FLOAT_CONST     reduce using rule 211 (empty -> .)
    INT_CONST       reduce using rule 211 (empty -> .)
    KWRD_DEF        reduce using rule 211 (empty -> .)
    KWRD_CLASS      reduce using rule 211 (empty -> .)
    KWRD_VAR        reduce using rule 211 (empty -> .)
    KWRD_VAL        reduce using rule 211 (empty -> .)
    KWRD_IF         reduce using rule 211 (empty -> .)
    BLOCK_END       reduce using rule 211 (empty -> .)
    KWRD_CASE       reduce using rule 211 (empty -> .)

    MarkIfEnd                      shift and go to state 263
    empty                          shift and go to state 264

state 214

    (142) if_else_intermediate -> KWRD_ELSE . if_else_end
    (145) if_else_end -> . MarkBeforeElse if_else_block
    (146) if_else_end -> . if_else_begin if_else_intermediate
    (144) MarkBeforeElse -> . empty
    (139) if_else_begin -> . if_else_starting if_else_ending
    (211) empty -> .
    (140) if_else_starting -> . KWRD_IF LPAREN expression RPAREN

    BLOCK_BEGIN     reduce using rule 211 (empty -> .)
    KWRD_IF         shift and go to state 138

    MarkBeforeElse                 shift and go to state 265
    if_else_begin                  shift and go to state 266
    if_else_starting               shift and go to state 140
    if_else_end                    shift and go to state 268
    empty                          shift and go to state 267

state 215

    (143) if_else_intermediate -> empty .

    KWRD_FOR        reduce using rule 143 (if_else_intermediate -> empty .)
    KWRD_OBJECT     reduce using rule 143 (if_else_intermediate -> empty .)
    STATE_END       reduce using rule 143 (if_else_intermediate -> empty .)
    KWRD_RETURN     reduce using rule 143 (if_else_intermediate -> empty .)
    KWRD_DO         reduce using rule 143 (if_else_intermediate -> empty .)
    KWRD_PROTECTED  reduce using rule 143 (if_else_intermediate -> empty .)
    KWRD_PRIVATE    reduce using rule 143 (if_else_intermediate -> empty .)
    BLOCK_BEGIN     reduce using rule 143 (if_else_intermediate -> empty .)
    KWRD_WHILE      reduce using rule 143 (if_else_intermediate -> empty .)
    IDENTIFIER      reduce using rule 143 (if_else_intermediate -> empty .)
    PLUS            reduce using rule 143 (if_else_intermediate -> empty .)
    MINUS           reduce using rule 143 (if_else_intermediate -> empty .)
    NOT             reduce using rule 143 (if_else_intermediate -> empty .)
    TILDA           reduce using rule 143 (if_else_intermediate -> empty .)
    LPAREN          reduce using rule 143 (if_else_intermediate -> empty .)
    CHARACTER       reduce using rule 143 (if_else_intermediate -> empty .)
    STRING_CONST    reduce using rule 143 (if_else_intermediate -> empty .)
    BOOL_CONSTT     reduce using rule 143 (if_else_intermediate -> empty .)
    BOOL_CONSTF     reduce using rule 143 (if_else_intermediate -> empty .)
    KWRD_NULL       reduce using rule 143 (if_else_intermediate -> empty .)
    FLOAT_CONST     reduce using rule 143 (if_else_intermediate -> empty .)
    INT_CONST       reduce using rule 143 (if_else_intermediate -> empty .)
    KWRD_DEF        reduce using rule 143 (if_else_intermediate -> empty .)
    KWRD_CLASS      reduce using rule 143 (if_else_intermediate -> empty .)
    KWRD_VAR        reduce using rule 143 (if_else_intermediate -> empty .)
    KWRD_VAL        reduce using rule 143 (if_else_intermediate -> empty .)
    KWRD_IF         reduce using rule 143 (if_else_intermediate -> empty .)
    BLOCK_END       reduce using rule 143 (if_else_intermediate -> empty .)
    KWRD_CASE       reduce using rule 143 (if_else_intermediate -> empty .)


state 216

    (141) if_else_ending -> if_else_block .

    KWRD_ELSE       reduce using rule 141 (if_else_ending -> if_else_block .)
    KWRD_FOR        reduce using rule 141 (if_else_ending -> if_else_block .)
    KWRD_OBJECT     reduce using rule 141 (if_else_ending -> if_else_block .)
    STATE_END       reduce using rule 141 (if_else_ending -> if_else_block .)
    KWRD_RETURN     reduce using rule 141 (if_else_ending -> if_else_block .)
    KWRD_DO         reduce using rule 141 (if_else_ending -> if_else_block .)
    KWRD_PROTECTED  reduce using rule 141 (if_else_ending -> if_else_block .)
    KWRD_PRIVATE    reduce using rule 141 (if_else_ending -> if_else_block .)
    BLOCK_BEGIN     reduce using rule 141 (if_else_ending -> if_else_block .)
    KWRD_WHILE      reduce using rule 141 (if_else_ending -> if_else_block .)
    IDENTIFIER      reduce using rule 141 (if_else_ending -> if_else_block .)
    PLUS            reduce using rule 141 (if_else_ending -> if_else_block .)
    MINUS           reduce using rule 141 (if_else_ending -> if_else_block .)
    NOT             reduce using rule 141 (if_else_ending -> if_else_block .)
    TILDA           reduce using rule 141 (if_else_ending -> if_else_block .)
    LPAREN          reduce using rule 141 (if_else_ending -> if_else_block .)
    CHARACTER       reduce using rule 141 (if_else_ending -> if_else_block .)
    STRING_CONST    reduce using rule 141 (if_else_ending -> if_else_block .)
    BOOL_CONSTT     reduce using rule 141 (if_else_ending -> if_else_block .)
    BOOL_CONSTF     reduce using rule 141 (if_else_ending -> if_else_block .)
    KWRD_NULL       reduce using rule 141 (if_else_ending -> if_else_block .)
    FLOAT_CONST     reduce using rule 141 (if_else_ending -> if_else_block .)
    INT_CONST       reduce using rule 141 (if_else_ending -> if_else_block .)
    KWRD_DEF        reduce using rule 141 (if_else_ending -> if_else_block .)
    KWRD_CLASS      reduce using rule 141 (if_else_ending -> if_else_block .)
    KWRD_VAR        reduce using rule 141 (if_else_ending -> if_else_block .)
    KWRD_VAL        reduce using rule 141 (if_else_ending -> if_else_block .)
    KWRD_IF         reduce using rule 141 (if_else_ending -> if_else_block .)
    BLOCK_END       reduce using rule 141 (if_else_ending -> if_else_block .)
    KWRD_CASE       reduce using rule 141 (if_else_ending -> if_else_block .)


state 217

    (139) if_else_begin -> if_else_starting if_else_ending .

    KWRD_ELSE       reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    KWRD_FOR        reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    KWRD_OBJECT     reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    STATE_END       reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    KWRD_RETURN     reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    KWRD_DO         reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    KWRD_PROTECTED  reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    KWRD_PRIVATE    reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    BLOCK_BEGIN     reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    KWRD_WHILE      reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    IDENTIFIER      reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    PLUS            reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    MINUS           reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    NOT             reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    TILDA           reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    LPAREN          reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    CHARACTER       reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    STRING_CONST    reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    BOOL_CONSTT     reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    BOOL_CONSTF     reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    KWRD_NULL       reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    FLOAT_CONST     reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    INT_CONST       reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    KWRD_DEF        reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    KWRD_CLASS      reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    KWRD_VAR        reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    KWRD_VAL        reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    KWRD_IF         reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    BLOCK_END       reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)
    KWRD_CASE       reduce using rule 139 (if_else_begin -> if_else_starting if_else_ending .)


state 218

    (133) start_scope_if -> BLOCK_BEGIN .

    KWRD_FOR        reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    KWRD_OBJECT     reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    STATE_END       reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    KWRD_RETURN     reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    KWRD_DO         reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    KWRD_PROTECTED  reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    KWRD_PRIVATE    reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    BLOCK_BEGIN     reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    KWRD_WHILE      reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    IDENTIFIER      reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    PLUS            reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    MINUS           reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    NOT             reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    TILDA           reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    LPAREN          reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    CHARACTER       reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    STRING_CONST    reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    BOOL_CONSTT     reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    BOOL_CONSTF     reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    KWRD_NULL       reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    FLOAT_CONST     reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    INT_CONST       reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    BLOCK_END       reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    KWRD_DEF        reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    KWRD_CLASS      reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    KWRD_VAR        reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    KWRD_VAL        reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)
    KWRD_IF         reduce using rule 133 (start_scope_if -> BLOCK_BEGIN .)


state 219

    (137) if_else_block -> start_scope_if . block_statements_opt end_scope_if
    (93) block_statements_opt -> . block_statements
    (94) block_statements_opt -> . empty
    (95) block_statements -> . block_statement
    (96) block_statements -> . block_statements block_statement
    (211) empty -> .
    (97) block_statement -> . local_variable_declaration_statement
    (98) block_statement -> . statement
    (99) block_statement -> . class_declaration
    (100) block_statement -> . SingletonObject
    (101) block_statement -> . method_declaration
    (106) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (120) statement -> . normal_statement
    (121) statement -> . if_else_statement
    (122) statement -> . while_statement
    (123) statement -> . do_while_statement
    (124) statement -> . for_statement
    (177) class_declaration -> . class_header class_body
    (7) SingletonObject -> . ObjectDeclare block
    (186) method_declaration -> . method_header method_body
    (107) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (125) normal_statement -> . block
    (126) normal_statement -> . expression_statement
    (127) normal_statement -> . empty_statement
    (128) normal_statement -> . return_statement
    (129) normal_statement -> . switch_statement
    (138) if_else_statement -> . MarkIfStart if_else_begin if_else_intermediate MarkIfEnd
    (147) while_statement -> . while_header while_body
    (151) do_while_statement -> . do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END
    (153) for_statement -> . KWRD_FOR LPAREN for_loop RPAREN block
    (178) class_header -> . class_header_name class_header_extends_opt
    (8) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (9) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (187) method_header -> . method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (102) modifier_opts -> . modifier
    (103) modifier_opts -> . empty
    (90) block -> . start_scope block_statements_opt end_scope
    (130) expression_statement -> . statement_expression STATE_END
    (168) empty_statement -> . STATE_END
    (169) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (157) switch_statement -> . expression KWRD_MATCH switch_block
    (135) MarkIfStart -> . empty
    (148) while_header -> . while_begin LPAREN expression RPAREN
    (152) do_while_statement_begin -> . KWRD_DO
    (179) class_header_name -> . class_header_name1 func_args_start constructor_arguement_list_opt RPAREN
    (191) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (195) modifier -> . KWRD_PROTECTED
    (196) modifier -> . KWRD_PRIVATE
    (91) start_scope -> . BLOCK_BEGIN
    (131) statement_expression -> . assignment
    (132) statement_expression -> . method_invocation
    (10) expression -> . assignment_expression
    (150) while_begin -> . KWRD_WHILE
    (180) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (77) array_access -> . name LBPAREN expression RBPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    BLOCK_END       reduce using rule 211 (empty -> .)
    KWRD_DEF        reduce using rule 211 (empty -> .)
    KWRD_CLASS      reduce using rule 211 (empty -> .)
    KWRD_VAR        reduce using rule 211 (empty -> .)
    KWRD_VAL        reduce using rule 211 (empty -> .)
    KWRD_IF         reduce using rule 211 (empty -> .)
    KWRD_FOR        shift and go to state 58
    KWRD_OBJECT     shift and go to state 4
    STATE_END       shift and go to state 55
    KWRD_RETURN     shift and go to state 51
    KWRD_DO         shift and go to state 48
    KWRD_PROTECTED  shift and go to state 11
    KWRD_PRIVATE    shift and go to state 15
    BLOCK_BEGIN     shift and go to state 16
    KWRD_WHILE      shift and go to state 53
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    expression_statement           shift and go to state 33
    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    normal_statement               shift and go to state 92
    ObjectDeclare                  shift and go to state 1
    relational_expression          shift and go to state 80
    do_while_statement_begin       shift and go to state 73
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    MarkIfStart                    shift and go to state 59
    switch_statement               shift and go to state 60
    assignment_expression          shift and go to state 99
    block_statements_opt           shift and go to state 269
    primary                        shift and go to state 72
    qualified_name                 shift and go to state 85
    base_variable_set              shift and go to state 95
    if_else_statement              shift and go to state 76
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 88
    cast_expression                shift and go to state 86
    block_statement                shift and go to state 77
    shift_expression               shift and go to state 65
    return_statement               shift and go to state 96
    while_statement                shift and go to state 42
    and_expression                 shift and go to state 94
    statement                      shift and go to state 81
    statement_expression           shift and go to state 45
    method_invocation              shift and go to state 82
    simple_name                    shift and go to state 74
    conditional_or_expression      shift and go to state 62
    empty                          shift and go to state 84
    block_statements               shift and go to state 97
    for_statement                  shift and go to state 34
    local_variable_declaration_statement shift and go to state 46
    do_while_statement             shift and go to state 63
    int_float                      shift and go to state 47
    assignment                     shift and go to state 100
    multiplicative_expression      shift and go to state 64
    literal                        shift and go to state 78
    class_header_name1             shift and go to state 2
    additive_expression            shift and go to state 61
    SingletonObject                shift and go to state 49
    start_scope                    shift and go to state 17
    method_header_name             shift and go to state 50
    class_header                   shift and go to state 9
    modifier_opts                  shift and go to state 102
    equality_expression            shift and go to state 87
    modifier                       shift and go to state 14
    variable_literal               shift and go to state 66
    name                           shift and go to state 52
    inclusive_or_expression        shift and go to state 41
    while_header                   shift and go to state 54
    while_begin                    shift and go to state 103
    valid_variable                 shift and go to state 104
    method_header                  shift and go to state 89
    empty_statement                shift and go to state 90
    class_declaration              shift and go to state 105
    expression                     shift and go to state 69
    local_variable_declaration     shift and go to state 91
    conditional_and_expression     shift and go to state 67
    block                          shift and go to state 70

state 220

    (50) additive_expression -> additive_expression PLUS multiplicative_expression .
    (53) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (54) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (55) multiplicative_expression -> multiplicative_expression . REMAINDER unary_expression

    PLUS            reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LSHIFT          reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSHIFT          reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER         reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS            reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GEQ             reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LEQ             reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUAL           reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NEQUAL          reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND_BITWISE     reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR_BITWISE      reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    KWRD_MATCH      reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STATE_END       reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBPAREN         reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    KWRD_UNTIL      reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FUNTYPE         reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    KWRD_BY         reduce using rule 50 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 145
    REMAINDER       shift and go to state 144


state 221

    (51) additive_expression -> additive_expression MINUS multiplicative_expression .
    (53) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (54) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (55) multiplicative_expression -> multiplicative_expression . REMAINDER unary_expression

    PLUS            reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LSHIFT          reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSHIFT          reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER         reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS            reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GEQ             reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LEQ             reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUAL           reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NEQUAL          reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND_BITWISE     reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR_BITWISE      reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    KWRD_MATCH      reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STATE_END       reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBPAREN         reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    KWRD_UNTIL      reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FUNTYPE         reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    KWRD_BY         reduce using rule 51 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 146
    DIVIDE          shift and go to state 145
    REMAINDER       shift and go to state 144


state 222

    (29) conditional_or_expression -> conditional_or_expression OR Marker . conditional_and_expression
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    additive_expression            shift and go to state 61
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 118
    inclusive_or_expression        shift and go to state 41
    literal                        shift and go to state 78
    and_expression                 shift and go to state 94
    cast_expression                shift and go to state 86
    relational_expression          shift and go to state 80
    qualified_name                 shift and go to state 85
    multiplicative_expression      shift and go to state 64
    method_invocation              shift and go to state 119
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 120
    conditional_and_expression     shift and go to state 270

state 223

    (27) Marker -> empty .

    PLUS            reduce using rule 27 (Marker -> empty .)
    MINUS           reduce using rule 27 (Marker -> empty .)
    NOT             reduce using rule 27 (Marker -> empty .)
    TILDA           reduce using rule 27 (Marker -> empty .)
    LPAREN          reduce using rule 27 (Marker -> empty .)
    CHARACTER       reduce using rule 27 (Marker -> empty .)
    STRING_CONST    reduce using rule 27 (Marker -> empty .)
    BOOL_CONSTT     reduce using rule 27 (Marker -> empty .)
    BOOL_CONSTF     reduce using rule 27 (Marker -> empty .)
    KWRD_NULL       reduce using rule 27 (Marker -> empty .)
    IDENTIFIER      reduce using rule 27 (Marker -> empty .)
    FLOAT_CONST     reduce using rule 27 (Marker -> empty .)
    INT_CONST       reduce using rule 27 (Marker -> empty .)


state 224

    (55) multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .

    TIMES           reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    DIVIDE          reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    REMAINDER       reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    PLUS            reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    MINUS           reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    LSHIFT          reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    RSHIFT          reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    GREATER         reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    LESS            reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    GEQ             reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    LEQ             reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    EQUAL           reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    NEQUAL          reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    AND_BITWISE     reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    XOR             reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    OR_BITWISE      reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    AND             reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    OR              reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    KWRD_MATCH      reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    STATE_END       reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    RPAREN          reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    COMMA           reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    RBPAREN         reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    KWRD_UNTIL      reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    FUNTYPE         reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    KWRD_BY         reduce using rule 55 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)


state 225

    (54) multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .

    TIMES           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DIVIDE          reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    REMAINDER       reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    PLUS            reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MINUS           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LSHIFT          reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RSHIFT          reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GREATER         reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LESS            reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GEQ             reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LEQ             reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    EQUAL           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    NEQUAL          reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AND_BITWISE     reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    XOR             reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OR_BITWISE      reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AND             reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OR              reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    KWRD_MATCH      reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    STATE_END       reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RPAREN          reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COMMA           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RBPAREN         reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    KWRD_UNTIL      reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    FUNTYPE         reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    KWRD_BY         reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)


state 226

    (53) multiplicative_expression -> multiplicative_expression TIMES unary_expression .

    TIMES           reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DIVIDE          reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    REMAINDER       reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    PLUS            reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MINUS           reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LSHIFT          reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RSHIFT          reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GREATER         reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LESS            reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GEQ             reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LEQ             reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    EQUAL           reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    NEQUAL          reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    AND_BITWISE     reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    XOR             reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OR_BITWISE      reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    AND             reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OR              reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    KWRD_MATCH      reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    STATE_END       reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RPAREN          reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    COMMA           reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RBPAREN         reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    KWRD_UNTIL      reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    FUNTYPE         reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    KWRD_BY         reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)


state 227

    (48) shift_expression -> shift_expression RSHIFT additive_expression .
    (50) additive_expression -> additive_expression . PLUS multiplicative_expression
    (51) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GREATER         reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LESS            reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GEQ             reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LEQ             reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQUAL           reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NEQUAL          reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND_BITWISE     reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOR             reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR_BITWISE      reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND             reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR              reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    STATE_END       reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    KWRD_MATCH      reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBPAREN         reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    KWRD_UNTIL      reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    FUNTYPE         reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    KWRD_BY         reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142


state 228

    (47) shift_expression -> shift_expression LSHIFT additive_expression .
    (50) additive_expression -> additive_expression . PLUS multiplicative_expression
    (51) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GREATER         reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LESS            reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GEQ             reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LEQ             reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQUAL           reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NEQUAL          reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND_BITWISE     reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOR             reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR_BITWISE      reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND             reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR              reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    STATE_END       reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    KWRD_MATCH      reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBPAREN         reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    KWRD_UNTIL      reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    FUNTYPE         reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    KWRD_BY         reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142


state 229

    (31) conditional_and_expression -> conditional_and_expression AND Marker . inclusive_or_expression
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    additive_expression            shift and go to state 61
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 118
    inclusive_or_expression        shift and go to state 271
    literal                        shift and go to state 78
    and_expression                 shift and go to state 94
    cast_expression                shift and go to state 86
    relational_expression          shift and go to state 80
    qualified_name                 shift and go to state 85
    multiplicative_expression      shift and go to state 64
    method_invocation              shift and go to state 119
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 120

state 230

    (158) switch_block -> BLOCK_BEGIN . BLOCK_END
    (159) switch_block -> BLOCK_BEGIN . switch_block_statements BLOCK_END
    (160) switch_block -> BLOCK_BEGIN . switch_labels BLOCK_END
    (161) switch_block -> BLOCK_BEGIN . switch_block_statements switch_labels BLOCK_END
    (162) switch_block_statements -> . switch_block_statement
    (163) switch_block_statements -> . switch_block_statements switch_block_statement
    (165) switch_labels -> . switch_label
    (166) switch_labels -> . switch_labels switch_label
    (164) switch_block_statement -> . switch_labels block_statements
    (167) switch_label -> . KWRD_CASE expression FUNTYPE

    BLOCK_END       shift and go to state 272
    KWRD_CASE       shift and go to state 273

    switch_block_statements        shift and go to state 276
    switch_labels                  shift and go to state 274
    switch_label                   shift and go to state 275
    switch_block_statement         shift and go to state 277

state 231

    (157) switch_statement -> expression KWRD_MATCH switch_block .

    KWRD_FOR        reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_OBJECT     reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    STATE_END       reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_RETURN     reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_DO         reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_PROTECTED  reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_PRIVATE    reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    BLOCK_BEGIN     reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_WHILE      reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    IDENTIFIER      reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    PLUS            reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    MINUS           reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    NOT             reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    TILDA           reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    LPAREN          reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    CHARACTER       reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    STRING_CONST    reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    BOOL_CONSTT     reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    BOOL_CONSTF     reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_NULL       reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    FLOAT_CONST     reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    INT_CONST       reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_DEF        reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_CLASS      reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_VAR        reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_VAL        reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_IF         reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    BLOCK_END       reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_CASE       reduce using rule 157 (switch_statement -> expression KWRD_MATCH switch_block .)


state 232

    (35) exclusive_or_expression -> exclusive_or_expression XOR and_expression .
    (37) and_expression -> and_expression . AND_BITWISE equality_expression

    XOR             reduce using rule 35 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR_BITWISE      reduce using rule 35 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND             reduce using rule 35 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR              reduce using rule 35 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COMMA           reduce using rule 35 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RPAREN          reduce using rule 35 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    KWRD_MATCH      reduce using rule 35 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    STATE_END       reduce using rule 35 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBPAREN         reduce using rule 35 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    KWRD_UNTIL      reduce using rule 35 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    FUNTYPE         reduce using rule 35 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    KWRD_BY         reduce using rule 35 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND_BITWISE     shift and go to state 165


state 233

    (151) do_while_statement -> do_while_statement_begin block KWRD_WHILE . LPAREN expression RPAREN STATE_END

    LPAREN          shift and go to state 278


state 234

    (44) relational_expression -> relational_expression GEQ shift_expression .
    (47) shift_expression -> shift_expression . LSHIFT additive_expression
    (48) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 44 (relational_expression -> relational_expression GEQ shift_expression .)
    LESS            reduce using rule 44 (relational_expression -> relational_expression GEQ shift_expression .)
    GEQ             reduce using rule 44 (relational_expression -> relational_expression GEQ shift_expression .)
    LEQ             reduce using rule 44 (relational_expression -> relational_expression GEQ shift_expression .)
    EQUAL           reduce using rule 44 (relational_expression -> relational_expression GEQ shift_expression .)
    NEQUAL          reduce using rule 44 (relational_expression -> relational_expression GEQ shift_expression .)
    AND_BITWISE     reduce using rule 44 (relational_expression -> relational_expression GEQ shift_expression .)
    XOR             reduce using rule 44 (relational_expression -> relational_expression GEQ shift_expression .)
    OR_BITWISE      reduce using rule 44 (relational_expression -> relational_expression GEQ shift_expression .)
    AND             reduce using rule 44 (relational_expression -> relational_expression GEQ shift_expression .)
    OR              reduce using rule 44 (relational_expression -> relational_expression GEQ shift_expression .)
    KWRD_MATCH      reduce using rule 44 (relational_expression -> relational_expression GEQ shift_expression .)
    RPAREN          reduce using rule 44 (relational_expression -> relational_expression GEQ shift_expression .)
    STATE_END       reduce using rule 44 (relational_expression -> relational_expression GEQ shift_expression .)
    COMMA           reduce using rule 44 (relational_expression -> relational_expression GEQ shift_expression .)
    RBPAREN         reduce using rule 44 (relational_expression -> relational_expression GEQ shift_expression .)
    KWRD_UNTIL      reduce using rule 44 (relational_expression -> relational_expression GEQ shift_expression .)
    FUNTYPE         reduce using rule 44 (relational_expression -> relational_expression GEQ shift_expression .)
    KWRD_BY         reduce using rule 44 (relational_expression -> relational_expression GEQ shift_expression .)
    LSHIFT          shift and go to state 148
    RSHIFT          shift and go to state 147


state 235

    (42) relational_expression -> relational_expression GREATER shift_expression .
    (47) shift_expression -> shift_expression . LSHIFT additive_expression
    (48) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 42 (relational_expression -> relational_expression GREATER shift_expression .)
    LESS            reduce using rule 42 (relational_expression -> relational_expression GREATER shift_expression .)
    GEQ             reduce using rule 42 (relational_expression -> relational_expression GREATER shift_expression .)
    LEQ             reduce using rule 42 (relational_expression -> relational_expression GREATER shift_expression .)
    EQUAL           reduce using rule 42 (relational_expression -> relational_expression GREATER shift_expression .)
    NEQUAL          reduce using rule 42 (relational_expression -> relational_expression GREATER shift_expression .)
    AND_BITWISE     reduce using rule 42 (relational_expression -> relational_expression GREATER shift_expression .)
    XOR             reduce using rule 42 (relational_expression -> relational_expression GREATER shift_expression .)
    OR_BITWISE      reduce using rule 42 (relational_expression -> relational_expression GREATER shift_expression .)
    AND             reduce using rule 42 (relational_expression -> relational_expression GREATER shift_expression .)
    OR              reduce using rule 42 (relational_expression -> relational_expression GREATER shift_expression .)
    KWRD_MATCH      reduce using rule 42 (relational_expression -> relational_expression GREATER shift_expression .)
    RPAREN          reduce using rule 42 (relational_expression -> relational_expression GREATER shift_expression .)
    STATE_END       reduce using rule 42 (relational_expression -> relational_expression GREATER shift_expression .)
    COMMA           reduce using rule 42 (relational_expression -> relational_expression GREATER shift_expression .)
    RBPAREN         reduce using rule 42 (relational_expression -> relational_expression GREATER shift_expression .)
    KWRD_UNTIL      reduce using rule 42 (relational_expression -> relational_expression GREATER shift_expression .)
    FUNTYPE         reduce using rule 42 (relational_expression -> relational_expression GREATER shift_expression .)
    KWRD_BY         reduce using rule 42 (relational_expression -> relational_expression GREATER shift_expression .)
    LSHIFT          shift and go to state 148
    RSHIFT          shift and go to state 147


state 236

    (43) relational_expression -> relational_expression LESS shift_expression .
    (47) shift_expression -> shift_expression . LSHIFT additive_expression
    (48) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 43 (relational_expression -> relational_expression LESS shift_expression .)
    LESS            reduce using rule 43 (relational_expression -> relational_expression LESS shift_expression .)
    GEQ             reduce using rule 43 (relational_expression -> relational_expression LESS shift_expression .)
    LEQ             reduce using rule 43 (relational_expression -> relational_expression LESS shift_expression .)
    EQUAL           reduce using rule 43 (relational_expression -> relational_expression LESS shift_expression .)
    NEQUAL          reduce using rule 43 (relational_expression -> relational_expression LESS shift_expression .)
    AND_BITWISE     reduce using rule 43 (relational_expression -> relational_expression LESS shift_expression .)
    XOR             reduce using rule 43 (relational_expression -> relational_expression LESS shift_expression .)
    OR_BITWISE      reduce using rule 43 (relational_expression -> relational_expression LESS shift_expression .)
    AND             reduce using rule 43 (relational_expression -> relational_expression LESS shift_expression .)
    OR              reduce using rule 43 (relational_expression -> relational_expression LESS shift_expression .)
    KWRD_MATCH      reduce using rule 43 (relational_expression -> relational_expression LESS shift_expression .)
    RPAREN          reduce using rule 43 (relational_expression -> relational_expression LESS shift_expression .)
    STATE_END       reduce using rule 43 (relational_expression -> relational_expression LESS shift_expression .)
    COMMA           reduce using rule 43 (relational_expression -> relational_expression LESS shift_expression .)
    RBPAREN         reduce using rule 43 (relational_expression -> relational_expression LESS shift_expression .)
    KWRD_UNTIL      reduce using rule 43 (relational_expression -> relational_expression LESS shift_expression .)
    FUNTYPE         reduce using rule 43 (relational_expression -> relational_expression LESS shift_expression .)
    KWRD_BY         reduce using rule 43 (relational_expression -> relational_expression LESS shift_expression .)
    LSHIFT          shift and go to state 148
    RSHIFT          shift and go to state 147


state 237

    (45) relational_expression -> relational_expression LEQ shift_expression .
    (47) shift_expression -> shift_expression . LSHIFT additive_expression
    (48) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 45 (relational_expression -> relational_expression LEQ shift_expression .)
    LESS            reduce using rule 45 (relational_expression -> relational_expression LEQ shift_expression .)
    GEQ             reduce using rule 45 (relational_expression -> relational_expression LEQ shift_expression .)
    LEQ             reduce using rule 45 (relational_expression -> relational_expression LEQ shift_expression .)
    EQUAL           reduce using rule 45 (relational_expression -> relational_expression LEQ shift_expression .)
    NEQUAL          reduce using rule 45 (relational_expression -> relational_expression LEQ shift_expression .)
    AND_BITWISE     reduce using rule 45 (relational_expression -> relational_expression LEQ shift_expression .)
    XOR             reduce using rule 45 (relational_expression -> relational_expression LEQ shift_expression .)
    OR_BITWISE      reduce using rule 45 (relational_expression -> relational_expression LEQ shift_expression .)
    AND             reduce using rule 45 (relational_expression -> relational_expression LEQ shift_expression .)
    OR              reduce using rule 45 (relational_expression -> relational_expression LEQ shift_expression .)
    KWRD_MATCH      reduce using rule 45 (relational_expression -> relational_expression LEQ shift_expression .)
    RPAREN          reduce using rule 45 (relational_expression -> relational_expression LEQ shift_expression .)
    STATE_END       reduce using rule 45 (relational_expression -> relational_expression LEQ shift_expression .)
    COMMA           reduce using rule 45 (relational_expression -> relational_expression LEQ shift_expression .)
    RBPAREN         reduce using rule 45 (relational_expression -> relational_expression LEQ shift_expression .)
    KWRD_UNTIL      reduce using rule 45 (relational_expression -> relational_expression LEQ shift_expression .)
    FUNTYPE         reduce using rule 45 (relational_expression -> relational_expression LEQ shift_expression .)
    KWRD_BY         reduce using rule 45 (relational_expression -> relational_expression LEQ shift_expression .)
    LSHIFT          shift and go to state 148
    RSHIFT          shift and go to state 147


state 238

    (40) equality_expression -> equality_expression NEQUAL relational_expression .
    (42) relational_expression -> relational_expression . GREATER shift_expression
    (43) relational_expression -> relational_expression . LESS shift_expression
    (44) relational_expression -> relational_expression . GEQ shift_expression
    (45) relational_expression -> relational_expression . LEQ shift_expression

    EQUAL           reduce using rule 40 (equality_expression -> equality_expression NEQUAL relational_expression .)
    NEQUAL          reduce using rule 40 (equality_expression -> equality_expression NEQUAL relational_expression .)
    AND_BITWISE     reduce using rule 40 (equality_expression -> equality_expression NEQUAL relational_expression .)
    XOR             reduce using rule 40 (equality_expression -> equality_expression NEQUAL relational_expression .)
    OR_BITWISE      reduce using rule 40 (equality_expression -> equality_expression NEQUAL relational_expression .)
    AND             reduce using rule 40 (equality_expression -> equality_expression NEQUAL relational_expression .)
    OR              reduce using rule 40 (equality_expression -> equality_expression NEQUAL relational_expression .)
    KWRD_MATCH      reduce using rule 40 (equality_expression -> equality_expression NEQUAL relational_expression .)
    STATE_END       reduce using rule 40 (equality_expression -> equality_expression NEQUAL relational_expression .)
    RPAREN          reduce using rule 40 (equality_expression -> equality_expression NEQUAL relational_expression .)
    COMMA           reduce using rule 40 (equality_expression -> equality_expression NEQUAL relational_expression .)
    RBPAREN         reduce using rule 40 (equality_expression -> equality_expression NEQUAL relational_expression .)
    KWRD_UNTIL      reduce using rule 40 (equality_expression -> equality_expression NEQUAL relational_expression .)
    FUNTYPE         reduce using rule 40 (equality_expression -> equality_expression NEQUAL relational_expression .)
    KWRD_BY         reduce using rule 40 (equality_expression -> equality_expression NEQUAL relational_expression .)
    GREATER         shift and go to state 156
    LESS            shift and go to state 157
    GEQ             shift and go to state 155
    LEQ             shift and go to state 158


state 239

    (39) equality_expression -> equality_expression EQUAL relational_expression .
    (42) relational_expression -> relational_expression . GREATER shift_expression
    (43) relational_expression -> relational_expression . LESS shift_expression
    (44) relational_expression -> relational_expression . GEQ shift_expression
    (45) relational_expression -> relational_expression . LEQ shift_expression

    EQUAL           reduce using rule 39 (equality_expression -> equality_expression EQUAL relational_expression .)
    NEQUAL          reduce using rule 39 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND_BITWISE     reduce using rule 39 (equality_expression -> equality_expression EQUAL relational_expression .)
    XOR             reduce using rule 39 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR_BITWISE      reduce using rule 39 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND             reduce using rule 39 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR              reduce using rule 39 (equality_expression -> equality_expression EQUAL relational_expression .)
    KWRD_MATCH      reduce using rule 39 (equality_expression -> equality_expression EQUAL relational_expression .)
    STATE_END       reduce using rule 39 (equality_expression -> equality_expression EQUAL relational_expression .)
    RPAREN          reduce using rule 39 (equality_expression -> equality_expression EQUAL relational_expression .)
    COMMA           reduce using rule 39 (equality_expression -> equality_expression EQUAL relational_expression .)
    RBPAREN         reduce using rule 39 (equality_expression -> equality_expression EQUAL relational_expression .)
    KWRD_UNTIL      reduce using rule 39 (equality_expression -> equality_expression EQUAL relational_expression .)
    FUNTYPE         reduce using rule 39 (equality_expression -> equality_expression EQUAL relational_expression .)
    KWRD_BY         reduce using rule 39 (equality_expression -> equality_expression EQUAL relational_expression .)
    GREATER         shift and go to state 156
    LESS            shift and go to state 157
    GEQ             shift and go to state 155
    LEQ             shift and go to state 158


state 240

    (192) method_body -> method_start_scope block_statements_opt . method_end_scope
    (194) method_end_scope -> . BLOCK_END

    BLOCK_END       shift and go to state 279

    method_end_scope               shift and go to state 280

state 241

    (37) and_expression -> and_expression AND_BITWISE equality_expression .
    (39) equality_expression -> equality_expression . EQUAL relational_expression
    (40) equality_expression -> equality_expression . NEQUAL relational_expression

    AND_BITWISE     reduce using rule 37 (and_expression -> and_expression AND_BITWISE equality_expression .)
    XOR             reduce using rule 37 (and_expression -> and_expression AND_BITWISE equality_expression .)
    OR_BITWISE      reduce using rule 37 (and_expression -> and_expression AND_BITWISE equality_expression .)
    AND             reduce using rule 37 (and_expression -> and_expression AND_BITWISE equality_expression .)
    OR              reduce using rule 37 (and_expression -> and_expression AND_BITWISE equality_expression .)
    KWRD_MATCH      reduce using rule 37 (and_expression -> and_expression AND_BITWISE equality_expression .)
    STATE_END       reduce using rule 37 (and_expression -> and_expression AND_BITWISE equality_expression .)
    RPAREN          reduce using rule 37 (and_expression -> and_expression AND_BITWISE equality_expression .)
    COMMA           reduce using rule 37 (and_expression -> and_expression AND_BITWISE equality_expression .)
    RBPAREN         reduce using rule 37 (and_expression -> and_expression AND_BITWISE equality_expression .)
    KWRD_UNTIL      reduce using rule 37 (and_expression -> and_expression AND_BITWISE equality_expression .)
    FUNTYPE         reduce using rule 37 (and_expression -> and_expression AND_BITWISE equality_expression .)
    KWRD_BY         reduce using rule 37 (and_expression -> and_expression AND_BITWISE equality_expression .)
    EQUAL           shift and go to state 160
    NEQUAL          shift and go to state 159


state 242

    (65) cast_expression -> LPAREN primitive_type RPAREN . unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    IDENTIFIER      shift and go to state 83
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 85
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    unary_expression               shift and go to state 281
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 118
    array_access                   shift and go to state 36
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    literal                        shift and go to state 78
    method_invocation              shift and go to state 119
    cast_expression                shift and go to state 86
    simple_name                    shift and go to state 74
    name                           shift and go to state 120

state 243

    (64) base_variable_set -> LPAREN expression RPAREN .

    TIMES           reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    REMAINDER       reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    LESS            reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    GEQ             reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    LEQ             reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    NEQUAL          reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    AND_BITWISE     reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    XOR             reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    OR_BITWISE      reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    AND             reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    OR              reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    KWRD_MATCH      reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    STATE_END       reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    RBPAREN         reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    KWRD_UNTIL      reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    FUNTYPE         reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)
    KWRD_BY         reduce using rule 64 (base_variable_set -> LPAREN expression RPAREN .)


state 244

    (191) method_header_name -> modifier_opts KWRD_DEF IDENTIFIER .

    LPAREN          reduce using rule 191 (method_header_name -> modifier_opts KWRD_DEF IDENTIFIER .)


state 245

    (107) local_variable_declaration -> modifier_opts declaration_keyword variable_declaration_body .

    STATE_END       reduce using rule 107 (local_variable_declaration -> modifier_opts declaration_keyword variable_declaration_body .)


state 246

    (113) variable_declaration_body -> variable_declarator . ASSIGN variable_declaration_initializer

    ASSIGN          shift and go to state 282


state 247

    (114) variable_declaration_body -> LPAREN . variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list RPAREN
    (116) variable_declarators -> . variable_declarator
    (117) variable_declarators -> . variable_declarators COMMA variable_declarator
    (118) variable_declarator -> . variable_declarator_id
    (119) variable_declarator_id -> . IDENTIFIER COLON type

    IDENTIFIER      shift and go to state 198

    variable_declarators           shift and go to state 283
    variable_declarator_id         shift and go to state 199
    variable_declarator            shift and go to state 201

state 248

    (115) variable_declaration_body -> IDENTIFIER . ASSIGN LPAREN func_arguement_list_opt RPAREN FUNTYPE expression
    (119) variable_declarator_id -> IDENTIFIER . COLON type

    ASSIGN          shift and go to state 284
    COLON           shift and go to state 255


state 249

    (148) while_header -> while_begin LPAREN expression . RPAREN

    RPAREN          shift and go to state 285


state 250

    (15) assignment -> valid_variable assignment_operator assignment_expression .

    RPAREN          reduce using rule 15 (assignment -> valid_variable assignment_operator assignment_expression .)
    STATE_END       reduce using rule 15 (assignment -> valid_variable assignment_operator assignment_expression .)
    KWRD_MATCH      reduce using rule 15 (assignment -> valid_variable assignment_operator assignment_expression .)
    COMMA           reduce using rule 15 (assignment -> valid_variable assignment_operator assignment_expression .)
    KWRD_UNTIL      reduce using rule 15 (assignment -> valid_variable assignment_operator assignment_expression .)
    KWRD_BY         reduce using rule 15 (assignment -> valid_variable assignment_operator assignment_expression .)
    RBPAREN         reduce using rule 15 (assignment -> valid_variable assignment_operator assignment_expression .)
    FUNTYPE         reduce using rule 15 (assignment -> valid_variable assignment_operator assignment_expression .)


state 251

    (174) constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER COLON . type
    (197) type -> . primitive_type
    (198) type -> . reference_type
    (199) primitive_type -> . TYPE_INT
    (200) primitive_type -> . TYPE_FLOAT
    (201) primitive_type -> . TYPE_CHAR
    (202) primitive_type -> . TYPE_STRING
    (203) primitive_type -> . TYPE_BOOLEAN
    (204) reference_type -> . class_data_type
    (205) reference_type -> . array_data_type
    (206) class_data_type -> . name
    (207) array_data_type -> . KWRD_ARRAY LBPAREN type RBPAREN
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name

    TYPE_INT        shift and go to state 168
    TYPE_FLOAT      shift and go to state 173
    TYPE_CHAR       shift and go to state 170
    TYPE_STRING     shift and go to state 169
    TYPE_BOOLEAN    shift and go to state 172
    KWRD_ARRAY      shift and go to state 290
    IDENTIFIER      shift and go to state 83

    name                           shift and go to state 286
    qualified_name                 shift and go to state 85
    reference_type                 shift and go to state 287
    primitive_type                 shift and go to state 288
    class_data_type                shift and go to state 289
    type                           shift and go to state 291
    array_data_type                shift and go to state 292
    simple_name                    shift and go to state 74

state 252

    (173) constructor_arguement_list -> constructor_arguement_list COMMA constructor_arguement_list_declarator .

    COMMA           reduce using rule 173 (constructor_arguement_list -> constructor_arguement_list COMMA constructor_arguement_list_declarator .)
    RPAREN          reduce using rule 173 (constructor_arguement_list -> constructor_arguement_list COMMA constructor_arguement_list_declarator .)


state 253

    (183) class_header_extends -> KWRD_EXTNDS name LPAREN func_arguement_list_opt . RPAREN

    RPAREN          shift and go to state 293


state 254

    (187) method_header -> method_header_name func_args_start func_arguement_list_opt RPAREN . COLON method_return_type ASSIGN

    COLON           shift and go to state 294


state 255

    (119) variable_declarator_id -> IDENTIFIER COLON . type
    (197) type -> . primitive_type
    (198) type -> . reference_type
    (199) primitive_type -> . TYPE_INT
    (200) primitive_type -> . TYPE_FLOAT
    (201) primitive_type -> . TYPE_CHAR
    (202) primitive_type -> . TYPE_STRING
    (203) primitive_type -> . TYPE_BOOLEAN
    (204) reference_type -> . class_data_type
    (205) reference_type -> . array_data_type
    (206) class_data_type -> . name
    (207) array_data_type -> . KWRD_ARRAY LBPAREN type RBPAREN
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name

    TYPE_INT        shift and go to state 168
    TYPE_FLOAT      shift and go to state 173
    TYPE_CHAR       shift and go to state 170
    TYPE_STRING     shift and go to state 169
    TYPE_BOOLEAN    shift and go to state 172
    KWRD_ARRAY      shift and go to state 290
    IDENTIFIER      shift and go to state 83

    name                           shift and go to state 286
    qualified_name                 shift and go to state 85
    reference_type                 shift and go to state 287
    primitive_type                 shift and go to state 288
    class_data_type                shift and go to state 289
    type                           shift and go to state 295
    array_data_type                shift and go to state 292
    simple_name                    shift and go to state 74

state 256

    (117) variable_declarators -> variable_declarators COMMA . variable_declarator
    (118) variable_declarator -> . variable_declarator_id
    (119) variable_declarator_id -> . IDENTIFIER COLON type

    IDENTIFIER      shift and go to state 198

    variable_declarator_id         shift and go to state 199
    variable_declarator            shift and go to state 296

state 257

    (81) argument_list -> argument_list COMMA . expression
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    additive_expression            shift and go to state 61
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 104
    inclusive_or_expression        shift and go to state 41
    literal                        shift and go to state 78
    and_expression                 shift and go to state 94
    relational_expression          shift and go to state 80
    cast_expression                shift and go to state 86
    conditional_or_expression      shift and go to state 62
    assignment_expression          shift and go to state 99
    qualified_name                 shift and go to state 85
    assignment                     shift and go to state 129
    multiplicative_expression      shift and go to state 64
    method_invocation              shift and go to state 119
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 130
    expression                     shift and go to state 297
    conditional_and_expression     shift and go to state 67

state 258

    (76) method_invocation -> name LPAREN argument_list_opt RPAREN .

    TIMES           reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    DIVIDE          reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    REMAINDER       reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    PLUS            reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    MINUS           reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    LSHIFT          reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    RSHIFT          reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    GREATER         reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    LESS            reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    GEQ             reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    LEQ             reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    EQUAL           reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    NEQUAL          reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    AND_BITWISE     reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    XOR             reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    OR_BITWISE      reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    STATE_END       reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    KWRD_MATCH      reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    RBPAREN         reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    KWRD_UNTIL      reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    FUNTYPE         reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    KWRD_BY         reduce using rule 76 (method_invocation -> name LPAREN argument_list_opt RPAREN .)


state 259

    (77) array_access -> name LBPAREN expression RBPAREN .

    ASSIGN          reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    TIMES_ASSIGN    reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    DIVIDE_ASSIGN   reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    REMAINDER_ASSIGN reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    PLUS_ASSIGN     reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    MINUS_ASSIGN    reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    LSHIFT_ASSIGN   reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    RSHIFT_ASSIGN   reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    AND_ASSIGN      reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    OR_ASSIGN       reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    XOR_ASSIGN      reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    TIMES           reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    DIVIDE          reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    REMAINDER       reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    PLUS            reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    MINUS           reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    LSHIFT          reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    RSHIFT          reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    GREATER         reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    LESS            reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    GEQ             reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    LEQ             reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    EQUAL           reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    NEQUAL          reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    AND_BITWISE     reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    XOR             reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    OR_BITWISE      reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    AND             reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    OR              reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    STATE_END       reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    KWRD_MATCH      reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    RPAREN          reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    COMMA           reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    RBPAREN         reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    KWRD_UNTIL      reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    FUNTYPE         reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)
    KWRD_BY         reduce using rule 77 (array_access -> name LBPAREN expression RBPAREN .)


state 260

    (153) for_statement -> KWRD_FOR LPAREN for_loop RPAREN . block
    (90) block -> . start_scope block_statements_opt end_scope
    (91) start_scope -> . BLOCK_BEGIN

    BLOCK_BEGIN     shift and go to state 16

    start_scope                    shift and go to state 17
    block                          shift and go to state 298

state 261

    (154) for_loop -> IDENTIFIER CHOOSE . expression KWRD_UNTIL expression for_step_opts
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    additive_expression            shift and go to state 61
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 104
    inclusive_or_expression        shift and go to state 41
    literal                        shift and go to state 78
    and_expression                 shift and go to state 94
    relational_expression          shift and go to state 80
    cast_expression                shift and go to state 86
    conditional_or_expression      shift and go to state 62
    assignment_expression          shift and go to state 99
    qualified_name                 shift and go to state 85
    assignment                     shift and go to state 129
    multiplicative_expression      shift and go to state 64
    method_invocation              shift and go to state 119
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 130
    expression                     shift and go to state 299
    conditional_and_expression     shift and go to state 67

state 262

    (140) if_else_starting -> KWRD_IF LPAREN expression . RPAREN

    RPAREN          shift and go to state 300


state 263

    (138) if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .

    KWRD_FOR        reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    KWRD_OBJECT     reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    STATE_END       reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    KWRD_RETURN     reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    KWRD_DO         reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    KWRD_PROTECTED  reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    KWRD_PRIVATE    reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    BLOCK_BEGIN     reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    KWRD_WHILE      reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    IDENTIFIER      reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    PLUS            reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    MINUS           reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    NOT             reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    TILDA           reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    LPAREN          reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    CHARACTER       reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    STRING_CONST    reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    BOOL_CONSTT     reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    BOOL_CONSTF     reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    KWRD_NULL       reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    FLOAT_CONST     reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    INT_CONST       reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    KWRD_DEF        reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    KWRD_CLASS      reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    KWRD_VAR        reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    KWRD_VAL        reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    KWRD_IF         reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    BLOCK_END       reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)
    KWRD_CASE       reduce using rule 138 (if_else_statement -> MarkIfStart if_else_begin if_else_intermediate MarkIfEnd .)


state 264

    (136) MarkIfEnd -> empty .

    KWRD_FOR        reduce using rule 136 (MarkIfEnd -> empty .)
    KWRD_OBJECT     reduce using rule 136 (MarkIfEnd -> empty .)
    STATE_END       reduce using rule 136 (MarkIfEnd -> empty .)
    KWRD_RETURN     reduce using rule 136 (MarkIfEnd -> empty .)
    KWRD_DO         reduce using rule 136 (MarkIfEnd -> empty .)
    KWRD_PROTECTED  reduce using rule 136 (MarkIfEnd -> empty .)
    KWRD_PRIVATE    reduce using rule 136 (MarkIfEnd -> empty .)
    BLOCK_BEGIN     reduce using rule 136 (MarkIfEnd -> empty .)
    KWRD_WHILE      reduce using rule 136 (MarkIfEnd -> empty .)
    IDENTIFIER      reduce using rule 136 (MarkIfEnd -> empty .)
    PLUS            reduce using rule 136 (MarkIfEnd -> empty .)
    MINUS           reduce using rule 136 (MarkIfEnd -> empty .)
    NOT             reduce using rule 136 (MarkIfEnd -> empty .)
    TILDA           reduce using rule 136 (MarkIfEnd -> empty .)
    LPAREN          reduce using rule 136 (MarkIfEnd -> empty .)
    CHARACTER       reduce using rule 136 (MarkIfEnd -> empty .)
    STRING_CONST    reduce using rule 136 (MarkIfEnd -> empty .)
    BOOL_CONSTT     reduce using rule 136 (MarkIfEnd -> empty .)
    BOOL_CONSTF     reduce using rule 136 (MarkIfEnd -> empty .)
    KWRD_NULL       reduce using rule 136 (MarkIfEnd -> empty .)
    FLOAT_CONST     reduce using rule 136 (MarkIfEnd -> empty .)
    INT_CONST       reduce using rule 136 (MarkIfEnd -> empty .)
    KWRD_DEF        reduce using rule 136 (MarkIfEnd -> empty .)
    KWRD_CLASS      reduce using rule 136 (MarkIfEnd -> empty .)
    KWRD_VAR        reduce using rule 136 (MarkIfEnd -> empty .)
    KWRD_VAL        reduce using rule 136 (MarkIfEnd -> empty .)
    KWRD_IF         reduce using rule 136 (MarkIfEnd -> empty .)
    BLOCK_END       reduce using rule 136 (MarkIfEnd -> empty .)
    KWRD_CASE       reduce using rule 136 (MarkIfEnd -> empty .)


state 265

    (145) if_else_end -> MarkBeforeElse . if_else_block
    (137) if_else_block -> . start_scope_if block_statements_opt end_scope_if
    (133) start_scope_if -> . BLOCK_BEGIN

    BLOCK_BEGIN     shift and go to state 218

    if_else_block                  shift and go to state 301
    start_scope_if                 shift and go to state 219

state 266

    (146) if_else_end -> if_else_begin . if_else_intermediate
    (142) if_else_intermediate -> . KWRD_ELSE if_else_end
    (143) if_else_intermediate -> . empty
    (211) empty -> .

    KWRD_ELSE       shift and go to state 214
    KWRD_FOR        reduce using rule 211 (empty -> .)
    KWRD_OBJECT     reduce using rule 211 (empty -> .)
    STATE_END       reduce using rule 211 (empty -> .)
    KWRD_RETURN     reduce using rule 211 (empty -> .)
    KWRD_DO         reduce using rule 211 (empty -> .)
    KWRD_PROTECTED  reduce using rule 211 (empty -> .)
    KWRD_PRIVATE    reduce using rule 211 (empty -> .)
    BLOCK_BEGIN     reduce using rule 211 (empty -> .)
    KWRD_WHILE      reduce using rule 211 (empty -> .)
    IDENTIFIER      reduce using rule 211 (empty -> .)
    PLUS            reduce using rule 211 (empty -> .)
    MINUS           reduce using rule 211 (empty -> .)
    NOT             reduce using rule 211 (empty -> .)
    TILDA           reduce using rule 211 (empty -> .)
    LPAREN          reduce using rule 211 (empty -> .)
    CHARACTER       reduce using rule 211 (empty -> .)
    STRING_CONST    reduce using rule 211 (empty -> .)
    BOOL_CONSTT     reduce using rule 211 (empty -> .)
    BOOL_CONSTF     reduce using rule 211 (empty -> .)
    KWRD_NULL       reduce using rule 211 (empty -> .)
    FLOAT_CONST     reduce using rule 211 (empty -> .)
    INT_CONST       reduce using rule 211 (empty -> .)
    KWRD_DEF        reduce using rule 211 (empty -> .)
    KWRD_CLASS      reduce using rule 211 (empty -> .)
    KWRD_VAR        reduce using rule 211 (empty -> .)
    KWRD_VAL        reduce using rule 211 (empty -> .)
    KWRD_IF         reduce using rule 211 (empty -> .)
    BLOCK_END       reduce using rule 211 (empty -> .)
    KWRD_CASE       reduce using rule 211 (empty -> .)

    if_else_intermediate           shift and go to state 302
    empty                          shift and go to state 215

state 267

    (144) MarkBeforeElse -> empty .

    BLOCK_BEGIN     reduce using rule 144 (MarkBeforeElse -> empty .)


state 268

    (142) if_else_intermediate -> KWRD_ELSE if_else_end .

    KWRD_FOR        reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    KWRD_OBJECT     reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    STATE_END       reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    KWRD_RETURN     reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    KWRD_DO         reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    KWRD_PROTECTED  reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    KWRD_PRIVATE    reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    BLOCK_BEGIN     reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    KWRD_WHILE      reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    IDENTIFIER      reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    PLUS            reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    MINUS           reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    NOT             reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    TILDA           reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    LPAREN          reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    CHARACTER       reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    STRING_CONST    reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    BOOL_CONSTT     reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    BOOL_CONSTF     reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    KWRD_NULL       reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    FLOAT_CONST     reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    INT_CONST       reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    KWRD_DEF        reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    KWRD_CLASS      reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    KWRD_VAR        reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    KWRD_VAL        reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    KWRD_IF         reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    BLOCK_END       reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)
    KWRD_CASE       reduce using rule 142 (if_else_intermediate -> KWRD_ELSE if_else_end .)


state 269

    (137) if_else_block -> start_scope_if block_statements_opt . end_scope_if
    (134) end_scope_if -> . BLOCK_END

    BLOCK_END       shift and go to state 304

    end_scope_if                   shift and go to state 303

state 270

    (29) conditional_or_expression -> conditional_or_expression OR Marker conditional_and_expression .
    (31) conditional_and_expression -> conditional_and_expression . AND Marker inclusive_or_expression

    OR              reduce using rule 29 (conditional_or_expression -> conditional_or_expression OR Marker conditional_and_expression .)
    KWRD_MATCH      reduce using rule 29 (conditional_or_expression -> conditional_or_expression OR Marker conditional_and_expression .)
    RPAREN          reduce using rule 29 (conditional_or_expression -> conditional_or_expression OR Marker conditional_and_expression .)
    COMMA           reduce using rule 29 (conditional_or_expression -> conditional_or_expression OR Marker conditional_and_expression .)
    STATE_END       reduce using rule 29 (conditional_or_expression -> conditional_or_expression OR Marker conditional_and_expression .)
    RBPAREN         reduce using rule 29 (conditional_or_expression -> conditional_or_expression OR Marker conditional_and_expression .)
    KWRD_UNTIL      reduce using rule 29 (conditional_or_expression -> conditional_or_expression OR Marker conditional_and_expression .)
    FUNTYPE         reduce using rule 29 (conditional_or_expression -> conditional_or_expression OR Marker conditional_and_expression .)
    KWRD_BY         reduce using rule 29 (conditional_or_expression -> conditional_or_expression OR Marker conditional_and_expression .)
    AND             shift and go to state 149


state 271

    (31) conditional_and_expression -> conditional_and_expression AND Marker inclusive_or_expression .
    (33) inclusive_or_expression -> inclusive_or_expression . OR_BITWISE exclusive_or_expression

    AND             reduce using rule 31 (conditional_and_expression -> conditional_and_expression AND Marker inclusive_or_expression .)
    OR              reduce using rule 31 (conditional_and_expression -> conditional_and_expression AND Marker inclusive_or_expression .)
    RPAREN          reduce using rule 31 (conditional_and_expression -> conditional_and_expression AND Marker inclusive_or_expression .)
    COMMA           reduce using rule 31 (conditional_and_expression -> conditional_and_expression AND Marker inclusive_or_expression .)
    KWRD_MATCH      reduce using rule 31 (conditional_and_expression -> conditional_and_expression AND Marker inclusive_or_expression .)
    STATE_END       reduce using rule 31 (conditional_and_expression -> conditional_and_expression AND Marker inclusive_or_expression .)
    RBPAREN         reduce using rule 31 (conditional_and_expression -> conditional_and_expression AND Marker inclusive_or_expression .)
    KWRD_UNTIL      reduce using rule 31 (conditional_and_expression -> conditional_and_expression AND Marker inclusive_or_expression .)
    FUNTYPE         reduce using rule 31 (conditional_and_expression -> conditional_and_expression AND Marker inclusive_or_expression .)
    KWRD_BY         reduce using rule 31 (conditional_and_expression -> conditional_and_expression AND Marker inclusive_or_expression .)
    OR_BITWISE      shift and go to state 123


state 272

    (158) switch_block -> BLOCK_BEGIN BLOCK_END .

    KWRD_FOR        reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_OBJECT     reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    STATE_END       reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_RETURN     reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_DO         reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_PROTECTED  reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_PRIVATE    reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_WHILE      reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    IDENTIFIER      reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    PLUS            reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    MINUS           reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    NOT             reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    TILDA           reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    LPAREN          reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    CHARACTER       reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    STRING_CONST    reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    BOOL_CONSTT     reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    BOOL_CONSTF     reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_NULL       reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    FLOAT_CONST     reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    INT_CONST       reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_DEF        reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_CLASS      reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_VAR        reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_VAL        reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_IF         reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    BLOCK_END       reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_CASE       reduce using rule 158 (switch_block -> BLOCK_BEGIN BLOCK_END .)


state 273

    (167) switch_label -> KWRD_CASE . expression FUNTYPE
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    additive_expression            shift and go to state 61
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 104
    inclusive_or_expression        shift and go to state 41
    literal                        shift and go to state 78
    and_expression                 shift and go to state 94
    relational_expression          shift and go to state 80
    cast_expression                shift and go to state 86
    conditional_or_expression      shift and go to state 62
    assignment_expression          shift and go to state 99
    qualified_name                 shift and go to state 85
    assignment                     shift and go to state 129
    multiplicative_expression      shift and go to state 64
    method_invocation              shift and go to state 119
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 130
    expression                     shift and go to state 305
    conditional_and_expression     shift and go to state 67

state 274

    (160) switch_block -> BLOCK_BEGIN switch_labels . BLOCK_END
    (166) switch_labels -> switch_labels . switch_label
    (164) switch_block_statement -> switch_labels . block_statements
    (167) switch_label -> . KWRD_CASE expression FUNTYPE
    (95) block_statements -> . block_statement
    (96) block_statements -> . block_statements block_statement
    (97) block_statement -> . local_variable_declaration_statement
    (98) block_statement -> . statement
    (99) block_statement -> . class_declaration
    (100) block_statement -> . SingletonObject
    (101) block_statement -> . method_declaration
    (106) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (120) statement -> . normal_statement
    (121) statement -> . if_else_statement
    (122) statement -> . while_statement
    (123) statement -> . do_while_statement
    (124) statement -> . for_statement
    (177) class_declaration -> . class_header class_body
    (7) SingletonObject -> . ObjectDeclare block
    (186) method_declaration -> . method_header method_body
    (107) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (125) normal_statement -> . block
    (126) normal_statement -> . expression_statement
    (127) normal_statement -> . empty_statement
    (128) normal_statement -> . return_statement
    (129) normal_statement -> . switch_statement
    (138) if_else_statement -> . MarkIfStart if_else_begin if_else_intermediate MarkIfEnd
    (147) while_statement -> . while_header while_body
    (151) do_while_statement -> . do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END
    (153) for_statement -> . KWRD_FOR LPAREN for_loop RPAREN block
    (178) class_header -> . class_header_name class_header_extends_opt
    (8) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (9) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (187) method_header -> . method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (102) modifier_opts -> . modifier
    (103) modifier_opts -> . empty
    (90) block -> . start_scope block_statements_opt end_scope
    (130) expression_statement -> . statement_expression STATE_END
    (168) empty_statement -> . STATE_END
    (169) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (157) switch_statement -> . expression KWRD_MATCH switch_block
    (135) MarkIfStart -> . empty
    (148) while_header -> . while_begin LPAREN expression RPAREN
    (152) do_while_statement_begin -> . KWRD_DO
    (179) class_header_name -> . class_header_name1 func_args_start constructor_arguement_list_opt RPAREN
    (191) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (195) modifier -> . KWRD_PROTECTED
    (196) modifier -> . KWRD_PRIVATE
    (211) empty -> .
    (91) start_scope -> . BLOCK_BEGIN
    (131) statement_expression -> . assignment
    (132) statement_expression -> . method_invocation
    (10) expression -> . assignment_expression
    (150) while_begin -> . KWRD_WHILE
    (180) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (77) array_access -> . name LBPAREN expression RBPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    BLOCK_END       shift and go to state 306
    KWRD_CASE       shift and go to state 273
    KWRD_FOR        shift and go to state 58
    KWRD_OBJECT     shift and go to state 4
    STATE_END       shift and go to state 55
    KWRD_RETURN     shift and go to state 51
    KWRD_DO         shift and go to state 48
    KWRD_PROTECTED  shift and go to state 11
    KWRD_PRIVATE    shift and go to state 15
    KWRD_DEF        reduce using rule 211 (empty -> .)
    KWRD_CLASS      reduce using rule 211 (empty -> .)
    KWRD_VAR        reduce using rule 211 (empty -> .)
    KWRD_VAL        reduce using rule 211 (empty -> .)
    KWRD_IF         reduce using rule 211 (empty -> .)
    BLOCK_BEGIN     shift and go to state 16
    KWRD_WHILE      shift and go to state 53
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    expression_statement           shift and go to state 33
    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    normal_statement               shift and go to state 92
    ObjectDeclare                  shift and go to state 1
    do_while_statement_begin       shift and go to state 73
    array_access                   shift and go to state 36
    MarkIfStart                    shift and go to state 59
    switch_statement               shift and go to state 60
    assignment_expression          shift and go to state 99
    primary                        shift and go to state 72
    qualified_name                 shift and go to state 85
    base_variable_set              shift and go to state 95
    if_else_statement              shift and go to state 76
    method_header_name             shift and go to state 50
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 88
    cast_expression                shift and go to state 86
    block_statement                shift and go to state 77
    return_statement               shift and go to state 96
    while_statement                shift and go to state 42
    and_expression                 shift and go to state 94
    statement                      shift and go to state 81
    statement_expression           shift and go to state 45
    method_invocation              shift and go to state 82
    simple_name                    shift and go to state 74
    conditional_or_expression      shift and go to state 62
    empty                          shift and go to state 167
    relational_expression          shift and go to state 80
    block_statements               shift and go to state 308
    for_statement                  shift and go to state 34
    local_variable_declaration_statement shift and go to state 46
    do_while_statement             shift and go to state 63
    int_float                      shift and go to state 47
    assignment                     shift and go to state 100
    multiplicative_expression      shift and go to state 64
    literal                        shift and go to state 78
    class_header_name1             shift and go to state 2
    additive_expression            shift and go to state 61
    SingletonObject                shift and go to state 49
    start_scope                    shift and go to state 17
    switch_label                   shift and go to state 307
    class_header                   shift and go to state 9
    modifier_opts                  shift and go to state 102
    equality_expression            shift and go to state 87
    variable_literal               shift and go to state 66
    name                           shift and go to state 52
    unary_expression_not_plus_minus shift and go to state 57
    while_header                   shift and go to state 54
    while_begin                    shift and go to state 103
    valid_variable                 shift and go to state 104
    method_header                  shift and go to state 89
    empty_statement                shift and go to state 90
    class_declaration              shift and go to state 105
    inclusive_or_expression        shift and go to state 41
    shift_expression               shift and go to state 65
    local_variable_declaration     shift and go to state 91
    modifier                       shift and go to state 14
    expression                     shift and go to state 69
    conditional_and_expression     shift and go to state 67
    block                          shift and go to state 70

state 275

    (165) switch_labels -> switch_label .

    BLOCK_END       reduce using rule 165 (switch_labels -> switch_label .)
    KWRD_CASE       reduce using rule 165 (switch_labels -> switch_label .)
    KWRD_FOR        reduce using rule 165 (switch_labels -> switch_label .)
    KWRD_OBJECT     reduce using rule 165 (switch_labels -> switch_label .)
    STATE_END       reduce using rule 165 (switch_labels -> switch_label .)
    KWRD_RETURN     reduce using rule 165 (switch_labels -> switch_label .)
    KWRD_DO         reduce using rule 165 (switch_labels -> switch_label .)
    KWRD_PROTECTED  reduce using rule 165 (switch_labels -> switch_label .)
    KWRD_PRIVATE    reduce using rule 165 (switch_labels -> switch_label .)
    BLOCK_BEGIN     reduce using rule 165 (switch_labels -> switch_label .)
    KWRD_WHILE      reduce using rule 165 (switch_labels -> switch_label .)
    IDENTIFIER      reduce using rule 165 (switch_labels -> switch_label .)
    PLUS            reduce using rule 165 (switch_labels -> switch_label .)
    MINUS           reduce using rule 165 (switch_labels -> switch_label .)
    NOT             reduce using rule 165 (switch_labels -> switch_label .)
    TILDA           reduce using rule 165 (switch_labels -> switch_label .)
    LPAREN          reduce using rule 165 (switch_labels -> switch_label .)
    CHARACTER       reduce using rule 165 (switch_labels -> switch_label .)
    STRING_CONST    reduce using rule 165 (switch_labels -> switch_label .)
    BOOL_CONSTT     reduce using rule 165 (switch_labels -> switch_label .)
    BOOL_CONSTF     reduce using rule 165 (switch_labels -> switch_label .)
    KWRD_NULL       reduce using rule 165 (switch_labels -> switch_label .)
    FLOAT_CONST     reduce using rule 165 (switch_labels -> switch_label .)
    INT_CONST       reduce using rule 165 (switch_labels -> switch_label .)
    KWRD_DEF        reduce using rule 165 (switch_labels -> switch_label .)
    KWRD_CLASS      reduce using rule 165 (switch_labels -> switch_label .)
    KWRD_VAR        reduce using rule 165 (switch_labels -> switch_label .)
    KWRD_VAL        reduce using rule 165 (switch_labels -> switch_label .)
    KWRD_IF         reduce using rule 165 (switch_labels -> switch_label .)


state 276

    (159) switch_block -> BLOCK_BEGIN switch_block_statements . BLOCK_END
    (161) switch_block -> BLOCK_BEGIN switch_block_statements . switch_labels BLOCK_END
    (163) switch_block_statements -> switch_block_statements . switch_block_statement
    (165) switch_labels -> . switch_label
    (166) switch_labels -> . switch_labels switch_label
    (164) switch_block_statement -> . switch_labels block_statements
    (167) switch_label -> . KWRD_CASE expression FUNTYPE

    BLOCK_END       shift and go to state 309
    KWRD_CASE       shift and go to state 273

    switch_labels                  shift and go to state 310
    switch_label                   shift and go to state 275
    switch_block_statement         shift and go to state 311

state 277

    (162) switch_block_statements -> switch_block_statement .

    BLOCK_END       reduce using rule 162 (switch_block_statements -> switch_block_statement .)
    KWRD_CASE       reduce using rule 162 (switch_block_statements -> switch_block_statement .)


state 278

    (151) do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN . expression RPAREN STATE_END
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    and_expression                 shift and go to state 94
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    additive_expression            shift and go to state 61
    simple_name                    shift and go to state 74
    unary_expression               shift and go to state 56
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 104
    inclusive_or_expression        shift and go to state 41
    literal                        shift and go to state 78
    relational_expression          shift and go to state 80
    cast_expression                shift and go to state 86
    conditional_or_expression      shift and go to state 62
    assignment_expression          shift and go to state 99
    qualified_name                 shift and go to state 85
    assignment                     shift and go to state 129
    multiplicative_expression      shift and go to state 64
    method_invocation              shift and go to state 119
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 130
    expression                     shift and go to state 312
    conditional_and_expression     shift and go to state 67

state 279

    (194) method_end_scope -> BLOCK_END .

    KWRD_FOR        reduce using rule 194 (method_end_scope -> BLOCK_END .)
    KWRD_OBJECT     reduce using rule 194 (method_end_scope -> BLOCK_END .)
    STATE_END       reduce using rule 194 (method_end_scope -> BLOCK_END .)
    KWRD_RETURN     reduce using rule 194 (method_end_scope -> BLOCK_END .)
    KWRD_DO         reduce using rule 194 (method_end_scope -> BLOCK_END .)
    KWRD_PROTECTED  reduce using rule 194 (method_end_scope -> BLOCK_END .)
    KWRD_PRIVATE    reduce using rule 194 (method_end_scope -> BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 194 (method_end_scope -> BLOCK_END .)
    KWRD_WHILE      reduce using rule 194 (method_end_scope -> BLOCK_END .)
    IDENTIFIER      reduce using rule 194 (method_end_scope -> BLOCK_END .)
    PLUS            reduce using rule 194 (method_end_scope -> BLOCK_END .)
    MINUS           reduce using rule 194 (method_end_scope -> BLOCK_END .)
    NOT             reduce using rule 194 (method_end_scope -> BLOCK_END .)
    TILDA           reduce using rule 194 (method_end_scope -> BLOCK_END .)
    LPAREN          reduce using rule 194 (method_end_scope -> BLOCK_END .)
    CHARACTER       reduce using rule 194 (method_end_scope -> BLOCK_END .)
    STRING_CONST    reduce using rule 194 (method_end_scope -> BLOCK_END .)
    BOOL_CONSTT     reduce using rule 194 (method_end_scope -> BLOCK_END .)
    BOOL_CONSTF     reduce using rule 194 (method_end_scope -> BLOCK_END .)
    KWRD_NULL       reduce using rule 194 (method_end_scope -> BLOCK_END .)
    FLOAT_CONST     reduce using rule 194 (method_end_scope -> BLOCK_END .)
    INT_CONST       reduce using rule 194 (method_end_scope -> BLOCK_END .)
    KWRD_DEF        reduce using rule 194 (method_end_scope -> BLOCK_END .)
    KWRD_CLASS      reduce using rule 194 (method_end_scope -> BLOCK_END .)
    KWRD_VAR        reduce using rule 194 (method_end_scope -> BLOCK_END .)
    KWRD_VAL        reduce using rule 194 (method_end_scope -> BLOCK_END .)
    KWRD_IF         reduce using rule 194 (method_end_scope -> BLOCK_END .)
    BLOCK_END       reduce using rule 194 (method_end_scope -> BLOCK_END .)
    KWRD_CASE       reduce using rule 194 (method_end_scope -> BLOCK_END .)


state 280

    (192) method_body -> method_start_scope block_statements_opt method_end_scope .

    KWRD_FOR        reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    KWRD_OBJECT     reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    STATE_END       reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    KWRD_RETURN     reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    KWRD_DO         reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    KWRD_PROTECTED  reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    KWRD_PRIVATE    reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    BLOCK_BEGIN     reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    KWRD_WHILE      reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    IDENTIFIER      reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    PLUS            reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    MINUS           reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    NOT             reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    TILDA           reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    LPAREN          reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    CHARACTER       reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    STRING_CONST    reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    BOOL_CONSTT     reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    BOOL_CONSTF     reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    KWRD_NULL       reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    FLOAT_CONST     reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    INT_CONST       reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    KWRD_DEF        reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    KWRD_CLASS      reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    KWRD_VAR        reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    KWRD_VAL        reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    KWRD_IF         reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    BLOCK_END       reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)
    KWRD_CASE       reduce using rule 192 (method_body -> method_start_scope block_statements_opt method_end_scope .)


state 281

    (65) cast_expression -> LPAREN primitive_type RPAREN unary_expression .

    TIMES           reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    DIVIDE          reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    REMAINDER       reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    PLUS            reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    MINUS           reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    LSHIFT          reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    RSHIFT          reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    GREATER         reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    LESS            reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    GEQ             reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    LEQ             reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    EQUAL           reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    NEQUAL          reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    AND_BITWISE     reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    XOR             reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    OR_BITWISE      reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    AND             reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    OR              reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    KWRD_BY         reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    RPAREN          reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    STATE_END       reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    KWRD_MATCH      reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    COMMA           reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    RBPAREN         reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    KWRD_UNTIL      reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    FUNTYPE         reduce using rule 65 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)


state 282

    (113) variable_declaration_body -> variable_declarator ASSIGN . variable_declaration_initializer
    (108) variable_declaration_initializer -> . expression
    (109) variable_declaration_initializer -> . array_initializer
    (110) variable_declaration_initializer -> . class_initializer
    (10) expression -> . assignment_expression
    (208) array_initializer -> . KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN
    (209) array_initializer -> . KWRD_ARRAY LPAREN argument_list_opt RPAREN
    (210) class_initializer -> . KWRD_NEW name LPAREN argument_list_opt RPAREN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    KWRD_NEW        shift and go to state 315
    KWRD_ARRAY      shift and go to state 314
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    variable_declaration_initializer shift and go to state 313
    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    and_expression                 shift and go to state 94
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 104
    inclusive_or_expression        shift and go to state 41
    literal                        shift and go to state 78
    relational_expression          shift and go to state 80
    cast_expression                shift and go to state 86
    conditional_or_expression      shift and go to state 62
    assignment_expression          shift and go to state 99
    qualified_name                 shift and go to state 85
    assignment                     shift and go to state 129
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 61
    method_invocation              shift and go to state 119
    class_initializer              shift and go to state 316
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    array_initializer              shift and go to state 317
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 130
    expression                     shift and go to state 318
    conditional_and_expression     shift and go to state 67

state 283

    (114) variable_declaration_body -> LPAREN variable_declarators . RPAREN ASSIGN LPAREN variable_arguement_list RPAREN
    (117) variable_declarators -> variable_declarators . COMMA variable_declarator

    RPAREN          shift and go to state 319
    COMMA           shift and go to state 256


state 284

    (115) variable_declaration_body -> IDENTIFIER ASSIGN . LPAREN func_arguement_list_opt RPAREN FUNTYPE expression

    LPAREN          shift and go to state 320


state 285

    (148) while_header -> while_begin LPAREN expression RPAREN .

    BLOCK_BEGIN     reduce using rule 148 (while_header -> while_begin LPAREN expression RPAREN .)


state 286

    (206) class_data_type -> name .
    (85) qualified_name -> name . DOT simple_name

    RBPAREN         reduce using rule 206 (class_data_type -> name .)
    COMMA           reduce using rule 206 (class_data_type -> name .)
    RPAREN          reduce using rule 206 (class_data_type -> name .)
    ASSIGN          reduce using rule 206 (class_data_type -> name .)
    DOT             shift and go to state 134


state 287

    (198) type -> reference_type .

    COMMA           reduce using rule 198 (type -> reference_type .)
    RPAREN          reduce using rule 198 (type -> reference_type .)
    ASSIGN          reduce using rule 198 (type -> reference_type .)
    RBPAREN         reduce using rule 198 (type -> reference_type .)


state 288

    (197) type -> primitive_type .

    COMMA           reduce using rule 197 (type -> primitive_type .)
    RPAREN          reduce using rule 197 (type -> primitive_type .)
    ASSIGN          reduce using rule 197 (type -> primitive_type .)
    RBPAREN         reduce using rule 197 (type -> primitive_type .)


state 289

    (204) reference_type -> class_data_type .

    ASSIGN          reduce using rule 204 (reference_type -> class_data_type .)
    COMMA           reduce using rule 204 (reference_type -> class_data_type .)
    RPAREN          reduce using rule 204 (reference_type -> class_data_type .)
    RBPAREN         reduce using rule 204 (reference_type -> class_data_type .)


state 290

    (207) array_data_type -> KWRD_ARRAY . LBPAREN type RBPAREN

    LBPAREN         shift and go to state 321


state 291

    (174) constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER COLON type .

    COMMA           reduce using rule 174 (constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER COLON type .)
    RPAREN          reduce using rule 174 (constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER COLON type .)


state 292

    (205) reference_type -> array_data_type .

    ASSIGN          reduce using rule 205 (reference_type -> array_data_type .)
    COMMA           reduce using rule 205 (reference_type -> array_data_type .)
    RPAREN          reduce using rule 205 (reference_type -> array_data_type .)
    RBPAREN         reduce using rule 205 (reference_type -> array_data_type .)


state 293

    (183) class_header_extends -> KWRD_EXTNDS name LPAREN func_arguement_list_opt RPAREN .

    BLOCK_BEGIN     reduce using rule 183 (class_header_extends -> KWRD_EXTNDS name LPAREN func_arguement_list_opt RPAREN .)


state 294

    (187) method_header -> method_header_name func_args_start func_arguement_list_opt RPAREN COLON . method_return_type ASSIGN
    (189) method_return_type -> . type
    (190) method_return_type -> . TYPE_VOID
    (197) type -> . primitive_type
    (198) type -> . reference_type
    (199) primitive_type -> . TYPE_INT
    (200) primitive_type -> . TYPE_FLOAT
    (201) primitive_type -> . TYPE_CHAR
    (202) primitive_type -> . TYPE_STRING
    (203) primitive_type -> . TYPE_BOOLEAN
    (204) reference_type -> . class_data_type
    (205) reference_type -> . array_data_type
    (206) class_data_type -> . name
    (207) array_data_type -> . KWRD_ARRAY LBPAREN type RBPAREN
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name

    TYPE_VOID       shift and go to state 322
    TYPE_INT        shift and go to state 168
    TYPE_FLOAT      shift and go to state 173
    TYPE_CHAR       shift and go to state 170
    TYPE_STRING     shift and go to state 169
    TYPE_BOOLEAN    shift and go to state 172
    KWRD_ARRAY      shift and go to state 290
    IDENTIFIER      shift and go to state 83

    name                           shift and go to state 286
    qualified_name                 shift and go to state 85
    method_return_type             shift and go to state 324
    reference_type                 shift and go to state 287
    primitive_type                 shift and go to state 288
    class_data_type                shift and go to state 289
    type                           shift and go to state 323
    array_data_type                shift and go to state 292
    simple_name                    shift and go to state 74

state 295

    (119) variable_declarator_id -> IDENTIFIER COLON type .

    RPAREN          reduce using rule 119 (variable_declarator_id -> IDENTIFIER COLON type .)
    COMMA           reduce using rule 119 (variable_declarator_id -> IDENTIFIER COLON type .)
    ASSIGN          reduce using rule 119 (variable_declarator_id -> IDENTIFIER COLON type .)


state 296

    (117) variable_declarators -> variable_declarators COMMA variable_declarator .

    RPAREN          reduce using rule 117 (variable_declarators -> variable_declarators COMMA variable_declarator .)
    COMMA           reduce using rule 117 (variable_declarators -> variable_declarators COMMA variable_declarator .)


state 297

    (81) argument_list -> argument_list COMMA expression .

    COMMA           reduce using rule 81 (argument_list -> argument_list COMMA expression .)
    RPAREN          reduce using rule 81 (argument_list -> argument_list COMMA expression .)


state 298

    (153) for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .

    KWRD_FOR        reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    KWRD_OBJECT     reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    STATE_END       reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    KWRD_RETURN     reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    KWRD_DO         reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    KWRD_PROTECTED  reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    KWRD_PRIVATE    reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    BLOCK_BEGIN     reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    KWRD_WHILE      reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    IDENTIFIER      reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    PLUS            reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    MINUS           reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    NOT             reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    TILDA           reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    LPAREN          reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    CHARACTER       reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    STRING_CONST    reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    BOOL_CONSTT     reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    BOOL_CONSTF     reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    KWRD_NULL       reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    FLOAT_CONST     reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    INT_CONST       reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    KWRD_DEF        reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    KWRD_CLASS      reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    KWRD_VAR        reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    KWRD_VAL        reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    KWRD_IF         reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    BLOCK_END       reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)
    KWRD_CASE       reduce using rule 153 (for_statement -> KWRD_FOR LPAREN for_loop RPAREN block .)


state 299

    (154) for_loop -> IDENTIFIER CHOOSE expression . KWRD_UNTIL expression for_step_opts

    KWRD_UNTIL      shift and go to state 325


state 300

    (140) if_else_starting -> KWRD_IF LPAREN expression RPAREN .

    BLOCK_BEGIN     reduce using rule 140 (if_else_starting -> KWRD_IF LPAREN expression RPAREN .)


state 301

    (145) if_else_end -> MarkBeforeElse if_else_block .

    KWRD_FOR        reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    KWRD_OBJECT     reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    STATE_END       reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    KWRD_RETURN     reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    KWRD_DO         reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    KWRD_PROTECTED  reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    KWRD_PRIVATE    reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    BLOCK_BEGIN     reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    KWRD_WHILE      reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    IDENTIFIER      reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    PLUS            reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    MINUS           reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    NOT             reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    TILDA           reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    LPAREN          reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    CHARACTER       reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    STRING_CONST    reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    BOOL_CONSTT     reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    BOOL_CONSTF     reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    KWRD_NULL       reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    FLOAT_CONST     reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    INT_CONST       reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    KWRD_DEF        reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    KWRD_CLASS      reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    KWRD_VAR        reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    KWRD_VAL        reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    KWRD_IF         reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    BLOCK_END       reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)
    KWRD_CASE       reduce using rule 145 (if_else_end -> MarkBeforeElse if_else_block .)


state 302

    (146) if_else_end -> if_else_begin if_else_intermediate .

    KWRD_FOR        reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    KWRD_OBJECT     reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    STATE_END       reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    KWRD_RETURN     reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    KWRD_DO         reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    KWRD_PROTECTED  reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    KWRD_PRIVATE    reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    BLOCK_BEGIN     reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    KWRD_WHILE      reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    IDENTIFIER      reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    PLUS            reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    MINUS           reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    NOT             reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    TILDA           reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    LPAREN          reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    CHARACTER       reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    STRING_CONST    reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    BOOL_CONSTT     reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    BOOL_CONSTF     reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    KWRD_NULL       reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    FLOAT_CONST     reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    INT_CONST       reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    KWRD_DEF        reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    KWRD_CLASS      reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    KWRD_VAR        reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    KWRD_VAL        reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    KWRD_IF         reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    BLOCK_END       reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)
    KWRD_CASE       reduce using rule 146 (if_else_end -> if_else_begin if_else_intermediate .)


state 303

    (137) if_else_block -> start_scope_if block_statements_opt end_scope_if .

    KWRD_ELSE       reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    KWRD_FOR        reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    KWRD_OBJECT     reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    STATE_END       reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    KWRD_RETURN     reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    KWRD_DO         reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    KWRD_PROTECTED  reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    KWRD_PRIVATE    reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    BLOCK_BEGIN     reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    KWRD_WHILE      reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    IDENTIFIER      reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    PLUS            reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    MINUS           reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    NOT             reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    TILDA           reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    LPAREN          reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    CHARACTER       reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    STRING_CONST    reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    BOOL_CONSTT     reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    BOOL_CONSTF     reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    KWRD_NULL       reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    FLOAT_CONST     reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    INT_CONST       reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    KWRD_DEF        reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    KWRD_CLASS      reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    KWRD_VAR        reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    KWRD_VAL        reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    KWRD_IF         reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    BLOCK_END       reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)
    KWRD_CASE       reduce using rule 137 (if_else_block -> start_scope_if block_statements_opt end_scope_if .)


state 304

    (134) end_scope_if -> BLOCK_END .

    KWRD_ELSE       reduce using rule 134 (end_scope_if -> BLOCK_END .)
    KWRD_FOR        reduce using rule 134 (end_scope_if -> BLOCK_END .)
    KWRD_OBJECT     reduce using rule 134 (end_scope_if -> BLOCK_END .)
    STATE_END       reduce using rule 134 (end_scope_if -> BLOCK_END .)
    KWRD_RETURN     reduce using rule 134 (end_scope_if -> BLOCK_END .)
    KWRD_DO         reduce using rule 134 (end_scope_if -> BLOCK_END .)
    KWRD_PROTECTED  reduce using rule 134 (end_scope_if -> BLOCK_END .)
    KWRD_PRIVATE    reduce using rule 134 (end_scope_if -> BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 134 (end_scope_if -> BLOCK_END .)
    KWRD_WHILE      reduce using rule 134 (end_scope_if -> BLOCK_END .)
    IDENTIFIER      reduce using rule 134 (end_scope_if -> BLOCK_END .)
    PLUS            reduce using rule 134 (end_scope_if -> BLOCK_END .)
    MINUS           reduce using rule 134 (end_scope_if -> BLOCK_END .)
    NOT             reduce using rule 134 (end_scope_if -> BLOCK_END .)
    TILDA           reduce using rule 134 (end_scope_if -> BLOCK_END .)
    LPAREN          reduce using rule 134 (end_scope_if -> BLOCK_END .)
    CHARACTER       reduce using rule 134 (end_scope_if -> BLOCK_END .)
    STRING_CONST    reduce using rule 134 (end_scope_if -> BLOCK_END .)
    BOOL_CONSTT     reduce using rule 134 (end_scope_if -> BLOCK_END .)
    BOOL_CONSTF     reduce using rule 134 (end_scope_if -> BLOCK_END .)
    KWRD_NULL       reduce using rule 134 (end_scope_if -> BLOCK_END .)
    FLOAT_CONST     reduce using rule 134 (end_scope_if -> BLOCK_END .)
    INT_CONST       reduce using rule 134 (end_scope_if -> BLOCK_END .)
    KWRD_DEF        reduce using rule 134 (end_scope_if -> BLOCK_END .)
    KWRD_CLASS      reduce using rule 134 (end_scope_if -> BLOCK_END .)
    KWRD_VAR        reduce using rule 134 (end_scope_if -> BLOCK_END .)
    KWRD_VAL        reduce using rule 134 (end_scope_if -> BLOCK_END .)
    KWRD_IF         reduce using rule 134 (end_scope_if -> BLOCK_END .)
    BLOCK_END       reduce using rule 134 (end_scope_if -> BLOCK_END .)
    KWRD_CASE       reduce using rule 134 (end_scope_if -> BLOCK_END .)


state 305

    (167) switch_label -> KWRD_CASE expression . FUNTYPE

    FUNTYPE         shift and go to state 326


state 306

    (160) switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .

    KWRD_FOR        reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_OBJECT     reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    STATE_END       reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_RETURN     reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_DO         reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_PROTECTED  reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_PRIVATE    reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_WHILE      reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    IDENTIFIER      reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    PLUS            reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    MINUS           reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    NOT             reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    TILDA           reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    LPAREN          reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    CHARACTER       reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    STRING_CONST    reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    BOOL_CONSTT     reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    BOOL_CONSTF     reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_NULL       reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    FLOAT_CONST     reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    INT_CONST       reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_DEF        reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_CLASS      reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_VAR        reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_VAL        reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_IF         reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    BLOCK_END       reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_CASE       reduce using rule 160 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)


state 307

    (166) switch_labels -> switch_labels switch_label .

    BLOCK_END       reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    KWRD_CASE       reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    KWRD_FOR        reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    KWRD_OBJECT     reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    STATE_END       reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    KWRD_RETURN     reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    KWRD_DO         reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    KWRD_PROTECTED  reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    KWRD_PRIVATE    reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    BLOCK_BEGIN     reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    KWRD_WHILE      reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    IDENTIFIER      reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    PLUS            reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    MINUS           reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    NOT             reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    TILDA           reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    LPAREN          reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    CHARACTER       reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    STRING_CONST    reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    BOOL_CONSTT     reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    BOOL_CONSTF     reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    KWRD_NULL       reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    FLOAT_CONST     reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    INT_CONST       reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    KWRD_DEF        reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    KWRD_CLASS      reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    KWRD_VAR        reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    KWRD_VAL        reduce using rule 166 (switch_labels -> switch_labels switch_label .)
    KWRD_IF         reduce using rule 166 (switch_labels -> switch_labels switch_label .)


state 308

    (164) switch_block_statement -> switch_labels block_statements .
    (96) block_statements -> block_statements . block_statement
    (97) block_statement -> . local_variable_declaration_statement
    (98) block_statement -> . statement
    (99) block_statement -> . class_declaration
    (100) block_statement -> . SingletonObject
    (101) block_statement -> . method_declaration
    (106) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (120) statement -> . normal_statement
    (121) statement -> . if_else_statement
    (122) statement -> . while_statement
    (123) statement -> . do_while_statement
    (124) statement -> . for_statement
    (177) class_declaration -> . class_header class_body
    (7) SingletonObject -> . ObjectDeclare block
    (186) method_declaration -> . method_header method_body
    (107) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (125) normal_statement -> . block
    (126) normal_statement -> . expression_statement
    (127) normal_statement -> . empty_statement
    (128) normal_statement -> . return_statement
    (129) normal_statement -> . switch_statement
    (138) if_else_statement -> . MarkIfStart if_else_begin if_else_intermediate MarkIfEnd
    (147) while_statement -> . while_header while_body
    (151) do_while_statement -> . do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END
    (153) for_statement -> . KWRD_FOR LPAREN for_loop RPAREN block
    (178) class_header -> . class_header_name class_header_extends_opt
    (8) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (9) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (187) method_header -> . method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (102) modifier_opts -> . modifier
    (103) modifier_opts -> . empty
    (90) block -> . start_scope block_statements_opt end_scope
    (130) expression_statement -> . statement_expression STATE_END
    (168) empty_statement -> . STATE_END
    (169) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (157) switch_statement -> . expression KWRD_MATCH switch_block
    (135) MarkIfStart -> . empty
    (148) while_header -> . while_begin LPAREN expression RPAREN
    (152) do_while_statement_begin -> . KWRD_DO
    (179) class_header_name -> . class_header_name1 func_args_start constructor_arguement_list_opt RPAREN
    (191) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (195) modifier -> . KWRD_PROTECTED
    (196) modifier -> . KWRD_PRIVATE
    (211) empty -> .
    (91) start_scope -> . BLOCK_BEGIN
    (131) statement_expression -> . assignment
    (132) statement_expression -> . method_invocation
    (10) expression -> . assignment_expression
    (150) while_begin -> . KWRD_WHILE
    (180) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (77) array_access -> . name LBPAREN expression RBPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    BLOCK_END       reduce using rule 164 (switch_block_statement -> switch_labels block_statements .)
    KWRD_CASE       reduce using rule 164 (switch_block_statement -> switch_labels block_statements .)
    KWRD_FOR        shift and go to state 58
    KWRD_OBJECT     shift and go to state 4
    STATE_END       shift and go to state 55
    KWRD_RETURN     shift and go to state 51
    KWRD_DO         shift and go to state 48
    KWRD_PROTECTED  shift and go to state 11
    KWRD_PRIVATE    shift and go to state 15
    KWRD_DEF        reduce using rule 211 (empty -> .)
    KWRD_CLASS      reduce using rule 211 (empty -> .)
    KWRD_VAR        reduce using rule 211 (empty -> .)
    KWRD_VAL        reduce using rule 211 (empty -> .)
    KWRD_IF         reduce using rule 211 (empty -> .)
    BLOCK_BEGIN     shift and go to state 16
    KWRD_WHILE      shift and go to state 53
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    expression_statement           shift and go to state 33
    unary_expression               shift and go to state 56
    method_header                  shift and go to state 89
    exclusive_or_expression        shift and go to state 71
    normal_statement               shift and go to state 92
    ObjectDeclare                  shift and go to state 1
    unary_expression_not_plus_minus shift and go to state 57
    relational_expression          shift and go to state 80
    do_while_statement_begin       shift and go to state 73
    array_access                   shift and go to state 36
    MarkIfStart                    shift and go to state 59
    switch_statement               shift and go to state 60
    assignment_expression          shift and go to state 99
    primary                        shift and go to state 72
    qualified_name                 shift and go to state 85
    base_variable_set              shift and go to state 95
    if_else_statement              shift and go to state 76
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 88
    cast_expression                shift and go to state 86
    block_statement                shift and go to state 166
    return_statement               shift and go to state 96
    while_statement                shift and go to state 42
    and_expression                 shift and go to state 94
    statement                      shift and go to state 81
    statement_expression           shift and go to state 45
    method_invocation              shift and go to state 82
    simple_name                    shift and go to state 74
    conditional_or_expression      shift and go to state 62
    empty                          shift and go to state 167
    for_statement                  shift and go to state 34
    local_variable_declaration_statement shift and go to state 46
    do_while_statement             shift and go to state 63
    int_float                      shift and go to state 47
    assignment                     shift and go to state 100
    multiplicative_expression      shift and go to state 64
    literal                        shift and go to state 78
    class_header_name1             shift and go to state 2
    additive_expression            shift and go to state 61
    SingletonObject                shift and go to state 49
    start_scope                    shift and go to state 17
    method_header_name             shift and go to state 50
    class_header                   shift and go to state 9
    modifier_opts                  shift and go to state 102
    equality_expression            shift and go to state 87
    variable_literal               shift and go to state 66
    name                           shift and go to state 52
    while_header                   shift and go to state 54
    while_begin                    shift and go to state 103
    valid_variable                 shift and go to state 104
    empty_statement                shift and go to state 90
    class_declaration              shift and go to state 105
    inclusive_or_expression        shift and go to state 41
    shift_expression               shift and go to state 65
    expression                     shift and go to state 69
    local_variable_declaration     shift and go to state 91
    modifier                       shift and go to state 14
    conditional_and_expression     shift and go to state 67
    block                          shift and go to state 70

state 309

    (159) switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .

    KWRD_FOR        reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_OBJECT     reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    STATE_END       reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_RETURN     reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_DO         reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_PROTECTED  reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_PRIVATE    reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_WHILE      reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    IDENTIFIER      reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    PLUS            reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    MINUS           reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    NOT             reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    TILDA           reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    LPAREN          reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    CHARACTER       reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    STRING_CONST    reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    BOOL_CONSTT     reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    BOOL_CONSTF     reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_NULL       reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    FLOAT_CONST     reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    INT_CONST       reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_DEF        reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_CLASS      reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_VAR        reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_VAL        reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_IF         reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    BLOCK_END       reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_CASE       reduce using rule 159 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)


state 310

    (161) switch_block -> BLOCK_BEGIN switch_block_statements switch_labels . BLOCK_END
    (166) switch_labels -> switch_labels . switch_label
    (164) switch_block_statement -> switch_labels . block_statements
    (167) switch_label -> . KWRD_CASE expression FUNTYPE
    (95) block_statements -> . block_statement
    (96) block_statements -> . block_statements block_statement
    (97) block_statement -> . local_variable_declaration_statement
    (98) block_statement -> . statement
    (99) block_statement -> . class_declaration
    (100) block_statement -> . SingletonObject
    (101) block_statement -> . method_declaration
    (106) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (120) statement -> . normal_statement
    (121) statement -> . if_else_statement
    (122) statement -> . while_statement
    (123) statement -> . do_while_statement
    (124) statement -> . for_statement
    (177) class_declaration -> . class_header class_body
    (7) SingletonObject -> . ObjectDeclare block
    (186) method_declaration -> . method_header method_body
    (107) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (125) normal_statement -> . block
    (126) normal_statement -> . expression_statement
    (127) normal_statement -> . empty_statement
    (128) normal_statement -> . return_statement
    (129) normal_statement -> . switch_statement
    (138) if_else_statement -> . MarkIfStart if_else_begin if_else_intermediate MarkIfEnd
    (147) while_statement -> . while_header while_body
    (151) do_while_statement -> . do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END
    (153) for_statement -> . KWRD_FOR LPAREN for_loop RPAREN block
    (178) class_header -> . class_header_name class_header_extends_opt
    (8) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (9) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (187) method_header -> . method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (102) modifier_opts -> . modifier
    (103) modifier_opts -> . empty
    (90) block -> . start_scope block_statements_opt end_scope
    (130) expression_statement -> . statement_expression STATE_END
    (168) empty_statement -> . STATE_END
    (169) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (157) switch_statement -> . expression KWRD_MATCH switch_block
    (135) MarkIfStart -> . empty
    (148) while_header -> . while_begin LPAREN expression RPAREN
    (152) do_while_statement_begin -> . KWRD_DO
    (179) class_header_name -> . class_header_name1 func_args_start constructor_arguement_list_opt RPAREN
    (191) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (195) modifier -> . KWRD_PROTECTED
    (196) modifier -> . KWRD_PRIVATE
    (211) empty -> .
    (91) start_scope -> . BLOCK_BEGIN
    (131) statement_expression -> . assignment
    (132) statement_expression -> . method_invocation
    (10) expression -> . assignment_expression
    (150) while_begin -> . KWRD_WHILE
    (180) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (77) array_access -> . name LBPAREN expression RBPAREN
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    BLOCK_END       shift and go to state 327
    KWRD_CASE       shift and go to state 273
    KWRD_FOR        shift and go to state 58
    KWRD_OBJECT     shift and go to state 4
    STATE_END       shift and go to state 55
    KWRD_RETURN     shift and go to state 51
    KWRD_DO         shift and go to state 48
    KWRD_PROTECTED  shift and go to state 11
    KWRD_PRIVATE    shift and go to state 15
    KWRD_DEF        reduce using rule 211 (empty -> .)
    KWRD_CLASS      reduce using rule 211 (empty -> .)
    KWRD_VAR        reduce using rule 211 (empty -> .)
    KWRD_VAL        reduce using rule 211 (empty -> .)
    KWRD_IF         reduce using rule 211 (empty -> .)
    BLOCK_BEGIN     shift and go to state 16
    KWRD_WHILE      shift and go to state 53
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    expression_statement           shift and go to state 33
    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    normal_statement               shift and go to state 92
    ObjectDeclare                  shift and go to state 1
    while_header                   shift and go to state 54
    do_while_statement_begin       shift and go to state 73
    array_access                   shift and go to state 36
    MarkIfStart                    shift and go to state 59
    switch_statement               shift and go to state 60
    assignment_expression          shift and go to state 99
    primary                        shift and go to state 72
    qualified_name                 shift and go to state 85
    base_variable_set              shift and go to state 95
    if_else_statement              shift and go to state 76
    method_header_name             shift and go to state 50
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 88
    cast_expression                shift and go to state 86
    block_statement                shift and go to state 77
    return_statement               shift and go to state 96
    while_statement                shift and go to state 42
    and_expression                 shift and go to state 94
    statement                      shift and go to state 81
    statement_expression           shift and go to state 45
    method_invocation              shift and go to state 82
    simple_name                    shift and go to state 74
    conditional_or_expression      shift and go to state 62
    empty                          shift and go to state 167
    relational_expression          shift and go to state 80
    block_statements               shift and go to state 308
    for_statement                  shift and go to state 34
    local_variable_declaration_statement shift and go to state 46
    do_while_statement             shift and go to state 63
    int_float                      shift and go to state 47
    assignment                     shift and go to state 100
    multiplicative_expression      shift and go to state 64
    literal                        shift and go to state 78
    class_header_name1             shift and go to state 2
    additive_expression            shift and go to state 61
    SingletonObject                shift and go to state 49
    start_scope                    shift and go to state 17
    switch_label                   shift and go to state 307
    class_header                   shift and go to state 9
    modifier_opts                  shift and go to state 102
    equality_expression            shift and go to state 87
    variable_literal               shift and go to state 66
    name                           shift and go to state 52
    unary_expression_not_plus_minus shift and go to state 57
    expression                     shift and go to state 69
    while_begin                    shift and go to state 103
    valid_variable                 shift and go to state 104
    method_header                  shift and go to state 89
    empty_statement                shift and go to state 90
    class_declaration              shift and go to state 105
    inclusive_or_expression        shift and go to state 41
    shift_expression               shift and go to state 65
    local_variable_declaration     shift and go to state 91
    modifier                       shift and go to state 14
    conditional_and_expression     shift and go to state 67
    block                          shift and go to state 70

state 311

    (163) switch_block_statements -> switch_block_statements switch_block_statement .

    BLOCK_END       reduce using rule 163 (switch_block_statements -> switch_block_statements switch_block_statement .)
    KWRD_CASE       reduce using rule 163 (switch_block_statements -> switch_block_statements switch_block_statement .)


state 312

    (151) do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression . RPAREN STATE_END

    RPAREN          shift and go to state 328


state 313

    (113) variable_declaration_body -> variable_declarator ASSIGN variable_declaration_initializer .

    STATE_END       reduce using rule 113 (variable_declaration_body -> variable_declarator ASSIGN variable_declaration_initializer .)


state 314

    (209) array_initializer -> KWRD_ARRAY . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 329


state 315

    (208) array_initializer -> KWRD_NEW . KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN
    (210) class_initializer -> KWRD_NEW . name LPAREN argument_list_opt RPAREN
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name

    KWRD_ARRAY      shift and go to state 331
    IDENTIFIER      shift and go to state 83

    simple_name                    shift and go to state 74
    name                           shift and go to state 330
    qualified_name                 shift and go to state 85

state 316

    (110) variable_declaration_initializer -> class_initializer .

    RPAREN          reduce using rule 110 (variable_declaration_initializer -> class_initializer .)
    COMMA           reduce using rule 110 (variable_declaration_initializer -> class_initializer .)
    STATE_END       reduce using rule 110 (variable_declaration_initializer -> class_initializer .)


state 317

    (109) variable_declaration_initializer -> array_initializer .

    RPAREN          reduce using rule 109 (variable_declaration_initializer -> array_initializer .)
    COMMA           reduce using rule 109 (variable_declaration_initializer -> array_initializer .)
    STATE_END       reduce using rule 109 (variable_declaration_initializer -> array_initializer .)


state 318

    (108) variable_declaration_initializer -> expression .

    RPAREN          reduce using rule 108 (variable_declaration_initializer -> expression .)
    COMMA           reduce using rule 108 (variable_declaration_initializer -> expression .)
    STATE_END       reduce using rule 108 (variable_declaration_initializer -> expression .)


state 319

    (114) variable_declaration_body -> LPAREN variable_declarators RPAREN . ASSIGN LPAREN variable_arguement_list RPAREN

    ASSIGN          shift and go to state 332


state 320

    (115) variable_declaration_body -> IDENTIFIER ASSIGN LPAREN . func_arguement_list_opt RPAREN FUNTYPE expression
    (175) func_arguement_list_opt -> . variable_declarators
    (176) func_arguement_list_opt -> . empty
    (116) variable_declarators -> . variable_declarator
    (117) variable_declarators -> . variable_declarators COMMA variable_declarator
    (211) empty -> .
    (118) variable_declarator -> . variable_declarator_id
    (119) variable_declarator_id -> . IDENTIFIER COLON type

    RPAREN          reduce using rule 211 (empty -> .)
    IDENTIFIER      shift and go to state 198

    func_arguement_list_opt        shift and go to state 333
    variable_declarators           shift and go to state 200
    variable_declarator            shift and go to state 201
    variable_declarator_id         shift and go to state 199
    empty                          shift and go to state 202

state 321

    (207) array_data_type -> KWRD_ARRAY LBPAREN . type RBPAREN
    (197) type -> . primitive_type
    (198) type -> . reference_type
    (199) primitive_type -> . TYPE_INT
    (200) primitive_type -> . TYPE_FLOAT
    (201) primitive_type -> . TYPE_CHAR
    (202) primitive_type -> . TYPE_STRING
    (203) primitive_type -> . TYPE_BOOLEAN
    (204) reference_type -> . class_data_type
    (205) reference_type -> . array_data_type
    (206) class_data_type -> . name
    (207) array_data_type -> . KWRD_ARRAY LBPAREN type RBPAREN
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name

    TYPE_INT        shift and go to state 168
    TYPE_FLOAT      shift and go to state 173
    TYPE_CHAR       shift and go to state 170
    TYPE_STRING     shift and go to state 169
    TYPE_BOOLEAN    shift and go to state 172
    KWRD_ARRAY      shift and go to state 290
    IDENTIFIER      shift and go to state 83

    name                           shift and go to state 286
    qualified_name                 shift and go to state 85
    reference_type                 shift and go to state 287
    primitive_type                 shift and go to state 288
    class_data_type                shift and go to state 289
    type                           shift and go to state 334
    array_data_type                shift and go to state 292
    simple_name                    shift and go to state 74

state 322

    (190) method_return_type -> TYPE_VOID .

    ASSIGN          reduce using rule 190 (method_return_type -> TYPE_VOID .)


state 323

    (189) method_return_type -> type .

    ASSIGN          reduce using rule 189 (method_return_type -> type .)


state 324

    (187) method_header -> method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type . ASSIGN

    ASSIGN          shift and go to state 335


state 325

    (154) for_loop -> IDENTIFIER CHOOSE expression KWRD_UNTIL . expression for_step_opts
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    additive_expression            shift and go to state 61
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 104
    inclusive_or_expression        shift and go to state 41
    literal                        shift and go to state 78
    and_expression                 shift and go to state 94
    relational_expression          shift and go to state 80
    cast_expression                shift and go to state 86
    conditional_or_expression      shift and go to state 62
    assignment_expression          shift and go to state 99
    qualified_name                 shift and go to state 85
    assignment                     shift and go to state 129
    multiplicative_expression      shift and go to state 64
    method_invocation              shift and go to state 119
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 130
    expression                     shift and go to state 336
    conditional_and_expression     shift and go to state 67

state 326

    (167) switch_label -> KWRD_CASE expression FUNTYPE .

    BLOCK_END       reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_CASE       reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_FOR        reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_OBJECT     reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    STATE_END       reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_RETURN     reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_DO         reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_PROTECTED  reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_PRIVATE    reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    BLOCK_BEGIN     reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_WHILE      reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    IDENTIFIER      reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    PLUS            reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    MINUS           reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    NOT             reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    TILDA           reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    LPAREN          reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    CHARACTER       reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    STRING_CONST    reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    BOOL_CONSTT     reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    BOOL_CONSTF     reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_NULL       reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    FLOAT_CONST     reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    INT_CONST       reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_DEF        reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_CLASS      reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_VAR        reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_VAL        reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_IF         reduce using rule 167 (switch_label -> KWRD_CASE expression FUNTYPE .)


state 327

    (161) switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .

    KWRD_FOR        reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_OBJECT     reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    STATE_END       reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_RETURN     reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_DO         reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_PROTECTED  reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_PRIVATE    reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_WHILE      reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    IDENTIFIER      reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    PLUS            reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    MINUS           reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    NOT             reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    TILDA           reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    LPAREN          reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    CHARACTER       reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    STRING_CONST    reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    BOOL_CONSTT     reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    BOOL_CONSTF     reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_NULL       reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    FLOAT_CONST     reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    INT_CONST       reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_DEF        reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_CLASS      reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_VAR        reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_VAL        reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_IF         reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    BLOCK_END       reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_CASE       reduce using rule 161 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)


state 328

    (151) do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN . STATE_END

    STATE_END       shift and go to state 337


state 329

    (209) array_initializer -> KWRD_ARRAY LPAREN . argument_list_opt RPAREN
    (78) argument_list_opt -> . argument_list
    (79) argument_list_opt -> . empty
    (80) argument_list -> . expression
    (81) argument_list -> . argument_list COMMA expression
    (211) empty -> .
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    RPAREN          reduce using rule 211 (empty -> .)
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    and_expression                 shift and go to state 94
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    additive_expression            shift and go to state 61
    simple_name                    shift and go to state 74
    unary_expression               shift and go to state 56
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 104
    inclusive_or_expression        shift and go to state 41
    literal                        shift and go to state 78
    relational_expression          shift and go to state 80
    cast_expression                shift and go to state 86
    conditional_or_expression      shift and go to state 62
    empty                          shift and go to state 205
    argument_list                  shift and go to state 204
    assignment_expression          shift and go to state 99
    qualified_name                 shift and go to state 85
    assignment                     shift and go to state 129
    multiplicative_expression      shift and go to state 64
    method_invocation              shift and go to state 119
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 130
    argument_list_opt              shift and go to state 338
    expression                     shift and go to state 207
    conditional_and_expression     shift and go to state 67

state 330

    (210) class_initializer -> KWRD_NEW name . LPAREN argument_list_opt RPAREN
    (85) qualified_name -> name . DOT simple_name

    LPAREN          shift and go to state 339
    DOT             shift and go to state 134


state 331

    (208) array_initializer -> KWRD_NEW KWRD_ARRAY . LBPAREN type RBPAREN LPAREN INT_CONST RPAREN

    LBPAREN         shift and go to state 340


state 332

    (114) variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN . LPAREN variable_arguement_list RPAREN

    LPAREN          shift and go to state 341


state 333

    (115) variable_declaration_body -> IDENTIFIER ASSIGN LPAREN func_arguement_list_opt . RPAREN FUNTYPE expression

    RPAREN          shift and go to state 342


state 334

    (207) array_data_type -> KWRD_ARRAY LBPAREN type . RBPAREN

    RBPAREN         shift and go to state 343


state 335

    (187) method_header -> method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN .

    BLOCK_BEGIN     reduce using rule 187 (method_header -> method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN .)


state 336

    (154) for_loop -> IDENTIFIER CHOOSE expression KWRD_UNTIL expression . for_step_opts
    (155) for_step_opts -> . KWRD_BY expression
    (156) for_step_opts -> . empty
    (211) empty -> .

    KWRD_BY         shift and go to state 346
    RPAREN          reduce using rule 211 (empty -> .)

    for_step_opts                  shift and go to state 344
    empty                          shift and go to state 345

state 337

    (151) do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .

    KWRD_FOR        reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_OBJECT     reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    STATE_END       reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_RETURN     reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_DO         reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_PROTECTED  reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_PRIVATE    reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    BLOCK_BEGIN     reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_WHILE      reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    IDENTIFIER      reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    PLUS            reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    MINUS           reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    NOT             reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    TILDA           reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    LPAREN          reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    CHARACTER       reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    STRING_CONST    reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    BOOL_CONSTT     reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    BOOL_CONSTF     reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_NULL       reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    FLOAT_CONST     reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    INT_CONST       reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_DEF        reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_CLASS      reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_VAR        reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_VAL        reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_IF         reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    BLOCK_END       reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_CASE       reduce using rule 151 (do_while_statement -> do_while_statement_begin block KWRD_WHILE LPAREN expression RPAREN STATE_END .)


state 338

    (209) array_initializer -> KWRD_ARRAY LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 347


state 339

    (210) class_initializer -> KWRD_NEW name LPAREN . argument_list_opt RPAREN
    (78) argument_list_opt -> . argument_list
    (79) argument_list_opt -> . empty
    (80) argument_list -> . expression
    (81) argument_list -> . argument_list COMMA expression
    (211) empty -> .
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    RPAREN          reduce using rule 211 (empty -> .)
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    and_expression                 shift and go to state 94
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    additive_expression            shift and go to state 61
    simple_name                    shift and go to state 74
    unary_expression               shift and go to state 56
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 104
    inclusive_or_expression        shift and go to state 41
    literal                        shift and go to state 78
    relational_expression          shift and go to state 80
    cast_expression                shift and go to state 86
    conditional_or_expression      shift and go to state 62
    empty                          shift and go to state 205
    argument_list                  shift and go to state 204
    assignment_expression          shift and go to state 99
    qualified_name                 shift and go to state 85
    assignment                     shift and go to state 129
    multiplicative_expression      shift and go to state 64
    method_invocation              shift and go to state 119
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 130
    argument_list_opt              shift and go to state 348
    expression                     shift and go to state 207
    conditional_and_expression     shift and go to state 67

state 340

    (208) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN . type RBPAREN LPAREN INT_CONST RPAREN
    (197) type -> . primitive_type
    (198) type -> . reference_type
    (199) primitive_type -> . TYPE_INT
    (200) primitive_type -> . TYPE_FLOAT
    (201) primitive_type -> . TYPE_CHAR
    (202) primitive_type -> . TYPE_STRING
    (203) primitive_type -> . TYPE_BOOLEAN
    (204) reference_type -> . class_data_type
    (205) reference_type -> . array_data_type
    (206) class_data_type -> . name
    (207) array_data_type -> . KWRD_ARRAY LBPAREN type RBPAREN
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name

    TYPE_INT        shift and go to state 168
    TYPE_FLOAT      shift and go to state 173
    TYPE_CHAR       shift and go to state 170
    TYPE_STRING     shift and go to state 169
    TYPE_BOOLEAN    shift and go to state 172
    KWRD_ARRAY      shift and go to state 290
    IDENTIFIER      shift and go to state 83

    name                           shift and go to state 286
    qualified_name                 shift and go to state 85
    reference_type                 shift and go to state 287
    primitive_type                 shift and go to state 288
    class_data_type                shift and go to state 289
    type                           shift and go to state 349
    array_data_type                shift and go to state 292
    simple_name                    shift and go to state 74

state 341

    (114) variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN . variable_arguement_list RPAREN
    (111) variable_arguement_list -> . variable_declaration_initializer
    (112) variable_arguement_list -> . variable_arguement_list COMMA variable_declaration_initializer
    (108) variable_declaration_initializer -> . expression
    (109) variable_declaration_initializer -> . array_initializer
    (110) variable_declaration_initializer -> . class_initializer
    (10) expression -> . assignment_expression
    (208) array_initializer -> . KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN
    (209) array_initializer -> . KWRD_ARRAY LPAREN argument_list_opt RPAREN
    (210) class_initializer -> . KWRD_NEW name LPAREN argument_list_opt RPAREN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    KWRD_NEW        shift and go to state 315
    KWRD_ARRAY      shift and go to state 314
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    variable_declaration_initializer shift and go to state 350
    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    variable_arguement_list        shift and go to state 351
    array_access                   shift and go to state 36
    and_expression                 shift and go to state 94
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 104
    inclusive_or_expression        shift and go to state 41
    literal                        shift and go to state 78
    relational_expression          shift and go to state 80
    cast_expression                shift and go to state 86
    conditional_or_expression      shift and go to state 62
    assignment_expression          shift and go to state 99
    qualified_name                 shift and go to state 85
    assignment                     shift and go to state 129
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 61
    method_invocation              shift and go to state 119
    class_initializer              shift and go to state 316
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    array_initializer              shift and go to state 317
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 130
    expression                     shift and go to state 318
    conditional_and_expression     shift and go to state 67

state 342

    (115) variable_declaration_body -> IDENTIFIER ASSIGN LPAREN func_arguement_list_opt RPAREN . FUNTYPE expression

    FUNTYPE         shift and go to state 352


state 343

    (207) array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN .

    COMMA           reduce using rule 207 (array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN .)
    RPAREN          reduce using rule 207 (array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN .)
    ASSIGN          reduce using rule 207 (array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN .)
    RBPAREN         reduce using rule 207 (array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN .)


state 344

    (154) for_loop -> IDENTIFIER CHOOSE expression KWRD_UNTIL expression for_step_opts .

    RPAREN          reduce using rule 154 (for_loop -> IDENTIFIER CHOOSE expression KWRD_UNTIL expression for_step_opts .)


state 345

    (156) for_step_opts -> empty .

    RPAREN          reduce using rule 156 (for_step_opts -> empty .)


state 346

    (155) for_step_opts -> KWRD_BY . expression
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    additive_expression            shift and go to state 61
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 104
    inclusive_or_expression        shift and go to state 41
    literal                        shift and go to state 78
    and_expression                 shift and go to state 94
    relational_expression          shift and go to state 80
    cast_expression                shift and go to state 86
    conditional_or_expression      shift and go to state 62
    assignment_expression          shift and go to state 99
    qualified_name                 shift and go to state 85
    assignment                     shift and go to state 129
    multiplicative_expression      shift and go to state 64
    method_invocation              shift and go to state 119
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 130
    expression                     shift and go to state 353
    conditional_and_expression     shift and go to state 67

state 347

    (209) array_initializer -> KWRD_ARRAY LPAREN argument_list_opt RPAREN .

    RPAREN          reduce using rule 209 (array_initializer -> KWRD_ARRAY LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 209 (array_initializer -> KWRD_ARRAY LPAREN argument_list_opt RPAREN .)
    STATE_END       reduce using rule 209 (array_initializer -> KWRD_ARRAY LPAREN argument_list_opt RPAREN .)


state 348

    (210) class_initializer -> KWRD_NEW name LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 354


state 349

    (208) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type . RBPAREN LPAREN INT_CONST RPAREN

    RBPAREN         shift and go to state 355


state 350

    (111) variable_arguement_list -> variable_declaration_initializer .

    RPAREN          reduce using rule 111 (variable_arguement_list -> variable_declaration_initializer .)
    COMMA           reduce using rule 111 (variable_arguement_list -> variable_declaration_initializer .)


state 351

    (114) variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list . RPAREN
    (112) variable_arguement_list -> variable_arguement_list . COMMA variable_declaration_initializer

    RPAREN          shift and go to state 356
    COMMA           shift and go to state 357


state 352

    (115) variable_declaration_body -> IDENTIFIER ASSIGN LPAREN func_arguement_list_opt RPAREN FUNTYPE . expression
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    additive_expression            shift and go to state 61
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 104
    inclusive_or_expression        shift and go to state 41
    literal                        shift and go to state 78
    and_expression                 shift and go to state 94
    relational_expression          shift and go to state 80
    cast_expression                shift and go to state 86
    conditional_or_expression      shift and go to state 62
    assignment_expression          shift and go to state 99
    qualified_name                 shift and go to state 85
    assignment                     shift and go to state 129
    multiplicative_expression      shift and go to state 64
    method_invocation              shift and go to state 119
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 130
    expression                     shift and go to state 358
    conditional_and_expression     shift and go to state 67

state 353

    (155) for_step_opts -> KWRD_BY expression .

    RPAREN          reduce using rule 155 (for_step_opts -> KWRD_BY expression .)


state 354

    (210) class_initializer -> KWRD_NEW name LPAREN argument_list_opt RPAREN .

    STATE_END       reduce using rule 210 (class_initializer -> KWRD_NEW name LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 210 (class_initializer -> KWRD_NEW name LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 210 (class_initializer -> KWRD_NEW name LPAREN argument_list_opt RPAREN .)


state 355

    (208) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN . LPAREN INT_CONST RPAREN

    LPAREN          shift and go to state 359


state 356

    (114) variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list RPAREN .

    STATE_END       reduce using rule 114 (variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list RPAREN .)


state 357

    (112) variable_arguement_list -> variable_arguement_list COMMA . variable_declaration_initializer
    (108) variable_declaration_initializer -> . expression
    (109) variable_declaration_initializer -> . array_initializer
    (110) variable_declaration_initializer -> . class_initializer
    (10) expression -> . assignment_expression
    (208) array_initializer -> . KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN
    (209) array_initializer -> . KWRD_ARRAY LPAREN argument_list_opt RPAREN
    (210) class_initializer -> . KWRD_NEW name LPAREN argument_list_opt RPAREN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (28) conditional_or_expression -> . conditional_and_expression
    (29) conditional_or_expression -> . conditional_or_expression OR Marker conditional_and_expression
    (86) valid_variable -> . name
    (87) valid_variable -> . array_access
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND Marker inclusive_or_expression
    (82) name -> . simple_name
    (83) name -> . qualified_name
    (77) array_access -> . name LBPAREN expression RBPAREN
    (32) inclusive_or_expression -> . exclusive_or_expression
    (33) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (84) simple_name -> . IDENTIFIER
    (85) qualified_name -> . name DOT simple_name
    (34) exclusive_or_expression -> . and_expression
    (35) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (36) and_expression -> . equality_expression
    (37) and_expression -> . and_expression AND_BITWISE equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQUAL relational_expression
    (40) equality_expression -> . equality_expression NEQUAL relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression GREATER shift_expression
    (43) relational_expression -> . relational_expression LESS shift_expression
    (44) relational_expression -> . relational_expression GEQ shift_expression
    (45) relational_expression -> . relational_expression LEQ shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUS multiplicative_expression
    (51) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . unary_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (55) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (56) unary_expression -> . PLUS unary_expression
    (57) unary_expression -> . MINUS unary_expression
    (58) unary_expression -> . unary_expression_not_plus_minus
    (59) unary_expression_not_plus_minus -> . base_variable_set
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) unary_expression_not_plus_minus -> . TILDA unary_expression
    (63) base_variable_set -> . variable_literal
    (64) base_variable_set -> . LPAREN expression RPAREN
    (65) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (88) variable_literal -> . valid_variable
    (89) variable_literal -> . primary
    (66) primary -> . literal
    (67) primary -> . method_invocation
    (68) literal -> . int_float
    (69) literal -> . CHARACTER
    (70) literal -> . STRING_CONST
    (71) literal -> . BOOL_CONSTT
    (72) literal -> . BOOL_CONSTF
    (73) literal -> . KWRD_NULL
    (76) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (74) int_float -> . FLOAT_CONST
    (75) int_float -> . INT_CONST

    KWRD_NEW        shift and go to state 315
    KWRD_ARRAY      shift and go to state 314
    IDENTIFIER      shift and go to state 83
    PLUS            shift and go to state 44
    MINUS           shift and go to state 37
    NOT             shift and go to state 68
    TILDA           shift and go to state 79
    LPAREN          shift and go to state 101
    CHARACTER       shift and go to state 93
    STRING_CONST    shift and go to state 38
    BOOL_CONSTT     shift and go to state 43
    BOOL_CONSTF     shift and go to state 39
    KWRD_NULL       shift and go to state 98
    FLOAT_CONST     shift and go to state 35
    INT_CONST       shift and go to state 75

    variable_declaration_initializer shift and go to state 360
    unary_expression               shift and go to state 56
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 57
    array_access                   shift and go to state 36
    and_expression                 shift and go to state 94
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 95
    valid_variable                 shift and go to state 104
    inclusive_or_expression        shift and go to state 41
    literal                        shift and go to state 78
    relational_expression          shift and go to state 80
    cast_expression                shift and go to state 86
    conditional_or_expression      shift and go to state 62
    assignment_expression          shift and go to state 99
    qualified_name                 shift and go to state 85
    assignment                     shift and go to state 129
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 61
    method_invocation              shift and go to state 119
    class_initializer              shift and go to state 316
    shift_expression               shift and go to state 65
    equality_expression            shift and go to state 87
    array_initializer              shift and go to state 317
    int_float                      shift and go to state 47
    variable_literal               shift and go to state 66
    name                           shift and go to state 130
    expression                     shift and go to state 318
    conditional_and_expression     shift and go to state 67

state 358

    (115) variable_declaration_body -> IDENTIFIER ASSIGN LPAREN func_arguement_list_opt RPAREN FUNTYPE expression .

    STATE_END       reduce using rule 115 (variable_declaration_body -> IDENTIFIER ASSIGN LPAREN func_arguement_list_opt RPAREN FUNTYPE expression .)


state 359

    (208) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN . INT_CONST RPAREN

    INT_CONST       shift and go to state 361


state 360

    (112) variable_arguement_list -> variable_arguement_list COMMA variable_declaration_initializer .

    RPAREN          reduce using rule 112 (variable_arguement_list -> variable_arguement_list COMMA variable_declaration_initializer .)
    COMMA           reduce using rule 112 (variable_arguement_list -> variable_arguement_list COMMA variable_declaration_initializer .)


state 361

    (208) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST . RPAREN

    RPAREN          shift and go to state 362


state 362

    (208) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN .

    RPAREN          reduce using rule 208 (array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN .)
    COMMA           reduce using rule 208 (array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN .)
    STATE_END       reduce using rule 208 (array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN .)

