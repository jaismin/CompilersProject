Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    KWRD_TYPE
    LOWER_BOUND
    KWRD_LAZY
    VIEWABLE
    KWRD_THIS
    KWRD_WITH
    KWRD_FORSOME
    KWRD_TRY
    NIL
    KWRD_SUPER
    KWRD_PACKAGE
    EXACTEQ
    KWRD_ABST
    KWRD_FOREACH
    KWRD_STATIC
    UNDER
    UPPER_BOUND
    VIEW
    INNER_CLASS
    KWRD_THROW
    KWRD_MACRO
    KWRD_PUBLIC
    KWRD_FINAL
    COMM
    KWRD_IMPLICIT
    KWRD_SEALED
    KWRD_FINALLY
    SUBTYPE
    QUESTION
    KWRD_IMPORT
    KWRD_YIELD
    KWRD_OVERRIDE
    newline
    AT
    KWRD_TRAIT
    KWRD_CATCH

Grammar

Rule 0     S' -> start_here
Rule 1     start_here -> ProgramStructure end_here
Rule 2     end_here -> empty
Rule 3     ProgramStructure -> ProgramStructure class_and_objects
Rule 4     ProgramStructure -> class_and_objects
Rule 5     class_and_objects -> SingletonObject
Rule 6     class_and_objects -> class_declaration
Rule 7     SingletonObject -> ObjectDeclare block
Rule 8     ObjectDeclare -> KWRD_OBJECT IDENTIFIER
Rule 9     ObjectDeclare -> KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
Rule 10    expression -> assignment_expression
Rule 11    expression_optional -> expression
Rule 12    expression_optional -> empty
Rule 13    assignment_expression -> assignment
Rule 14    assignment_expression -> conditional_or_expression
Rule 15    assignment -> valid_variable assignment_operator assignment_expression
Rule 16    assignment_operator -> ASSIGN
Rule 17    assignment_operator -> TIMES_ASSIGN
Rule 18    assignment_operator -> DIVIDE_ASSIGN
Rule 19    assignment_operator -> REMAINDER_ASSIGN
Rule 20    assignment_operator -> PLUS_ASSIGN
Rule 21    assignment_operator -> MINUS_ASSIGN
Rule 22    assignment_operator -> LSHIFT_ASSIGN
Rule 23    assignment_operator -> RSHIFT_ASSIGN
Rule 24    assignment_operator -> AND_ASSIGN
Rule 25    assignment_operator -> OR_ASSIGN
Rule 26    assignment_operator -> XOR_ASSIGN
Rule 27    conditional_or_expression -> conditional_and_expression
Rule 28    conditional_or_expression -> conditional_or_expression OR conditional_and_expression
Rule 29    conditional_and_expression -> inclusive_or_expression
Rule 30    conditional_and_expression -> conditional_and_expression AND inclusive_or_expression
Rule 31    inclusive_or_expression -> exclusive_or_expression
Rule 32    inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression
Rule 33    exclusive_or_expression -> and_expression
Rule 34    exclusive_or_expression -> exclusive_or_expression XOR and_expression
Rule 35    and_expression -> equality_expression
Rule 36    and_expression -> and_expression AND_BITWISE equality_expression
Rule 37    equality_expression -> relational_expression
Rule 38    equality_expression -> equality_expression EQUAL relational_expression
Rule 39    equality_expression -> equality_expression NEQUAL relational_expression
Rule 40    relational_expression -> shift_expression
Rule 41    relational_expression -> relational_expression GREATER shift_expression
Rule 42    relational_expression -> relational_expression LESS shift_expression
Rule 43    relational_expression -> relational_expression GEQ shift_expression
Rule 44    relational_expression -> relational_expression LEQ shift_expression
Rule 45    shift_expression -> additive_expression
Rule 46    shift_expression -> shift_expression LSHIFT additive_expression
Rule 47    shift_expression -> shift_expression RSHIFT additive_expression
Rule 48    additive_expression -> multiplicative_expression
Rule 49    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 50    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 51    multiplicative_expression -> unary_expression
Rule 52    multiplicative_expression -> multiplicative_expression TIMES unary_expression
Rule 53    multiplicative_expression -> multiplicative_expression DIVIDE unary_expression
Rule 54    multiplicative_expression -> multiplicative_expression REMAINDER unary_expression
Rule 55    unary_expression -> PLUS unary_expression
Rule 56    unary_expression -> MINUS unary_expression
Rule 57    unary_expression -> unary_expression_not_plus_minus
Rule 58    unary_expression_not_plus_minus -> base_variable_set
Rule 59    unary_expression_not_plus_minus -> TILDA unary_expression
Rule 60    unary_expression_not_plus_minus -> NOT unary_expression
Rule 61    unary_expression_not_plus_minus -> cast_expression
Rule 62    base_variable_set -> variable_literal
Rule 63    base_variable_set -> LPAREN expression RPAREN
Rule 64    cast_expression -> LPAREN primitive_type RPAREN unary_expression
Rule 65    primary -> literal
Rule 66    primary -> method_invocation
Rule 67    literal -> int_float
Rule 68    literal -> CHARACTER
Rule 69    literal -> STRING_CONST
Rule 70    literal -> BOOL_CONSTT
Rule 71    literal -> BOOL_CONSTF
Rule 72    literal -> KWRD_NULL
Rule 73    int_float -> FLOAT_CONST
Rule 74    int_float -> INT_CONST
Rule 75    method_invocation -> name LPAREN argument_list_opt RPAREN
Rule 76    array_access -> name LBPAREN expression RBPAREN
Rule 77    argument_list_opt -> argument_list
Rule 78    argument_list_opt -> empty
Rule 79    argument_list -> expression
Rule 80    argument_list -> argument_list COMMA expression
Rule 81    name -> simple_name
Rule 82    name -> qualified_name
Rule 83    simple_name -> IDENTIFIER
Rule 84    qualified_name -> name DOT simple_name
Rule 85    valid_variable -> name
Rule 86    valid_variable -> array_access
Rule 87    variable_literal -> valid_variable
Rule 88    variable_literal -> primary
Rule 89    block -> start_scope block_statements_opt end_scope
Rule 90    start_scope -> BLOCK_BEGIN
Rule 91    end_scope -> BLOCK_END
Rule 92    block_statements_opt -> block_statements
Rule 93    block_statements_opt -> empty
Rule 94    block_statements -> block_statement
Rule 95    block_statements -> block_statements block_statement
Rule 96    block_statement -> local_variable_declaration_statement
Rule 97    block_statement -> statement
Rule 98    block_statement -> class_declaration
Rule 99    block_statement -> SingletonObject
Rule 100   block_statement -> method_declaration
Rule 101   modifier_opts -> modifier
Rule 102   modifier_opts -> empty
Rule 103   declaration_keyword -> KWRD_VAR
Rule 104   declaration_keyword -> KWRD_VAL
Rule 105   local_variable_declaration_statement -> local_variable_declaration STATE_END
Rule 106   local_variable_declaration -> modifier_opts declaration_keyword variable_declaration_body
Rule 107   variable_declaration_initializer -> expression
Rule 108   variable_declaration_initializer -> array_initializer
Rule 109   variable_declaration_initializer -> class_initializer
Rule 110   variable_arguement_list -> variable_declaration_initializer
Rule 111   variable_arguement_list -> variable_arguement_list COMMA variable_declaration_initializer
Rule 112   variable_declaration_body -> variable_declarator ASSIGN variable_declaration_initializer
Rule 113   variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list RPAREN
Rule 114   variable_declaration_body -> IDENTIFIER ASSIGN LPAREN func_arguement_list_opt RPAREN FUNTYPE expression
Rule 115   variable_declarators -> variable_declarator
Rule 116   variable_declarators -> variable_declarators COMMA variable_declarator
Rule 117   variable_declarator -> variable_declarator_id
Rule 118   variable_declarator_id -> IDENTIFIER COLON type
Rule 119   statement -> normal_statement
Rule 120   statement -> if_then_statement
Rule 121   statement -> if_then_else_statement
Rule 122   statement -> while_statement
Rule 123   statement -> do_while_statement
Rule 124   statement -> for_statement
Rule 125   normal_statement -> block
Rule 126   normal_statement -> expression_statement
Rule 127   normal_statement -> empty_statement
Rule 128   normal_statement -> return_statement
Rule 129   normal_statement -> switch_statement
Rule 130   expression_statement -> statement_expression STATE_END
Rule 131   statement_expression -> assignment
Rule 132   statement_expression -> method_invocation
Rule 133   if_then_statement -> KWRD_IF LPAREN expression RPAREN block
Rule 134   if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block
Rule 135   if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
Rule 136   if_then_else_intermediate -> block
Rule 137   if_then_else_intermediate -> if_then_else_statement_precedence
Rule 138   while_statement -> KWRD_WHILE LPAREN expression RPAREN block
Rule 139   do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END
Rule 140   for_statement -> KWRD_FOR LPAREN for_logic RPAREN block
Rule 141   for_logic -> for_update
Rule 142   for_logic -> for_update STATE_END for_logic
Rule 143   for_update -> for_loop for_step_opts
Rule 144   for_loop -> IDENTIFIER CHOOSE expression for_untilTo expression
Rule 145   for_untilTo -> KWRD_UNTIL
Rule 146   for_untilTo -> KWRD_TO
Rule 147   for_step_opts -> KWRD_BY expression
Rule 148   for_step_opts -> empty
Rule 149   switch_statement -> expression KWRD_MATCH switch_block
Rule 150   switch_block -> BLOCK_BEGIN BLOCK_END
Rule 151   switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END
Rule 152   switch_block -> BLOCK_BEGIN switch_labels BLOCK_END
Rule 153   switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END
Rule 154   switch_block_statements -> switch_block_statement
Rule 155   switch_block_statements -> switch_block_statements switch_block_statement
Rule 156   switch_block_statement -> switch_labels block_statements
Rule 157   switch_labels -> switch_label
Rule 158   switch_labels -> switch_labels switch_label
Rule 159   switch_label -> KWRD_CASE expression FUNTYPE
Rule 160   empty_statement -> STATE_END
Rule 161   return_statement -> KWRD_RETURN expression_optional STATE_END
Rule 162   constructor_arguement_list_opt -> constructor_arguement_list
Rule 163   constructor_arguement_list_opt -> empty
Rule 164   constructor_arguement_list -> constructor_arguement_list_declarator
Rule 165   constructor_arguement_list -> constructor_arguement_list COMMA constructor_arguement_list_declarator
Rule 166   constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER COLON type
Rule 167   func_arguement_list_opt -> variable_declarators
Rule 168   func_arguement_list_opt -> empty
Rule 169   class_declaration -> class_header class_body
Rule 170   class_header -> class_header_name class_header_extends_opt
Rule 171   class_header_name -> class_header_name1 func_args_start constructor_arguement_list_opt RPAREN
Rule 172   class_header_name1 -> modifier_opts KWRD_CLASS name
Rule 173   class_header_extends_opt -> class_header_extends
Rule 174   class_header_extends_opt -> empty
Rule 175   class_header_extends -> KWRD_EXTNDS name LPAREN func_arguement_list_opt RPAREN
Rule 176   class_body -> BLOCK_BEGIN block_statements_opt end_scope
Rule 177   method_declaration -> method_header method_body
Rule 178   method_header -> method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
Rule 179   func_args_start -> LPAREN
Rule 180   method_return_type -> type
Rule 181   method_return_type -> TYPE_VOID
Rule 182   method_header_name -> modifier_opts KWRD_DEF IDENTIFIER
Rule 183   method_body -> BLOCK_BEGIN block_statements_opt end_scope
Rule 184   modifier -> KWRD_PROTECTED
Rule 185   modifier -> KWRD_PRIVATE
Rule 186   type -> primitive_type
Rule 187   type -> reference_type
Rule 188   primitive_type -> TYPE_INT
Rule 189   primitive_type -> TYPE_FLOAT
Rule 190   primitive_type -> TYPE_CHAR
Rule 191   primitive_type -> TYPE_STRING
Rule 192   primitive_type -> TYPE_BOOLEAN
Rule 193   reference_type -> class_data_type
Rule 194   reference_type -> array_data_type
Rule 195   class_data_type -> name
Rule 196   array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN
Rule 197   array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN
Rule 198   array_initializer -> KWRD_ARRAY LPAREN argument_list_opt RPAREN
Rule 199   class_initializer -> KWRD_NEW name LPAREN argument_list_opt RPAREN
Rule 200   empty -> <empty>

Terminals, with rules where they appear

AND                  : 30
AND_ASSIGN           : 24
AND_BITWISE          : 36
ASSIGN               : 16 112 113 114 178
AT                   : 
BLOCK_BEGIN          : 90 150 151 152 153 176 183
BLOCK_END            : 91 150 151 152 153
BOOL_CONSTF          : 71
BOOL_CONSTT          : 70
CHARACTER            : 68
CHOOSE               : 144
COLON                : 118 166 178
COMM                 : 
COMMA                : 80 111 116 165
DIVIDE               : 53
DIVIDE_ASSIGN        : 18
DOT                  : 84
EQUAL                : 38
EXACTEQ              : 
FLOAT_CONST          : 73
FUNTYPE              : 114 159
GEQ                  : 43
GREATER              : 41
IDENTIFIER           : 8 9 9 83 114 118 144 166 182
INNER_CLASS          : 
INT_CONST            : 74 197
KWRD_ABST            : 
KWRD_ARRAY           : 196 197 198
KWRD_BY              : 147
KWRD_CASE            : 159
KWRD_CATCH           : 
KWRD_CLASS           : 172
KWRD_DEF             : 182
KWRD_DO              : 139
KWRD_ELSE            : 134 135
KWRD_EXTNDS          : 9 175
KWRD_FINAL           : 
KWRD_FINALLY         : 
KWRD_FOR             : 140
KWRD_FOREACH         : 
KWRD_FORSOME         : 
KWRD_IF              : 133 134 135
KWRD_IMPLICIT        : 
KWRD_IMPORT          : 
KWRD_LAZY            : 
KWRD_MACRO           : 
KWRD_MATCH           : 149
KWRD_NEW             : 197 199
KWRD_NULL            : 72
KWRD_OBJECT          : 8 9
KWRD_OVERRIDE        : 
KWRD_PACKAGE         : 
KWRD_PRIVATE         : 185
KWRD_PROTECTED       : 184
KWRD_PUBLIC          : 
KWRD_RETURN          : 161
KWRD_SEALED          : 
KWRD_STATIC          : 
KWRD_SUPER           : 
KWRD_THIS            : 
KWRD_THROW           : 
KWRD_TO              : 146
KWRD_TRAIT           : 
KWRD_TRY             : 
KWRD_TYPE            : 
KWRD_UNTIL           : 145
KWRD_VAL             : 104
KWRD_VAR             : 103
KWRD_WHILE           : 138 139
KWRD_WITH            : 
KWRD_YIELD           : 
LBPAREN              : 76 196 197
LEQ                  : 44
LESS                 : 42
LOWER_BOUND          : 
LPAREN               : 63 64 75 113 113 114 133 134 135 138 139 140 175 179 197 198 199
LSHIFT               : 46
LSHIFT_ASSIGN        : 22
MINUS                : 50 56
MINUS_ASSIGN         : 21
NEQUAL               : 39
NIL                  : 
NOT                  : 60
OR                   : 28
OR_ASSIGN            : 25
OR_BITWISE           : 32
PLUS                 : 49 55
PLUS_ASSIGN          : 20
QUESTION             : 
RBPAREN              : 76 196 197
REMAINDER            : 54
REMAINDER_ASSIGN     : 19
RPAREN               : 63 64 75 113 113 114 133 134 135 138 139 140 171 175 178 197 198 199
RSHIFT               : 47
RSHIFT_ASSIGN        : 23
STATE_END            : 105 130 139 142 160 161
STRING_CONST         : 69
SUBTYPE              : 
TILDA                : 59
TIMES                : 52
TIMES_ASSIGN         : 17
TYPE_BOOLEAN         : 192
TYPE_CHAR            : 190
TYPE_FLOAT           : 189
TYPE_INT             : 188
TYPE_STRING          : 191
TYPE_VOID            : 181
UNDER                : 
UPPER_BOUND          : 
VIEW                 : 
VIEWABLE             : 
XOR                  : 34
XOR_ASSIGN           : 26
error                : 
newline              : 

Nonterminals, with rules where they appear

ObjectDeclare        : 7
ProgramStructure     : 1 3
SingletonObject      : 5 99
additive_expression  : 45 46 47 49 50
and_expression       : 33 34 36
argument_list        : 77 80
argument_list_opt    : 75 198 199
array_access         : 86
array_data_type      : 194
array_initializer    : 108
assignment           : 13 131
assignment_expression : 10 15
assignment_operator  : 15
base_variable_set    : 58
block                : 7 125 133 134 136 138 139 140
block_statement      : 94 95
block_statements     : 92 95 156
block_statements_opt : 89 176 183
cast_expression      : 61
class_and_objects    : 3 4
class_body           : 169
class_data_type      : 193
class_declaration    : 6 98
class_header         : 169
class_header_extends : 173
class_header_extends_opt : 170
class_header_name    : 170
class_header_name1   : 171
class_initializer    : 109
conditional_and_expression : 27 28 30
conditional_or_expression : 14 28
constructor_arguement_list : 162 165
constructor_arguement_list_declarator : 164 165
constructor_arguement_list_opt : 171
declaration_keyword  : 106 166
do_while_statement   : 123
empty                : 2 12 78 93 102 148 163 168 174
empty_statement      : 127
end_here             : 1
end_scope            : 89 176 183
equality_expression  : 35 36 38 39
exclusive_or_expression : 31 32 34
expression           : 11 63 76 79 80 107 114 133 134 135 138 139 144 144 147 149 159
expression_optional  : 161
expression_statement : 126
for_logic            : 140 142
for_loop             : 143
for_statement        : 124
for_step_opts        : 143
for_untilTo          : 144
for_update           : 141 142
func_args_start      : 171 178
func_arguement_list_opt : 114 175 178
if_then_else_intermediate : 134 135 135
if_then_else_statement : 121
if_then_else_statement_precedence : 137
if_then_statement    : 120
inclusive_or_expression : 29 30 32
int_float            : 67
literal              : 65
local_variable_declaration : 105
local_variable_declaration_statement : 96
method_body          : 177
method_declaration   : 100
method_header        : 177
method_header_name   : 178
method_invocation    : 66 132
method_return_type   : 178
modifier             : 101
modifier_opts        : 106 172 182
multiplicative_expression : 48 49 50 52 53 54
name                 : 75 76 84 85 172 175 195 199
normal_statement     : 119
primary              : 88
primitive_type       : 64 186
qualified_name       : 82
reference_type       : 187
relational_expression : 37 38 39 41 42 43 44
return_statement     : 128
shift_expression     : 40 41 42 43 44 46 47
simple_name          : 81 84
start_here           : 0
start_scope          : 89
statement            : 97
statement_expression : 130
switch_block         : 149
switch_block_statement : 154 155
switch_block_statements : 151 153 155
switch_label         : 157 158
switch_labels        : 152 153 156 158
switch_statement     : 129
type                 : 118 166 180 196 197
unary_expression     : 51 52 53 54 55 56 59 60 64
unary_expression_not_plus_minus : 57
valid_variable       : 15 87
variable_arguement_list : 111 113
variable_declaration_body : 106
variable_declaration_initializer : 110 111 112
variable_declarator  : 112 115 116
variable_declarator_id : 117
variable_declarators : 113 116 167
variable_literal     : 62
while_statement      : 122

Parsing method: LALR

state 0

    (0) S' -> . start_here
    (1) start_here -> . ProgramStructure end_here
    (3) ProgramStructure -> . ProgramStructure class_and_objects
    (4) ProgramStructure -> . class_and_objects
    (5) class_and_objects -> . SingletonObject
    (6) class_and_objects -> . class_declaration
    (7) SingletonObject -> . ObjectDeclare block
    (169) class_declaration -> . class_header class_body
    (8) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (9) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (170) class_header -> . class_header_name class_header_extends_opt
    (171) class_header_name -> . class_header_name1 func_args_start constructor_arguement_list_opt RPAREN
    (172) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (101) modifier_opts -> . modifier
    (102) modifier_opts -> . empty
    (184) modifier -> . KWRD_PROTECTED
    (185) modifier -> . KWRD_PRIVATE
    (200) empty -> .

    KWRD_OBJECT     shift and go to state 4
    KWRD_PROTECTED  shift and go to state 11
    KWRD_PRIVATE    shift and go to state 15
    KWRD_CLASS      reduce using rule 200 (empty -> .)

    class_header_name1             shift and go to state 2
    class_header_name              shift and go to state 3
    ProgramStructure               shift and go to state 6
    ObjectDeclare                  shift and go to state 1
    start_here                     shift and go to state 7
    class_declaration              shift and go to state 12
    class_and_objects              shift and go to state 13
    empty                          shift and go to state 5
    SingletonObject                shift and go to state 8
    modifier                       shift and go to state 14
    class_header                   shift and go to state 9
    modifier_opts                  shift and go to state 10

state 1

    (7) SingletonObject -> ObjectDeclare . block
    (89) block -> . start_scope block_statements_opt end_scope
    (90) start_scope -> . BLOCK_BEGIN

    BLOCK_BEGIN     shift and go to state 16

    start_scope                    shift and go to state 17
    block                          shift and go to state 18

state 2

    (171) class_header_name -> class_header_name1 . func_args_start constructor_arguement_list_opt RPAREN
    (179) func_args_start -> . LPAREN

    LPAREN          shift and go to state 20

    func_args_start                shift and go to state 19

state 3

    (170) class_header -> class_header_name . class_header_extends_opt
    (173) class_header_extends_opt -> . class_header_extends
    (174) class_header_extends_opt -> . empty
    (175) class_header_extends -> . KWRD_EXTNDS name LPAREN func_arguement_list_opt RPAREN
    (200) empty -> .

    KWRD_EXTNDS     shift and go to state 23
    BLOCK_BEGIN     reduce using rule 200 (empty -> .)

    class_header_extends           shift and go to state 21
    class_header_extends_opt       shift and go to state 22
    empty                          shift and go to state 24

state 4

    (8) ObjectDeclare -> KWRD_OBJECT . IDENTIFIER
    (9) ObjectDeclare -> KWRD_OBJECT . IDENTIFIER KWRD_EXTNDS IDENTIFIER

    IDENTIFIER      shift and go to state 25


state 5

    (102) modifier_opts -> empty .

    KWRD_DEF        reduce using rule 102 (modifier_opts -> empty .)
    KWRD_CLASS      reduce using rule 102 (modifier_opts -> empty .)
    KWRD_VAR        reduce using rule 102 (modifier_opts -> empty .)
    KWRD_VAL        reduce using rule 102 (modifier_opts -> empty .)


state 6

    (1) start_here -> ProgramStructure . end_here
    (3) ProgramStructure -> ProgramStructure . class_and_objects
    (2) end_here -> . empty
    (5) class_and_objects -> . SingletonObject
    (6) class_and_objects -> . class_declaration
    (200) empty -> .
    (7) SingletonObject -> . ObjectDeclare block
    (169) class_declaration -> . class_header class_body
    (8) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (9) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (170) class_header -> . class_header_name class_header_extends_opt
    (171) class_header_name -> . class_header_name1 func_args_start constructor_arguement_list_opt RPAREN
    (172) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (101) modifier_opts -> . modifier
    (102) modifier_opts -> . empty
    (184) modifier -> . KWRD_PROTECTED
    (185) modifier -> . KWRD_PRIVATE

    $end            reduce using rule 200 (empty -> .)
    KWRD_CLASS      reduce using rule 200 (empty -> .)
    KWRD_OBJECT     shift and go to state 4
    KWRD_PROTECTED  shift and go to state 11
    KWRD_PRIVATE    shift and go to state 15

    class_header_name              shift and go to state 3
    ObjectDeclare                  shift and go to state 1
    class_header_name1             shift and go to state 2
    class_declaration              shift and go to state 12
    class_and_objects              shift and go to state 28
    SingletonObject                shift and go to state 8
    end_here                       shift and go to state 26
    modifier                       shift and go to state 14
    class_header                   shift and go to state 9
    modifier_opts                  shift and go to state 10
    empty                          shift and go to state 27

state 7

    (0) S' -> start_here .



state 8

    (5) class_and_objects -> SingletonObject .

    KWRD_OBJECT     reduce using rule 5 (class_and_objects -> SingletonObject .)
    KWRD_PROTECTED  reduce using rule 5 (class_and_objects -> SingletonObject .)
    KWRD_PRIVATE    reduce using rule 5 (class_and_objects -> SingletonObject .)
    KWRD_CLASS      reduce using rule 5 (class_and_objects -> SingletonObject .)
    $end            reduce using rule 5 (class_and_objects -> SingletonObject .)


state 9

    (169) class_declaration -> class_header . class_body
    (176) class_body -> . BLOCK_BEGIN block_statements_opt end_scope

    BLOCK_BEGIN     shift and go to state 30

    class_body                     shift and go to state 29

state 10

    (172) class_header_name1 -> modifier_opts . KWRD_CLASS name

    KWRD_CLASS      shift and go to state 31


state 11

    (184) modifier -> KWRD_PROTECTED .

    KWRD_DEF        reduce using rule 184 (modifier -> KWRD_PROTECTED .)
    KWRD_CLASS      reduce using rule 184 (modifier -> KWRD_PROTECTED .)
    KWRD_VAR        reduce using rule 184 (modifier -> KWRD_PROTECTED .)
    KWRD_VAL        reduce using rule 184 (modifier -> KWRD_PROTECTED .)


state 12

    (6) class_and_objects -> class_declaration .

    KWRD_OBJECT     reduce using rule 6 (class_and_objects -> class_declaration .)
    KWRD_PROTECTED  reduce using rule 6 (class_and_objects -> class_declaration .)
    KWRD_PRIVATE    reduce using rule 6 (class_and_objects -> class_declaration .)
    KWRD_CLASS      reduce using rule 6 (class_and_objects -> class_declaration .)
    $end            reduce using rule 6 (class_and_objects -> class_declaration .)


state 13

    (4) ProgramStructure -> class_and_objects .

    KWRD_OBJECT     reduce using rule 4 (ProgramStructure -> class_and_objects .)
    KWRD_PROTECTED  reduce using rule 4 (ProgramStructure -> class_and_objects .)
    KWRD_PRIVATE    reduce using rule 4 (ProgramStructure -> class_and_objects .)
    KWRD_CLASS      reduce using rule 4 (ProgramStructure -> class_and_objects .)
    $end            reduce using rule 4 (ProgramStructure -> class_and_objects .)


state 14

    (101) modifier_opts -> modifier .

    KWRD_DEF        reduce using rule 101 (modifier_opts -> modifier .)
    KWRD_CLASS      reduce using rule 101 (modifier_opts -> modifier .)
    KWRD_VAR        reduce using rule 101 (modifier_opts -> modifier .)
    KWRD_VAL        reduce using rule 101 (modifier_opts -> modifier .)


state 15

    (185) modifier -> KWRD_PRIVATE .

    KWRD_DEF        reduce using rule 185 (modifier -> KWRD_PRIVATE .)
    KWRD_CLASS      reduce using rule 185 (modifier -> KWRD_PRIVATE .)
    KWRD_VAR        reduce using rule 185 (modifier -> KWRD_PRIVATE .)
    KWRD_VAL        reduce using rule 185 (modifier -> KWRD_PRIVATE .)


state 16

    (90) start_scope -> BLOCK_BEGIN .

    KWRD_IF         reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    KWRD_WHILE      reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    KWRD_DO         reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    KWRD_FOR        reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    KWRD_OBJECT     reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    STATE_END       reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    KWRD_RETURN     reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    KWRD_PROTECTED  reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    KWRD_PRIVATE    reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    BLOCK_BEGIN     reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    IDENTIFIER      reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    PLUS            reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    MINUS           reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    TILDA           reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    NOT             reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    LPAREN          reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    CHARACTER       reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    STRING_CONST    reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    BOOL_CONSTT     reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    BOOL_CONSTF     reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    KWRD_NULL       reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    FLOAT_CONST     reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    INT_CONST       reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    BLOCK_END       reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    KWRD_DEF        reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    KWRD_CLASS      reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    KWRD_VAR        reduce using rule 90 (start_scope -> BLOCK_BEGIN .)
    KWRD_VAL        reduce using rule 90 (start_scope -> BLOCK_BEGIN .)


state 17

    (89) block -> start_scope . block_statements_opt end_scope
    (92) block_statements_opt -> . block_statements
    (93) block_statements_opt -> . empty
    (94) block_statements -> . block_statement
    (95) block_statements -> . block_statements block_statement
    (200) empty -> .
    (96) block_statement -> . local_variable_declaration_statement
    (97) block_statement -> . statement
    (98) block_statement -> . class_declaration
    (99) block_statement -> . SingletonObject
    (100) block_statement -> . method_declaration
    (105) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (119) statement -> . normal_statement
    (120) statement -> . if_then_statement
    (121) statement -> . if_then_else_statement
    (122) statement -> . while_statement
    (123) statement -> . do_while_statement
    (124) statement -> . for_statement
    (169) class_declaration -> . class_header class_body
    (7) SingletonObject -> . ObjectDeclare block
    (177) method_declaration -> . method_header method_body
    (106) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (125) normal_statement -> . block
    (126) normal_statement -> . expression_statement
    (127) normal_statement -> . empty_statement
    (128) normal_statement -> . return_statement
    (129) normal_statement -> . switch_statement
    (133) if_then_statement -> . KWRD_IF LPAREN expression RPAREN block
    (134) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block
    (138) while_statement -> . KWRD_WHILE LPAREN expression RPAREN block
    (139) do_while_statement -> . KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END
    (140) for_statement -> . KWRD_FOR LPAREN for_logic RPAREN block
    (170) class_header -> . class_header_name class_header_extends_opt
    (8) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (9) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (178) method_header -> . method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (101) modifier_opts -> . modifier
    (102) modifier_opts -> . empty
    (89) block -> . start_scope block_statements_opt end_scope
    (130) expression_statement -> . statement_expression STATE_END
    (160) empty_statement -> . STATE_END
    (161) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (149) switch_statement -> . expression KWRD_MATCH switch_block
    (171) class_header_name -> . class_header_name1 func_args_start constructor_arguement_list_opt RPAREN
    (182) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (184) modifier -> . KWRD_PROTECTED
    (185) modifier -> . KWRD_PRIVATE
    (90) start_scope -> . BLOCK_BEGIN
    (131) statement_expression -> . assignment
    (132) statement_expression -> . method_invocation
    (10) expression -> . assignment_expression
    (172) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (76) array_access -> . name LBPAREN expression RBPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    BLOCK_END       reduce using rule 200 (empty -> .)
    KWRD_DEF        reduce using rule 200 (empty -> .)
    KWRD_CLASS      reduce using rule 200 (empty -> .)
    KWRD_VAR        reduce using rule 200 (empty -> .)
    KWRD_VAL        reduce using rule 200 (empty -> .)
    KWRD_IF         shift and go to state 63
    KWRD_WHILE      shift and go to state 52
    KWRD_DO         shift and go to state 47
    KWRD_FOR        shift and go to state 56
    KWRD_OBJECT     shift and go to state 4
    STATE_END       shift and go to state 53
    KWRD_RETURN     shift and go to state 50
    KWRD_PROTECTED  shift and go to state 11
    KWRD_PRIVATE    shift and go to state 15
    BLOCK_BEGIN     shift and go to state 16
    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    expression_statement           shift and go to state 32
    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    normal_statement               shift and go to state 90
    ObjectDeclare                  shift and go to state 1
    class_header_name1             shift and go to state 2
    if_then_statement              shift and go to state 73
    array_access                   shift and go to state 34
    switch_statement               shift and go to state 57
    assignment_expression          shift and go to state 97
    block_statements_opt           shift and go to state 38
    qualified_name                 shift and go to state 84
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 39
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 70
    cast_expression                shift and go to state 85
    block_statement                shift and go to state 76
    shift_expression               shift and go to state 62
    return_statement               shift and go to state 94
    while_statement                shift and go to state 40
    and_expression                 shift and go to state 92
    statement                      shift and go to state 80
    literal                        shift and go to state 77
    statement_expression           shift and go to state 43
    method_invocation              shift and go to state 81
    simple_name                    shift and go to state 74
    conditional_or_expression      shift and go to state 59
    empty                          shift and go to state 83
    relational_expression          shift and go to state 79
    block_statements               shift and go to state 95
    for_statement                  shift and go to state 44
    local_variable_declaration_statement shift and go to state 45
    do_while_statement             shift and go to state 60
    int_float                      shift and go to state 46
    assignment                     shift and go to state 98
    multiplicative_expression      shift and go to state 61
    primary                        shift and go to state 72
    additive_expression            shift and go to state 58
    SingletonObject                shift and go to state 48
    start_scope                    shift and go to state 17
    method_header_name             shift and go to state 49
    class_header                   shift and go to state 9
    modifier_opts                  shift and go to state 100
    equality_expression            shift and go to state 86
    variable_literal               shift and go to state 64
    name                           shift and go to state 51
    unary_expression_not_plus_minus shift and go to state 55
    valid_variable                 shift and go to state 101
    method_header                  shift and go to state 87
    empty_statement                shift and go to state 88
    class_declaration              shift and go to state 102
    local_variable_declaration     shift and go to state 89
    modifier                       shift and go to state 14
    expression                     shift and go to state 67
    conditional_and_expression     shift and go to state 65
    block                          shift and go to state 68
    if_then_else_statement         shift and go to state 69

state 18

    (7) SingletonObject -> ObjectDeclare block .

    KWRD_IF         reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_WHILE      reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_DO         reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_FOR        reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_OBJECT     reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    STATE_END       reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_RETURN     reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_PROTECTED  reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_PRIVATE    reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    BLOCK_BEGIN     reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    IDENTIFIER      reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    PLUS            reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    MINUS           reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    TILDA           reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    NOT             reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    LPAREN          reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    CHARACTER       reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    STRING_CONST    reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    BOOL_CONSTT     reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    BOOL_CONSTF     reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_NULL       reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    FLOAT_CONST     reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    INT_CONST       reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_DEF        reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_CLASS      reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_VAR        reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_VAL        reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    BLOCK_END       reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    $end            reduce using rule 7 (SingletonObject -> ObjectDeclare block .)
    KWRD_CASE       reduce using rule 7 (SingletonObject -> ObjectDeclare block .)


state 19

    (171) class_header_name -> class_header_name1 func_args_start . constructor_arguement_list_opt RPAREN
    (162) constructor_arguement_list_opt -> . constructor_arguement_list
    (163) constructor_arguement_list_opt -> . empty
    (164) constructor_arguement_list -> . constructor_arguement_list_declarator
    (165) constructor_arguement_list -> . constructor_arguement_list COMMA constructor_arguement_list_declarator
    (200) empty -> .
    (166) constructor_arguement_list_declarator -> . declaration_keyword IDENTIFIER COLON type
    (103) declaration_keyword -> . KWRD_VAR
    (104) declaration_keyword -> . KWRD_VAL

    RPAREN          reduce using rule 200 (empty -> .)
    KWRD_VAR        shift and go to state 106
    KWRD_VAL        shift and go to state 107

    constructor_arguement_list_opt shift and go to state 103
    declaration_keyword            shift and go to state 104
    constructor_arguement_list     shift and go to state 105
    constructor_arguement_list_declarator shift and go to state 108
    empty                          shift and go to state 109

state 20

    (179) func_args_start -> LPAREN .

    KWRD_VAR        reduce using rule 179 (func_args_start -> LPAREN .)
    KWRD_VAL        reduce using rule 179 (func_args_start -> LPAREN .)
    RPAREN          reduce using rule 179 (func_args_start -> LPAREN .)
    IDENTIFIER      reduce using rule 179 (func_args_start -> LPAREN .)


state 21

    (173) class_header_extends_opt -> class_header_extends .

    BLOCK_BEGIN     reduce using rule 173 (class_header_extends_opt -> class_header_extends .)


state 22

    (170) class_header -> class_header_name class_header_extends_opt .

    BLOCK_BEGIN     reduce using rule 170 (class_header -> class_header_name class_header_extends_opt .)


state 23

    (175) class_header_extends -> KWRD_EXTNDS . name LPAREN func_arguement_list_opt RPAREN
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name

    IDENTIFIER      shift and go to state 82

    name                           shift and go to state 110
    qualified_name                 shift and go to state 84
    simple_name                    shift and go to state 74

state 24

    (174) class_header_extends_opt -> empty .

    BLOCK_BEGIN     reduce using rule 174 (class_header_extends_opt -> empty .)


state 25

    (8) ObjectDeclare -> KWRD_OBJECT IDENTIFIER .
    (9) ObjectDeclare -> KWRD_OBJECT IDENTIFIER . KWRD_EXTNDS IDENTIFIER

    BLOCK_BEGIN     reduce using rule 8 (ObjectDeclare -> KWRD_OBJECT IDENTIFIER .)
    KWRD_EXTNDS     shift and go to state 111


state 26

    (1) start_here -> ProgramStructure end_here .

    $end            reduce using rule 1 (start_here -> ProgramStructure end_here .)


state 27

    (2) end_here -> empty .
    (102) modifier_opts -> empty .

    $end            reduce using rule 2 (end_here -> empty .)
    KWRD_CLASS      reduce using rule 102 (modifier_opts -> empty .)


state 28

    (3) ProgramStructure -> ProgramStructure class_and_objects .

    KWRD_OBJECT     reduce using rule 3 (ProgramStructure -> ProgramStructure class_and_objects .)
    KWRD_PROTECTED  reduce using rule 3 (ProgramStructure -> ProgramStructure class_and_objects .)
    KWRD_PRIVATE    reduce using rule 3 (ProgramStructure -> ProgramStructure class_and_objects .)
    KWRD_CLASS      reduce using rule 3 (ProgramStructure -> ProgramStructure class_and_objects .)
    $end            reduce using rule 3 (ProgramStructure -> ProgramStructure class_and_objects .)


state 29

    (169) class_declaration -> class_header class_body .

    KWRD_IF         reduce using rule 169 (class_declaration -> class_header class_body .)
    KWRD_WHILE      reduce using rule 169 (class_declaration -> class_header class_body .)
    KWRD_DO         reduce using rule 169 (class_declaration -> class_header class_body .)
    KWRD_FOR        reduce using rule 169 (class_declaration -> class_header class_body .)
    KWRD_OBJECT     reduce using rule 169 (class_declaration -> class_header class_body .)
    STATE_END       reduce using rule 169 (class_declaration -> class_header class_body .)
    KWRD_RETURN     reduce using rule 169 (class_declaration -> class_header class_body .)
    KWRD_PROTECTED  reduce using rule 169 (class_declaration -> class_header class_body .)
    KWRD_PRIVATE    reduce using rule 169 (class_declaration -> class_header class_body .)
    BLOCK_BEGIN     reduce using rule 169 (class_declaration -> class_header class_body .)
    IDENTIFIER      reduce using rule 169 (class_declaration -> class_header class_body .)
    PLUS            reduce using rule 169 (class_declaration -> class_header class_body .)
    MINUS           reduce using rule 169 (class_declaration -> class_header class_body .)
    TILDA           reduce using rule 169 (class_declaration -> class_header class_body .)
    NOT             reduce using rule 169 (class_declaration -> class_header class_body .)
    LPAREN          reduce using rule 169 (class_declaration -> class_header class_body .)
    CHARACTER       reduce using rule 169 (class_declaration -> class_header class_body .)
    STRING_CONST    reduce using rule 169 (class_declaration -> class_header class_body .)
    BOOL_CONSTT     reduce using rule 169 (class_declaration -> class_header class_body .)
    BOOL_CONSTF     reduce using rule 169 (class_declaration -> class_header class_body .)
    KWRD_NULL       reduce using rule 169 (class_declaration -> class_header class_body .)
    FLOAT_CONST     reduce using rule 169 (class_declaration -> class_header class_body .)
    INT_CONST       reduce using rule 169 (class_declaration -> class_header class_body .)
    KWRD_DEF        reduce using rule 169 (class_declaration -> class_header class_body .)
    KWRD_CLASS      reduce using rule 169 (class_declaration -> class_header class_body .)
    KWRD_VAR        reduce using rule 169 (class_declaration -> class_header class_body .)
    KWRD_VAL        reduce using rule 169 (class_declaration -> class_header class_body .)
    BLOCK_END       reduce using rule 169 (class_declaration -> class_header class_body .)
    $end            reduce using rule 169 (class_declaration -> class_header class_body .)
    KWRD_CASE       reduce using rule 169 (class_declaration -> class_header class_body .)


state 30

    (176) class_body -> BLOCK_BEGIN . block_statements_opt end_scope
    (92) block_statements_opt -> . block_statements
    (93) block_statements_opt -> . empty
    (94) block_statements -> . block_statement
    (95) block_statements -> . block_statements block_statement
    (200) empty -> .
    (96) block_statement -> . local_variable_declaration_statement
    (97) block_statement -> . statement
    (98) block_statement -> . class_declaration
    (99) block_statement -> . SingletonObject
    (100) block_statement -> . method_declaration
    (105) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (119) statement -> . normal_statement
    (120) statement -> . if_then_statement
    (121) statement -> . if_then_else_statement
    (122) statement -> . while_statement
    (123) statement -> . do_while_statement
    (124) statement -> . for_statement
    (169) class_declaration -> . class_header class_body
    (7) SingletonObject -> . ObjectDeclare block
    (177) method_declaration -> . method_header method_body
    (106) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (125) normal_statement -> . block
    (126) normal_statement -> . expression_statement
    (127) normal_statement -> . empty_statement
    (128) normal_statement -> . return_statement
    (129) normal_statement -> . switch_statement
    (133) if_then_statement -> . KWRD_IF LPAREN expression RPAREN block
    (134) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block
    (138) while_statement -> . KWRD_WHILE LPAREN expression RPAREN block
    (139) do_while_statement -> . KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END
    (140) for_statement -> . KWRD_FOR LPAREN for_logic RPAREN block
    (170) class_header -> . class_header_name class_header_extends_opt
    (8) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (9) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (178) method_header -> . method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (101) modifier_opts -> . modifier
    (102) modifier_opts -> . empty
    (89) block -> . start_scope block_statements_opt end_scope
    (130) expression_statement -> . statement_expression STATE_END
    (160) empty_statement -> . STATE_END
    (161) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (149) switch_statement -> . expression KWRD_MATCH switch_block
    (171) class_header_name -> . class_header_name1 func_args_start constructor_arguement_list_opt RPAREN
    (182) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (184) modifier -> . KWRD_PROTECTED
    (185) modifier -> . KWRD_PRIVATE
    (90) start_scope -> . BLOCK_BEGIN
    (131) statement_expression -> . assignment
    (132) statement_expression -> . method_invocation
    (10) expression -> . assignment_expression
    (172) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (76) array_access -> . name LBPAREN expression RBPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    BLOCK_END       reduce using rule 200 (empty -> .)
    KWRD_DEF        reduce using rule 200 (empty -> .)
    KWRD_CLASS      reduce using rule 200 (empty -> .)
    KWRD_VAR        reduce using rule 200 (empty -> .)
    KWRD_VAL        reduce using rule 200 (empty -> .)
    KWRD_IF         shift and go to state 63
    KWRD_WHILE      shift and go to state 52
    KWRD_DO         shift and go to state 47
    KWRD_FOR        shift and go to state 56
    KWRD_OBJECT     shift and go to state 4
    STATE_END       shift and go to state 53
    KWRD_RETURN     shift and go to state 50
    KWRD_PROTECTED  shift and go to state 11
    KWRD_PRIVATE    shift and go to state 15
    BLOCK_BEGIN     shift and go to state 16
    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    expression_statement           shift and go to state 32
    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    normal_statement               shift and go to state 90
    ObjectDeclare                  shift and go to state 1
    class_header_name1             shift and go to state 2
    if_then_statement              shift and go to state 73
    array_access                   shift and go to state 34
    switch_statement               shift and go to state 57
    assignment_expression          shift and go to state 97
    block_statements_opt           shift and go to state 112
    qualified_name                 shift and go to state 84
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 39
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 70
    cast_expression                shift and go to state 85
    block_statement                shift and go to state 76
    shift_expression               shift and go to state 62
    return_statement               shift and go to state 94
    while_statement                shift and go to state 40
    and_expression                 shift and go to state 92
    statement                      shift and go to state 80
    literal                        shift and go to state 77
    statement_expression           shift and go to state 43
    method_invocation              shift and go to state 81
    simple_name                    shift and go to state 74
    conditional_or_expression      shift and go to state 59
    empty                          shift and go to state 83
    relational_expression          shift and go to state 79
    block_statements               shift and go to state 95
    for_statement                  shift and go to state 44
    local_variable_declaration_statement shift and go to state 45
    do_while_statement             shift and go to state 60
    int_float                      shift and go to state 46
    assignment                     shift and go to state 98
    multiplicative_expression      shift and go to state 61
    primary                        shift and go to state 72
    additive_expression            shift and go to state 58
    SingletonObject                shift and go to state 48
    start_scope                    shift and go to state 17
    method_header_name             shift and go to state 49
    class_header                   shift and go to state 9
    modifier_opts                  shift and go to state 100
    equality_expression            shift and go to state 86
    variable_literal               shift and go to state 64
    name                           shift and go to state 51
    unary_expression_not_plus_minus shift and go to state 55
    valid_variable                 shift and go to state 101
    method_header                  shift and go to state 87
    empty_statement                shift and go to state 88
    class_declaration              shift and go to state 102
    local_variable_declaration     shift and go to state 89
    modifier                       shift and go to state 14
    expression                     shift and go to state 67
    conditional_and_expression     shift and go to state 65
    block                          shift and go to state 68
    if_then_else_statement         shift and go to state 69

state 31

    (172) class_header_name1 -> modifier_opts KWRD_CLASS . name
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name

    IDENTIFIER      shift and go to state 82

    simple_name                    shift and go to state 74
    qualified_name                 shift and go to state 84
    name                           shift and go to state 113

state 32

    (126) normal_statement -> expression_statement .

    KWRD_IF         reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_WHILE      reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_DO         reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_FOR        reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_OBJECT     reduce using rule 126 (normal_statement -> expression_statement .)
    STATE_END       reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_RETURN     reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_PROTECTED  reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_PRIVATE    reduce using rule 126 (normal_statement -> expression_statement .)
    BLOCK_BEGIN     reduce using rule 126 (normal_statement -> expression_statement .)
    IDENTIFIER      reduce using rule 126 (normal_statement -> expression_statement .)
    PLUS            reduce using rule 126 (normal_statement -> expression_statement .)
    MINUS           reduce using rule 126 (normal_statement -> expression_statement .)
    TILDA           reduce using rule 126 (normal_statement -> expression_statement .)
    NOT             reduce using rule 126 (normal_statement -> expression_statement .)
    LPAREN          reduce using rule 126 (normal_statement -> expression_statement .)
    CHARACTER       reduce using rule 126 (normal_statement -> expression_statement .)
    STRING_CONST    reduce using rule 126 (normal_statement -> expression_statement .)
    BOOL_CONSTT     reduce using rule 126 (normal_statement -> expression_statement .)
    BOOL_CONSTF     reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_NULL       reduce using rule 126 (normal_statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 126 (normal_statement -> expression_statement .)
    INT_CONST       reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_DEF        reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_CLASS      reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_VAR        reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_VAL        reduce using rule 126 (normal_statement -> expression_statement .)
    BLOCK_END       reduce using rule 126 (normal_statement -> expression_statement .)
    KWRD_CASE       reduce using rule 126 (normal_statement -> expression_statement .)


state 33

    (73) int_float -> FLOAT_CONST .

    TIMES           reduce using rule 73 (int_float -> FLOAT_CONST .)
    DIVIDE          reduce using rule 73 (int_float -> FLOAT_CONST .)
    REMAINDER       reduce using rule 73 (int_float -> FLOAT_CONST .)
    PLUS            reduce using rule 73 (int_float -> FLOAT_CONST .)
    MINUS           reduce using rule 73 (int_float -> FLOAT_CONST .)
    LSHIFT          reduce using rule 73 (int_float -> FLOAT_CONST .)
    RSHIFT          reduce using rule 73 (int_float -> FLOAT_CONST .)
    GREATER         reduce using rule 73 (int_float -> FLOAT_CONST .)
    LESS            reduce using rule 73 (int_float -> FLOAT_CONST .)
    GEQ             reduce using rule 73 (int_float -> FLOAT_CONST .)
    LEQ             reduce using rule 73 (int_float -> FLOAT_CONST .)
    EQUAL           reduce using rule 73 (int_float -> FLOAT_CONST .)
    NEQUAL          reduce using rule 73 (int_float -> FLOAT_CONST .)
    AND_BITWISE     reduce using rule 73 (int_float -> FLOAT_CONST .)
    XOR             reduce using rule 73 (int_float -> FLOAT_CONST .)
    OR_BITWISE      reduce using rule 73 (int_float -> FLOAT_CONST .)
    AND             reduce using rule 73 (int_float -> FLOAT_CONST .)
    OR              reduce using rule 73 (int_float -> FLOAT_CONST .)
    STATE_END       reduce using rule 73 (int_float -> FLOAT_CONST .)
    COMMA           reduce using rule 73 (int_float -> FLOAT_CONST .)
    RPAREN          reduce using rule 73 (int_float -> FLOAT_CONST .)
    KWRD_MATCH      reduce using rule 73 (int_float -> FLOAT_CONST .)
    RBPAREN         reduce using rule 73 (int_float -> FLOAT_CONST .)
    KWRD_UNTIL      reduce using rule 73 (int_float -> FLOAT_CONST .)
    KWRD_TO         reduce using rule 73 (int_float -> FLOAT_CONST .)
    FUNTYPE         reduce using rule 73 (int_float -> FLOAT_CONST .)
    KWRD_BY         reduce using rule 73 (int_float -> FLOAT_CONST .)


state 34

    (86) valid_variable -> array_access .

    TIMES           reduce using rule 86 (valid_variable -> array_access .)
    DIVIDE          reduce using rule 86 (valid_variable -> array_access .)
    REMAINDER       reduce using rule 86 (valid_variable -> array_access .)
    PLUS            reduce using rule 86 (valid_variable -> array_access .)
    MINUS           reduce using rule 86 (valid_variable -> array_access .)
    LSHIFT          reduce using rule 86 (valid_variable -> array_access .)
    RSHIFT          reduce using rule 86 (valid_variable -> array_access .)
    GREATER         reduce using rule 86 (valid_variable -> array_access .)
    LESS            reduce using rule 86 (valid_variable -> array_access .)
    GEQ             reduce using rule 86 (valid_variable -> array_access .)
    LEQ             reduce using rule 86 (valid_variable -> array_access .)
    EQUAL           reduce using rule 86 (valid_variable -> array_access .)
    NEQUAL          reduce using rule 86 (valid_variable -> array_access .)
    AND_BITWISE     reduce using rule 86 (valid_variable -> array_access .)
    XOR             reduce using rule 86 (valid_variable -> array_access .)
    OR_BITWISE      reduce using rule 86 (valid_variable -> array_access .)
    AND             reduce using rule 86 (valid_variable -> array_access .)
    OR              reduce using rule 86 (valid_variable -> array_access .)
    KWRD_MATCH      reduce using rule 86 (valid_variable -> array_access .)
    STATE_END       reduce using rule 86 (valid_variable -> array_access .)
    RPAREN          reduce using rule 86 (valid_variable -> array_access .)
    COMMA           reduce using rule 86 (valid_variable -> array_access .)
    RBPAREN         reduce using rule 86 (valid_variable -> array_access .)
    KWRD_UNTIL      reduce using rule 86 (valid_variable -> array_access .)
    KWRD_TO         reduce using rule 86 (valid_variable -> array_access .)
    FUNTYPE         reduce using rule 86 (valid_variable -> array_access .)
    KWRD_BY         reduce using rule 86 (valid_variable -> array_access .)
    ASSIGN          reduce using rule 86 (valid_variable -> array_access .)
    TIMES_ASSIGN    reduce using rule 86 (valid_variable -> array_access .)
    DIVIDE_ASSIGN   reduce using rule 86 (valid_variable -> array_access .)
    REMAINDER_ASSIGN reduce using rule 86 (valid_variable -> array_access .)
    PLUS_ASSIGN     reduce using rule 86 (valid_variable -> array_access .)
    MINUS_ASSIGN    reduce using rule 86 (valid_variable -> array_access .)
    LSHIFT_ASSIGN   reduce using rule 86 (valid_variable -> array_access .)
    RSHIFT_ASSIGN   reduce using rule 86 (valid_variable -> array_access .)
    AND_ASSIGN      reduce using rule 86 (valid_variable -> array_access .)
    OR_ASSIGN       reduce using rule 86 (valid_variable -> array_access .)
    XOR_ASSIGN      reduce using rule 86 (valid_variable -> array_access .)


state 35

    (56) unary_expression -> MINUS . unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 84
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    unary_expression               shift and go to state 114
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 115
    array_access                   shift and go to state 34
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    literal                        shift and go to state 77
    method_invocation              shift and go to state 116
    cast_expression                shift and go to state 85
    simple_name                    shift and go to state 74
    name                           shift and go to state 117

state 36

    (69) literal -> STRING_CONST .

    TIMES           reduce using rule 69 (literal -> STRING_CONST .)
    DIVIDE          reduce using rule 69 (literal -> STRING_CONST .)
    REMAINDER       reduce using rule 69 (literal -> STRING_CONST .)
    PLUS            reduce using rule 69 (literal -> STRING_CONST .)
    MINUS           reduce using rule 69 (literal -> STRING_CONST .)
    LSHIFT          reduce using rule 69 (literal -> STRING_CONST .)
    RSHIFT          reduce using rule 69 (literal -> STRING_CONST .)
    GREATER         reduce using rule 69 (literal -> STRING_CONST .)
    LESS            reduce using rule 69 (literal -> STRING_CONST .)
    GEQ             reduce using rule 69 (literal -> STRING_CONST .)
    LEQ             reduce using rule 69 (literal -> STRING_CONST .)
    EQUAL           reduce using rule 69 (literal -> STRING_CONST .)
    NEQUAL          reduce using rule 69 (literal -> STRING_CONST .)
    AND_BITWISE     reduce using rule 69 (literal -> STRING_CONST .)
    XOR             reduce using rule 69 (literal -> STRING_CONST .)
    OR_BITWISE      reduce using rule 69 (literal -> STRING_CONST .)
    AND             reduce using rule 69 (literal -> STRING_CONST .)
    OR              reduce using rule 69 (literal -> STRING_CONST .)
    KWRD_MATCH      reduce using rule 69 (literal -> STRING_CONST .)
    STATE_END       reduce using rule 69 (literal -> STRING_CONST .)
    RPAREN          reduce using rule 69 (literal -> STRING_CONST .)
    COMMA           reduce using rule 69 (literal -> STRING_CONST .)
    RBPAREN         reduce using rule 69 (literal -> STRING_CONST .)
    KWRD_UNTIL      reduce using rule 69 (literal -> STRING_CONST .)
    KWRD_TO         reduce using rule 69 (literal -> STRING_CONST .)
    FUNTYPE         reduce using rule 69 (literal -> STRING_CONST .)
    KWRD_BY         reduce using rule 69 (literal -> STRING_CONST .)


state 37

    (71) literal -> BOOL_CONSTF .

    TIMES           reduce using rule 71 (literal -> BOOL_CONSTF .)
    DIVIDE          reduce using rule 71 (literal -> BOOL_CONSTF .)
    REMAINDER       reduce using rule 71 (literal -> BOOL_CONSTF .)
    PLUS            reduce using rule 71 (literal -> BOOL_CONSTF .)
    MINUS           reduce using rule 71 (literal -> BOOL_CONSTF .)
    LSHIFT          reduce using rule 71 (literal -> BOOL_CONSTF .)
    RSHIFT          reduce using rule 71 (literal -> BOOL_CONSTF .)
    GREATER         reduce using rule 71 (literal -> BOOL_CONSTF .)
    LESS            reduce using rule 71 (literal -> BOOL_CONSTF .)
    GEQ             reduce using rule 71 (literal -> BOOL_CONSTF .)
    LEQ             reduce using rule 71 (literal -> BOOL_CONSTF .)
    EQUAL           reduce using rule 71 (literal -> BOOL_CONSTF .)
    NEQUAL          reduce using rule 71 (literal -> BOOL_CONSTF .)
    AND_BITWISE     reduce using rule 71 (literal -> BOOL_CONSTF .)
    XOR             reduce using rule 71 (literal -> BOOL_CONSTF .)
    OR_BITWISE      reduce using rule 71 (literal -> BOOL_CONSTF .)
    AND             reduce using rule 71 (literal -> BOOL_CONSTF .)
    OR              reduce using rule 71 (literal -> BOOL_CONSTF .)
    KWRD_MATCH      reduce using rule 71 (literal -> BOOL_CONSTF .)
    STATE_END       reduce using rule 71 (literal -> BOOL_CONSTF .)
    RPAREN          reduce using rule 71 (literal -> BOOL_CONSTF .)
    COMMA           reduce using rule 71 (literal -> BOOL_CONSTF .)
    RBPAREN         reduce using rule 71 (literal -> BOOL_CONSTF .)
    KWRD_UNTIL      reduce using rule 71 (literal -> BOOL_CONSTF .)
    KWRD_TO         reduce using rule 71 (literal -> BOOL_CONSTF .)
    FUNTYPE         reduce using rule 71 (literal -> BOOL_CONSTF .)
    KWRD_BY         reduce using rule 71 (literal -> BOOL_CONSTF .)


state 38

    (89) block -> start_scope block_statements_opt . end_scope
    (91) end_scope -> . BLOCK_END

    BLOCK_END       shift and go to state 118

    end_scope                      shift and go to state 119

state 39

    (29) conditional_and_expression -> inclusive_or_expression .
    (32) inclusive_or_expression -> inclusive_or_expression . OR_BITWISE exclusive_or_expression

    AND             reduce using rule 29 (conditional_and_expression -> inclusive_or_expression .)
    OR              reduce using rule 29 (conditional_and_expression -> inclusive_or_expression .)
    KWRD_UNTIL      reduce using rule 29 (conditional_and_expression -> inclusive_or_expression .)
    KWRD_TO         reduce using rule 29 (conditional_and_expression -> inclusive_or_expression .)
    KWRD_MATCH      reduce using rule 29 (conditional_and_expression -> inclusive_or_expression .)
    KWRD_BY         reduce using rule 29 (conditional_and_expression -> inclusive_or_expression .)
    STATE_END       reduce using rule 29 (conditional_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 29 (conditional_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 29 (conditional_and_expression -> inclusive_or_expression .)
    RBPAREN         reduce using rule 29 (conditional_and_expression -> inclusive_or_expression .)
    FUNTYPE         reduce using rule 29 (conditional_and_expression -> inclusive_or_expression .)
    OR_BITWISE      shift and go to state 120


state 40

    (122) statement -> while_statement .

    KWRD_IF         reduce using rule 122 (statement -> while_statement .)
    KWRD_WHILE      reduce using rule 122 (statement -> while_statement .)
    KWRD_DO         reduce using rule 122 (statement -> while_statement .)
    KWRD_FOR        reduce using rule 122 (statement -> while_statement .)
    KWRD_OBJECT     reduce using rule 122 (statement -> while_statement .)
    STATE_END       reduce using rule 122 (statement -> while_statement .)
    KWRD_RETURN     reduce using rule 122 (statement -> while_statement .)
    KWRD_PROTECTED  reduce using rule 122 (statement -> while_statement .)
    KWRD_PRIVATE    reduce using rule 122 (statement -> while_statement .)
    BLOCK_BEGIN     reduce using rule 122 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 122 (statement -> while_statement .)
    PLUS            reduce using rule 122 (statement -> while_statement .)
    MINUS           reduce using rule 122 (statement -> while_statement .)
    TILDA           reduce using rule 122 (statement -> while_statement .)
    NOT             reduce using rule 122 (statement -> while_statement .)
    LPAREN          reduce using rule 122 (statement -> while_statement .)
    CHARACTER       reduce using rule 122 (statement -> while_statement .)
    STRING_CONST    reduce using rule 122 (statement -> while_statement .)
    BOOL_CONSTT     reduce using rule 122 (statement -> while_statement .)
    BOOL_CONSTF     reduce using rule 122 (statement -> while_statement .)
    KWRD_NULL       reduce using rule 122 (statement -> while_statement .)
    FLOAT_CONST     reduce using rule 122 (statement -> while_statement .)
    INT_CONST       reduce using rule 122 (statement -> while_statement .)
    KWRD_DEF        reduce using rule 122 (statement -> while_statement .)
    KWRD_CLASS      reduce using rule 122 (statement -> while_statement .)
    KWRD_VAR        reduce using rule 122 (statement -> while_statement .)
    KWRD_VAL        reduce using rule 122 (statement -> while_statement .)
    BLOCK_END       reduce using rule 122 (statement -> while_statement .)
    KWRD_CASE       reduce using rule 122 (statement -> while_statement .)


state 41

    (70) literal -> BOOL_CONSTT .

    TIMES           reduce using rule 70 (literal -> BOOL_CONSTT .)
    DIVIDE          reduce using rule 70 (literal -> BOOL_CONSTT .)
    REMAINDER       reduce using rule 70 (literal -> BOOL_CONSTT .)
    PLUS            reduce using rule 70 (literal -> BOOL_CONSTT .)
    MINUS           reduce using rule 70 (literal -> BOOL_CONSTT .)
    LSHIFT          reduce using rule 70 (literal -> BOOL_CONSTT .)
    RSHIFT          reduce using rule 70 (literal -> BOOL_CONSTT .)
    GREATER         reduce using rule 70 (literal -> BOOL_CONSTT .)
    LESS            reduce using rule 70 (literal -> BOOL_CONSTT .)
    GEQ             reduce using rule 70 (literal -> BOOL_CONSTT .)
    LEQ             reduce using rule 70 (literal -> BOOL_CONSTT .)
    EQUAL           reduce using rule 70 (literal -> BOOL_CONSTT .)
    NEQUAL          reduce using rule 70 (literal -> BOOL_CONSTT .)
    AND_BITWISE     reduce using rule 70 (literal -> BOOL_CONSTT .)
    XOR             reduce using rule 70 (literal -> BOOL_CONSTT .)
    OR_BITWISE      reduce using rule 70 (literal -> BOOL_CONSTT .)
    AND             reduce using rule 70 (literal -> BOOL_CONSTT .)
    OR              reduce using rule 70 (literal -> BOOL_CONSTT .)
    KWRD_MATCH      reduce using rule 70 (literal -> BOOL_CONSTT .)
    STATE_END       reduce using rule 70 (literal -> BOOL_CONSTT .)
    RPAREN          reduce using rule 70 (literal -> BOOL_CONSTT .)
    COMMA           reduce using rule 70 (literal -> BOOL_CONSTT .)
    RBPAREN         reduce using rule 70 (literal -> BOOL_CONSTT .)
    KWRD_UNTIL      reduce using rule 70 (literal -> BOOL_CONSTT .)
    KWRD_TO         reduce using rule 70 (literal -> BOOL_CONSTT .)
    FUNTYPE         reduce using rule 70 (literal -> BOOL_CONSTT .)
    KWRD_BY         reduce using rule 70 (literal -> BOOL_CONSTT .)


state 42

    (55) unary_expression -> PLUS . unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 84
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    unary_expression               shift and go to state 121
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 115
    array_access                   shift and go to state 34
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    literal                        shift and go to state 77
    method_invocation              shift and go to state 116
    cast_expression                shift and go to state 85
    simple_name                    shift and go to state 74
    name                           shift and go to state 117

state 43

    (130) expression_statement -> statement_expression . STATE_END

    STATE_END       shift and go to state 122


state 44

    (124) statement -> for_statement .

    KWRD_IF         reduce using rule 124 (statement -> for_statement .)
    KWRD_WHILE      reduce using rule 124 (statement -> for_statement .)
    KWRD_DO         reduce using rule 124 (statement -> for_statement .)
    KWRD_FOR        reduce using rule 124 (statement -> for_statement .)
    KWRD_OBJECT     reduce using rule 124 (statement -> for_statement .)
    STATE_END       reduce using rule 124 (statement -> for_statement .)
    KWRD_RETURN     reduce using rule 124 (statement -> for_statement .)
    KWRD_PROTECTED  reduce using rule 124 (statement -> for_statement .)
    KWRD_PRIVATE    reduce using rule 124 (statement -> for_statement .)
    BLOCK_BEGIN     reduce using rule 124 (statement -> for_statement .)
    IDENTIFIER      reduce using rule 124 (statement -> for_statement .)
    PLUS            reduce using rule 124 (statement -> for_statement .)
    MINUS           reduce using rule 124 (statement -> for_statement .)
    TILDA           reduce using rule 124 (statement -> for_statement .)
    NOT             reduce using rule 124 (statement -> for_statement .)
    LPAREN          reduce using rule 124 (statement -> for_statement .)
    CHARACTER       reduce using rule 124 (statement -> for_statement .)
    STRING_CONST    reduce using rule 124 (statement -> for_statement .)
    BOOL_CONSTT     reduce using rule 124 (statement -> for_statement .)
    BOOL_CONSTF     reduce using rule 124 (statement -> for_statement .)
    KWRD_NULL       reduce using rule 124 (statement -> for_statement .)
    FLOAT_CONST     reduce using rule 124 (statement -> for_statement .)
    INT_CONST       reduce using rule 124 (statement -> for_statement .)
    KWRD_DEF        reduce using rule 124 (statement -> for_statement .)
    KWRD_CLASS      reduce using rule 124 (statement -> for_statement .)
    KWRD_VAR        reduce using rule 124 (statement -> for_statement .)
    KWRD_VAL        reduce using rule 124 (statement -> for_statement .)
    BLOCK_END       reduce using rule 124 (statement -> for_statement .)
    KWRD_CASE       reduce using rule 124 (statement -> for_statement .)


state 45

    (96) block_statement -> local_variable_declaration_statement .

    KWRD_IF         reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    KWRD_WHILE      reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    KWRD_DO         reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    KWRD_FOR        reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    KWRD_OBJECT     reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    STATE_END       reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    KWRD_RETURN     reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    KWRD_PROTECTED  reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    KWRD_PRIVATE    reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    BLOCK_BEGIN     reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    IDENTIFIER      reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    PLUS            reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    MINUS           reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    TILDA           reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    NOT             reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    LPAREN          reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    CHARACTER       reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    STRING_CONST    reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    BOOL_CONSTT     reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    BOOL_CONSTF     reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    KWRD_NULL       reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    FLOAT_CONST     reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    INT_CONST       reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    KWRD_DEF        reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    KWRD_CLASS      reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    KWRD_VAR        reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    KWRD_VAL        reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    BLOCK_END       reduce using rule 96 (block_statement -> local_variable_declaration_statement .)
    KWRD_CASE       reduce using rule 96 (block_statement -> local_variable_declaration_statement .)


state 46

    (67) literal -> int_float .

    TIMES           reduce using rule 67 (literal -> int_float .)
    DIVIDE          reduce using rule 67 (literal -> int_float .)
    REMAINDER       reduce using rule 67 (literal -> int_float .)
    PLUS            reduce using rule 67 (literal -> int_float .)
    MINUS           reduce using rule 67 (literal -> int_float .)
    LSHIFT          reduce using rule 67 (literal -> int_float .)
    RSHIFT          reduce using rule 67 (literal -> int_float .)
    GREATER         reduce using rule 67 (literal -> int_float .)
    LESS            reduce using rule 67 (literal -> int_float .)
    GEQ             reduce using rule 67 (literal -> int_float .)
    LEQ             reduce using rule 67 (literal -> int_float .)
    EQUAL           reduce using rule 67 (literal -> int_float .)
    NEQUAL          reduce using rule 67 (literal -> int_float .)
    AND_BITWISE     reduce using rule 67 (literal -> int_float .)
    XOR             reduce using rule 67 (literal -> int_float .)
    OR_BITWISE      reduce using rule 67 (literal -> int_float .)
    AND             reduce using rule 67 (literal -> int_float .)
    OR              reduce using rule 67 (literal -> int_float .)
    KWRD_MATCH      reduce using rule 67 (literal -> int_float .)
    STATE_END       reduce using rule 67 (literal -> int_float .)
    RPAREN          reduce using rule 67 (literal -> int_float .)
    COMMA           reduce using rule 67 (literal -> int_float .)
    RBPAREN         reduce using rule 67 (literal -> int_float .)
    KWRD_UNTIL      reduce using rule 67 (literal -> int_float .)
    KWRD_TO         reduce using rule 67 (literal -> int_float .)
    FUNTYPE         reduce using rule 67 (literal -> int_float .)
    KWRD_BY         reduce using rule 67 (literal -> int_float .)


state 47

    (139) do_while_statement -> KWRD_DO . block KWRD_WHILE LPAREN expression RPAREN STATE_END
    (89) block -> . start_scope block_statements_opt end_scope
    (90) start_scope -> . BLOCK_BEGIN

    BLOCK_BEGIN     shift and go to state 16

    start_scope                    shift and go to state 17
    block                          shift and go to state 123

state 48

    (99) block_statement -> SingletonObject .

    KWRD_IF         reduce using rule 99 (block_statement -> SingletonObject .)
    KWRD_WHILE      reduce using rule 99 (block_statement -> SingletonObject .)
    KWRD_DO         reduce using rule 99 (block_statement -> SingletonObject .)
    KWRD_FOR        reduce using rule 99 (block_statement -> SingletonObject .)
    KWRD_OBJECT     reduce using rule 99 (block_statement -> SingletonObject .)
    STATE_END       reduce using rule 99 (block_statement -> SingletonObject .)
    KWRD_RETURN     reduce using rule 99 (block_statement -> SingletonObject .)
    KWRD_PROTECTED  reduce using rule 99 (block_statement -> SingletonObject .)
    KWRD_PRIVATE    reduce using rule 99 (block_statement -> SingletonObject .)
    BLOCK_BEGIN     reduce using rule 99 (block_statement -> SingletonObject .)
    IDENTIFIER      reduce using rule 99 (block_statement -> SingletonObject .)
    PLUS            reduce using rule 99 (block_statement -> SingletonObject .)
    MINUS           reduce using rule 99 (block_statement -> SingletonObject .)
    TILDA           reduce using rule 99 (block_statement -> SingletonObject .)
    NOT             reduce using rule 99 (block_statement -> SingletonObject .)
    LPAREN          reduce using rule 99 (block_statement -> SingletonObject .)
    CHARACTER       reduce using rule 99 (block_statement -> SingletonObject .)
    STRING_CONST    reduce using rule 99 (block_statement -> SingletonObject .)
    BOOL_CONSTT     reduce using rule 99 (block_statement -> SingletonObject .)
    BOOL_CONSTF     reduce using rule 99 (block_statement -> SingletonObject .)
    KWRD_NULL       reduce using rule 99 (block_statement -> SingletonObject .)
    FLOAT_CONST     reduce using rule 99 (block_statement -> SingletonObject .)
    INT_CONST       reduce using rule 99 (block_statement -> SingletonObject .)
    KWRD_DEF        reduce using rule 99 (block_statement -> SingletonObject .)
    KWRD_CLASS      reduce using rule 99 (block_statement -> SingletonObject .)
    KWRD_VAR        reduce using rule 99 (block_statement -> SingletonObject .)
    KWRD_VAL        reduce using rule 99 (block_statement -> SingletonObject .)
    BLOCK_END       reduce using rule 99 (block_statement -> SingletonObject .)
    KWRD_CASE       reduce using rule 99 (block_statement -> SingletonObject .)


state 49

    (178) method_header -> method_header_name . func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (179) func_args_start -> . LPAREN

    LPAREN          shift and go to state 20

    func_args_start                shift and go to state 124

state 50

    (161) return_statement -> KWRD_RETURN . expression_optional STATE_END
    (11) expression_optional -> . expression
    (12) expression_optional -> . empty
    (10) expression -> . assignment_expression
    (200) empty -> .
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    STATE_END       reduce using rule 200 (empty -> .)
    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    expression_optional            shift and go to state 125
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 101
    inclusive_or_expression        shift and go to state 39
    literal                        shift and go to state 77
    and_expression                 shift and go to state 92
    relational_expression          shift and go to state 79
    cast_expression                shift and go to state 85
    conditional_or_expression      shift and go to state 59
    empty                          shift and go to state 126
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    assignment                     shift and go to state 127
    multiplicative_expression      shift and go to state 61
    method_invocation              shift and go to state 116
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 128
    expression                     shift and go to state 129
    conditional_and_expression     shift and go to state 65

state 51

    (75) method_invocation -> name . LPAREN argument_list_opt RPAREN
    (85) valid_variable -> name .
    (76) array_access -> name . LBPAREN expression RBPAREN
    (84) qualified_name -> name . DOT simple_name

    LPAREN          shift and go to state 130
    ASSIGN          reduce using rule 85 (valid_variable -> name .)
    TIMES_ASSIGN    reduce using rule 85 (valid_variable -> name .)
    DIVIDE_ASSIGN   reduce using rule 85 (valid_variable -> name .)
    REMAINDER_ASSIGN reduce using rule 85 (valid_variable -> name .)
    PLUS_ASSIGN     reduce using rule 85 (valid_variable -> name .)
    MINUS_ASSIGN    reduce using rule 85 (valid_variable -> name .)
    LSHIFT_ASSIGN   reduce using rule 85 (valid_variable -> name .)
    RSHIFT_ASSIGN   reduce using rule 85 (valid_variable -> name .)
    AND_ASSIGN      reduce using rule 85 (valid_variable -> name .)
    OR_ASSIGN       reduce using rule 85 (valid_variable -> name .)
    XOR_ASSIGN      reduce using rule 85 (valid_variable -> name .)
    TIMES           reduce using rule 85 (valid_variable -> name .)
    DIVIDE          reduce using rule 85 (valid_variable -> name .)
    REMAINDER       reduce using rule 85 (valid_variable -> name .)
    PLUS            reduce using rule 85 (valid_variable -> name .)
    MINUS           reduce using rule 85 (valid_variable -> name .)
    LSHIFT          reduce using rule 85 (valid_variable -> name .)
    RSHIFT          reduce using rule 85 (valid_variable -> name .)
    GREATER         reduce using rule 85 (valid_variable -> name .)
    LESS            reduce using rule 85 (valid_variable -> name .)
    GEQ             reduce using rule 85 (valid_variable -> name .)
    LEQ             reduce using rule 85 (valid_variable -> name .)
    EQUAL           reduce using rule 85 (valid_variable -> name .)
    NEQUAL          reduce using rule 85 (valid_variable -> name .)
    AND_BITWISE     reduce using rule 85 (valid_variable -> name .)
    XOR             reduce using rule 85 (valid_variable -> name .)
    OR_BITWISE      reduce using rule 85 (valid_variable -> name .)
    AND             reduce using rule 85 (valid_variable -> name .)
    OR              reduce using rule 85 (valid_variable -> name .)
    KWRD_MATCH      reduce using rule 85 (valid_variable -> name .)
    LBPAREN         shift and go to state 131
    DOT             shift and go to state 132


state 52

    (138) while_statement -> KWRD_WHILE . LPAREN expression RPAREN block

    LPAREN          shift and go to state 133


state 53

    (160) empty_statement -> STATE_END .

    KWRD_IF         reduce using rule 160 (empty_statement -> STATE_END .)
    KWRD_WHILE      reduce using rule 160 (empty_statement -> STATE_END .)
    KWRD_DO         reduce using rule 160 (empty_statement -> STATE_END .)
    KWRD_FOR        reduce using rule 160 (empty_statement -> STATE_END .)
    KWRD_OBJECT     reduce using rule 160 (empty_statement -> STATE_END .)
    STATE_END       reduce using rule 160 (empty_statement -> STATE_END .)
    KWRD_RETURN     reduce using rule 160 (empty_statement -> STATE_END .)
    KWRD_PROTECTED  reduce using rule 160 (empty_statement -> STATE_END .)
    KWRD_PRIVATE    reduce using rule 160 (empty_statement -> STATE_END .)
    BLOCK_BEGIN     reduce using rule 160 (empty_statement -> STATE_END .)
    IDENTIFIER      reduce using rule 160 (empty_statement -> STATE_END .)
    PLUS            reduce using rule 160 (empty_statement -> STATE_END .)
    MINUS           reduce using rule 160 (empty_statement -> STATE_END .)
    TILDA           reduce using rule 160 (empty_statement -> STATE_END .)
    NOT             reduce using rule 160 (empty_statement -> STATE_END .)
    LPAREN          reduce using rule 160 (empty_statement -> STATE_END .)
    CHARACTER       reduce using rule 160 (empty_statement -> STATE_END .)
    STRING_CONST    reduce using rule 160 (empty_statement -> STATE_END .)
    BOOL_CONSTT     reduce using rule 160 (empty_statement -> STATE_END .)
    BOOL_CONSTF     reduce using rule 160 (empty_statement -> STATE_END .)
    KWRD_NULL       reduce using rule 160 (empty_statement -> STATE_END .)
    FLOAT_CONST     reduce using rule 160 (empty_statement -> STATE_END .)
    INT_CONST       reduce using rule 160 (empty_statement -> STATE_END .)
    KWRD_DEF        reduce using rule 160 (empty_statement -> STATE_END .)
    KWRD_CLASS      reduce using rule 160 (empty_statement -> STATE_END .)
    KWRD_VAR        reduce using rule 160 (empty_statement -> STATE_END .)
    KWRD_VAL        reduce using rule 160 (empty_statement -> STATE_END .)
    BLOCK_END       reduce using rule 160 (empty_statement -> STATE_END .)
    KWRD_CASE       reduce using rule 160 (empty_statement -> STATE_END .)


state 54

    (51) multiplicative_expression -> unary_expression .

    TIMES           reduce using rule 51 (multiplicative_expression -> unary_expression .)
    DIVIDE          reduce using rule 51 (multiplicative_expression -> unary_expression .)
    REMAINDER       reduce using rule 51 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 51 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 51 (multiplicative_expression -> unary_expression .)
    LSHIFT          reduce using rule 51 (multiplicative_expression -> unary_expression .)
    RSHIFT          reduce using rule 51 (multiplicative_expression -> unary_expression .)
    GREATER         reduce using rule 51 (multiplicative_expression -> unary_expression .)
    LESS            reduce using rule 51 (multiplicative_expression -> unary_expression .)
    GEQ             reduce using rule 51 (multiplicative_expression -> unary_expression .)
    LEQ             reduce using rule 51 (multiplicative_expression -> unary_expression .)
    EQUAL           reduce using rule 51 (multiplicative_expression -> unary_expression .)
    NEQUAL          reduce using rule 51 (multiplicative_expression -> unary_expression .)
    AND_BITWISE     reduce using rule 51 (multiplicative_expression -> unary_expression .)
    XOR             reduce using rule 51 (multiplicative_expression -> unary_expression .)
    OR_BITWISE      reduce using rule 51 (multiplicative_expression -> unary_expression .)
    AND             reduce using rule 51 (multiplicative_expression -> unary_expression .)
    OR              reduce using rule 51 (multiplicative_expression -> unary_expression .)
    STATE_END       reduce using rule 51 (multiplicative_expression -> unary_expression .)
    KWRD_MATCH      reduce using rule 51 (multiplicative_expression -> unary_expression .)
    RPAREN          reduce using rule 51 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 51 (multiplicative_expression -> unary_expression .)
    KWRD_UNTIL      reduce using rule 51 (multiplicative_expression -> unary_expression .)
    KWRD_TO         reduce using rule 51 (multiplicative_expression -> unary_expression .)
    RBPAREN         reduce using rule 51 (multiplicative_expression -> unary_expression .)
    FUNTYPE         reduce using rule 51 (multiplicative_expression -> unary_expression .)
    KWRD_BY         reduce using rule 51 (multiplicative_expression -> unary_expression .)


state 55

    (57) unary_expression -> unary_expression_not_plus_minus .

    TIMES           reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    DIVIDE          reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    REMAINDER       reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    PLUS            reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    MINUS           reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    LSHIFT          reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    RSHIFT          reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    GREATER         reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    LESS            reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    GEQ             reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    LEQ             reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    EQUAL           reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    NEQUAL          reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    AND_BITWISE     reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    XOR             reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    OR_BITWISE      reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    AND             reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    OR              reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    KWRD_MATCH      reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    RPAREN          reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    STATE_END       reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    COMMA           reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    RBPAREN         reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    KWRD_UNTIL      reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    KWRD_TO         reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    FUNTYPE         reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)
    KWRD_BY         reduce using rule 57 (unary_expression -> unary_expression_not_plus_minus .)


state 56

    (140) for_statement -> KWRD_FOR . LPAREN for_logic RPAREN block

    LPAREN          shift and go to state 134


state 57

    (129) normal_statement -> switch_statement .

    KWRD_IF         reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_WHILE      reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_DO         reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_FOR        reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_OBJECT     reduce using rule 129 (normal_statement -> switch_statement .)
    STATE_END       reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_RETURN     reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_PROTECTED  reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_PRIVATE    reduce using rule 129 (normal_statement -> switch_statement .)
    BLOCK_BEGIN     reduce using rule 129 (normal_statement -> switch_statement .)
    IDENTIFIER      reduce using rule 129 (normal_statement -> switch_statement .)
    PLUS            reduce using rule 129 (normal_statement -> switch_statement .)
    MINUS           reduce using rule 129 (normal_statement -> switch_statement .)
    TILDA           reduce using rule 129 (normal_statement -> switch_statement .)
    NOT             reduce using rule 129 (normal_statement -> switch_statement .)
    LPAREN          reduce using rule 129 (normal_statement -> switch_statement .)
    CHARACTER       reduce using rule 129 (normal_statement -> switch_statement .)
    STRING_CONST    reduce using rule 129 (normal_statement -> switch_statement .)
    BOOL_CONSTT     reduce using rule 129 (normal_statement -> switch_statement .)
    BOOL_CONSTF     reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_NULL       reduce using rule 129 (normal_statement -> switch_statement .)
    FLOAT_CONST     reduce using rule 129 (normal_statement -> switch_statement .)
    INT_CONST       reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_DEF        reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_CLASS      reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_VAR        reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_VAL        reduce using rule 129 (normal_statement -> switch_statement .)
    BLOCK_END       reduce using rule 129 (normal_statement -> switch_statement .)
    KWRD_CASE       reduce using rule 129 (normal_statement -> switch_statement .)


state 58

    (45) shift_expression -> additive_expression .
    (49) additive_expression -> additive_expression . PLUS multiplicative_expression
    (50) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 45 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 45 (shift_expression -> additive_expression .)
    GREATER         reduce using rule 45 (shift_expression -> additive_expression .)
    LESS            reduce using rule 45 (shift_expression -> additive_expression .)
    GEQ             reduce using rule 45 (shift_expression -> additive_expression .)
    LEQ             reduce using rule 45 (shift_expression -> additive_expression .)
    EQUAL           reduce using rule 45 (shift_expression -> additive_expression .)
    NEQUAL          reduce using rule 45 (shift_expression -> additive_expression .)
    AND_BITWISE     reduce using rule 45 (shift_expression -> additive_expression .)
    XOR             reduce using rule 45 (shift_expression -> additive_expression .)
    OR_BITWISE      reduce using rule 45 (shift_expression -> additive_expression .)
    AND             reduce using rule 45 (shift_expression -> additive_expression .)
    OR              reduce using rule 45 (shift_expression -> additive_expression .)
    STATE_END       reduce using rule 45 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 45 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 45 (shift_expression -> additive_expression .)
    KWRD_MATCH      reduce using rule 45 (shift_expression -> additive_expression .)
    RBPAREN         reduce using rule 45 (shift_expression -> additive_expression .)
    KWRD_UNTIL      reduce using rule 45 (shift_expression -> additive_expression .)
    KWRD_TO         reduce using rule 45 (shift_expression -> additive_expression .)
    FUNTYPE         reduce using rule 45 (shift_expression -> additive_expression .)
    KWRD_BY         reduce using rule 45 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 135
    MINUS           shift and go to state 136


state 59

    (14) assignment_expression -> conditional_or_expression .
    (28) conditional_or_expression -> conditional_or_expression . OR conditional_and_expression

    COMMA           reduce using rule 14 (assignment_expression -> conditional_or_expression .)
    RPAREN          reduce using rule 14 (assignment_expression -> conditional_or_expression .)
    KWRD_MATCH      reduce using rule 14 (assignment_expression -> conditional_or_expression .)
    RBPAREN         reduce using rule 14 (assignment_expression -> conditional_or_expression .)
    FUNTYPE         reduce using rule 14 (assignment_expression -> conditional_or_expression .)
    STATE_END       reduce using rule 14 (assignment_expression -> conditional_or_expression .)
    KWRD_UNTIL      reduce using rule 14 (assignment_expression -> conditional_or_expression .)
    KWRD_TO         reduce using rule 14 (assignment_expression -> conditional_or_expression .)
    KWRD_BY         reduce using rule 14 (assignment_expression -> conditional_or_expression .)
    OR              shift and go to state 137


state 60

    (123) statement -> do_while_statement .

    KWRD_IF         reduce using rule 123 (statement -> do_while_statement .)
    KWRD_WHILE      reduce using rule 123 (statement -> do_while_statement .)
    KWRD_DO         reduce using rule 123 (statement -> do_while_statement .)
    KWRD_FOR        reduce using rule 123 (statement -> do_while_statement .)
    KWRD_OBJECT     reduce using rule 123 (statement -> do_while_statement .)
    STATE_END       reduce using rule 123 (statement -> do_while_statement .)
    KWRD_RETURN     reduce using rule 123 (statement -> do_while_statement .)
    KWRD_PROTECTED  reduce using rule 123 (statement -> do_while_statement .)
    KWRD_PRIVATE    reduce using rule 123 (statement -> do_while_statement .)
    BLOCK_BEGIN     reduce using rule 123 (statement -> do_while_statement .)
    IDENTIFIER      reduce using rule 123 (statement -> do_while_statement .)
    PLUS            reduce using rule 123 (statement -> do_while_statement .)
    MINUS           reduce using rule 123 (statement -> do_while_statement .)
    TILDA           reduce using rule 123 (statement -> do_while_statement .)
    NOT             reduce using rule 123 (statement -> do_while_statement .)
    LPAREN          reduce using rule 123 (statement -> do_while_statement .)
    CHARACTER       reduce using rule 123 (statement -> do_while_statement .)
    STRING_CONST    reduce using rule 123 (statement -> do_while_statement .)
    BOOL_CONSTT     reduce using rule 123 (statement -> do_while_statement .)
    BOOL_CONSTF     reduce using rule 123 (statement -> do_while_statement .)
    KWRD_NULL       reduce using rule 123 (statement -> do_while_statement .)
    FLOAT_CONST     reduce using rule 123 (statement -> do_while_statement .)
    INT_CONST       reduce using rule 123 (statement -> do_while_statement .)
    KWRD_DEF        reduce using rule 123 (statement -> do_while_statement .)
    KWRD_CLASS      reduce using rule 123 (statement -> do_while_statement .)
    KWRD_VAR        reduce using rule 123 (statement -> do_while_statement .)
    KWRD_VAL        reduce using rule 123 (statement -> do_while_statement .)
    BLOCK_END       reduce using rule 123 (statement -> do_while_statement .)
    KWRD_CASE       reduce using rule 123 (statement -> do_while_statement .)


state 61

    (48) additive_expression -> multiplicative_expression .
    (52) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (53) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (54) multiplicative_expression -> multiplicative_expression . REMAINDER unary_expression

    PLUS            reduce using rule 48 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 48 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 48 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 48 (additive_expression -> multiplicative_expression .)
    GREATER         reduce using rule 48 (additive_expression -> multiplicative_expression .)
    LESS            reduce using rule 48 (additive_expression -> multiplicative_expression .)
    GEQ             reduce using rule 48 (additive_expression -> multiplicative_expression .)
    LEQ             reduce using rule 48 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 48 (additive_expression -> multiplicative_expression .)
    NEQUAL          reduce using rule 48 (additive_expression -> multiplicative_expression .)
    AND_BITWISE     reduce using rule 48 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 48 (additive_expression -> multiplicative_expression .)
    OR_BITWISE      reduce using rule 48 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 48 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 48 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 48 (additive_expression -> multiplicative_expression .)
    STATE_END       reduce using rule 48 (additive_expression -> multiplicative_expression .)
    KWRD_MATCH      reduce using rule 48 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 48 (additive_expression -> multiplicative_expression .)
    RBPAREN         reduce using rule 48 (additive_expression -> multiplicative_expression .)
    KWRD_UNTIL      reduce using rule 48 (additive_expression -> multiplicative_expression .)
    KWRD_TO         reduce using rule 48 (additive_expression -> multiplicative_expression .)
    FUNTYPE         reduce using rule 48 (additive_expression -> multiplicative_expression .)
    KWRD_BY         reduce using rule 48 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 139
    REMAINDER       shift and go to state 138


state 62

    (40) relational_expression -> shift_expression .
    (46) shift_expression -> shift_expression . LSHIFT additive_expression
    (47) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 40 (relational_expression -> shift_expression .)
    LESS            reduce using rule 40 (relational_expression -> shift_expression .)
    GEQ             reduce using rule 40 (relational_expression -> shift_expression .)
    LEQ             reduce using rule 40 (relational_expression -> shift_expression .)
    EQUAL           reduce using rule 40 (relational_expression -> shift_expression .)
    NEQUAL          reduce using rule 40 (relational_expression -> shift_expression .)
    AND_BITWISE     reduce using rule 40 (relational_expression -> shift_expression .)
    XOR             reduce using rule 40 (relational_expression -> shift_expression .)
    OR_BITWISE      reduce using rule 40 (relational_expression -> shift_expression .)
    AND             reduce using rule 40 (relational_expression -> shift_expression .)
    OR              reduce using rule 40 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 40 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 40 (relational_expression -> shift_expression .)
    KWRD_MATCH      reduce using rule 40 (relational_expression -> shift_expression .)
    STATE_END       reduce using rule 40 (relational_expression -> shift_expression .)
    RBPAREN         reduce using rule 40 (relational_expression -> shift_expression .)
    KWRD_UNTIL      reduce using rule 40 (relational_expression -> shift_expression .)
    KWRD_TO         reduce using rule 40 (relational_expression -> shift_expression .)
    FUNTYPE         reduce using rule 40 (relational_expression -> shift_expression .)
    KWRD_BY         reduce using rule 40 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 142
    RSHIFT          shift and go to state 141


state 63

    (133) if_then_statement -> KWRD_IF . LPAREN expression RPAREN block
    (134) if_then_else_statement -> KWRD_IF . LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block

    LPAREN          shift and go to state 143


state 64

    (62) base_variable_set -> variable_literal .

    TIMES           reduce using rule 62 (base_variable_set -> variable_literal .)
    DIVIDE          reduce using rule 62 (base_variable_set -> variable_literal .)
    REMAINDER       reduce using rule 62 (base_variable_set -> variable_literal .)
    PLUS            reduce using rule 62 (base_variable_set -> variable_literal .)
    MINUS           reduce using rule 62 (base_variable_set -> variable_literal .)
    LSHIFT          reduce using rule 62 (base_variable_set -> variable_literal .)
    RSHIFT          reduce using rule 62 (base_variable_set -> variable_literal .)
    GREATER         reduce using rule 62 (base_variable_set -> variable_literal .)
    LESS            reduce using rule 62 (base_variable_set -> variable_literal .)
    GEQ             reduce using rule 62 (base_variable_set -> variable_literal .)
    LEQ             reduce using rule 62 (base_variable_set -> variable_literal .)
    EQUAL           reduce using rule 62 (base_variable_set -> variable_literal .)
    NEQUAL          reduce using rule 62 (base_variable_set -> variable_literal .)
    AND_BITWISE     reduce using rule 62 (base_variable_set -> variable_literal .)
    XOR             reduce using rule 62 (base_variable_set -> variable_literal .)
    OR_BITWISE      reduce using rule 62 (base_variable_set -> variable_literal .)
    AND             reduce using rule 62 (base_variable_set -> variable_literal .)
    OR              reduce using rule 62 (base_variable_set -> variable_literal .)
    COMMA           reduce using rule 62 (base_variable_set -> variable_literal .)
    RPAREN          reduce using rule 62 (base_variable_set -> variable_literal .)
    KWRD_MATCH      reduce using rule 62 (base_variable_set -> variable_literal .)
    STATE_END       reduce using rule 62 (base_variable_set -> variable_literal .)
    RBPAREN         reduce using rule 62 (base_variable_set -> variable_literal .)
    KWRD_UNTIL      reduce using rule 62 (base_variable_set -> variable_literal .)
    KWRD_TO         reduce using rule 62 (base_variable_set -> variable_literal .)
    FUNTYPE         reduce using rule 62 (base_variable_set -> variable_literal .)
    KWRD_BY         reduce using rule 62 (base_variable_set -> variable_literal .)


state 65

    (27) conditional_or_expression -> conditional_and_expression .
    (30) conditional_and_expression -> conditional_and_expression . AND inclusive_or_expression

    OR              reduce using rule 27 (conditional_or_expression -> conditional_and_expression .)
    RPAREN          reduce using rule 27 (conditional_or_expression -> conditional_and_expression .)
    FUNTYPE         reduce using rule 27 (conditional_or_expression -> conditional_and_expression .)
    COMMA           reduce using rule 27 (conditional_or_expression -> conditional_and_expression .)
    KWRD_MATCH      reduce using rule 27 (conditional_or_expression -> conditional_and_expression .)
    RBPAREN         reduce using rule 27 (conditional_or_expression -> conditional_and_expression .)
    KWRD_UNTIL      reduce using rule 27 (conditional_or_expression -> conditional_and_expression .)
    KWRD_TO         reduce using rule 27 (conditional_or_expression -> conditional_and_expression .)
    STATE_END       reduce using rule 27 (conditional_or_expression -> conditional_and_expression .)
    KWRD_BY         reduce using rule 27 (conditional_or_expression -> conditional_and_expression .)
    AND             shift and go to state 144


state 66

    (60) unary_expression_not_plus_minus -> NOT . unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 84
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    unary_expression               shift and go to state 145
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 115
    array_access                   shift and go to state 34
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    literal                        shift and go to state 77
    method_invocation              shift and go to state 116
    cast_expression                shift and go to state 85
    simple_name                    shift and go to state 74
    name                           shift and go to state 117

state 67

    (149) switch_statement -> expression . KWRD_MATCH switch_block

    KWRD_MATCH      shift and go to state 146


state 68

    (125) normal_statement -> block .

    KWRD_IF         reduce using rule 125 (normal_statement -> block .)
    KWRD_WHILE      reduce using rule 125 (normal_statement -> block .)
    KWRD_DO         reduce using rule 125 (normal_statement -> block .)
    KWRD_FOR        reduce using rule 125 (normal_statement -> block .)
    KWRD_OBJECT     reduce using rule 125 (normal_statement -> block .)
    STATE_END       reduce using rule 125 (normal_statement -> block .)
    KWRD_RETURN     reduce using rule 125 (normal_statement -> block .)
    KWRD_PROTECTED  reduce using rule 125 (normal_statement -> block .)
    KWRD_PRIVATE    reduce using rule 125 (normal_statement -> block .)
    BLOCK_BEGIN     reduce using rule 125 (normal_statement -> block .)
    IDENTIFIER      reduce using rule 125 (normal_statement -> block .)
    PLUS            reduce using rule 125 (normal_statement -> block .)
    MINUS           reduce using rule 125 (normal_statement -> block .)
    TILDA           reduce using rule 125 (normal_statement -> block .)
    NOT             reduce using rule 125 (normal_statement -> block .)
    LPAREN          reduce using rule 125 (normal_statement -> block .)
    CHARACTER       reduce using rule 125 (normal_statement -> block .)
    STRING_CONST    reduce using rule 125 (normal_statement -> block .)
    BOOL_CONSTT     reduce using rule 125 (normal_statement -> block .)
    BOOL_CONSTF     reduce using rule 125 (normal_statement -> block .)
    KWRD_NULL       reduce using rule 125 (normal_statement -> block .)
    FLOAT_CONST     reduce using rule 125 (normal_statement -> block .)
    INT_CONST       reduce using rule 125 (normal_statement -> block .)
    KWRD_DEF        reduce using rule 125 (normal_statement -> block .)
    KWRD_CLASS      reduce using rule 125 (normal_statement -> block .)
    KWRD_VAR        reduce using rule 125 (normal_statement -> block .)
    KWRD_VAL        reduce using rule 125 (normal_statement -> block .)
    BLOCK_END       reduce using rule 125 (normal_statement -> block .)
    KWRD_CASE       reduce using rule 125 (normal_statement -> block .)


state 69

    (121) statement -> if_then_else_statement .

    KWRD_IF         reduce using rule 121 (statement -> if_then_else_statement .)
    KWRD_WHILE      reduce using rule 121 (statement -> if_then_else_statement .)
    KWRD_DO         reduce using rule 121 (statement -> if_then_else_statement .)
    KWRD_FOR        reduce using rule 121 (statement -> if_then_else_statement .)
    KWRD_OBJECT     reduce using rule 121 (statement -> if_then_else_statement .)
    STATE_END       reduce using rule 121 (statement -> if_then_else_statement .)
    KWRD_RETURN     reduce using rule 121 (statement -> if_then_else_statement .)
    KWRD_PROTECTED  reduce using rule 121 (statement -> if_then_else_statement .)
    KWRD_PRIVATE    reduce using rule 121 (statement -> if_then_else_statement .)
    BLOCK_BEGIN     reduce using rule 121 (statement -> if_then_else_statement .)
    IDENTIFIER      reduce using rule 121 (statement -> if_then_else_statement .)
    PLUS            reduce using rule 121 (statement -> if_then_else_statement .)
    MINUS           reduce using rule 121 (statement -> if_then_else_statement .)
    TILDA           reduce using rule 121 (statement -> if_then_else_statement .)
    NOT             reduce using rule 121 (statement -> if_then_else_statement .)
    LPAREN          reduce using rule 121 (statement -> if_then_else_statement .)
    CHARACTER       reduce using rule 121 (statement -> if_then_else_statement .)
    STRING_CONST    reduce using rule 121 (statement -> if_then_else_statement .)
    BOOL_CONSTT     reduce using rule 121 (statement -> if_then_else_statement .)
    BOOL_CONSTF     reduce using rule 121 (statement -> if_then_else_statement .)
    KWRD_NULL       reduce using rule 121 (statement -> if_then_else_statement .)
    FLOAT_CONST     reduce using rule 121 (statement -> if_then_else_statement .)
    INT_CONST       reduce using rule 121 (statement -> if_then_else_statement .)
    KWRD_DEF        reduce using rule 121 (statement -> if_then_else_statement .)
    KWRD_CLASS      reduce using rule 121 (statement -> if_then_else_statement .)
    KWRD_VAR        reduce using rule 121 (statement -> if_then_else_statement .)
    KWRD_VAL        reduce using rule 121 (statement -> if_then_else_statement .)
    BLOCK_END       reduce using rule 121 (statement -> if_then_else_statement .)
    KWRD_CASE       reduce using rule 121 (statement -> if_then_else_statement .)


state 70

    (100) block_statement -> method_declaration .

    KWRD_IF         reduce using rule 100 (block_statement -> method_declaration .)
    KWRD_WHILE      reduce using rule 100 (block_statement -> method_declaration .)
    KWRD_DO         reduce using rule 100 (block_statement -> method_declaration .)
    KWRD_FOR        reduce using rule 100 (block_statement -> method_declaration .)
    KWRD_OBJECT     reduce using rule 100 (block_statement -> method_declaration .)
    STATE_END       reduce using rule 100 (block_statement -> method_declaration .)
    KWRD_RETURN     reduce using rule 100 (block_statement -> method_declaration .)
    KWRD_PROTECTED  reduce using rule 100 (block_statement -> method_declaration .)
    KWRD_PRIVATE    reduce using rule 100 (block_statement -> method_declaration .)
    BLOCK_BEGIN     reduce using rule 100 (block_statement -> method_declaration .)
    IDENTIFIER      reduce using rule 100 (block_statement -> method_declaration .)
    PLUS            reduce using rule 100 (block_statement -> method_declaration .)
    MINUS           reduce using rule 100 (block_statement -> method_declaration .)
    TILDA           reduce using rule 100 (block_statement -> method_declaration .)
    NOT             reduce using rule 100 (block_statement -> method_declaration .)
    LPAREN          reduce using rule 100 (block_statement -> method_declaration .)
    CHARACTER       reduce using rule 100 (block_statement -> method_declaration .)
    STRING_CONST    reduce using rule 100 (block_statement -> method_declaration .)
    BOOL_CONSTT     reduce using rule 100 (block_statement -> method_declaration .)
    BOOL_CONSTF     reduce using rule 100 (block_statement -> method_declaration .)
    KWRD_NULL       reduce using rule 100 (block_statement -> method_declaration .)
    FLOAT_CONST     reduce using rule 100 (block_statement -> method_declaration .)
    INT_CONST       reduce using rule 100 (block_statement -> method_declaration .)
    KWRD_DEF        reduce using rule 100 (block_statement -> method_declaration .)
    KWRD_CLASS      reduce using rule 100 (block_statement -> method_declaration .)
    KWRD_VAR        reduce using rule 100 (block_statement -> method_declaration .)
    KWRD_VAL        reduce using rule 100 (block_statement -> method_declaration .)
    BLOCK_END       reduce using rule 100 (block_statement -> method_declaration .)
    KWRD_CASE       reduce using rule 100 (block_statement -> method_declaration .)


state 71

    (31) inclusive_or_expression -> exclusive_or_expression .
    (34) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR_BITWISE      reduce using rule 31 (inclusive_or_expression -> exclusive_or_expression .)
    AND             reduce using rule 31 (inclusive_or_expression -> exclusive_or_expression .)
    OR              reduce using rule 31 (inclusive_or_expression -> exclusive_or_expression .)
    KWRD_MATCH      reduce using rule 31 (inclusive_or_expression -> exclusive_or_expression .)
    RBPAREN         reduce using rule 31 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 31 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 31 (inclusive_or_expression -> exclusive_or_expression .)
    STATE_END       reduce using rule 31 (inclusive_or_expression -> exclusive_or_expression .)
    KWRD_UNTIL      reduce using rule 31 (inclusive_or_expression -> exclusive_or_expression .)
    KWRD_TO         reduce using rule 31 (inclusive_or_expression -> exclusive_or_expression .)
    FUNTYPE         reduce using rule 31 (inclusive_or_expression -> exclusive_or_expression .)
    KWRD_BY         reduce using rule 31 (inclusive_or_expression -> exclusive_or_expression .)
    XOR             shift and go to state 147


state 72

    (88) variable_literal -> primary .

    TIMES           reduce using rule 88 (variable_literal -> primary .)
    DIVIDE          reduce using rule 88 (variable_literal -> primary .)
    REMAINDER       reduce using rule 88 (variable_literal -> primary .)
    PLUS            reduce using rule 88 (variable_literal -> primary .)
    MINUS           reduce using rule 88 (variable_literal -> primary .)
    LSHIFT          reduce using rule 88 (variable_literal -> primary .)
    RSHIFT          reduce using rule 88 (variable_literal -> primary .)
    GREATER         reduce using rule 88 (variable_literal -> primary .)
    LESS            reduce using rule 88 (variable_literal -> primary .)
    GEQ             reduce using rule 88 (variable_literal -> primary .)
    LEQ             reduce using rule 88 (variable_literal -> primary .)
    EQUAL           reduce using rule 88 (variable_literal -> primary .)
    NEQUAL          reduce using rule 88 (variable_literal -> primary .)
    AND_BITWISE     reduce using rule 88 (variable_literal -> primary .)
    XOR             reduce using rule 88 (variable_literal -> primary .)
    OR_BITWISE      reduce using rule 88 (variable_literal -> primary .)
    AND             reduce using rule 88 (variable_literal -> primary .)
    OR              reduce using rule 88 (variable_literal -> primary .)
    RBPAREN         reduce using rule 88 (variable_literal -> primary .)
    COMMA           reduce using rule 88 (variable_literal -> primary .)
    RPAREN          reduce using rule 88 (variable_literal -> primary .)
    KWRD_MATCH      reduce using rule 88 (variable_literal -> primary .)
    STATE_END       reduce using rule 88 (variable_literal -> primary .)
    KWRD_UNTIL      reduce using rule 88 (variable_literal -> primary .)
    KWRD_TO         reduce using rule 88 (variable_literal -> primary .)
    FUNTYPE         reduce using rule 88 (variable_literal -> primary .)
    KWRD_BY         reduce using rule 88 (variable_literal -> primary .)


state 73

    (120) statement -> if_then_statement .

    KWRD_IF         reduce using rule 120 (statement -> if_then_statement .)
    KWRD_WHILE      reduce using rule 120 (statement -> if_then_statement .)
    KWRD_DO         reduce using rule 120 (statement -> if_then_statement .)
    KWRD_FOR        reduce using rule 120 (statement -> if_then_statement .)
    KWRD_OBJECT     reduce using rule 120 (statement -> if_then_statement .)
    STATE_END       reduce using rule 120 (statement -> if_then_statement .)
    KWRD_RETURN     reduce using rule 120 (statement -> if_then_statement .)
    KWRD_PROTECTED  reduce using rule 120 (statement -> if_then_statement .)
    KWRD_PRIVATE    reduce using rule 120 (statement -> if_then_statement .)
    BLOCK_BEGIN     reduce using rule 120 (statement -> if_then_statement .)
    IDENTIFIER      reduce using rule 120 (statement -> if_then_statement .)
    PLUS            reduce using rule 120 (statement -> if_then_statement .)
    MINUS           reduce using rule 120 (statement -> if_then_statement .)
    TILDA           reduce using rule 120 (statement -> if_then_statement .)
    NOT             reduce using rule 120 (statement -> if_then_statement .)
    LPAREN          reduce using rule 120 (statement -> if_then_statement .)
    CHARACTER       reduce using rule 120 (statement -> if_then_statement .)
    STRING_CONST    reduce using rule 120 (statement -> if_then_statement .)
    BOOL_CONSTT     reduce using rule 120 (statement -> if_then_statement .)
    BOOL_CONSTF     reduce using rule 120 (statement -> if_then_statement .)
    KWRD_NULL       reduce using rule 120 (statement -> if_then_statement .)
    FLOAT_CONST     reduce using rule 120 (statement -> if_then_statement .)
    INT_CONST       reduce using rule 120 (statement -> if_then_statement .)
    KWRD_DEF        reduce using rule 120 (statement -> if_then_statement .)
    KWRD_CLASS      reduce using rule 120 (statement -> if_then_statement .)
    KWRD_VAR        reduce using rule 120 (statement -> if_then_statement .)
    KWRD_VAL        reduce using rule 120 (statement -> if_then_statement .)
    BLOCK_END       reduce using rule 120 (statement -> if_then_statement .)
    KWRD_CASE       reduce using rule 120 (statement -> if_then_statement .)


state 74

    (81) name -> simple_name .

    LBPAREN         reduce using rule 81 (name -> simple_name .)
    LPAREN          reduce using rule 81 (name -> simple_name .)
    DOT             reduce using rule 81 (name -> simple_name .)
    TIMES           reduce using rule 81 (name -> simple_name .)
    DIVIDE          reduce using rule 81 (name -> simple_name .)
    REMAINDER       reduce using rule 81 (name -> simple_name .)
    PLUS            reduce using rule 81 (name -> simple_name .)
    MINUS           reduce using rule 81 (name -> simple_name .)
    LSHIFT          reduce using rule 81 (name -> simple_name .)
    RSHIFT          reduce using rule 81 (name -> simple_name .)
    GREATER         reduce using rule 81 (name -> simple_name .)
    LESS            reduce using rule 81 (name -> simple_name .)
    GEQ             reduce using rule 81 (name -> simple_name .)
    LEQ             reduce using rule 81 (name -> simple_name .)
    EQUAL           reduce using rule 81 (name -> simple_name .)
    NEQUAL          reduce using rule 81 (name -> simple_name .)
    AND_BITWISE     reduce using rule 81 (name -> simple_name .)
    XOR             reduce using rule 81 (name -> simple_name .)
    OR_BITWISE      reduce using rule 81 (name -> simple_name .)
    AND             reduce using rule 81 (name -> simple_name .)
    OR              reduce using rule 81 (name -> simple_name .)
    KWRD_MATCH      reduce using rule 81 (name -> simple_name .)
    STATE_END       reduce using rule 81 (name -> simple_name .)
    RPAREN          reduce using rule 81 (name -> simple_name .)
    COMMA           reduce using rule 81 (name -> simple_name .)
    RBPAREN         reduce using rule 81 (name -> simple_name .)
    KWRD_UNTIL      reduce using rule 81 (name -> simple_name .)
    KWRD_TO         reduce using rule 81 (name -> simple_name .)
    FUNTYPE         reduce using rule 81 (name -> simple_name .)
    KWRD_BY         reduce using rule 81 (name -> simple_name .)
    ASSIGN          reduce using rule 81 (name -> simple_name .)
    TIMES_ASSIGN    reduce using rule 81 (name -> simple_name .)
    DIVIDE_ASSIGN   reduce using rule 81 (name -> simple_name .)
    REMAINDER_ASSIGN reduce using rule 81 (name -> simple_name .)
    PLUS_ASSIGN     reduce using rule 81 (name -> simple_name .)
    MINUS_ASSIGN    reduce using rule 81 (name -> simple_name .)
    LSHIFT_ASSIGN   reduce using rule 81 (name -> simple_name .)
    RSHIFT_ASSIGN   reduce using rule 81 (name -> simple_name .)
    AND_ASSIGN      reduce using rule 81 (name -> simple_name .)
    OR_ASSIGN       reduce using rule 81 (name -> simple_name .)
    XOR_ASSIGN      reduce using rule 81 (name -> simple_name .)


state 75

    (74) int_float -> INT_CONST .

    TIMES           reduce using rule 74 (int_float -> INT_CONST .)
    DIVIDE          reduce using rule 74 (int_float -> INT_CONST .)
    REMAINDER       reduce using rule 74 (int_float -> INT_CONST .)
    PLUS            reduce using rule 74 (int_float -> INT_CONST .)
    MINUS           reduce using rule 74 (int_float -> INT_CONST .)
    LSHIFT          reduce using rule 74 (int_float -> INT_CONST .)
    RSHIFT          reduce using rule 74 (int_float -> INT_CONST .)
    GREATER         reduce using rule 74 (int_float -> INT_CONST .)
    LESS            reduce using rule 74 (int_float -> INT_CONST .)
    GEQ             reduce using rule 74 (int_float -> INT_CONST .)
    LEQ             reduce using rule 74 (int_float -> INT_CONST .)
    EQUAL           reduce using rule 74 (int_float -> INT_CONST .)
    NEQUAL          reduce using rule 74 (int_float -> INT_CONST .)
    AND_BITWISE     reduce using rule 74 (int_float -> INT_CONST .)
    XOR             reduce using rule 74 (int_float -> INT_CONST .)
    OR_BITWISE      reduce using rule 74 (int_float -> INT_CONST .)
    AND             reduce using rule 74 (int_float -> INT_CONST .)
    OR              reduce using rule 74 (int_float -> INT_CONST .)
    STATE_END       reduce using rule 74 (int_float -> INT_CONST .)
    COMMA           reduce using rule 74 (int_float -> INT_CONST .)
    RPAREN          reduce using rule 74 (int_float -> INT_CONST .)
    KWRD_MATCH      reduce using rule 74 (int_float -> INT_CONST .)
    RBPAREN         reduce using rule 74 (int_float -> INT_CONST .)
    KWRD_UNTIL      reduce using rule 74 (int_float -> INT_CONST .)
    KWRD_TO         reduce using rule 74 (int_float -> INT_CONST .)
    FUNTYPE         reduce using rule 74 (int_float -> INT_CONST .)
    KWRD_BY         reduce using rule 74 (int_float -> INT_CONST .)


state 76

    (94) block_statements -> block_statement .

    KWRD_IF         reduce using rule 94 (block_statements -> block_statement .)
    KWRD_WHILE      reduce using rule 94 (block_statements -> block_statement .)
    KWRD_DO         reduce using rule 94 (block_statements -> block_statement .)
    KWRD_FOR        reduce using rule 94 (block_statements -> block_statement .)
    KWRD_OBJECT     reduce using rule 94 (block_statements -> block_statement .)
    STATE_END       reduce using rule 94 (block_statements -> block_statement .)
    KWRD_RETURN     reduce using rule 94 (block_statements -> block_statement .)
    KWRD_PROTECTED  reduce using rule 94 (block_statements -> block_statement .)
    KWRD_PRIVATE    reduce using rule 94 (block_statements -> block_statement .)
    BLOCK_BEGIN     reduce using rule 94 (block_statements -> block_statement .)
    IDENTIFIER      reduce using rule 94 (block_statements -> block_statement .)
    PLUS            reduce using rule 94 (block_statements -> block_statement .)
    MINUS           reduce using rule 94 (block_statements -> block_statement .)
    TILDA           reduce using rule 94 (block_statements -> block_statement .)
    NOT             reduce using rule 94 (block_statements -> block_statement .)
    LPAREN          reduce using rule 94 (block_statements -> block_statement .)
    CHARACTER       reduce using rule 94 (block_statements -> block_statement .)
    STRING_CONST    reduce using rule 94 (block_statements -> block_statement .)
    BOOL_CONSTT     reduce using rule 94 (block_statements -> block_statement .)
    BOOL_CONSTF     reduce using rule 94 (block_statements -> block_statement .)
    KWRD_NULL       reduce using rule 94 (block_statements -> block_statement .)
    FLOAT_CONST     reduce using rule 94 (block_statements -> block_statement .)
    INT_CONST       reduce using rule 94 (block_statements -> block_statement .)
    KWRD_DEF        reduce using rule 94 (block_statements -> block_statement .)
    KWRD_CLASS      reduce using rule 94 (block_statements -> block_statement .)
    KWRD_VAR        reduce using rule 94 (block_statements -> block_statement .)
    KWRD_VAL        reduce using rule 94 (block_statements -> block_statement .)
    BLOCK_END       reduce using rule 94 (block_statements -> block_statement .)
    KWRD_CASE       reduce using rule 94 (block_statements -> block_statement .)


state 77

    (65) primary -> literal .

    TIMES           reduce using rule 65 (primary -> literal .)
    DIVIDE          reduce using rule 65 (primary -> literal .)
    REMAINDER       reduce using rule 65 (primary -> literal .)
    PLUS            reduce using rule 65 (primary -> literal .)
    MINUS           reduce using rule 65 (primary -> literal .)
    LSHIFT          reduce using rule 65 (primary -> literal .)
    RSHIFT          reduce using rule 65 (primary -> literal .)
    GREATER         reduce using rule 65 (primary -> literal .)
    LESS            reduce using rule 65 (primary -> literal .)
    GEQ             reduce using rule 65 (primary -> literal .)
    LEQ             reduce using rule 65 (primary -> literal .)
    EQUAL           reduce using rule 65 (primary -> literal .)
    NEQUAL          reduce using rule 65 (primary -> literal .)
    AND_BITWISE     reduce using rule 65 (primary -> literal .)
    XOR             reduce using rule 65 (primary -> literal .)
    OR_BITWISE      reduce using rule 65 (primary -> literal .)
    AND             reduce using rule 65 (primary -> literal .)
    OR              reduce using rule 65 (primary -> literal .)
    KWRD_MATCH      reduce using rule 65 (primary -> literal .)
    STATE_END       reduce using rule 65 (primary -> literal .)
    RPAREN          reduce using rule 65 (primary -> literal .)
    COMMA           reduce using rule 65 (primary -> literal .)
    RBPAREN         reduce using rule 65 (primary -> literal .)
    KWRD_UNTIL      reduce using rule 65 (primary -> literal .)
    KWRD_TO         reduce using rule 65 (primary -> literal .)
    FUNTYPE         reduce using rule 65 (primary -> literal .)
    KWRD_BY         reduce using rule 65 (primary -> literal .)


state 78

    (59) unary_expression_not_plus_minus -> TILDA . unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 84
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    unary_expression               shift and go to state 148
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 115
    array_access                   shift and go to state 34
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    literal                        shift and go to state 77
    method_invocation              shift and go to state 116
    cast_expression                shift and go to state 85
    simple_name                    shift and go to state 74
    name                           shift and go to state 117

state 79

    (37) equality_expression -> relational_expression .
    (41) relational_expression -> relational_expression . GREATER shift_expression
    (42) relational_expression -> relational_expression . LESS shift_expression
    (43) relational_expression -> relational_expression . GEQ shift_expression
    (44) relational_expression -> relational_expression . LEQ shift_expression

    EQUAL           reduce using rule 37 (equality_expression -> relational_expression .)
    NEQUAL          reduce using rule 37 (equality_expression -> relational_expression .)
    AND_BITWISE     reduce using rule 37 (equality_expression -> relational_expression .)
    XOR             reduce using rule 37 (equality_expression -> relational_expression .)
    OR_BITWISE      reduce using rule 37 (equality_expression -> relational_expression .)
    AND             reduce using rule 37 (equality_expression -> relational_expression .)
    OR              reduce using rule 37 (equality_expression -> relational_expression .)
    KWRD_BY         reduce using rule 37 (equality_expression -> relational_expression .)
    STATE_END       reduce using rule 37 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 37 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 37 (equality_expression -> relational_expression .)
    FUNTYPE         reduce using rule 37 (equality_expression -> relational_expression .)
    KWRD_MATCH      reduce using rule 37 (equality_expression -> relational_expression .)
    RBPAREN         reduce using rule 37 (equality_expression -> relational_expression .)
    KWRD_UNTIL      reduce using rule 37 (equality_expression -> relational_expression .)
    KWRD_TO         reduce using rule 37 (equality_expression -> relational_expression .)
    GREATER         shift and go to state 150
    LESS            shift and go to state 151
    GEQ             shift and go to state 149
    LEQ             shift and go to state 152


state 80

    (97) block_statement -> statement .

    KWRD_IF         reduce using rule 97 (block_statement -> statement .)
    KWRD_WHILE      reduce using rule 97 (block_statement -> statement .)
    KWRD_DO         reduce using rule 97 (block_statement -> statement .)
    KWRD_FOR        reduce using rule 97 (block_statement -> statement .)
    KWRD_OBJECT     reduce using rule 97 (block_statement -> statement .)
    STATE_END       reduce using rule 97 (block_statement -> statement .)
    KWRD_RETURN     reduce using rule 97 (block_statement -> statement .)
    KWRD_PROTECTED  reduce using rule 97 (block_statement -> statement .)
    KWRD_PRIVATE    reduce using rule 97 (block_statement -> statement .)
    BLOCK_BEGIN     reduce using rule 97 (block_statement -> statement .)
    IDENTIFIER      reduce using rule 97 (block_statement -> statement .)
    PLUS            reduce using rule 97 (block_statement -> statement .)
    MINUS           reduce using rule 97 (block_statement -> statement .)
    TILDA           reduce using rule 97 (block_statement -> statement .)
    NOT             reduce using rule 97 (block_statement -> statement .)
    LPAREN          reduce using rule 97 (block_statement -> statement .)
    CHARACTER       reduce using rule 97 (block_statement -> statement .)
    STRING_CONST    reduce using rule 97 (block_statement -> statement .)
    BOOL_CONSTT     reduce using rule 97 (block_statement -> statement .)
    BOOL_CONSTF     reduce using rule 97 (block_statement -> statement .)
    KWRD_NULL       reduce using rule 97 (block_statement -> statement .)
    FLOAT_CONST     reduce using rule 97 (block_statement -> statement .)
    INT_CONST       reduce using rule 97 (block_statement -> statement .)
    KWRD_DEF        reduce using rule 97 (block_statement -> statement .)
    KWRD_CLASS      reduce using rule 97 (block_statement -> statement .)
    KWRD_VAR        reduce using rule 97 (block_statement -> statement .)
    KWRD_VAL        reduce using rule 97 (block_statement -> statement .)
    BLOCK_END       reduce using rule 97 (block_statement -> statement .)
    KWRD_CASE       reduce using rule 97 (block_statement -> statement .)


state 81

    (132) statement_expression -> method_invocation .
    (66) primary -> method_invocation .

    STATE_END       reduce using rule 132 (statement_expression -> method_invocation .)
    TIMES           reduce using rule 66 (primary -> method_invocation .)
    DIVIDE          reduce using rule 66 (primary -> method_invocation .)
    REMAINDER       reduce using rule 66 (primary -> method_invocation .)
    PLUS            reduce using rule 66 (primary -> method_invocation .)
    MINUS           reduce using rule 66 (primary -> method_invocation .)
    LSHIFT          reduce using rule 66 (primary -> method_invocation .)
    RSHIFT          reduce using rule 66 (primary -> method_invocation .)
    GREATER         reduce using rule 66 (primary -> method_invocation .)
    LESS            reduce using rule 66 (primary -> method_invocation .)
    GEQ             reduce using rule 66 (primary -> method_invocation .)
    LEQ             reduce using rule 66 (primary -> method_invocation .)
    EQUAL           reduce using rule 66 (primary -> method_invocation .)
    NEQUAL          reduce using rule 66 (primary -> method_invocation .)
    AND_BITWISE     reduce using rule 66 (primary -> method_invocation .)
    XOR             reduce using rule 66 (primary -> method_invocation .)
    OR_BITWISE      reduce using rule 66 (primary -> method_invocation .)
    AND             reduce using rule 66 (primary -> method_invocation .)
    OR              reduce using rule 66 (primary -> method_invocation .)
    KWRD_MATCH      reduce using rule 66 (primary -> method_invocation .)


state 82

    (83) simple_name -> IDENTIFIER .

    LBPAREN         reduce using rule 83 (simple_name -> IDENTIFIER .)
    LPAREN          reduce using rule 83 (simple_name -> IDENTIFIER .)
    DOT             reduce using rule 83 (simple_name -> IDENTIFIER .)
    TIMES           reduce using rule 83 (simple_name -> IDENTIFIER .)
    DIVIDE          reduce using rule 83 (simple_name -> IDENTIFIER .)
    REMAINDER       reduce using rule 83 (simple_name -> IDENTIFIER .)
    PLUS            reduce using rule 83 (simple_name -> IDENTIFIER .)
    MINUS           reduce using rule 83 (simple_name -> IDENTIFIER .)
    LSHIFT          reduce using rule 83 (simple_name -> IDENTIFIER .)
    RSHIFT          reduce using rule 83 (simple_name -> IDENTIFIER .)
    GREATER         reduce using rule 83 (simple_name -> IDENTIFIER .)
    LESS            reduce using rule 83 (simple_name -> IDENTIFIER .)
    GEQ             reduce using rule 83 (simple_name -> IDENTIFIER .)
    LEQ             reduce using rule 83 (simple_name -> IDENTIFIER .)
    EQUAL           reduce using rule 83 (simple_name -> IDENTIFIER .)
    NEQUAL          reduce using rule 83 (simple_name -> IDENTIFIER .)
    AND_BITWISE     reduce using rule 83 (simple_name -> IDENTIFIER .)
    XOR             reduce using rule 83 (simple_name -> IDENTIFIER .)
    OR_BITWISE      reduce using rule 83 (simple_name -> IDENTIFIER .)
    AND             reduce using rule 83 (simple_name -> IDENTIFIER .)
    OR              reduce using rule 83 (simple_name -> IDENTIFIER .)
    KWRD_MATCH      reduce using rule 83 (simple_name -> IDENTIFIER .)
    STATE_END       reduce using rule 83 (simple_name -> IDENTIFIER .)
    RPAREN          reduce using rule 83 (simple_name -> IDENTIFIER .)
    COMMA           reduce using rule 83 (simple_name -> IDENTIFIER .)
    RBPAREN         reduce using rule 83 (simple_name -> IDENTIFIER .)
    KWRD_UNTIL      reduce using rule 83 (simple_name -> IDENTIFIER .)
    KWRD_TO         reduce using rule 83 (simple_name -> IDENTIFIER .)
    FUNTYPE         reduce using rule 83 (simple_name -> IDENTIFIER .)
    KWRD_BY         reduce using rule 83 (simple_name -> IDENTIFIER .)
    ASSIGN          reduce using rule 83 (simple_name -> IDENTIFIER .)
    TIMES_ASSIGN    reduce using rule 83 (simple_name -> IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 83 (simple_name -> IDENTIFIER .)
    REMAINDER_ASSIGN reduce using rule 83 (simple_name -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 83 (simple_name -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 83 (simple_name -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 83 (simple_name -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 83 (simple_name -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 83 (simple_name -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 83 (simple_name -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 83 (simple_name -> IDENTIFIER .)


state 83

    (93) block_statements_opt -> empty .
    (102) modifier_opts -> empty .

    BLOCK_END       reduce using rule 93 (block_statements_opt -> empty .)
    KWRD_DEF        reduce using rule 102 (modifier_opts -> empty .)
    KWRD_CLASS      reduce using rule 102 (modifier_opts -> empty .)
    KWRD_VAR        reduce using rule 102 (modifier_opts -> empty .)
    KWRD_VAL        reduce using rule 102 (modifier_opts -> empty .)


state 84

    (82) name -> qualified_name .

    LBPAREN         reduce using rule 82 (name -> qualified_name .)
    LPAREN          reduce using rule 82 (name -> qualified_name .)
    DOT             reduce using rule 82 (name -> qualified_name .)
    TIMES           reduce using rule 82 (name -> qualified_name .)
    DIVIDE          reduce using rule 82 (name -> qualified_name .)
    REMAINDER       reduce using rule 82 (name -> qualified_name .)
    PLUS            reduce using rule 82 (name -> qualified_name .)
    MINUS           reduce using rule 82 (name -> qualified_name .)
    LSHIFT          reduce using rule 82 (name -> qualified_name .)
    RSHIFT          reduce using rule 82 (name -> qualified_name .)
    GREATER         reduce using rule 82 (name -> qualified_name .)
    LESS            reduce using rule 82 (name -> qualified_name .)
    GEQ             reduce using rule 82 (name -> qualified_name .)
    LEQ             reduce using rule 82 (name -> qualified_name .)
    EQUAL           reduce using rule 82 (name -> qualified_name .)
    NEQUAL          reduce using rule 82 (name -> qualified_name .)
    AND_BITWISE     reduce using rule 82 (name -> qualified_name .)
    XOR             reduce using rule 82 (name -> qualified_name .)
    OR_BITWISE      reduce using rule 82 (name -> qualified_name .)
    AND             reduce using rule 82 (name -> qualified_name .)
    OR              reduce using rule 82 (name -> qualified_name .)
    KWRD_MATCH      reduce using rule 82 (name -> qualified_name .)
    STATE_END       reduce using rule 82 (name -> qualified_name .)
    RPAREN          reduce using rule 82 (name -> qualified_name .)
    COMMA           reduce using rule 82 (name -> qualified_name .)
    RBPAREN         reduce using rule 82 (name -> qualified_name .)
    KWRD_UNTIL      reduce using rule 82 (name -> qualified_name .)
    KWRD_TO         reduce using rule 82 (name -> qualified_name .)
    FUNTYPE         reduce using rule 82 (name -> qualified_name .)
    KWRD_BY         reduce using rule 82 (name -> qualified_name .)
    ASSIGN          reduce using rule 82 (name -> qualified_name .)
    TIMES_ASSIGN    reduce using rule 82 (name -> qualified_name .)
    DIVIDE_ASSIGN   reduce using rule 82 (name -> qualified_name .)
    REMAINDER_ASSIGN reduce using rule 82 (name -> qualified_name .)
    PLUS_ASSIGN     reduce using rule 82 (name -> qualified_name .)
    MINUS_ASSIGN    reduce using rule 82 (name -> qualified_name .)
    LSHIFT_ASSIGN   reduce using rule 82 (name -> qualified_name .)
    RSHIFT_ASSIGN   reduce using rule 82 (name -> qualified_name .)
    AND_ASSIGN      reduce using rule 82 (name -> qualified_name .)
    OR_ASSIGN       reduce using rule 82 (name -> qualified_name .)
    XOR_ASSIGN      reduce using rule 82 (name -> qualified_name .)


state 85

    (61) unary_expression_not_plus_minus -> cast_expression .

    TIMES           reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    DIVIDE          reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    REMAINDER       reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    PLUS            reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    MINUS           reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    LSHIFT          reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    RSHIFT          reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    GREATER         reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    LESS            reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    GEQ             reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    LEQ             reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    EQUAL           reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    NEQUAL          reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    AND_BITWISE     reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    XOR             reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    OR_BITWISE      reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    AND             reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    OR              reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    KWRD_MATCH      reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    STATE_END       reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    RPAREN          reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    COMMA           reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    RBPAREN         reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    KWRD_UNTIL      reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    KWRD_TO         reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    FUNTYPE         reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)
    KWRD_BY         reduce using rule 61 (unary_expression_not_plus_minus -> cast_expression .)


state 86

    (35) and_expression -> equality_expression .
    (38) equality_expression -> equality_expression . EQUAL relational_expression
    (39) equality_expression -> equality_expression . NEQUAL relational_expression

    AND_BITWISE     reduce using rule 35 (and_expression -> equality_expression .)
    XOR             reduce using rule 35 (and_expression -> equality_expression .)
    OR_BITWISE      reduce using rule 35 (and_expression -> equality_expression .)
    AND             reduce using rule 35 (and_expression -> equality_expression .)
    OR              reduce using rule 35 (and_expression -> equality_expression .)
    STATE_END       reduce using rule 35 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 35 (and_expression -> equality_expression .)
    COMMA           reduce using rule 35 (and_expression -> equality_expression .)
    KWRD_MATCH      reduce using rule 35 (and_expression -> equality_expression .)
    RBPAREN         reduce using rule 35 (and_expression -> equality_expression .)
    KWRD_UNTIL      reduce using rule 35 (and_expression -> equality_expression .)
    KWRD_TO         reduce using rule 35 (and_expression -> equality_expression .)
    FUNTYPE         reduce using rule 35 (and_expression -> equality_expression .)
    KWRD_BY         reduce using rule 35 (and_expression -> equality_expression .)
    EQUAL           shift and go to state 154
    NEQUAL          shift and go to state 153


state 87

    (177) method_declaration -> method_header . method_body
    (183) method_body -> . BLOCK_BEGIN block_statements_opt end_scope

    BLOCK_BEGIN     shift and go to state 156

    method_body                    shift and go to state 155

state 88

    (127) normal_statement -> empty_statement .

    KWRD_IF         reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_WHILE      reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_DO         reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_FOR        reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_OBJECT     reduce using rule 127 (normal_statement -> empty_statement .)
    STATE_END       reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_RETURN     reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_PROTECTED  reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_PRIVATE    reduce using rule 127 (normal_statement -> empty_statement .)
    BLOCK_BEGIN     reduce using rule 127 (normal_statement -> empty_statement .)
    IDENTIFIER      reduce using rule 127 (normal_statement -> empty_statement .)
    PLUS            reduce using rule 127 (normal_statement -> empty_statement .)
    MINUS           reduce using rule 127 (normal_statement -> empty_statement .)
    TILDA           reduce using rule 127 (normal_statement -> empty_statement .)
    NOT             reduce using rule 127 (normal_statement -> empty_statement .)
    LPAREN          reduce using rule 127 (normal_statement -> empty_statement .)
    CHARACTER       reduce using rule 127 (normal_statement -> empty_statement .)
    STRING_CONST    reduce using rule 127 (normal_statement -> empty_statement .)
    BOOL_CONSTT     reduce using rule 127 (normal_statement -> empty_statement .)
    BOOL_CONSTF     reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_NULL       reduce using rule 127 (normal_statement -> empty_statement .)
    FLOAT_CONST     reduce using rule 127 (normal_statement -> empty_statement .)
    INT_CONST       reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_DEF        reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_CLASS      reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_VAR        reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_VAL        reduce using rule 127 (normal_statement -> empty_statement .)
    BLOCK_END       reduce using rule 127 (normal_statement -> empty_statement .)
    KWRD_CASE       reduce using rule 127 (normal_statement -> empty_statement .)


state 89

    (105) local_variable_declaration_statement -> local_variable_declaration . STATE_END

    STATE_END       shift and go to state 157


state 90

    (119) statement -> normal_statement .

    KWRD_IF         reduce using rule 119 (statement -> normal_statement .)
    KWRD_WHILE      reduce using rule 119 (statement -> normal_statement .)
    KWRD_DO         reduce using rule 119 (statement -> normal_statement .)
    KWRD_FOR        reduce using rule 119 (statement -> normal_statement .)
    KWRD_OBJECT     reduce using rule 119 (statement -> normal_statement .)
    STATE_END       reduce using rule 119 (statement -> normal_statement .)
    KWRD_RETURN     reduce using rule 119 (statement -> normal_statement .)
    KWRD_PROTECTED  reduce using rule 119 (statement -> normal_statement .)
    KWRD_PRIVATE    reduce using rule 119 (statement -> normal_statement .)
    BLOCK_BEGIN     reduce using rule 119 (statement -> normal_statement .)
    IDENTIFIER      reduce using rule 119 (statement -> normal_statement .)
    PLUS            reduce using rule 119 (statement -> normal_statement .)
    MINUS           reduce using rule 119 (statement -> normal_statement .)
    TILDA           reduce using rule 119 (statement -> normal_statement .)
    NOT             reduce using rule 119 (statement -> normal_statement .)
    LPAREN          reduce using rule 119 (statement -> normal_statement .)
    CHARACTER       reduce using rule 119 (statement -> normal_statement .)
    STRING_CONST    reduce using rule 119 (statement -> normal_statement .)
    BOOL_CONSTT     reduce using rule 119 (statement -> normal_statement .)
    BOOL_CONSTF     reduce using rule 119 (statement -> normal_statement .)
    KWRD_NULL       reduce using rule 119 (statement -> normal_statement .)
    FLOAT_CONST     reduce using rule 119 (statement -> normal_statement .)
    INT_CONST       reduce using rule 119 (statement -> normal_statement .)
    KWRD_DEF        reduce using rule 119 (statement -> normal_statement .)
    KWRD_CLASS      reduce using rule 119 (statement -> normal_statement .)
    KWRD_VAR        reduce using rule 119 (statement -> normal_statement .)
    KWRD_VAL        reduce using rule 119 (statement -> normal_statement .)
    BLOCK_END       reduce using rule 119 (statement -> normal_statement .)
    KWRD_CASE       reduce using rule 119 (statement -> normal_statement .)


state 91

    (68) literal -> CHARACTER .

    TIMES           reduce using rule 68 (literal -> CHARACTER .)
    DIVIDE          reduce using rule 68 (literal -> CHARACTER .)
    REMAINDER       reduce using rule 68 (literal -> CHARACTER .)
    PLUS            reduce using rule 68 (literal -> CHARACTER .)
    MINUS           reduce using rule 68 (literal -> CHARACTER .)
    LSHIFT          reduce using rule 68 (literal -> CHARACTER .)
    RSHIFT          reduce using rule 68 (literal -> CHARACTER .)
    GREATER         reduce using rule 68 (literal -> CHARACTER .)
    LESS            reduce using rule 68 (literal -> CHARACTER .)
    GEQ             reduce using rule 68 (literal -> CHARACTER .)
    LEQ             reduce using rule 68 (literal -> CHARACTER .)
    EQUAL           reduce using rule 68 (literal -> CHARACTER .)
    NEQUAL          reduce using rule 68 (literal -> CHARACTER .)
    AND_BITWISE     reduce using rule 68 (literal -> CHARACTER .)
    XOR             reduce using rule 68 (literal -> CHARACTER .)
    OR_BITWISE      reduce using rule 68 (literal -> CHARACTER .)
    AND             reduce using rule 68 (literal -> CHARACTER .)
    OR              reduce using rule 68 (literal -> CHARACTER .)
    KWRD_MATCH      reduce using rule 68 (literal -> CHARACTER .)
    STATE_END       reduce using rule 68 (literal -> CHARACTER .)
    RPAREN          reduce using rule 68 (literal -> CHARACTER .)
    COMMA           reduce using rule 68 (literal -> CHARACTER .)
    RBPAREN         reduce using rule 68 (literal -> CHARACTER .)
    KWRD_UNTIL      reduce using rule 68 (literal -> CHARACTER .)
    KWRD_TO         reduce using rule 68 (literal -> CHARACTER .)
    FUNTYPE         reduce using rule 68 (literal -> CHARACTER .)
    KWRD_BY         reduce using rule 68 (literal -> CHARACTER .)


state 92

    (33) exclusive_or_expression -> and_expression .
    (36) and_expression -> and_expression . AND_BITWISE equality_expression

    XOR             reduce using rule 33 (exclusive_or_expression -> and_expression .)
    OR_BITWISE      reduce using rule 33 (exclusive_or_expression -> and_expression .)
    AND             reduce using rule 33 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 33 (exclusive_or_expression -> and_expression .)
    STATE_END       reduce using rule 33 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 33 (exclusive_or_expression -> and_expression .)
    KWRD_MATCH      reduce using rule 33 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 33 (exclusive_or_expression -> and_expression .)
    RBPAREN         reduce using rule 33 (exclusive_or_expression -> and_expression .)
    FUNTYPE         reduce using rule 33 (exclusive_or_expression -> and_expression .)
    KWRD_UNTIL      reduce using rule 33 (exclusive_or_expression -> and_expression .)
    KWRD_TO         reduce using rule 33 (exclusive_or_expression -> and_expression .)
    KWRD_BY         reduce using rule 33 (exclusive_or_expression -> and_expression .)
    AND_BITWISE     shift and go to state 158


state 93

    (58) unary_expression_not_plus_minus -> base_variable_set .

    TIMES           reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    DIVIDE          reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    REMAINDER       reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    PLUS            reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    MINUS           reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    LSHIFT          reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    RSHIFT          reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    GREATER         reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    LESS            reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    GEQ             reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    LEQ             reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    EQUAL           reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    NEQUAL          reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    AND_BITWISE     reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    XOR             reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    OR_BITWISE      reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    AND             reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    OR              reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    KWRD_MATCH      reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    STATE_END       reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    RPAREN          reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    COMMA           reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    RBPAREN         reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    KWRD_UNTIL      reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    KWRD_TO         reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    FUNTYPE         reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)
    KWRD_BY         reduce using rule 58 (unary_expression_not_plus_minus -> base_variable_set .)


state 94

    (128) normal_statement -> return_statement .

    KWRD_IF         reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_WHILE      reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_DO         reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_FOR        reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_OBJECT     reduce using rule 128 (normal_statement -> return_statement .)
    STATE_END       reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_RETURN     reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_PROTECTED  reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_PRIVATE    reduce using rule 128 (normal_statement -> return_statement .)
    BLOCK_BEGIN     reduce using rule 128 (normal_statement -> return_statement .)
    IDENTIFIER      reduce using rule 128 (normal_statement -> return_statement .)
    PLUS            reduce using rule 128 (normal_statement -> return_statement .)
    MINUS           reduce using rule 128 (normal_statement -> return_statement .)
    TILDA           reduce using rule 128 (normal_statement -> return_statement .)
    NOT             reduce using rule 128 (normal_statement -> return_statement .)
    LPAREN          reduce using rule 128 (normal_statement -> return_statement .)
    CHARACTER       reduce using rule 128 (normal_statement -> return_statement .)
    STRING_CONST    reduce using rule 128 (normal_statement -> return_statement .)
    BOOL_CONSTT     reduce using rule 128 (normal_statement -> return_statement .)
    BOOL_CONSTF     reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_NULL       reduce using rule 128 (normal_statement -> return_statement .)
    FLOAT_CONST     reduce using rule 128 (normal_statement -> return_statement .)
    INT_CONST       reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_DEF        reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_CLASS      reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_VAR        reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_VAL        reduce using rule 128 (normal_statement -> return_statement .)
    BLOCK_END       reduce using rule 128 (normal_statement -> return_statement .)
    KWRD_CASE       reduce using rule 128 (normal_statement -> return_statement .)


state 95

    (92) block_statements_opt -> block_statements .
    (95) block_statements -> block_statements . block_statement
    (96) block_statement -> . local_variable_declaration_statement
    (97) block_statement -> . statement
    (98) block_statement -> . class_declaration
    (99) block_statement -> . SingletonObject
    (100) block_statement -> . method_declaration
    (105) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (119) statement -> . normal_statement
    (120) statement -> . if_then_statement
    (121) statement -> . if_then_else_statement
    (122) statement -> . while_statement
    (123) statement -> . do_while_statement
    (124) statement -> . for_statement
    (169) class_declaration -> . class_header class_body
    (7) SingletonObject -> . ObjectDeclare block
    (177) method_declaration -> . method_header method_body
    (106) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (125) normal_statement -> . block
    (126) normal_statement -> . expression_statement
    (127) normal_statement -> . empty_statement
    (128) normal_statement -> . return_statement
    (129) normal_statement -> . switch_statement
    (133) if_then_statement -> . KWRD_IF LPAREN expression RPAREN block
    (134) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block
    (138) while_statement -> . KWRD_WHILE LPAREN expression RPAREN block
    (139) do_while_statement -> . KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END
    (140) for_statement -> . KWRD_FOR LPAREN for_logic RPAREN block
    (170) class_header -> . class_header_name class_header_extends_opt
    (8) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (9) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (178) method_header -> . method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (101) modifier_opts -> . modifier
    (102) modifier_opts -> . empty
    (89) block -> . start_scope block_statements_opt end_scope
    (130) expression_statement -> . statement_expression STATE_END
    (160) empty_statement -> . STATE_END
    (161) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (149) switch_statement -> . expression KWRD_MATCH switch_block
    (171) class_header_name -> . class_header_name1 func_args_start constructor_arguement_list_opt RPAREN
    (182) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (184) modifier -> . KWRD_PROTECTED
    (185) modifier -> . KWRD_PRIVATE
    (200) empty -> .
    (90) start_scope -> . BLOCK_BEGIN
    (131) statement_expression -> . assignment
    (132) statement_expression -> . method_invocation
    (10) expression -> . assignment_expression
    (172) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (76) array_access -> . name LBPAREN expression RBPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    BLOCK_END       reduce using rule 92 (block_statements_opt -> block_statements .)
    KWRD_IF         shift and go to state 63
    KWRD_WHILE      shift and go to state 52
    KWRD_DO         shift and go to state 47
    KWRD_FOR        shift and go to state 56
    KWRD_OBJECT     shift and go to state 4
    STATE_END       shift and go to state 53
    KWRD_RETURN     shift and go to state 50
    KWRD_PROTECTED  shift and go to state 11
    KWRD_PRIVATE    shift and go to state 15
    KWRD_DEF        reduce using rule 200 (empty -> .)
    KWRD_CLASS      reduce using rule 200 (empty -> .)
    KWRD_VAR        reduce using rule 200 (empty -> .)
    KWRD_VAL        reduce using rule 200 (empty -> .)
    BLOCK_BEGIN     shift and go to state 16
    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    expression_statement           shift and go to state 32
    unary_expression               shift and go to state 54
    method_header                  shift and go to state 87
    exclusive_or_expression        shift and go to state 71
    normal_statement               shift and go to state 90
    ObjectDeclare                  shift and go to state 1
    class_header_name1             shift and go to state 2
    unary_expression_not_plus_minus shift and go to state 55
    if_then_statement              shift and go to state 73
    array_access                   shift and go to state 34
    switch_statement               shift and go to state 57
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 39
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 70
    cast_expression                shift and go to state 85
    block_statement                shift and go to state 159
    shift_expression               shift and go to state 62
    return_statement               shift and go to state 94
    while_statement                shift and go to state 40
    and_expression                 shift and go to state 92
    statement                      shift and go to state 80
    literal                        shift and go to state 77
    statement_expression           shift and go to state 43
    method_invocation              shift and go to state 81
    simple_name                    shift and go to state 74
    conditional_or_expression      shift and go to state 59
    empty                          shift and go to state 5
    relational_expression          shift and go to state 79
    for_statement                  shift and go to state 44
    local_variable_declaration_statement shift and go to state 45
    do_while_statement             shift and go to state 60
    int_float                      shift and go to state 46
    assignment                     shift and go to state 98
    multiplicative_expression      shift and go to state 61
    primary                        shift and go to state 72
    additive_expression            shift and go to state 58
    SingletonObject                shift and go to state 48
    start_scope                    shift and go to state 17
    method_header_name             shift and go to state 49
    class_header                   shift and go to state 9
    modifier_opts                  shift and go to state 100
    equality_expression            shift and go to state 86
    variable_literal               shift and go to state 64
    name                           shift and go to state 51
    valid_variable                 shift and go to state 101
    empty_statement                shift and go to state 88
    class_declaration              shift and go to state 102
    local_variable_declaration     shift and go to state 89
    modifier                       shift and go to state 14
    expression                     shift and go to state 67
    conditional_and_expression     shift and go to state 65
    block                          shift and go to state 68
    if_then_else_statement         shift and go to state 69

state 96

    (72) literal -> KWRD_NULL .

    TIMES           reduce using rule 72 (literal -> KWRD_NULL .)
    DIVIDE          reduce using rule 72 (literal -> KWRD_NULL .)
    REMAINDER       reduce using rule 72 (literal -> KWRD_NULL .)
    PLUS            reduce using rule 72 (literal -> KWRD_NULL .)
    MINUS           reduce using rule 72 (literal -> KWRD_NULL .)
    LSHIFT          reduce using rule 72 (literal -> KWRD_NULL .)
    RSHIFT          reduce using rule 72 (literal -> KWRD_NULL .)
    GREATER         reduce using rule 72 (literal -> KWRD_NULL .)
    LESS            reduce using rule 72 (literal -> KWRD_NULL .)
    GEQ             reduce using rule 72 (literal -> KWRD_NULL .)
    LEQ             reduce using rule 72 (literal -> KWRD_NULL .)
    EQUAL           reduce using rule 72 (literal -> KWRD_NULL .)
    NEQUAL          reduce using rule 72 (literal -> KWRD_NULL .)
    AND_BITWISE     reduce using rule 72 (literal -> KWRD_NULL .)
    XOR             reduce using rule 72 (literal -> KWRD_NULL .)
    OR_BITWISE      reduce using rule 72 (literal -> KWRD_NULL .)
    AND             reduce using rule 72 (literal -> KWRD_NULL .)
    OR              reduce using rule 72 (literal -> KWRD_NULL .)
    KWRD_MATCH      reduce using rule 72 (literal -> KWRD_NULL .)
    STATE_END       reduce using rule 72 (literal -> KWRD_NULL .)
    RPAREN          reduce using rule 72 (literal -> KWRD_NULL .)
    COMMA           reduce using rule 72 (literal -> KWRD_NULL .)
    RBPAREN         reduce using rule 72 (literal -> KWRD_NULL .)
    KWRD_UNTIL      reduce using rule 72 (literal -> KWRD_NULL .)
    KWRD_TO         reduce using rule 72 (literal -> KWRD_NULL .)
    FUNTYPE         reduce using rule 72 (literal -> KWRD_NULL .)
    KWRD_BY         reduce using rule 72 (literal -> KWRD_NULL .)


state 97

    (10) expression -> assignment_expression .

    KWRD_MATCH      reduce using rule 10 (expression -> assignment_expression .)
    RBPAREN         reduce using rule 10 (expression -> assignment_expression .)
    COMMA           reduce using rule 10 (expression -> assignment_expression .)
    RPAREN          reduce using rule 10 (expression -> assignment_expression .)
    KWRD_UNTIL      reduce using rule 10 (expression -> assignment_expression .)
    KWRD_TO         reduce using rule 10 (expression -> assignment_expression .)
    KWRD_BY         reduce using rule 10 (expression -> assignment_expression .)
    STATE_END       reduce using rule 10 (expression -> assignment_expression .)
    FUNTYPE         reduce using rule 10 (expression -> assignment_expression .)


state 98

    (131) statement_expression -> assignment .
    (13) assignment_expression -> assignment .

    STATE_END       reduce using rule 131 (statement_expression -> assignment .)
    KWRD_MATCH      reduce using rule 13 (assignment_expression -> assignment .)


state 99

    (63) base_variable_set -> LPAREN . expression RPAREN
    (64) cast_expression -> LPAREN . primitive_type RPAREN unary_expression
    (10) expression -> . assignment_expression
    (188) primitive_type -> . TYPE_INT
    (189) primitive_type -> . TYPE_FLOAT
    (190) primitive_type -> . TYPE_CHAR
    (191) primitive_type -> . TYPE_STRING
    (192) primitive_type -> . TYPE_BOOLEAN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    TYPE_INT        shift and go to state 160
    TYPE_FLOAT      shift and go to state 165
    TYPE_CHAR       shift and go to state 162
    TYPE_STRING     shift and go to state 161
    TYPE_BOOLEAN    shift and go to state 164
    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 101
    inclusive_or_expression        shift and go to state 39
    literal                        shift and go to state 77
    primitive_type                 shift and go to state 163
    and_expression                 shift and go to state 92
    relational_expression          shift and go to state 79
    cast_expression                shift and go to state 85
    conditional_or_expression      shift and go to state 59
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    assignment                     shift and go to state 127
    multiplicative_expression      shift and go to state 61
    method_invocation              shift and go to state 116
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 128
    expression                     shift and go to state 166
    conditional_and_expression     shift and go to state 65

state 100

    (106) local_variable_declaration -> modifier_opts . declaration_keyword variable_declaration_body
    (182) method_header_name -> modifier_opts . KWRD_DEF IDENTIFIER
    (172) class_header_name1 -> modifier_opts . KWRD_CLASS name
    (103) declaration_keyword -> . KWRD_VAR
    (104) declaration_keyword -> . KWRD_VAL

    KWRD_DEF        shift and go to state 167
    KWRD_CLASS      shift and go to state 31
    KWRD_VAR        shift and go to state 106
    KWRD_VAL        shift and go to state 107

    declaration_keyword            shift and go to state 168

state 101

    (15) assignment -> valid_variable . assignment_operator assignment_expression
    (87) variable_literal -> valid_variable .
    (16) assignment_operator -> . ASSIGN
    (17) assignment_operator -> . TIMES_ASSIGN
    (18) assignment_operator -> . DIVIDE_ASSIGN
    (19) assignment_operator -> . REMAINDER_ASSIGN
    (20) assignment_operator -> . PLUS_ASSIGN
    (21) assignment_operator -> . MINUS_ASSIGN
    (22) assignment_operator -> . LSHIFT_ASSIGN
    (23) assignment_operator -> . RSHIFT_ASSIGN
    (24) assignment_operator -> . AND_ASSIGN
    (25) assignment_operator -> . OR_ASSIGN
    (26) assignment_operator -> . XOR_ASSIGN

    TIMES           reduce using rule 87 (variable_literal -> valid_variable .)
    DIVIDE          reduce using rule 87 (variable_literal -> valid_variable .)
    REMAINDER       reduce using rule 87 (variable_literal -> valid_variable .)
    PLUS            reduce using rule 87 (variable_literal -> valid_variable .)
    MINUS           reduce using rule 87 (variable_literal -> valid_variable .)
    LSHIFT          reduce using rule 87 (variable_literal -> valid_variable .)
    RSHIFT          reduce using rule 87 (variable_literal -> valid_variable .)
    GREATER         reduce using rule 87 (variable_literal -> valid_variable .)
    LESS            reduce using rule 87 (variable_literal -> valid_variable .)
    GEQ             reduce using rule 87 (variable_literal -> valid_variable .)
    LEQ             reduce using rule 87 (variable_literal -> valid_variable .)
    EQUAL           reduce using rule 87 (variable_literal -> valid_variable .)
    NEQUAL          reduce using rule 87 (variable_literal -> valid_variable .)
    AND_BITWISE     reduce using rule 87 (variable_literal -> valid_variable .)
    XOR             reduce using rule 87 (variable_literal -> valid_variable .)
    OR_BITWISE      reduce using rule 87 (variable_literal -> valid_variable .)
    AND             reduce using rule 87 (variable_literal -> valid_variable .)
    OR              reduce using rule 87 (variable_literal -> valid_variable .)
    RBPAREN         reduce using rule 87 (variable_literal -> valid_variable .)
    COMMA           reduce using rule 87 (variable_literal -> valid_variable .)
    RPAREN          reduce using rule 87 (variable_literal -> valid_variable .)
    STATE_END       reduce using rule 87 (variable_literal -> valid_variable .)
    KWRD_MATCH      reduce using rule 87 (variable_literal -> valid_variable .)
    KWRD_UNTIL      reduce using rule 87 (variable_literal -> valid_variable .)
    KWRD_TO         reduce using rule 87 (variable_literal -> valid_variable .)
    FUNTYPE         reduce using rule 87 (variable_literal -> valid_variable .)
    KWRD_BY         reduce using rule 87 (variable_literal -> valid_variable .)
    ASSIGN          shift and go to state 179
    TIMES_ASSIGN    shift and go to state 169
    DIVIDE_ASSIGN   shift and go to state 176
    REMAINDER_ASSIGN shift and go to state 172
    PLUS_ASSIGN     shift and go to state 178
    MINUS_ASSIGN    shift and go to state 171
    LSHIFT_ASSIGN   shift and go to state 174
    RSHIFT_ASSIGN   shift and go to state 170
    AND_ASSIGN      shift and go to state 175
    OR_ASSIGN       shift and go to state 173
    XOR_ASSIGN      shift and go to state 180

    assignment_operator            shift and go to state 177

state 102

    (98) block_statement -> class_declaration .

    KWRD_IF         reduce using rule 98 (block_statement -> class_declaration .)
    KWRD_WHILE      reduce using rule 98 (block_statement -> class_declaration .)
    KWRD_DO         reduce using rule 98 (block_statement -> class_declaration .)
    KWRD_FOR        reduce using rule 98 (block_statement -> class_declaration .)
    KWRD_OBJECT     reduce using rule 98 (block_statement -> class_declaration .)
    STATE_END       reduce using rule 98 (block_statement -> class_declaration .)
    KWRD_RETURN     reduce using rule 98 (block_statement -> class_declaration .)
    KWRD_PROTECTED  reduce using rule 98 (block_statement -> class_declaration .)
    KWRD_PRIVATE    reduce using rule 98 (block_statement -> class_declaration .)
    BLOCK_BEGIN     reduce using rule 98 (block_statement -> class_declaration .)
    IDENTIFIER      reduce using rule 98 (block_statement -> class_declaration .)
    PLUS            reduce using rule 98 (block_statement -> class_declaration .)
    MINUS           reduce using rule 98 (block_statement -> class_declaration .)
    TILDA           reduce using rule 98 (block_statement -> class_declaration .)
    NOT             reduce using rule 98 (block_statement -> class_declaration .)
    LPAREN          reduce using rule 98 (block_statement -> class_declaration .)
    CHARACTER       reduce using rule 98 (block_statement -> class_declaration .)
    STRING_CONST    reduce using rule 98 (block_statement -> class_declaration .)
    BOOL_CONSTT     reduce using rule 98 (block_statement -> class_declaration .)
    BOOL_CONSTF     reduce using rule 98 (block_statement -> class_declaration .)
    KWRD_NULL       reduce using rule 98 (block_statement -> class_declaration .)
    FLOAT_CONST     reduce using rule 98 (block_statement -> class_declaration .)
    INT_CONST       reduce using rule 98 (block_statement -> class_declaration .)
    KWRD_DEF        reduce using rule 98 (block_statement -> class_declaration .)
    KWRD_CLASS      reduce using rule 98 (block_statement -> class_declaration .)
    KWRD_VAR        reduce using rule 98 (block_statement -> class_declaration .)
    KWRD_VAL        reduce using rule 98 (block_statement -> class_declaration .)
    BLOCK_END       reduce using rule 98 (block_statement -> class_declaration .)
    KWRD_CASE       reduce using rule 98 (block_statement -> class_declaration .)


state 103

    (171) class_header_name -> class_header_name1 func_args_start constructor_arguement_list_opt . RPAREN

    RPAREN          shift and go to state 181


state 104

    (166) constructor_arguement_list_declarator -> declaration_keyword . IDENTIFIER COLON type

    IDENTIFIER      shift and go to state 182


state 105

    (162) constructor_arguement_list_opt -> constructor_arguement_list .
    (165) constructor_arguement_list -> constructor_arguement_list . COMMA constructor_arguement_list_declarator

    RPAREN          reduce using rule 162 (constructor_arguement_list_opt -> constructor_arguement_list .)
    COMMA           shift and go to state 183


state 106

    (103) declaration_keyword -> KWRD_VAR .

    IDENTIFIER      reduce using rule 103 (declaration_keyword -> KWRD_VAR .)
    LPAREN          reduce using rule 103 (declaration_keyword -> KWRD_VAR .)


state 107

    (104) declaration_keyword -> KWRD_VAL .

    IDENTIFIER      reduce using rule 104 (declaration_keyword -> KWRD_VAL .)
    LPAREN          reduce using rule 104 (declaration_keyword -> KWRD_VAL .)


state 108

    (164) constructor_arguement_list -> constructor_arguement_list_declarator .

    COMMA           reduce using rule 164 (constructor_arguement_list -> constructor_arguement_list_declarator .)
    RPAREN          reduce using rule 164 (constructor_arguement_list -> constructor_arguement_list_declarator .)


state 109

    (163) constructor_arguement_list_opt -> empty .

    RPAREN          reduce using rule 163 (constructor_arguement_list_opt -> empty .)


state 110

    (175) class_header_extends -> KWRD_EXTNDS name . LPAREN func_arguement_list_opt RPAREN
    (84) qualified_name -> name . DOT simple_name

    LPAREN          shift and go to state 184
    DOT             shift and go to state 132


state 111

    (9) ObjectDeclare -> KWRD_OBJECT IDENTIFIER KWRD_EXTNDS . IDENTIFIER

    IDENTIFIER      shift and go to state 185


state 112

    (176) class_body -> BLOCK_BEGIN block_statements_opt . end_scope
    (91) end_scope -> . BLOCK_END

    BLOCK_END       shift and go to state 118

    end_scope                      shift and go to state 186

state 113

    (172) class_header_name1 -> modifier_opts KWRD_CLASS name .
    (84) qualified_name -> name . DOT simple_name

    LPAREN          reduce using rule 172 (class_header_name1 -> modifier_opts KWRD_CLASS name .)
    DOT             shift and go to state 132


state 114

    (56) unary_expression -> MINUS unary_expression .

    TIMES           reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    REMAINDER       reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    LSHIFT          reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    RSHIFT          reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    GREATER         reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    LESS            reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    GEQ             reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    LEQ             reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    EQUAL           reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    NEQUAL          reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    AND_BITWISE     reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    XOR             reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    OR_BITWISE      reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    AND             reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    OR              reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    KWRD_MATCH      reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    STATE_END       reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    RBPAREN         reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    KWRD_UNTIL      reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    KWRD_TO         reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    FUNTYPE         reduce using rule 56 (unary_expression -> MINUS unary_expression .)
    KWRD_BY         reduce using rule 56 (unary_expression -> MINUS unary_expression .)


state 115

    (87) variable_literal -> valid_variable .

    TIMES           reduce using rule 87 (variable_literal -> valid_variable .)
    DIVIDE          reduce using rule 87 (variable_literal -> valid_variable .)
    REMAINDER       reduce using rule 87 (variable_literal -> valid_variable .)
    PLUS            reduce using rule 87 (variable_literal -> valid_variable .)
    MINUS           reduce using rule 87 (variable_literal -> valid_variable .)
    LSHIFT          reduce using rule 87 (variable_literal -> valid_variable .)
    RSHIFT          reduce using rule 87 (variable_literal -> valid_variable .)
    GREATER         reduce using rule 87 (variable_literal -> valid_variable .)
    LESS            reduce using rule 87 (variable_literal -> valid_variable .)
    GEQ             reduce using rule 87 (variable_literal -> valid_variable .)
    LEQ             reduce using rule 87 (variable_literal -> valid_variable .)
    EQUAL           reduce using rule 87 (variable_literal -> valid_variable .)
    NEQUAL          reduce using rule 87 (variable_literal -> valid_variable .)
    AND_BITWISE     reduce using rule 87 (variable_literal -> valid_variable .)
    XOR             reduce using rule 87 (variable_literal -> valid_variable .)
    OR_BITWISE      reduce using rule 87 (variable_literal -> valid_variable .)
    AND             reduce using rule 87 (variable_literal -> valid_variable .)
    OR              reduce using rule 87 (variable_literal -> valid_variable .)
    KWRD_MATCH      reduce using rule 87 (variable_literal -> valid_variable .)
    STATE_END       reduce using rule 87 (variable_literal -> valid_variable .)
    RPAREN          reduce using rule 87 (variable_literal -> valid_variable .)
    COMMA           reduce using rule 87 (variable_literal -> valid_variable .)
    RBPAREN         reduce using rule 87 (variable_literal -> valid_variable .)
    KWRD_UNTIL      reduce using rule 87 (variable_literal -> valid_variable .)
    KWRD_TO         reduce using rule 87 (variable_literal -> valid_variable .)
    FUNTYPE         reduce using rule 87 (variable_literal -> valid_variable .)
    KWRD_BY         reduce using rule 87 (variable_literal -> valid_variable .)


state 116

    (66) primary -> method_invocation .

    TIMES           reduce using rule 66 (primary -> method_invocation .)
    DIVIDE          reduce using rule 66 (primary -> method_invocation .)
    REMAINDER       reduce using rule 66 (primary -> method_invocation .)
    PLUS            reduce using rule 66 (primary -> method_invocation .)
    MINUS           reduce using rule 66 (primary -> method_invocation .)
    LSHIFT          reduce using rule 66 (primary -> method_invocation .)
    RSHIFT          reduce using rule 66 (primary -> method_invocation .)
    GREATER         reduce using rule 66 (primary -> method_invocation .)
    LESS            reduce using rule 66 (primary -> method_invocation .)
    GEQ             reduce using rule 66 (primary -> method_invocation .)
    LEQ             reduce using rule 66 (primary -> method_invocation .)
    EQUAL           reduce using rule 66 (primary -> method_invocation .)
    NEQUAL          reduce using rule 66 (primary -> method_invocation .)
    AND_BITWISE     reduce using rule 66 (primary -> method_invocation .)
    XOR             reduce using rule 66 (primary -> method_invocation .)
    OR_BITWISE      reduce using rule 66 (primary -> method_invocation .)
    AND             reduce using rule 66 (primary -> method_invocation .)
    OR              reduce using rule 66 (primary -> method_invocation .)
    KWRD_MATCH      reduce using rule 66 (primary -> method_invocation .)
    STATE_END       reduce using rule 66 (primary -> method_invocation .)
    RPAREN          reduce using rule 66 (primary -> method_invocation .)
    COMMA           reduce using rule 66 (primary -> method_invocation .)
    RBPAREN         reduce using rule 66 (primary -> method_invocation .)
    KWRD_UNTIL      reduce using rule 66 (primary -> method_invocation .)
    KWRD_TO         reduce using rule 66 (primary -> method_invocation .)
    FUNTYPE         reduce using rule 66 (primary -> method_invocation .)
    KWRD_BY         reduce using rule 66 (primary -> method_invocation .)


state 117

    (85) valid_variable -> name .
    (76) array_access -> name . LBPAREN expression RBPAREN
    (75) method_invocation -> name . LPAREN argument_list_opt RPAREN
    (84) qualified_name -> name . DOT simple_name

    TIMES           reduce using rule 85 (valid_variable -> name .)
    DIVIDE          reduce using rule 85 (valid_variable -> name .)
    REMAINDER       reduce using rule 85 (valid_variable -> name .)
    PLUS            reduce using rule 85 (valid_variable -> name .)
    MINUS           reduce using rule 85 (valid_variable -> name .)
    LSHIFT          reduce using rule 85 (valid_variable -> name .)
    RSHIFT          reduce using rule 85 (valid_variable -> name .)
    GREATER         reduce using rule 85 (valid_variable -> name .)
    LESS            reduce using rule 85 (valid_variable -> name .)
    GEQ             reduce using rule 85 (valid_variable -> name .)
    LEQ             reduce using rule 85 (valid_variable -> name .)
    EQUAL           reduce using rule 85 (valid_variable -> name .)
    NEQUAL          reduce using rule 85 (valid_variable -> name .)
    AND_BITWISE     reduce using rule 85 (valid_variable -> name .)
    XOR             reduce using rule 85 (valid_variable -> name .)
    OR_BITWISE      reduce using rule 85 (valid_variable -> name .)
    AND             reduce using rule 85 (valid_variable -> name .)
    OR              reduce using rule 85 (valid_variable -> name .)
    KWRD_MATCH      reduce using rule 85 (valid_variable -> name .)
    STATE_END       reduce using rule 85 (valid_variable -> name .)
    RPAREN          reduce using rule 85 (valid_variable -> name .)
    COMMA           reduce using rule 85 (valid_variable -> name .)
    RBPAREN         reduce using rule 85 (valid_variable -> name .)
    KWRD_UNTIL      reduce using rule 85 (valid_variable -> name .)
    KWRD_TO         reduce using rule 85 (valid_variable -> name .)
    FUNTYPE         reduce using rule 85 (valid_variable -> name .)
    KWRD_BY         reduce using rule 85 (valid_variable -> name .)
    LBPAREN         shift and go to state 131
    LPAREN          shift and go to state 130
    DOT             shift and go to state 132


state 118

    (91) end_scope -> BLOCK_END .

    KWRD_OBJECT     reduce using rule 91 (end_scope -> BLOCK_END .)
    KWRD_PROTECTED  reduce using rule 91 (end_scope -> BLOCK_END .)
    KWRD_PRIVATE    reduce using rule 91 (end_scope -> BLOCK_END .)
    KWRD_CLASS      reduce using rule 91 (end_scope -> BLOCK_END .)
    $end            reduce using rule 91 (end_scope -> BLOCK_END .)
    KWRD_IF         reduce using rule 91 (end_scope -> BLOCK_END .)
    KWRD_WHILE      reduce using rule 91 (end_scope -> BLOCK_END .)
    KWRD_DO         reduce using rule 91 (end_scope -> BLOCK_END .)
    KWRD_FOR        reduce using rule 91 (end_scope -> BLOCK_END .)
    STATE_END       reduce using rule 91 (end_scope -> BLOCK_END .)
    KWRD_RETURN     reduce using rule 91 (end_scope -> BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 91 (end_scope -> BLOCK_END .)
    IDENTIFIER      reduce using rule 91 (end_scope -> BLOCK_END .)
    PLUS            reduce using rule 91 (end_scope -> BLOCK_END .)
    MINUS           reduce using rule 91 (end_scope -> BLOCK_END .)
    TILDA           reduce using rule 91 (end_scope -> BLOCK_END .)
    NOT             reduce using rule 91 (end_scope -> BLOCK_END .)
    LPAREN          reduce using rule 91 (end_scope -> BLOCK_END .)
    CHARACTER       reduce using rule 91 (end_scope -> BLOCK_END .)
    STRING_CONST    reduce using rule 91 (end_scope -> BLOCK_END .)
    BOOL_CONSTT     reduce using rule 91 (end_scope -> BLOCK_END .)
    BOOL_CONSTF     reduce using rule 91 (end_scope -> BLOCK_END .)
    KWRD_NULL       reduce using rule 91 (end_scope -> BLOCK_END .)
    FLOAT_CONST     reduce using rule 91 (end_scope -> BLOCK_END .)
    INT_CONST       reduce using rule 91 (end_scope -> BLOCK_END .)
    KWRD_DEF        reduce using rule 91 (end_scope -> BLOCK_END .)
    KWRD_VAR        reduce using rule 91 (end_scope -> BLOCK_END .)
    KWRD_VAL        reduce using rule 91 (end_scope -> BLOCK_END .)
    BLOCK_END       reduce using rule 91 (end_scope -> BLOCK_END .)
    KWRD_CASE       reduce using rule 91 (end_scope -> BLOCK_END .)
    KWRD_ELSE       reduce using rule 91 (end_scope -> BLOCK_END .)


state 119

    (89) block -> start_scope block_statements_opt end_scope .

    KWRD_IF         reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    KWRD_WHILE      reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    KWRD_DO         reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    KWRD_FOR        reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    KWRD_OBJECT     reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    STATE_END       reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    KWRD_RETURN     reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    KWRD_PROTECTED  reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    KWRD_PRIVATE    reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    BLOCK_BEGIN     reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    IDENTIFIER      reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    PLUS            reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    MINUS           reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    TILDA           reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    NOT             reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    LPAREN          reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    CHARACTER       reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    STRING_CONST    reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    BOOL_CONSTT     reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    BOOL_CONSTF     reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    KWRD_NULL       reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    FLOAT_CONST     reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    INT_CONST       reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    KWRD_DEF        reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    KWRD_CLASS      reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    KWRD_VAR        reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    KWRD_VAL        reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    BLOCK_END       reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    KWRD_CASE       reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    KWRD_ELSE       reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)
    $end            reduce using rule 89 (block -> start_scope block_statements_opt end_scope .)


state 120

    (32) inclusive_or_expression -> inclusive_or_expression OR_BITWISE . exclusive_or_expression
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 187
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 115
    literal                        shift and go to state 77
    and_expression                 shift and go to state 92
    method_invocation              shift and go to state 116
    relational_expression          shift and go to state 79
    qualified_name                 shift and go to state 84
    multiplicative_expression      shift and go to state 61
    cast_expression                shift and go to state 85
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 117

state 121

    (55) unary_expression -> PLUS unary_expression .

    TIMES           reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    DIVIDE          reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    REMAINDER       reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    LSHIFT          reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    RSHIFT          reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    GREATER         reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    LESS            reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    GEQ             reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    LEQ             reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    EQUAL           reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    NEQUAL          reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    AND_BITWISE     reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    XOR             reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    OR_BITWISE      reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    AND             reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    OR              reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    KWRD_MATCH      reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    RPAREN          reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    STATE_END       reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    RBPAREN         reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    KWRD_UNTIL      reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    KWRD_TO         reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    FUNTYPE         reduce using rule 55 (unary_expression -> PLUS unary_expression .)
    KWRD_BY         reduce using rule 55 (unary_expression -> PLUS unary_expression .)


state 122

    (130) expression_statement -> statement_expression STATE_END .

    KWRD_IF         reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_WHILE      reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_DO         reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_FOR        reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_OBJECT     reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    STATE_END       reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_RETURN     reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_PROTECTED  reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_PRIVATE    reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    BLOCK_BEGIN     reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    IDENTIFIER      reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    PLUS            reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    MINUS           reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    TILDA           reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    NOT             reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    LPAREN          reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    CHARACTER       reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    STRING_CONST    reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    BOOL_CONSTT     reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    BOOL_CONSTF     reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_NULL       reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    FLOAT_CONST     reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    INT_CONST       reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_DEF        reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_CLASS      reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_VAR        reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_VAL        reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    BLOCK_END       reduce using rule 130 (expression_statement -> statement_expression STATE_END .)
    KWRD_CASE       reduce using rule 130 (expression_statement -> statement_expression STATE_END .)


state 123

    (139) do_while_statement -> KWRD_DO block . KWRD_WHILE LPAREN expression RPAREN STATE_END

    KWRD_WHILE      shift and go to state 188


state 124

    (178) method_header -> method_header_name func_args_start . func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (167) func_arguement_list_opt -> . variable_declarators
    (168) func_arguement_list_opt -> . empty
    (115) variable_declarators -> . variable_declarator
    (116) variable_declarators -> . variable_declarators COMMA variable_declarator
    (200) empty -> .
    (117) variable_declarator -> . variable_declarator_id
    (118) variable_declarator_id -> . IDENTIFIER COLON type

    RPAREN          reduce using rule 200 (empty -> .)
    IDENTIFIER      shift and go to state 190

    func_arguement_list_opt        shift and go to state 189
    variable_declarator            shift and go to state 193
    variable_declarators           shift and go to state 192
    variable_declarator_id         shift and go to state 191
    empty                          shift and go to state 194

state 125

    (161) return_statement -> KWRD_RETURN expression_optional . STATE_END

    STATE_END       shift and go to state 195


state 126

    (12) expression_optional -> empty .

    STATE_END       reduce using rule 12 (expression_optional -> empty .)


state 127

    (13) assignment_expression -> assignment .

    COMMA           reduce using rule 13 (assignment_expression -> assignment .)
    RPAREN          reduce using rule 13 (assignment_expression -> assignment .)
    RBPAREN         reduce using rule 13 (assignment_expression -> assignment .)
    FUNTYPE         reduce using rule 13 (assignment_expression -> assignment .)
    STATE_END       reduce using rule 13 (assignment_expression -> assignment .)
    KWRD_MATCH      reduce using rule 13 (assignment_expression -> assignment .)
    KWRD_UNTIL      reduce using rule 13 (assignment_expression -> assignment .)
    KWRD_TO         reduce using rule 13 (assignment_expression -> assignment .)
    KWRD_BY         reduce using rule 13 (assignment_expression -> assignment .)


state 128

    (85) valid_variable -> name .
    (76) array_access -> name . LBPAREN expression RBPAREN
    (84) qualified_name -> name . DOT simple_name
    (75) method_invocation -> name . LPAREN argument_list_opt RPAREN

    ASSIGN          reduce using rule 85 (valid_variable -> name .)
    TIMES_ASSIGN    reduce using rule 85 (valid_variable -> name .)
    DIVIDE_ASSIGN   reduce using rule 85 (valid_variable -> name .)
    REMAINDER_ASSIGN reduce using rule 85 (valid_variable -> name .)
    PLUS_ASSIGN     reduce using rule 85 (valid_variable -> name .)
    MINUS_ASSIGN    reduce using rule 85 (valid_variable -> name .)
    LSHIFT_ASSIGN   reduce using rule 85 (valid_variable -> name .)
    RSHIFT_ASSIGN   reduce using rule 85 (valid_variable -> name .)
    AND_ASSIGN      reduce using rule 85 (valid_variable -> name .)
    OR_ASSIGN       reduce using rule 85 (valid_variable -> name .)
    XOR_ASSIGN      reduce using rule 85 (valid_variable -> name .)
    TIMES           reduce using rule 85 (valid_variable -> name .)
    DIVIDE          reduce using rule 85 (valid_variable -> name .)
    REMAINDER       reduce using rule 85 (valid_variable -> name .)
    PLUS            reduce using rule 85 (valid_variable -> name .)
    MINUS           reduce using rule 85 (valid_variable -> name .)
    LSHIFT          reduce using rule 85 (valid_variable -> name .)
    RSHIFT          reduce using rule 85 (valid_variable -> name .)
    GREATER         reduce using rule 85 (valid_variable -> name .)
    LESS            reduce using rule 85 (valid_variable -> name .)
    GEQ             reduce using rule 85 (valid_variable -> name .)
    LEQ             reduce using rule 85 (valid_variable -> name .)
    EQUAL           reduce using rule 85 (valid_variable -> name .)
    NEQUAL          reduce using rule 85 (valid_variable -> name .)
    AND_BITWISE     reduce using rule 85 (valid_variable -> name .)
    XOR             reduce using rule 85 (valid_variable -> name .)
    OR_BITWISE      reduce using rule 85 (valid_variable -> name .)
    AND             reduce using rule 85 (valid_variable -> name .)
    OR              reduce using rule 85 (valid_variable -> name .)
    STATE_END       reduce using rule 85 (valid_variable -> name .)
    RPAREN          reduce using rule 85 (valid_variable -> name .)
    COMMA           reduce using rule 85 (valid_variable -> name .)
    FUNTYPE         reduce using rule 85 (valid_variable -> name .)
    KWRD_BY         reduce using rule 85 (valid_variable -> name .)
    KWRD_UNTIL      reduce using rule 85 (valid_variable -> name .)
    KWRD_TO         reduce using rule 85 (valid_variable -> name .)
    RBPAREN         reduce using rule 85 (valid_variable -> name .)
    KWRD_MATCH      reduce using rule 85 (valid_variable -> name .)
    LBPAREN         shift and go to state 131
    DOT             shift and go to state 132
    LPAREN          shift and go to state 130


state 129

    (11) expression_optional -> expression .

    STATE_END       reduce using rule 11 (expression_optional -> expression .)


state 130

    (75) method_invocation -> name LPAREN . argument_list_opt RPAREN
    (77) argument_list_opt -> . argument_list
    (78) argument_list_opt -> . empty
    (79) argument_list -> . expression
    (80) argument_list -> . argument_list COMMA expression
    (200) empty -> .
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    RPAREN          reduce using rule 200 (empty -> .)
    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    and_expression                 shift and go to state 92
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    unary_expression               shift and go to state 54
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 101
    inclusive_or_expression        shift and go to state 39
    literal                        shift and go to state 77
    relational_expression          shift and go to state 79
    cast_expression                shift and go to state 85
    conditional_or_expression      shift and go to state 59
    empty                          shift and go to state 197
    argument_list                  shift and go to state 196
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    assignment                     shift and go to state 127
    multiplicative_expression      shift and go to state 61
    method_invocation              shift and go to state 116
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 128
    argument_list_opt              shift and go to state 198
    expression                     shift and go to state 199
    conditional_and_expression     shift and go to state 65

state 131

    (76) array_access -> name LBPAREN . expression RBPAREN
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 101
    inclusive_or_expression        shift and go to state 39
    literal                        shift and go to state 77
    and_expression                 shift and go to state 92
    relational_expression          shift and go to state 79
    cast_expression                shift and go to state 85
    conditional_or_expression      shift and go to state 59
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    assignment                     shift and go to state 127
    multiplicative_expression      shift and go to state 61
    method_invocation              shift and go to state 116
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 128
    expression                     shift and go to state 200
    conditional_and_expression     shift and go to state 65

state 132

    (84) qualified_name -> name DOT . simple_name
    (83) simple_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 82

    simple_name                    shift and go to state 201

state 133

    (138) while_statement -> KWRD_WHILE LPAREN . expression RPAREN block
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 101
    inclusive_or_expression        shift and go to state 39
    literal                        shift and go to state 77
    and_expression                 shift and go to state 92
    relational_expression          shift and go to state 79
    cast_expression                shift and go to state 85
    conditional_or_expression      shift and go to state 59
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    assignment                     shift and go to state 127
    multiplicative_expression      shift and go to state 61
    method_invocation              shift and go to state 116
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 128
    expression                     shift and go to state 202
    conditional_and_expression     shift and go to state 65

state 134

    (140) for_statement -> KWRD_FOR LPAREN . for_logic RPAREN block
    (141) for_logic -> . for_update
    (142) for_logic -> . for_update STATE_END for_logic
    (143) for_update -> . for_loop for_step_opts
    (144) for_loop -> . IDENTIFIER CHOOSE expression for_untilTo expression

    IDENTIFIER      shift and go to state 206

    for_loop                       shift and go to state 203
    for_logic                      shift and go to state 204
    for_update                     shift and go to state 205

state 135

    (49) additive_expression -> additive_expression PLUS . multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 84
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    base_variable_set              shift and go to state 93
    unary_expression               shift and go to state 54
    valid_variable                 shift and go to state 115
    array_access                   shift and go to state 34
    multiplicative_expression      shift and go to state 207
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    literal                        shift and go to state 77
    method_invocation              shift and go to state 116
    cast_expression                shift and go to state 85
    simple_name                    shift and go to state 74
    name                           shift and go to state 117

state 136

    (50) additive_expression -> additive_expression MINUS . multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 84
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    base_variable_set              shift and go to state 93
    unary_expression               shift and go to state 54
    valid_variable                 shift and go to state 115
    array_access                   shift and go to state 34
    multiplicative_expression      shift and go to state 208
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    literal                        shift and go to state 77
    method_invocation              shift and go to state 116
    cast_expression                shift and go to state 85
    simple_name                    shift and go to state 74
    name                           shift and go to state 117

state 137

    (28) conditional_or_expression -> conditional_or_expression OR . conditional_and_expression
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 115
    inclusive_or_expression        shift and go to state 39
    literal                        shift and go to state 77
    and_expression                 shift and go to state 92
    cast_expression                shift and go to state 85
    relational_expression          shift and go to state 79
    qualified_name                 shift and go to state 84
    multiplicative_expression      shift and go to state 61
    method_invocation              shift and go to state 116
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 117
    conditional_and_expression     shift and go to state 209

state 138

    (54) multiplicative_expression -> multiplicative_expression REMAINDER . unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 84
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    unary_expression               shift and go to state 210
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 115
    array_access                   shift and go to state 34
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    literal                        shift and go to state 77
    method_invocation              shift and go to state 116
    cast_expression                shift and go to state 85
    simple_name                    shift and go to state 74
    name                           shift and go to state 117

state 139

    (53) multiplicative_expression -> multiplicative_expression DIVIDE . unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 84
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    unary_expression               shift and go to state 211
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 115
    array_access                   shift and go to state 34
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    literal                        shift and go to state 77
    method_invocation              shift and go to state 116
    cast_expression                shift and go to state 85
    simple_name                    shift and go to state 74
    name                           shift and go to state 117

state 140

    (52) multiplicative_expression -> multiplicative_expression TIMES . unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 84
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    unary_expression               shift and go to state 212
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 115
    array_access                   shift and go to state 34
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    literal                        shift and go to state 77
    method_invocation              shift and go to state 116
    cast_expression                shift and go to state 85
    simple_name                    shift and go to state 74
    name                           shift and go to state 117

state 141

    (47) shift_expression -> shift_expression RSHIFT . additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 84
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    base_variable_set              shift and go to state 93
    unary_expression               shift and go to state 54
    valid_variable                 shift and go to state 115
    array_access                   shift and go to state 34
    multiplicative_expression      shift and go to state 61
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    literal                        shift and go to state 77
    method_invocation              shift and go to state 116
    cast_expression                shift and go to state 85
    simple_name                    shift and go to state 74
    additive_expression            shift and go to state 213
    name                           shift and go to state 117

state 142

    (46) shift_expression -> shift_expression LSHIFT . additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 84
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    base_variable_set              shift and go to state 93
    unary_expression               shift and go to state 54
    valid_variable                 shift and go to state 115
    array_access                   shift and go to state 34
    multiplicative_expression      shift and go to state 61
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    literal                        shift and go to state 77
    method_invocation              shift and go to state 116
    cast_expression                shift and go to state 85
    simple_name                    shift and go to state 74
    additive_expression            shift and go to state 214
    name                           shift and go to state 117

state 143

    (133) if_then_statement -> KWRD_IF LPAREN . expression RPAREN block
    (134) if_then_else_statement -> KWRD_IF LPAREN . expression RPAREN if_then_else_intermediate KWRD_ELSE block
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 101
    inclusive_or_expression        shift and go to state 39
    literal                        shift and go to state 77
    and_expression                 shift and go to state 92
    relational_expression          shift and go to state 79
    cast_expression                shift and go to state 85
    conditional_or_expression      shift and go to state 59
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    assignment                     shift and go to state 127
    multiplicative_expression      shift and go to state 61
    method_invocation              shift and go to state 116
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 128
    expression                     shift and go to state 215
    conditional_and_expression     shift and go to state 65

state 144

    (30) conditional_and_expression -> conditional_and_expression AND . inclusive_or_expression
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 115
    inclusive_or_expression        shift and go to state 216
    literal                        shift and go to state 77
    and_expression                 shift and go to state 92
    method_invocation              shift and go to state 116
    relational_expression          shift and go to state 79
    qualified_name                 shift and go to state 84
    multiplicative_expression      shift and go to state 61
    cast_expression                shift and go to state 85
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 117

state 145

    (60) unary_expression_not_plus_minus -> NOT unary_expression .

    TIMES           reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    DIVIDE          reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    REMAINDER       reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    PLUS            reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    MINUS           reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    LSHIFT          reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    RSHIFT          reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    GREATER         reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    LESS            reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    GEQ             reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    LEQ             reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    EQUAL           reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    NEQUAL          reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    AND_BITWISE     reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    XOR             reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    OR_BITWISE      reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    AND             reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    OR              reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    KWRD_MATCH      reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    STATE_END       reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    RPAREN          reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    COMMA           reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    RBPAREN         reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    KWRD_UNTIL      reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    KWRD_TO         reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    FUNTYPE         reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)
    KWRD_BY         reduce using rule 60 (unary_expression_not_plus_minus -> NOT unary_expression .)


state 146

    (149) switch_statement -> expression KWRD_MATCH . switch_block
    (150) switch_block -> . BLOCK_BEGIN BLOCK_END
    (151) switch_block -> . BLOCK_BEGIN switch_block_statements BLOCK_END
    (152) switch_block -> . BLOCK_BEGIN switch_labels BLOCK_END
    (153) switch_block -> . BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END

    BLOCK_BEGIN     shift and go to state 217

    switch_block                   shift and go to state 218

state 147

    (34) exclusive_or_expression -> exclusive_or_expression XOR . and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 54
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    and_expression                 shift and go to state 219
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 115
    literal                        shift and go to state 77
    additive_expression            shift and go to state 58
    method_invocation              shift and go to state 116
    relational_expression          shift and go to state 79
    qualified_name                 shift and go to state 84
    multiplicative_expression      shift and go to state 61
    cast_expression                shift and go to state 85
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 117

state 148

    (59) unary_expression_not_plus_minus -> TILDA unary_expression .

    TIMES           reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    DIVIDE          reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    REMAINDER       reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    PLUS            reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    MINUS           reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    LSHIFT          reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    RSHIFT          reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    GREATER         reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    LESS            reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    GEQ             reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    LEQ             reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    EQUAL           reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    NEQUAL          reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    AND_BITWISE     reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    XOR             reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    OR_BITWISE      reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    AND             reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    OR              reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    KWRD_MATCH      reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    STATE_END       reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    RPAREN          reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    COMMA           reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    RBPAREN         reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    KWRD_UNTIL      reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    KWRD_TO         reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    FUNTYPE         reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)
    KWRD_BY         reduce using rule 59 (unary_expression_not_plus_minus -> TILDA unary_expression .)


state 149

    (43) relational_expression -> relational_expression GEQ . shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 84
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    base_variable_set              shift and go to state 93
    unary_expression               shift and go to state 54
    valid_variable                 shift and go to state 115
    array_access                   shift and go to state 34
    multiplicative_expression      shift and go to state 61
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    literal                        shift and go to state 77
    method_invocation              shift and go to state 116
    cast_expression                shift and go to state 85
    simple_name                    shift and go to state 74
    shift_expression               shift and go to state 220
    additive_expression            shift and go to state 58
    name                           shift and go to state 117

state 150

    (41) relational_expression -> relational_expression GREATER . shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 84
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    base_variable_set              shift and go to state 93
    unary_expression               shift and go to state 54
    valid_variable                 shift and go to state 115
    array_access                   shift and go to state 34
    multiplicative_expression      shift and go to state 61
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    literal                        shift and go to state 77
    method_invocation              shift and go to state 116
    cast_expression                shift and go to state 85
    simple_name                    shift and go to state 74
    shift_expression               shift and go to state 221
    additive_expression            shift and go to state 58
    name                           shift and go to state 117

state 151

    (42) relational_expression -> relational_expression LESS . shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 84
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    base_variable_set              shift and go to state 93
    unary_expression               shift and go to state 54
    valid_variable                 shift and go to state 115
    array_access                   shift and go to state 34
    multiplicative_expression      shift and go to state 61
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    literal                        shift and go to state 77
    method_invocation              shift and go to state 116
    cast_expression                shift and go to state 85
    simple_name                    shift and go to state 74
    shift_expression               shift and go to state 222
    additive_expression            shift and go to state 58
    name                           shift and go to state 117

state 152

    (44) relational_expression -> relational_expression LEQ . shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 84
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    base_variable_set              shift and go to state 93
    unary_expression               shift and go to state 54
    valid_variable                 shift and go to state 115
    array_access                   shift and go to state 34
    multiplicative_expression      shift and go to state 61
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    literal                        shift and go to state 77
    method_invocation              shift and go to state 116
    cast_expression                shift and go to state 85
    simple_name                    shift and go to state 74
    shift_expression               shift and go to state 223
    additive_expression            shift and go to state 58
    name                           shift and go to state 117

state 153

    (39) equality_expression -> equality_expression NEQUAL . relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 54
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 115
    literal                        shift and go to state 77
    relational_expression          shift and go to state 224
    method_invocation              shift and go to state 116
    qualified_name                 shift and go to state 84
    multiplicative_expression      shift and go to state 61
    cast_expression                shift and go to state 85
    shift_expression               shift and go to state 62
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 117

state 154

    (38) equality_expression -> equality_expression EQUAL . relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 54
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 115
    literal                        shift and go to state 77
    relational_expression          shift and go to state 225
    method_invocation              shift and go to state 116
    qualified_name                 shift and go to state 84
    multiplicative_expression      shift and go to state 61
    cast_expression                shift and go to state 85
    shift_expression               shift and go to state 62
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 117

state 155

    (177) method_declaration -> method_header method_body .

    KWRD_IF         reduce using rule 177 (method_declaration -> method_header method_body .)
    KWRD_WHILE      reduce using rule 177 (method_declaration -> method_header method_body .)
    KWRD_DO         reduce using rule 177 (method_declaration -> method_header method_body .)
    KWRD_FOR        reduce using rule 177 (method_declaration -> method_header method_body .)
    KWRD_OBJECT     reduce using rule 177 (method_declaration -> method_header method_body .)
    STATE_END       reduce using rule 177 (method_declaration -> method_header method_body .)
    KWRD_RETURN     reduce using rule 177 (method_declaration -> method_header method_body .)
    KWRD_PROTECTED  reduce using rule 177 (method_declaration -> method_header method_body .)
    KWRD_PRIVATE    reduce using rule 177 (method_declaration -> method_header method_body .)
    BLOCK_BEGIN     reduce using rule 177 (method_declaration -> method_header method_body .)
    IDENTIFIER      reduce using rule 177 (method_declaration -> method_header method_body .)
    PLUS            reduce using rule 177 (method_declaration -> method_header method_body .)
    MINUS           reduce using rule 177 (method_declaration -> method_header method_body .)
    TILDA           reduce using rule 177 (method_declaration -> method_header method_body .)
    NOT             reduce using rule 177 (method_declaration -> method_header method_body .)
    LPAREN          reduce using rule 177 (method_declaration -> method_header method_body .)
    CHARACTER       reduce using rule 177 (method_declaration -> method_header method_body .)
    STRING_CONST    reduce using rule 177 (method_declaration -> method_header method_body .)
    BOOL_CONSTT     reduce using rule 177 (method_declaration -> method_header method_body .)
    BOOL_CONSTF     reduce using rule 177 (method_declaration -> method_header method_body .)
    KWRD_NULL       reduce using rule 177 (method_declaration -> method_header method_body .)
    FLOAT_CONST     reduce using rule 177 (method_declaration -> method_header method_body .)
    INT_CONST       reduce using rule 177 (method_declaration -> method_header method_body .)
    KWRD_DEF        reduce using rule 177 (method_declaration -> method_header method_body .)
    KWRD_CLASS      reduce using rule 177 (method_declaration -> method_header method_body .)
    KWRD_VAR        reduce using rule 177 (method_declaration -> method_header method_body .)
    KWRD_VAL        reduce using rule 177 (method_declaration -> method_header method_body .)
    BLOCK_END       reduce using rule 177 (method_declaration -> method_header method_body .)
    KWRD_CASE       reduce using rule 177 (method_declaration -> method_header method_body .)


state 156

    (183) method_body -> BLOCK_BEGIN . block_statements_opt end_scope
    (92) block_statements_opt -> . block_statements
    (93) block_statements_opt -> . empty
    (94) block_statements -> . block_statement
    (95) block_statements -> . block_statements block_statement
    (200) empty -> .
    (96) block_statement -> . local_variable_declaration_statement
    (97) block_statement -> . statement
    (98) block_statement -> . class_declaration
    (99) block_statement -> . SingletonObject
    (100) block_statement -> . method_declaration
    (105) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (119) statement -> . normal_statement
    (120) statement -> . if_then_statement
    (121) statement -> . if_then_else_statement
    (122) statement -> . while_statement
    (123) statement -> . do_while_statement
    (124) statement -> . for_statement
    (169) class_declaration -> . class_header class_body
    (7) SingletonObject -> . ObjectDeclare block
    (177) method_declaration -> . method_header method_body
    (106) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (125) normal_statement -> . block
    (126) normal_statement -> . expression_statement
    (127) normal_statement -> . empty_statement
    (128) normal_statement -> . return_statement
    (129) normal_statement -> . switch_statement
    (133) if_then_statement -> . KWRD_IF LPAREN expression RPAREN block
    (134) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block
    (138) while_statement -> . KWRD_WHILE LPAREN expression RPAREN block
    (139) do_while_statement -> . KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END
    (140) for_statement -> . KWRD_FOR LPAREN for_logic RPAREN block
    (170) class_header -> . class_header_name class_header_extends_opt
    (8) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (9) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (178) method_header -> . method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (101) modifier_opts -> . modifier
    (102) modifier_opts -> . empty
    (89) block -> . start_scope block_statements_opt end_scope
    (130) expression_statement -> . statement_expression STATE_END
    (160) empty_statement -> . STATE_END
    (161) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (149) switch_statement -> . expression KWRD_MATCH switch_block
    (171) class_header_name -> . class_header_name1 func_args_start constructor_arguement_list_opt RPAREN
    (182) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (184) modifier -> . KWRD_PROTECTED
    (185) modifier -> . KWRD_PRIVATE
    (90) start_scope -> . BLOCK_BEGIN
    (131) statement_expression -> . assignment
    (132) statement_expression -> . method_invocation
    (10) expression -> . assignment_expression
    (172) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (76) array_access -> . name LBPAREN expression RBPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    BLOCK_END       reduce using rule 200 (empty -> .)
    KWRD_DEF        reduce using rule 200 (empty -> .)
    KWRD_CLASS      reduce using rule 200 (empty -> .)
    KWRD_VAR        reduce using rule 200 (empty -> .)
    KWRD_VAL        reduce using rule 200 (empty -> .)
    KWRD_IF         shift and go to state 63
    KWRD_WHILE      shift and go to state 52
    KWRD_DO         shift and go to state 47
    KWRD_FOR        shift and go to state 56
    KWRD_OBJECT     shift and go to state 4
    STATE_END       shift and go to state 53
    KWRD_RETURN     shift and go to state 50
    KWRD_PROTECTED  shift and go to state 11
    KWRD_PRIVATE    shift and go to state 15
    BLOCK_BEGIN     shift and go to state 16
    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    expression_statement           shift and go to state 32
    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    normal_statement               shift and go to state 90
    ObjectDeclare                  shift and go to state 1
    class_header_name1             shift and go to state 2
    if_then_statement              shift and go to state 73
    array_access                   shift and go to state 34
    switch_statement               shift and go to state 57
    assignment_expression          shift and go to state 97
    block_statements_opt           shift and go to state 226
    qualified_name                 shift and go to state 84
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 39
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 70
    cast_expression                shift and go to state 85
    block_statement                shift and go to state 76
    shift_expression               shift and go to state 62
    return_statement               shift and go to state 94
    while_statement                shift and go to state 40
    and_expression                 shift and go to state 92
    statement                      shift and go to state 80
    literal                        shift and go to state 77
    statement_expression           shift and go to state 43
    method_invocation              shift and go to state 81
    simple_name                    shift and go to state 74
    conditional_or_expression      shift and go to state 59
    empty                          shift and go to state 83
    relational_expression          shift and go to state 79
    block_statements               shift and go to state 95
    for_statement                  shift and go to state 44
    local_variable_declaration_statement shift and go to state 45
    do_while_statement             shift and go to state 60
    int_float                      shift and go to state 46
    assignment                     shift and go to state 98
    multiplicative_expression      shift and go to state 61
    primary                        shift and go to state 72
    additive_expression            shift and go to state 58
    SingletonObject                shift and go to state 48
    start_scope                    shift and go to state 17
    method_header_name             shift and go to state 49
    class_header                   shift and go to state 9
    modifier_opts                  shift and go to state 100
    equality_expression            shift and go to state 86
    variable_literal               shift and go to state 64
    name                           shift and go to state 51
    unary_expression_not_plus_minus shift and go to state 55
    valid_variable                 shift and go to state 101
    method_header                  shift and go to state 87
    empty_statement                shift and go to state 88
    class_declaration              shift and go to state 102
    local_variable_declaration     shift and go to state 89
    modifier                       shift and go to state 14
    expression                     shift and go to state 67
    conditional_and_expression     shift and go to state 65
    block                          shift and go to state 68
    if_then_else_statement         shift and go to state 69

state 157

    (105) local_variable_declaration_statement -> local_variable_declaration STATE_END .

    KWRD_IF         reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_WHILE      reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_DO         reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_FOR        reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_OBJECT     reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    STATE_END       reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_RETURN     reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_PROTECTED  reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_PRIVATE    reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    BLOCK_BEGIN     reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    IDENTIFIER      reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    PLUS            reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    MINUS           reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    TILDA           reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    NOT             reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    LPAREN          reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    CHARACTER       reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    STRING_CONST    reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    BOOL_CONSTT     reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    BOOL_CONSTF     reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_NULL       reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    FLOAT_CONST     reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    INT_CONST       reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_DEF        reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_CLASS      reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_VAR        reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_VAL        reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    BLOCK_END       reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)
    KWRD_CASE       reduce using rule 105 (local_variable_declaration_statement -> local_variable_declaration STATE_END .)


state 158

    (36) and_expression -> and_expression AND_BITWISE . equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 54
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 115
    literal                        shift and go to state 77
    additive_expression            shift and go to state 58
    method_invocation              shift and go to state 116
    relational_expression          shift and go to state 79
    qualified_name                 shift and go to state 84
    multiplicative_expression      shift and go to state 61
    cast_expression                shift and go to state 85
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 227
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 117

state 159

    (95) block_statements -> block_statements block_statement .

    KWRD_IF         reduce using rule 95 (block_statements -> block_statements block_statement .)
    KWRD_WHILE      reduce using rule 95 (block_statements -> block_statements block_statement .)
    KWRD_DO         reduce using rule 95 (block_statements -> block_statements block_statement .)
    KWRD_FOR        reduce using rule 95 (block_statements -> block_statements block_statement .)
    KWRD_OBJECT     reduce using rule 95 (block_statements -> block_statements block_statement .)
    STATE_END       reduce using rule 95 (block_statements -> block_statements block_statement .)
    KWRD_RETURN     reduce using rule 95 (block_statements -> block_statements block_statement .)
    KWRD_PROTECTED  reduce using rule 95 (block_statements -> block_statements block_statement .)
    KWRD_PRIVATE    reduce using rule 95 (block_statements -> block_statements block_statement .)
    BLOCK_BEGIN     reduce using rule 95 (block_statements -> block_statements block_statement .)
    IDENTIFIER      reduce using rule 95 (block_statements -> block_statements block_statement .)
    PLUS            reduce using rule 95 (block_statements -> block_statements block_statement .)
    MINUS           reduce using rule 95 (block_statements -> block_statements block_statement .)
    TILDA           reduce using rule 95 (block_statements -> block_statements block_statement .)
    NOT             reduce using rule 95 (block_statements -> block_statements block_statement .)
    LPAREN          reduce using rule 95 (block_statements -> block_statements block_statement .)
    CHARACTER       reduce using rule 95 (block_statements -> block_statements block_statement .)
    STRING_CONST    reduce using rule 95 (block_statements -> block_statements block_statement .)
    BOOL_CONSTT     reduce using rule 95 (block_statements -> block_statements block_statement .)
    BOOL_CONSTF     reduce using rule 95 (block_statements -> block_statements block_statement .)
    KWRD_NULL       reduce using rule 95 (block_statements -> block_statements block_statement .)
    FLOAT_CONST     reduce using rule 95 (block_statements -> block_statements block_statement .)
    INT_CONST       reduce using rule 95 (block_statements -> block_statements block_statement .)
    KWRD_DEF        reduce using rule 95 (block_statements -> block_statements block_statement .)
    KWRD_CLASS      reduce using rule 95 (block_statements -> block_statements block_statement .)
    KWRD_VAR        reduce using rule 95 (block_statements -> block_statements block_statement .)
    KWRD_VAL        reduce using rule 95 (block_statements -> block_statements block_statement .)
    BLOCK_END       reduce using rule 95 (block_statements -> block_statements block_statement .)
    KWRD_CASE       reduce using rule 95 (block_statements -> block_statements block_statement .)


state 160

    (188) primitive_type -> TYPE_INT .

    ASSIGN          reduce using rule 188 (primitive_type -> TYPE_INT .)
    COMMA           reduce using rule 188 (primitive_type -> TYPE_INT .)
    RPAREN          reduce using rule 188 (primitive_type -> TYPE_INT .)
    RBPAREN         reduce using rule 188 (primitive_type -> TYPE_INT .)


state 161

    (191) primitive_type -> TYPE_STRING .

    ASSIGN          reduce using rule 191 (primitive_type -> TYPE_STRING .)
    COMMA           reduce using rule 191 (primitive_type -> TYPE_STRING .)
    RPAREN          reduce using rule 191 (primitive_type -> TYPE_STRING .)
    RBPAREN         reduce using rule 191 (primitive_type -> TYPE_STRING .)


state 162

    (190) primitive_type -> TYPE_CHAR .

    ASSIGN          reduce using rule 190 (primitive_type -> TYPE_CHAR .)
    COMMA           reduce using rule 190 (primitive_type -> TYPE_CHAR .)
    RPAREN          reduce using rule 190 (primitive_type -> TYPE_CHAR .)
    RBPAREN         reduce using rule 190 (primitive_type -> TYPE_CHAR .)


state 163

    (64) cast_expression -> LPAREN primitive_type . RPAREN unary_expression

    RPAREN          shift and go to state 228


state 164

    (192) primitive_type -> TYPE_BOOLEAN .

    ASSIGN          reduce using rule 192 (primitive_type -> TYPE_BOOLEAN .)
    COMMA           reduce using rule 192 (primitive_type -> TYPE_BOOLEAN .)
    RPAREN          reduce using rule 192 (primitive_type -> TYPE_BOOLEAN .)
    RBPAREN         reduce using rule 192 (primitive_type -> TYPE_BOOLEAN .)


state 165

    (189) primitive_type -> TYPE_FLOAT .

    ASSIGN          reduce using rule 189 (primitive_type -> TYPE_FLOAT .)
    COMMA           reduce using rule 189 (primitive_type -> TYPE_FLOAT .)
    RPAREN          reduce using rule 189 (primitive_type -> TYPE_FLOAT .)
    RBPAREN         reduce using rule 189 (primitive_type -> TYPE_FLOAT .)


state 166

    (63) base_variable_set -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 229


state 167

    (182) method_header_name -> modifier_opts KWRD_DEF . IDENTIFIER

    IDENTIFIER      shift and go to state 230


state 168

    (106) local_variable_declaration -> modifier_opts declaration_keyword . variable_declaration_body
    (112) variable_declaration_body -> . variable_declarator ASSIGN variable_declaration_initializer
    (113) variable_declaration_body -> . LPAREN variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list RPAREN
    (114) variable_declaration_body -> . IDENTIFIER ASSIGN LPAREN func_arguement_list_opt RPAREN FUNTYPE expression
    (117) variable_declarator -> . variable_declarator_id
    (118) variable_declarator_id -> . IDENTIFIER COLON type

    LPAREN          shift and go to state 233
    IDENTIFIER      shift and go to state 234

    variable_declaration_body      shift and go to state 231
    variable_declarator            shift and go to state 232
    variable_declarator_id         shift and go to state 191

state 169

    (17) assignment_operator -> TIMES_ASSIGN .

    IDENTIFIER      reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    PLUS            reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    MINUS           reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    TILDA           reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    NOT             reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    LPAREN          reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    CHARACTER       reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    STRING_CONST    reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    BOOL_CONSTT     reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    BOOL_CONSTF     reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    KWRD_NULL       reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    FLOAT_CONST     reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)
    INT_CONST       reduce using rule 17 (assignment_operator -> TIMES_ASSIGN .)


state 170

    (23) assignment_operator -> RSHIFT_ASSIGN .

    IDENTIFIER      reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    PLUS            reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    MINUS           reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    TILDA           reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    NOT             reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    LPAREN          reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    CHARACTER       reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    STRING_CONST    reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    BOOL_CONSTT     reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    BOOL_CONSTF     reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    KWRD_NULL       reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    FLOAT_CONST     reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)
    INT_CONST       reduce using rule 23 (assignment_operator -> RSHIFT_ASSIGN .)


state 171

    (21) assignment_operator -> MINUS_ASSIGN .

    IDENTIFIER      reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    PLUS            reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    MINUS           reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    TILDA           reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    NOT             reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    LPAREN          reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    CHARACTER       reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    STRING_CONST    reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    BOOL_CONSTT     reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    BOOL_CONSTF     reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    KWRD_NULL       reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    FLOAT_CONST     reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)
    INT_CONST       reduce using rule 21 (assignment_operator -> MINUS_ASSIGN .)


state 172

    (19) assignment_operator -> REMAINDER_ASSIGN .

    IDENTIFIER      reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    PLUS            reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    MINUS           reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    TILDA           reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    NOT             reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    LPAREN          reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    CHARACTER       reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    STRING_CONST    reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    BOOL_CONSTT     reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    BOOL_CONSTF     reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    KWRD_NULL       reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    FLOAT_CONST     reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)
    INT_CONST       reduce using rule 19 (assignment_operator -> REMAINDER_ASSIGN .)


state 173

    (25) assignment_operator -> OR_ASSIGN .

    IDENTIFIER      reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    PLUS            reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    MINUS           reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    TILDA           reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    NOT             reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    LPAREN          reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    CHARACTER       reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    STRING_CONST    reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    BOOL_CONSTT     reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    BOOL_CONSTF     reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    KWRD_NULL       reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    FLOAT_CONST     reduce using rule 25 (assignment_operator -> OR_ASSIGN .)
    INT_CONST       reduce using rule 25 (assignment_operator -> OR_ASSIGN .)


state 174

    (22) assignment_operator -> LSHIFT_ASSIGN .

    IDENTIFIER      reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    PLUS            reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    MINUS           reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    TILDA           reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    NOT             reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    LPAREN          reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    CHARACTER       reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    STRING_CONST    reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    BOOL_CONSTT     reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    BOOL_CONSTF     reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    KWRD_NULL       reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    FLOAT_CONST     reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)
    INT_CONST       reduce using rule 22 (assignment_operator -> LSHIFT_ASSIGN .)


state 175

    (24) assignment_operator -> AND_ASSIGN .

    IDENTIFIER      reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    PLUS            reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    MINUS           reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    TILDA           reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    NOT             reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    LPAREN          reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    CHARACTER       reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    STRING_CONST    reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    BOOL_CONSTT     reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    BOOL_CONSTF     reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    KWRD_NULL       reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    FLOAT_CONST     reduce using rule 24 (assignment_operator -> AND_ASSIGN .)
    INT_CONST       reduce using rule 24 (assignment_operator -> AND_ASSIGN .)


state 176

    (18) assignment_operator -> DIVIDE_ASSIGN .

    IDENTIFIER      reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    PLUS            reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    TILDA           reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    NOT             reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    CHARACTER       reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    STRING_CONST    reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    BOOL_CONSTT     reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    BOOL_CONSTF     reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    KWRD_NULL       reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    FLOAT_CONST     reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)
    INT_CONST       reduce using rule 18 (assignment_operator -> DIVIDE_ASSIGN .)


state 177

    (15) assignment -> valid_variable assignment_operator . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 101
    inclusive_or_expression        shift and go to state 39
    literal                        shift and go to state 77
    and_expression                 shift and go to state 92
    relational_expression          shift and go to state 79
    cast_expression                shift and go to state 85
    conditional_or_expression      shift and go to state 59
    assignment_expression          shift and go to state 235
    qualified_name                 shift and go to state 84
    assignment                     shift and go to state 127
    multiplicative_expression      shift and go to state 61
    method_invocation              shift and go to state 116
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 128
    conditional_and_expression     shift and go to state 65

state 178

    (20) assignment_operator -> PLUS_ASSIGN .

    IDENTIFIER      reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    PLUS            reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    MINUS           reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    TILDA           reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    NOT             reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    CHARACTER       reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    STRING_CONST    reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    BOOL_CONSTT     reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    BOOL_CONSTF     reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    KWRD_NULL       reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    FLOAT_CONST     reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)
    INT_CONST       reduce using rule 20 (assignment_operator -> PLUS_ASSIGN .)


state 179

    (16) assignment_operator -> ASSIGN .

    IDENTIFIER      reduce using rule 16 (assignment_operator -> ASSIGN .)
    PLUS            reduce using rule 16 (assignment_operator -> ASSIGN .)
    MINUS           reduce using rule 16 (assignment_operator -> ASSIGN .)
    TILDA           reduce using rule 16 (assignment_operator -> ASSIGN .)
    NOT             reduce using rule 16 (assignment_operator -> ASSIGN .)
    LPAREN          reduce using rule 16 (assignment_operator -> ASSIGN .)
    CHARACTER       reduce using rule 16 (assignment_operator -> ASSIGN .)
    STRING_CONST    reduce using rule 16 (assignment_operator -> ASSIGN .)
    BOOL_CONSTT     reduce using rule 16 (assignment_operator -> ASSIGN .)
    BOOL_CONSTF     reduce using rule 16 (assignment_operator -> ASSIGN .)
    KWRD_NULL       reduce using rule 16 (assignment_operator -> ASSIGN .)
    FLOAT_CONST     reduce using rule 16 (assignment_operator -> ASSIGN .)
    INT_CONST       reduce using rule 16 (assignment_operator -> ASSIGN .)


state 180

    (26) assignment_operator -> XOR_ASSIGN .

    IDENTIFIER      reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    PLUS            reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    MINUS           reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    TILDA           reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    NOT             reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    LPAREN          reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    CHARACTER       reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    STRING_CONST    reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    BOOL_CONSTT     reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    BOOL_CONSTF     reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    KWRD_NULL       reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    FLOAT_CONST     reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)
    INT_CONST       reduce using rule 26 (assignment_operator -> XOR_ASSIGN .)


state 181

    (171) class_header_name -> class_header_name1 func_args_start constructor_arguement_list_opt RPAREN .

    KWRD_EXTNDS     reduce using rule 171 (class_header_name -> class_header_name1 func_args_start constructor_arguement_list_opt RPAREN .)
    BLOCK_BEGIN     reduce using rule 171 (class_header_name -> class_header_name1 func_args_start constructor_arguement_list_opt RPAREN .)


state 182

    (166) constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER . COLON type

    COLON           shift and go to state 236


state 183

    (165) constructor_arguement_list -> constructor_arguement_list COMMA . constructor_arguement_list_declarator
    (166) constructor_arguement_list_declarator -> . declaration_keyword IDENTIFIER COLON type
    (103) declaration_keyword -> . KWRD_VAR
    (104) declaration_keyword -> . KWRD_VAL

    KWRD_VAR        shift and go to state 106
    KWRD_VAL        shift and go to state 107

    declaration_keyword            shift and go to state 104
    constructor_arguement_list_declarator shift and go to state 237

state 184

    (175) class_header_extends -> KWRD_EXTNDS name LPAREN . func_arguement_list_opt RPAREN
    (167) func_arguement_list_opt -> . variable_declarators
    (168) func_arguement_list_opt -> . empty
    (115) variable_declarators -> . variable_declarator
    (116) variable_declarators -> . variable_declarators COMMA variable_declarator
    (200) empty -> .
    (117) variable_declarator -> . variable_declarator_id
    (118) variable_declarator_id -> . IDENTIFIER COLON type

    RPAREN          reduce using rule 200 (empty -> .)
    IDENTIFIER      shift and go to state 190

    func_arguement_list_opt        shift and go to state 238
    variable_declarators           shift and go to state 192
    variable_declarator            shift and go to state 193
    variable_declarator_id         shift and go to state 191
    empty                          shift and go to state 194

state 185

    (9) ObjectDeclare -> KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER .

    BLOCK_BEGIN     reduce using rule 9 (ObjectDeclare -> KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER .)


state 186

    (176) class_body -> BLOCK_BEGIN block_statements_opt end_scope .

    KWRD_OBJECT     reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_PROTECTED  reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_PRIVATE    reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_CLASS      reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    $end            reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_IF         reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_WHILE      reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_DO         reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_FOR        reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    STATE_END       reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_RETURN     reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    BLOCK_BEGIN     reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    IDENTIFIER      reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    PLUS            reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    MINUS           reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    TILDA           reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    NOT             reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    LPAREN          reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    CHARACTER       reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    STRING_CONST    reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    BOOL_CONSTT     reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    BOOL_CONSTF     reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_NULL       reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    FLOAT_CONST     reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    INT_CONST       reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_DEF        reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_VAR        reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_VAL        reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    BLOCK_END       reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_CASE       reduce using rule 176 (class_body -> BLOCK_BEGIN block_statements_opt end_scope .)


state 187

    (32) inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .
    (34) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR_BITWISE      reduce using rule 32 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    AND             reduce using rule 32 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    OR              reduce using rule 32 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    KWRD_MATCH      reduce using rule 32 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    RBPAREN         reduce using rule 32 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    RPAREN          reduce using rule 32 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    COMMA           reduce using rule 32 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    STATE_END       reduce using rule 32 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    KWRD_UNTIL      reduce using rule 32 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    KWRD_TO         reduce using rule 32 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    FUNTYPE         reduce using rule 32 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    KWRD_BY         reduce using rule 32 (inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression .)
    XOR             shift and go to state 147


state 188

    (139) do_while_statement -> KWRD_DO block KWRD_WHILE . LPAREN expression RPAREN STATE_END

    LPAREN          shift and go to state 239


state 189

    (178) method_header -> method_header_name func_args_start func_arguement_list_opt . RPAREN COLON method_return_type ASSIGN

    RPAREN          shift and go to state 240


state 190

    (118) variable_declarator_id -> IDENTIFIER . COLON type

    COLON           shift and go to state 241


state 191

    (117) variable_declarator -> variable_declarator_id .

    COMMA           reduce using rule 117 (variable_declarator -> variable_declarator_id .)
    RPAREN          reduce using rule 117 (variable_declarator -> variable_declarator_id .)
    ASSIGN          reduce using rule 117 (variable_declarator -> variable_declarator_id .)


state 192

    (167) func_arguement_list_opt -> variable_declarators .
    (116) variable_declarators -> variable_declarators . COMMA variable_declarator

    RPAREN          reduce using rule 167 (func_arguement_list_opt -> variable_declarators .)
    COMMA           shift and go to state 242


state 193

    (115) variable_declarators -> variable_declarator .

    COMMA           reduce using rule 115 (variable_declarators -> variable_declarator .)
    RPAREN          reduce using rule 115 (variable_declarators -> variable_declarator .)


state 194

    (168) func_arguement_list_opt -> empty .

    RPAREN          reduce using rule 168 (func_arguement_list_opt -> empty .)


state 195

    (161) return_statement -> KWRD_RETURN expression_optional STATE_END .

    KWRD_IF         reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_WHILE      reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_DO         reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_FOR        reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_OBJECT     reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    STATE_END       reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_RETURN     reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_PROTECTED  reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_PRIVATE    reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    BLOCK_BEGIN     reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    IDENTIFIER      reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    PLUS            reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    MINUS           reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    TILDA           reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    NOT             reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    LPAREN          reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    CHARACTER       reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    STRING_CONST    reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    BOOL_CONSTT     reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    BOOL_CONSTF     reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_NULL       reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    FLOAT_CONST     reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    INT_CONST       reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_DEF        reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_CLASS      reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_VAR        reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_VAL        reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    BLOCK_END       reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)
    KWRD_CASE       reduce using rule 161 (return_statement -> KWRD_RETURN expression_optional STATE_END .)


state 196

    (77) argument_list_opt -> argument_list .
    (80) argument_list -> argument_list . COMMA expression

    RPAREN          reduce using rule 77 (argument_list_opt -> argument_list .)
    COMMA           shift and go to state 243


state 197

    (78) argument_list_opt -> empty .

    RPAREN          reduce using rule 78 (argument_list_opt -> empty .)


state 198

    (75) method_invocation -> name LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 244


state 199

    (79) argument_list -> expression .

    COMMA           reduce using rule 79 (argument_list -> expression .)
    RPAREN          reduce using rule 79 (argument_list -> expression .)


state 200

    (76) array_access -> name LBPAREN expression . RBPAREN

    RBPAREN         shift and go to state 245


state 201

    (84) qualified_name -> name DOT simple_name .

    LBPAREN         reduce using rule 84 (qualified_name -> name DOT simple_name .)
    LPAREN          reduce using rule 84 (qualified_name -> name DOT simple_name .)
    DOT             reduce using rule 84 (qualified_name -> name DOT simple_name .)
    TIMES           reduce using rule 84 (qualified_name -> name DOT simple_name .)
    DIVIDE          reduce using rule 84 (qualified_name -> name DOT simple_name .)
    REMAINDER       reduce using rule 84 (qualified_name -> name DOT simple_name .)
    PLUS            reduce using rule 84 (qualified_name -> name DOT simple_name .)
    MINUS           reduce using rule 84 (qualified_name -> name DOT simple_name .)
    LSHIFT          reduce using rule 84 (qualified_name -> name DOT simple_name .)
    RSHIFT          reduce using rule 84 (qualified_name -> name DOT simple_name .)
    GREATER         reduce using rule 84 (qualified_name -> name DOT simple_name .)
    LESS            reduce using rule 84 (qualified_name -> name DOT simple_name .)
    GEQ             reduce using rule 84 (qualified_name -> name DOT simple_name .)
    LEQ             reduce using rule 84 (qualified_name -> name DOT simple_name .)
    EQUAL           reduce using rule 84 (qualified_name -> name DOT simple_name .)
    NEQUAL          reduce using rule 84 (qualified_name -> name DOT simple_name .)
    AND_BITWISE     reduce using rule 84 (qualified_name -> name DOT simple_name .)
    XOR             reduce using rule 84 (qualified_name -> name DOT simple_name .)
    OR_BITWISE      reduce using rule 84 (qualified_name -> name DOT simple_name .)
    AND             reduce using rule 84 (qualified_name -> name DOT simple_name .)
    OR              reduce using rule 84 (qualified_name -> name DOT simple_name .)
    KWRD_MATCH      reduce using rule 84 (qualified_name -> name DOT simple_name .)
    STATE_END       reduce using rule 84 (qualified_name -> name DOT simple_name .)
    RPAREN          reduce using rule 84 (qualified_name -> name DOT simple_name .)
    COMMA           reduce using rule 84 (qualified_name -> name DOT simple_name .)
    RBPAREN         reduce using rule 84 (qualified_name -> name DOT simple_name .)
    KWRD_UNTIL      reduce using rule 84 (qualified_name -> name DOT simple_name .)
    KWRD_TO         reduce using rule 84 (qualified_name -> name DOT simple_name .)
    FUNTYPE         reduce using rule 84 (qualified_name -> name DOT simple_name .)
    KWRD_BY         reduce using rule 84 (qualified_name -> name DOT simple_name .)
    ASSIGN          reduce using rule 84 (qualified_name -> name DOT simple_name .)
    TIMES_ASSIGN    reduce using rule 84 (qualified_name -> name DOT simple_name .)
    DIVIDE_ASSIGN   reduce using rule 84 (qualified_name -> name DOT simple_name .)
    REMAINDER_ASSIGN reduce using rule 84 (qualified_name -> name DOT simple_name .)
    PLUS_ASSIGN     reduce using rule 84 (qualified_name -> name DOT simple_name .)
    MINUS_ASSIGN    reduce using rule 84 (qualified_name -> name DOT simple_name .)
    LSHIFT_ASSIGN   reduce using rule 84 (qualified_name -> name DOT simple_name .)
    RSHIFT_ASSIGN   reduce using rule 84 (qualified_name -> name DOT simple_name .)
    AND_ASSIGN      reduce using rule 84 (qualified_name -> name DOT simple_name .)
    OR_ASSIGN       reduce using rule 84 (qualified_name -> name DOT simple_name .)
    XOR_ASSIGN      reduce using rule 84 (qualified_name -> name DOT simple_name .)


state 202

    (138) while_statement -> KWRD_WHILE LPAREN expression . RPAREN block

    RPAREN          shift and go to state 246


state 203

    (143) for_update -> for_loop . for_step_opts
    (147) for_step_opts -> . KWRD_BY expression
    (148) for_step_opts -> . empty
    (200) empty -> .

    KWRD_BY         shift and go to state 249
    STATE_END       reduce using rule 200 (empty -> .)
    RPAREN          reduce using rule 200 (empty -> .)

    for_step_opts                  shift and go to state 247
    empty                          shift and go to state 248

state 204

    (140) for_statement -> KWRD_FOR LPAREN for_logic . RPAREN block

    RPAREN          shift and go to state 250


state 205

    (141) for_logic -> for_update .
    (142) for_logic -> for_update . STATE_END for_logic

    RPAREN          reduce using rule 141 (for_logic -> for_update .)
    STATE_END       shift and go to state 251


state 206

    (144) for_loop -> IDENTIFIER . CHOOSE expression for_untilTo expression

    CHOOSE          shift and go to state 252


state 207

    (49) additive_expression -> additive_expression PLUS multiplicative_expression .
    (52) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (53) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (54) multiplicative_expression -> multiplicative_expression . REMAINDER unary_expression

    PLUS            reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LSHIFT          reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSHIFT          reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER         reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS            reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GEQ             reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LEQ             reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUAL           reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NEQUAL          reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND_BITWISE     reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR_BITWISE      reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STATE_END       reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    KWRD_MATCH      reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBPAREN         reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    KWRD_UNTIL      reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    KWRD_TO         reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FUNTYPE         reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    KWRD_BY         reduce using rule 49 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 139
    REMAINDER       shift and go to state 138


state 208

    (50) additive_expression -> additive_expression MINUS multiplicative_expression .
    (52) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (53) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (54) multiplicative_expression -> multiplicative_expression . REMAINDER unary_expression

    PLUS            reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LSHIFT          reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSHIFT          reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER         reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS            reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GEQ             reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LEQ             reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUAL           reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NEQUAL          reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND_BITWISE     reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR_BITWISE      reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STATE_END       reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    KWRD_MATCH      reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBPAREN         reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    KWRD_UNTIL      reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    KWRD_TO         reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FUNTYPE         reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    KWRD_BY         reduce using rule 50 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 139
    REMAINDER       shift and go to state 138


state 209

    (28) conditional_or_expression -> conditional_or_expression OR conditional_and_expression .
    (30) conditional_and_expression -> conditional_and_expression . AND inclusive_or_expression

    OR              reduce using rule 28 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    RPAREN          reduce using rule 28 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    FUNTYPE         reduce using rule 28 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    COMMA           reduce using rule 28 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    KWRD_MATCH      reduce using rule 28 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    RBPAREN         reduce using rule 28 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    KWRD_UNTIL      reduce using rule 28 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    KWRD_TO         reduce using rule 28 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    STATE_END       reduce using rule 28 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    KWRD_BY         reduce using rule 28 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    AND             shift and go to state 144


state 210

    (54) multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .

    TIMES           reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    DIVIDE          reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    REMAINDER       reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    PLUS            reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    MINUS           reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    LSHIFT          reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    RSHIFT          reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    GREATER         reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    LESS            reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    GEQ             reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    LEQ             reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    EQUAL           reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    NEQUAL          reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    AND_BITWISE     reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    XOR             reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    OR_BITWISE      reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    AND             reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    OR              reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    STATE_END       reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    KWRD_MATCH      reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    RPAREN          reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    COMMA           reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    KWRD_UNTIL      reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    KWRD_TO         reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    RBPAREN         reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    FUNTYPE         reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)
    KWRD_BY         reduce using rule 54 (multiplicative_expression -> multiplicative_expression REMAINDER unary_expression .)


state 211

    (53) multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .

    TIMES           reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DIVIDE          reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    REMAINDER       reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    PLUS            reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MINUS           reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LSHIFT          reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RSHIFT          reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GREATER         reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LESS            reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GEQ             reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LEQ             reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    EQUAL           reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    NEQUAL          reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AND_BITWISE     reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    XOR             reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OR_BITWISE      reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AND             reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OR              reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    STATE_END       reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    KWRD_MATCH      reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RPAREN          reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COMMA           reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    KWRD_UNTIL      reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    KWRD_TO         reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RBPAREN         reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    FUNTYPE         reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    KWRD_BY         reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)


state 212

    (52) multiplicative_expression -> multiplicative_expression TIMES unary_expression .

    TIMES           reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DIVIDE          reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    REMAINDER       reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    PLUS            reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MINUS           reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LSHIFT          reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RSHIFT          reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GREATER         reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LESS            reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GEQ             reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LEQ             reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    EQUAL           reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    NEQUAL          reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    AND_BITWISE     reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    XOR             reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OR_BITWISE      reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    AND             reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OR              reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    STATE_END       reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    KWRD_MATCH      reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RPAREN          reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    COMMA           reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    KWRD_UNTIL      reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    KWRD_TO         reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RBPAREN         reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    FUNTYPE         reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    KWRD_BY         reduce using rule 52 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)


state 213

    (47) shift_expression -> shift_expression RSHIFT additive_expression .
    (49) additive_expression -> additive_expression . PLUS multiplicative_expression
    (50) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GREATER         reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LESS            reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GEQ             reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LEQ             reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQUAL           reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NEQUAL          reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND_BITWISE     reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOR             reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR_BITWISE      reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND             reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR              reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    STATE_END       reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    KWRD_MATCH      reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBPAREN         reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    KWRD_UNTIL      reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    KWRD_TO         reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    FUNTYPE         reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    KWRD_BY         reduce using rule 47 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUS            shift and go to state 135
    MINUS           shift and go to state 136


state 214

    (46) shift_expression -> shift_expression LSHIFT additive_expression .
    (49) additive_expression -> additive_expression . PLUS multiplicative_expression
    (50) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GREATER         reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LESS            reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GEQ             reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LEQ             reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQUAL           reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NEQUAL          reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND_BITWISE     reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOR             reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR_BITWISE      reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND             reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR              reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    STATE_END       reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    KWRD_MATCH      reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBPAREN         reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    KWRD_UNTIL      reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    KWRD_TO         reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    FUNTYPE         reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    KWRD_BY         reduce using rule 46 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUS            shift and go to state 135
    MINUS           shift and go to state 136


state 215

    (133) if_then_statement -> KWRD_IF LPAREN expression . RPAREN block
    (134) if_then_else_statement -> KWRD_IF LPAREN expression . RPAREN if_then_else_intermediate KWRD_ELSE block

    RPAREN          shift and go to state 253


state 216

    (30) conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .
    (32) inclusive_or_expression -> inclusive_or_expression . OR_BITWISE exclusive_or_expression

    AND             reduce using rule 30 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    OR              reduce using rule 30 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    KWRD_UNTIL      reduce using rule 30 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    KWRD_TO         reduce using rule 30 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    KWRD_MATCH      reduce using rule 30 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    KWRD_BY         reduce using rule 30 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    STATE_END       reduce using rule 30 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    RPAREN          reduce using rule 30 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    COMMA           reduce using rule 30 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    RBPAREN         reduce using rule 30 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    FUNTYPE         reduce using rule 30 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    OR_BITWISE      shift and go to state 120


state 217

    (150) switch_block -> BLOCK_BEGIN . BLOCK_END
    (151) switch_block -> BLOCK_BEGIN . switch_block_statements BLOCK_END
    (152) switch_block -> BLOCK_BEGIN . switch_labels BLOCK_END
    (153) switch_block -> BLOCK_BEGIN . switch_block_statements switch_labels BLOCK_END
    (154) switch_block_statements -> . switch_block_statement
    (155) switch_block_statements -> . switch_block_statements switch_block_statement
    (157) switch_labels -> . switch_label
    (158) switch_labels -> . switch_labels switch_label
    (156) switch_block_statement -> . switch_labels block_statements
    (159) switch_label -> . KWRD_CASE expression FUNTYPE

    BLOCK_END       shift and go to state 254
    KWRD_CASE       shift and go to state 255

    switch_block_statements        shift and go to state 258
    switch_labels                  shift and go to state 256
    switch_label                   shift and go to state 257
    switch_block_statement         shift and go to state 259

state 218

    (149) switch_statement -> expression KWRD_MATCH switch_block .

    KWRD_IF         reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_WHILE      reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_DO         reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_FOR        reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_OBJECT     reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    STATE_END       reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_RETURN     reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_PROTECTED  reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_PRIVATE    reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    BLOCK_BEGIN     reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    IDENTIFIER      reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    PLUS            reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    MINUS           reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    TILDA           reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    NOT             reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    LPAREN          reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    CHARACTER       reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    STRING_CONST    reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    BOOL_CONSTT     reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    BOOL_CONSTF     reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_NULL       reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    FLOAT_CONST     reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    INT_CONST       reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_DEF        reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_CLASS      reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_VAR        reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_VAL        reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    BLOCK_END       reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)
    KWRD_CASE       reduce using rule 149 (switch_statement -> expression KWRD_MATCH switch_block .)


state 219

    (34) exclusive_or_expression -> exclusive_or_expression XOR and_expression .
    (36) and_expression -> and_expression . AND_BITWISE equality_expression

    XOR             reduce using rule 34 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR_BITWISE      reduce using rule 34 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND             reduce using rule 34 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR              reduce using rule 34 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    STATE_END       reduce using rule 34 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RPAREN          reduce using rule 34 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    KWRD_MATCH      reduce using rule 34 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COMMA           reduce using rule 34 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBPAREN         reduce using rule 34 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    FUNTYPE         reduce using rule 34 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    KWRD_UNTIL      reduce using rule 34 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    KWRD_TO         reduce using rule 34 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    KWRD_BY         reduce using rule 34 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND_BITWISE     shift and go to state 158


state 220

    (43) relational_expression -> relational_expression GEQ shift_expression .
    (46) shift_expression -> shift_expression . LSHIFT additive_expression
    (47) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    LESS            reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    GEQ             reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    LEQ             reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    EQUAL           reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    NEQUAL          reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    AND_BITWISE     reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    XOR             reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    OR_BITWISE      reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    AND             reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    OR              reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    COMMA           reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    RPAREN          reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    KWRD_MATCH      reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    STATE_END       reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    RBPAREN         reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    KWRD_UNTIL      reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    KWRD_TO         reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    FUNTYPE         reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    KWRD_BY         reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    LSHIFT          shift and go to state 142
    RSHIFT          shift and go to state 141


state 221

    (41) relational_expression -> relational_expression GREATER shift_expression .
    (46) shift_expression -> shift_expression . LSHIFT additive_expression
    (47) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 41 (relational_expression -> relational_expression GREATER shift_expression .)
    LESS            reduce using rule 41 (relational_expression -> relational_expression GREATER shift_expression .)
    GEQ             reduce using rule 41 (relational_expression -> relational_expression GREATER shift_expression .)
    LEQ             reduce using rule 41 (relational_expression -> relational_expression GREATER shift_expression .)
    EQUAL           reduce using rule 41 (relational_expression -> relational_expression GREATER shift_expression .)
    NEQUAL          reduce using rule 41 (relational_expression -> relational_expression GREATER shift_expression .)
    AND_BITWISE     reduce using rule 41 (relational_expression -> relational_expression GREATER shift_expression .)
    XOR             reduce using rule 41 (relational_expression -> relational_expression GREATER shift_expression .)
    OR_BITWISE      reduce using rule 41 (relational_expression -> relational_expression GREATER shift_expression .)
    AND             reduce using rule 41 (relational_expression -> relational_expression GREATER shift_expression .)
    OR              reduce using rule 41 (relational_expression -> relational_expression GREATER shift_expression .)
    COMMA           reduce using rule 41 (relational_expression -> relational_expression GREATER shift_expression .)
    RPAREN          reduce using rule 41 (relational_expression -> relational_expression GREATER shift_expression .)
    KWRD_MATCH      reduce using rule 41 (relational_expression -> relational_expression GREATER shift_expression .)
    STATE_END       reduce using rule 41 (relational_expression -> relational_expression GREATER shift_expression .)
    RBPAREN         reduce using rule 41 (relational_expression -> relational_expression GREATER shift_expression .)
    KWRD_UNTIL      reduce using rule 41 (relational_expression -> relational_expression GREATER shift_expression .)
    KWRD_TO         reduce using rule 41 (relational_expression -> relational_expression GREATER shift_expression .)
    FUNTYPE         reduce using rule 41 (relational_expression -> relational_expression GREATER shift_expression .)
    KWRD_BY         reduce using rule 41 (relational_expression -> relational_expression GREATER shift_expression .)
    LSHIFT          shift and go to state 142
    RSHIFT          shift and go to state 141


state 222

    (42) relational_expression -> relational_expression LESS shift_expression .
    (46) shift_expression -> shift_expression . LSHIFT additive_expression
    (47) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    LESS            reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    GEQ             reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    LEQ             reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    EQUAL           reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    NEQUAL          reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    AND_BITWISE     reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    XOR             reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    OR_BITWISE      reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    AND             reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    OR              reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    COMMA           reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    RPAREN          reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    KWRD_MATCH      reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    STATE_END       reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    RBPAREN         reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    KWRD_UNTIL      reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    KWRD_TO         reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    FUNTYPE         reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    KWRD_BY         reduce using rule 42 (relational_expression -> relational_expression LESS shift_expression .)
    LSHIFT          shift and go to state 142
    RSHIFT          shift and go to state 141


state 223

    (44) relational_expression -> relational_expression LEQ shift_expression .
    (46) shift_expression -> shift_expression . LSHIFT additive_expression
    (47) shift_expression -> shift_expression . RSHIFT additive_expression

    GREATER         reduce using rule 44 (relational_expression -> relational_expression LEQ shift_expression .)
    LESS            reduce using rule 44 (relational_expression -> relational_expression LEQ shift_expression .)
    GEQ             reduce using rule 44 (relational_expression -> relational_expression LEQ shift_expression .)
    LEQ             reduce using rule 44 (relational_expression -> relational_expression LEQ shift_expression .)
    EQUAL           reduce using rule 44 (relational_expression -> relational_expression LEQ shift_expression .)
    NEQUAL          reduce using rule 44 (relational_expression -> relational_expression LEQ shift_expression .)
    AND_BITWISE     reduce using rule 44 (relational_expression -> relational_expression LEQ shift_expression .)
    XOR             reduce using rule 44 (relational_expression -> relational_expression LEQ shift_expression .)
    OR_BITWISE      reduce using rule 44 (relational_expression -> relational_expression LEQ shift_expression .)
    AND             reduce using rule 44 (relational_expression -> relational_expression LEQ shift_expression .)
    OR              reduce using rule 44 (relational_expression -> relational_expression LEQ shift_expression .)
    COMMA           reduce using rule 44 (relational_expression -> relational_expression LEQ shift_expression .)
    RPAREN          reduce using rule 44 (relational_expression -> relational_expression LEQ shift_expression .)
    KWRD_MATCH      reduce using rule 44 (relational_expression -> relational_expression LEQ shift_expression .)
    STATE_END       reduce using rule 44 (relational_expression -> relational_expression LEQ shift_expression .)
    RBPAREN         reduce using rule 44 (relational_expression -> relational_expression LEQ shift_expression .)
    KWRD_UNTIL      reduce using rule 44 (relational_expression -> relational_expression LEQ shift_expression .)
    KWRD_TO         reduce using rule 44 (relational_expression -> relational_expression LEQ shift_expression .)
    FUNTYPE         reduce using rule 44 (relational_expression -> relational_expression LEQ shift_expression .)
    KWRD_BY         reduce using rule 44 (relational_expression -> relational_expression LEQ shift_expression .)
    LSHIFT          shift and go to state 142
    RSHIFT          shift and go to state 141


state 224

    (39) equality_expression -> equality_expression NEQUAL relational_expression .
    (41) relational_expression -> relational_expression . GREATER shift_expression
    (42) relational_expression -> relational_expression . LESS shift_expression
    (43) relational_expression -> relational_expression . GEQ shift_expression
    (44) relational_expression -> relational_expression . LEQ shift_expression

    EQUAL           reduce using rule 39 (equality_expression -> equality_expression NEQUAL relational_expression .)
    NEQUAL          reduce using rule 39 (equality_expression -> equality_expression NEQUAL relational_expression .)
    AND_BITWISE     reduce using rule 39 (equality_expression -> equality_expression NEQUAL relational_expression .)
    XOR             reduce using rule 39 (equality_expression -> equality_expression NEQUAL relational_expression .)
    OR_BITWISE      reduce using rule 39 (equality_expression -> equality_expression NEQUAL relational_expression .)
    AND             reduce using rule 39 (equality_expression -> equality_expression NEQUAL relational_expression .)
    OR              reduce using rule 39 (equality_expression -> equality_expression NEQUAL relational_expression .)
    KWRD_BY         reduce using rule 39 (equality_expression -> equality_expression NEQUAL relational_expression .)
    STATE_END       reduce using rule 39 (equality_expression -> equality_expression NEQUAL relational_expression .)
    RPAREN          reduce using rule 39 (equality_expression -> equality_expression NEQUAL relational_expression .)
    COMMA           reduce using rule 39 (equality_expression -> equality_expression NEQUAL relational_expression .)
    FUNTYPE         reduce using rule 39 (equality_expression -> equality_expression NEQUAL relational_expression .)
    KWRD_MATCH      reduce using rule 39 (equality_expression -> equality_expression NEQUAL relational_expression .)
    RBPAREN         reduce using rule 39 (equality_expression -> equality_expression NEQUAL relational_expression .)
    KWRD_UNTIL      reduce using rule 39 (equality_expression -> equality_expression NEQUAL relational_expression .)
    KWRD_TO         reduce using rule 39 (equality_expression -> equality_expression NEQUAL relational_expression .)
    GREATER         shift and go to state 150
    LESS            shift and go to state 151
    GEQ             shift and go to state 149
    LEQ             shift and go to state 152


state 225

    (38) equality_expression -> equality_expression EQUAL relational_expression .
    (41) relational_expression -> relational_expression . GREATER shift_expression
    (42) relational_expression -> relational_expression . LESS shift_expression
    (43) relational_expression -> relational_expression . GEQ shift_expression
    (44) relational_expression -> relational_expression . LEQ shift_expression

    EQUAL           reduce using rule 38 (equality_expression -> equality_expression EQUAL relational_expression .)
    NEQUAL          reduce using rule 38 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND_BITWISE     reduce using rule 38 (equality_expression -> equality_expression EQUAL relational_expression .)
    XOR             reduce using rule 38 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR_BITWISE      reduce using rule 38 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND             reduce using rule 38 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR              reduce using rule 38 (equality_expression -> equality_expression EQUAL relational_expression .)
    KWRD_BY         reduce using rule 38 (equality_expression -> equality_expression EQUAL relational_expression .)
    STATE_END       reduce using rule 38 (equality_expression -> equality_expression EQUAL relational_expression .)
    RPAREN          reduce using rule 38 (equality_expression -> equality_expression EQUAL relational_expression .)
    COMMA           reduce using rule 38 (equality_expression -> equality_expression EQUAL relational_expression .)
    FUNTYPE         reduce using rule 38 (equality_expression -> equality_expression EQUAL relational_expression .)
    KWRD_MATCH      reduce using rule 38 (equality_expression -> equality_expression EQUAL relational_expression .)
    RBPAREN         reduce using rule 38 (equality_expression -> equality_expression EQUAL relational_expression .)
    KWRD_UNTIL      reduce using rule 38 (equality_expression -> equality_expression EQUAL relational_expression .)
    KWRD_TO         reduce using rule 38 (equality_expression -> equality_expression EQUAL relational_expression .)
    GREATER         shift and go to state 150
    LESS            shift and go to state 151
    GEQ             shift and go to state 149
    LEQ             shift and go to state 152


state 226

    (183) method_body -> BLOCK_BEGIN block_statements_opt . end_scope
    (91) end_scope -> . BLOCK_END

    BLOCK_END       shift and go to state 118

    end_scope                      shift and go to state 260

state 227

    (36) and_expression -> and_expression AND_BITWISE equality_expression .
    (38) equality_expression -> equality_expression . EQUAL relational_expression
    (39) equality_expression -> equality_expression . NEQUAL relational_expression

    AND_BITWISE     reduce using rule 36 (and_expression -> and_expression AND_BITWISE equality_expression .)
    XOR             reduce using rule 36 (and_expression -> and_expression AND_BITWISE equality_expression .)
    OR_BITWISE      reduce using rule 36 (and_expression -> and_expression AND_BITWISE equality_expression .)
    AND             reduce using rule 36 (and_expression -> and_expression AND_BITWISE equality_expression .)
    OR              reduce using rule 36 (and_expression -> and_expression AND_BITWISE equality_expression .)
    STATE_END       reduce using rule 36 (and_expression -> and_expression AND_BITWISE equality_expression .)
    RPAREN          reduce using rule 36 (and_expression -> and_expression AND_BITWISE equality_expression .)
    COMMA           reduce using rule 36 (and_expression -> and_expression AND_BITWISE equality_expression .)
    KWRD_MATCH      reduce using rule 36 (and_expression -> and_expression AND_BITWISE equality_expression .)
    RBPAREN         reduce using rule 36 (and_expression -> and_expression AND_BITWISE equality_expression .)
    KWRD_UNTIL      reduce using rule 36 (and_expression -> and_expression AND_BITWISE equality_expression .)
    KWRD_TO         reduce using rule 36 (and_expression -> and_expression AND_BITWISE equality_expression .)
    FUNTYPE         reduce using rule 36 (and_expression -> and_expression AND_BITWISE equality_expression .)
    KWRD_BY         reduce using rule 36 (and_expression -> and_expression AND_BITWISE equality_expression .)
    EQUAL           shift and go to state 154
    NEQUAL          shift and go to state 153


state 228

    (64) cast_expression -> LPAREN primitive_type RPAREN . unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    IDENTIFIER      shift and go to state 82
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    qualified_name                 shift and go to state 84
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    unary_expression               shift and go to state 261
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 115
    array_access                   shift and go to state 34
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    literal                        shift and go to state 77
    method_invocation              shift and go to state 116
    cast_expression                shift and go to state 85
    simple_name                    shift and go to state 74
    name                           shift and go to state 117

state 229

    (63) base_variable_set -> LPAREN expression RPAREN .

    TIMES           reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    REMAINDER       reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    LESS            reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    GEQ             reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    LEQ             reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    NEQUAL          reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    AND_BITWISE     reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    XOR             reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    OR_BITWISE      reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    AND             reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    OR              reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    KWRD_MATCH      reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    STATE_END       reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    RBPAREN         reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    KWRD_UNTIL      reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    KWRD_TO         reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    FUNTYPE         reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)
    KWRD_BY         reduce using rule 63 (base_variable_set -> LPAREN expression RPAREN .)


state 230

    (182) method_header_name -> modifier_opts KWRD_DEF IDENTIFIER .

    LPAREN          reduce using rule 182 (method_header_name -> modifier_opts KWRD_DEF IDENTIFIER .)


state 231

    (106) local_variable_declaration -> modifier_opts declaration_keyword variable_declaration_body .

    STATE_END       reduce using rule 106 (local_variable_declaration -> modifier_opts declaration_keyword variable_declaration_body .)


state 232

    (112) variable_declaration_body -> variable_declarator . ASSIGN variable_declaration_initializer

    ASSIGN          shift and go to state 262


state 233

    (113) variable_declaration_body -> LPAREN . variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list RPAREN
    (115) variable_declarators -> . variable_declarator
    (116) variable_declarators -> . variable_declarators COMMA variable_declarator
    (117) variable_declarator -> . variable_declarator_id
    (118) variable_declarator_id -> . IDENTIFIER COLON type

    IDENTIFIER      shift and go to state 190

    variable_declarators           shift and go to state 263
    variable_declarator_id         shift and go to state 191
    variable_declarator            shift and go to state 193

state 234

    (114) variable_declaration_body -> IDENTIFIER . ASSIGN LPAREN func_arguement_list_opt RPAREN FUNTYPE expression
    (118) variable_declarator_id -> IDENTIFIER . COLON type

    ASSIGN          shift and go to state 264
    COLON           shift and go to state 241


state 235

    (15) assignment -> valid_variable assignment_operator assignment_expression .

    RPAREN          reduce using rule 15 (assignment -> valid_variable assignment_operator assignment_expression .)
    STATE_END       reduce using rule 15 (assignment -> valid_variable assignment_operator assignment_expression .)
    KWRD_MATCH      reduce using rule 15 (assignment -> valid_variable assignment_operator assignment_expression .)
    COMMA           reduce using rule 15 (assignment -> valid_variable assignment_operator assignment_expression .)
    RBPAREN         reduce using rule 15 (assignment -> valid_variable assignment_operator assignment_expression .)
    KWRD_UNTIL      reduce using rule 15 (assignment -> valid_variable assignment_operator assignment_expression .)
    KWRD_TO         reduce using rule 15 (assignment -> valid_variable assignment_operator assignment_expression .)
    FUNTYPE         reduce using rule 15 (assignment -> valid_variable assignment_operator assignment_expression .)
    KWRD_BY         reduce using rule 15 (assignment -> valid_variable assignment_operator assignment_expression .)


state 236

    (166) constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER COLON . type
    (186) type -> . primitive_type
    (187) type -> . reference_type
    (188) primitive_type -> . TYPE_INT
    (189) primitive_type -> . TYPE_FLOAT
    (190) primitive_type -> . TYPE_CHAR
    (191) primitive_type -> . TYPE_STRING
    (192) primitive_type -> . TYPE_BOOLEAN
    (193) reference_type -> . class_data_type
    (194) reference_type -> . array_data_type
    (195) class_data_type -> . name
    (196) array_data_type -> . KWRD_ARRAY LBPAREN type RBPAREN
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name

    TYPE_INT        shift and go to state 160
    TYPE_FLOAT      shift and go to state 165
    TYPE_CHAR       shift and go to state 162
    TYPE_STRING     shift and go to state 161
    TYPE_BOOLEAN    shift and go to state 164
    KWRD_ARRAY      shift and go to state 269
    IDENTIFIER      shift and go to state 82

    name                           shift and go to state 265
    qualified_name                 shift and go to state 84
    reference_type                 shift and go to state 266
    primitive_type                 shift and go to state 267
    class_data_type                shift and go to state 268
    type                           shift and go to state 270
    array_data_type                shift and go to state 271
    simple_name                    shift and go to state 74

state 237

    (165) constructor_arguement_list -> constructor_arguement_list COMMA constructor_arguement_list_declarator .

    COMMA           reduce using rule 165 (constructor_arguement_list -> constructor_arguement_list COMMA constructor_arguement_list_declarator .)
    RPAREN          reduce using rule 165 (constructor_arguement_list -> constructor_arguement_list COMMA constructor_arguement_list_declarator .)


state 238

    (175) class_header_extends -> KWRD_EXTNDS name LPAREN func_arguement_list_opt . RPAREN

    RPAREN          shift and go to state 272


state 239

    (139) do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN . expression RPAREN STATE_END
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 101
    inclusive_or_expression        shift and go to state 39
    literal                        shift and go to state 77
    and_expression                 shift and go to state 92
    relational_expression          shift and go to state 79
    cast_expression                shift and go to state 85
    conditional_or_expression      shift and go to state 59
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    assignment                     shift and go to state 127
    multiplicative_expression      shift and go to state 61
    method_invocation              shift and go to state 116
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 128
    expression                     shift and go to state 273
    conditional_and_expression     shift and go to state 65

state 240

    (178) method_header -> method_header_name func_args_start func_arguement_list_opt RPAREN . COLON method_return_type ASSIGN

    COLON           shift and go to state 274


state 241

    (118) variable_declarator_id -> IDENTIFIER COLON . type
    (186) type -> . primitive_type
    (187) type -> . reference_type
    (188) primitive_type -> . TYPE_INT
    (189) primitive_type -> . TYPE_FLOAT
    (190) primitive_type -> . TYPE_CHAR
    (191) primitive_type -> . TYPE_STRING
    (192) primitive_type -> . TYPE_BOOLEAN
    (193) reference_type -> . class_data_type
    (194) reference_type -> . array_data_type
    (195) class_data_type -> . name
    (196) array_data_type -> . KWRD_ARRAY LBPAREN type RBPAREN
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name

    TYPE_INT        shift and go to state 160
    TYPE_FLOAT      shift and go to state 165
    TYPE_CHAR       shift and go to state 162
    TYPE_STRING     shift and go to state 161
    TYPE_BOOLEAN    shift and go to state 164
    KWRD_ARRAY      shift and go to state 269
    IDENTIFIER      shift and go to state 82

    name                           shift and go to state 265
    qualified_name                 shift and go to state 84
    reference_type                 shift and go to state 266
    primitive_type                 shift and go to state 267
    class_data_type                shift and go to state 268
    type                           shift and go to state 275
    array_data_type                shift and go to state 271
    simple_name                    shift and go to state 74

state 242

    (116) variable_declarators -> variable_declarators COMMA . variable_declarator
    (117) variable_declarator -> . variable_declarator_id
    (118) variable_declarator_id -> . IDENTIFIER COLON type

    IDENTIFIER      shift and go to state 190

    variable_declarator_id         shift and go to state 191
    variable_declarator            shift and go to state 276

state 243

    (80) argument_list -> argument_list COMMA . expression
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 101
    inclusive_or_expression        shift and go to state 39
    literal                        shift and go to state 77
    and_expression                 shift and go to state 92
    relational_expression          shift and go to state 79
    cast_expression                shift and go to state 85
    conditional_or_expression      shift and go to state 59
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    assignment                     shift and go to state 127
    multiplicative_expression      shift and go to state 61
    method_invocation              shift and go to state 116
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 128
    expression                     shift and go to state 277
    conditional_and_expression     shift and go to state 65

state 244

    (75) method_invocation -> name LPAREN argument_list_opt RPAREN .

    TIMES           reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    DIVIDE          reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    REMAINDER       reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    PLUS            reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    MINUS           reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    LSHIFT          reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    RSHIFT          reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    GREATER         reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    LESS            reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    GEQ             reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    LEQ             reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    EQUAL           reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    NEQUAL          reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    AND_BITWISE     reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    XOR             reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    OR_BITWISE      reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    KWRD_MATCH      reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    STATE_END       reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    RBPAREN         reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    KWRD_UNTIL      reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    KWRD_TO         reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    FUNTYPE         reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)
    KWRD_BY         reduce using rule 75 (method_invocation -> name LPAREN argument_list_opt RPAREN .)


state 245

    (76) array_access -> name LBPAREN expression RBPAREN .

    ASSIGN          reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    TIMES_ASSIGN    reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    DIVIDE_ASSIGN   reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    REMAINDER_ASSIGN reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    PLUS_ASSIGN     reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    MINUS_ASSIGN    reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    LSHIFT_ASSIGN   reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    RSHIFT_ASSIGN   reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    AND_ASSIGN      reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    OR_ASSIGN       reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    XOR_ASSIGN      reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    TIMES           reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    DIVIDE          reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    REMAINDER       reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    PLUS            reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    MINUS           reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    LSHIFT          reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    RSHIFT          reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    GREATER         reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    LESS            reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    GEQ             reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    LEQ             reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    EQUAL           reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    NEQUAL          reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    AND_BITWISE     reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    XOR             reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    OR_BITWISE      reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    AND             reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    OR              reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    RBPAREN         reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    KWRD_UNTIL      reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    KWRD_TO         reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    KWRD_MATCH      reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    STATE_END       reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    RPAREN          reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    COMMA           reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    FUNTYPE         reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)
    KWRD_BY         reduce using rule 76 (array_access -> name LBPAREN expression RBPAREN .)


state 246

    (138) while_statement -> KWRD_WHILE LPAREN expression RPAREN . block
    (89) block -> . start_scope block_statements_opt end_scope
    (90) start_scope -> . BLOCK_BEGIN

    BLOCK_BEGIN     shift and go to state 16

    start_scope                    shift and go to state 17
    block                          shift and go to state 278

state 247

    (143) for_update -> for_loop for_step_opts .

    STATE_END       reduce using rule 143 (for_update -> for_loop for_step_opts .)
    RPAREN          reduce using rule 143 (for_update -> for_loop for_step_opts .)


state 248

    (148) for_step_opts -> empty .

    STATE_END       reduce using rule 148 (for_step_opts -> empty .)
    RPAREN          reduce using rule 148 (for_step_opts -> empty .)


state 249

    (147) for_step_opts -> KWRD_BY . expression
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 101
    inclusive_or_expression        shift and go to state 39
    literal                        shift and go to state 77
    and_expression                 shift and go to state 92
    relational_expression          shift and go to state 79
    cast_expression                shift and go to state 85
    conditional_or_expression      shift and go to state 59
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    assignment                     shift and go to state 127
    multiplicative_expression      shift and go to state 61
    method_invocation              shift and go to state 116
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 128
    expression                     shift and go to state 279
    conditional_and_expression     shift and go to state 65

state 250

    (140) for_statement -> KWRD_FOR LPAREN for_logic RPAREN . block
    (89) block -> . start_scope block_statements_opt end_scope
    (90) start_scope -> . BLOCK_BEGIN

    BLOCK_BEGIN     shift and go to state 16

    start_scope                    shift and go to state 17
    block                          shift and go to state 280

state 251

    (142) for_logic -> for_update STATE_END . for_logic
    (141) for_logic -> . for_update
    (142) for_logic -> . for_update STATE_END for_logic
    (143) for_update -> . for_loop for_step_opts
    (144) for_loop -> . IDENTIFIER CHOOSE expression for_untilTo expression

    IDENTIFIER      shift and go to state 206

    for_loop                       shift and go to state 203
    for_logic                      shift and go to state 281
    for_update                     shift and go to state 205

state 252

    (144) for_loop -> IDENTIFIER CHOOSE . expression for_untilTo expression
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 101
    inclusive_or_expression        shift and go to state 39
    literal                        shift and go to state 77
    and_expression                 shift and go to state 92
    relational_expression          shift and go to state 79
    cast_expression                shift and go to state 85
    conditional_or_expression      shift and go to state 59
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    assignment                     shift and go to state 127
    multiplicative_expression      shift and go to state 61
    method_invocation              shift and go to state 116
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 128
    expression                     shift and go to state 282
    conditional_and_expression     shift and go to state 65

state 253

    (133) if_then_statement -> KWRD_IF LPAREN expression RPAREN . block
    (134) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN . if_then_else_intermediate KWRD_ELSE block
    (89) block -> . start_scope block_statements_opt end_scope
    (136) if_then_else_intermediate -> . block
    (137) if_then_else_intermediate -> . if_then_else_statement_precedence
    (90) start_scope -> . BLOCK_BEGIN
    (135) if_then_else_statement_precedence -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate

    BLOCK_BEGIN     shift and go to state 16
    KWRD_IF         shift and go to state 283

    if_then_else_statement_precedence shift and go to state 284
    if_then_else_intermediate      shift and go to state 285
    start_scope                    shift and go to state 17
    block                          shift and go to state 286

state 254

    (150) switch_block -> BLOCK_BEGIN BLOCK_END .

    KWRD_IF         reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_WHILE      reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_DO         reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_FOR        reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_OBJECT     reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    STATE_END       reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_RETURN     reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_PROTECTED  reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_PRIVATE    reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    IDENTIFIER      reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    PLUS            reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    MINUS           reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    TILDA           reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    NOT             reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    LPAREN          reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    CHARACTER       reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    STRING_CONST    reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    BOOL_CONSTT     reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    BOOL_CONSTF     reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_NULL       reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    FLOAT_CONST     reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    INT_CONST       reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_DEF        reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_CLASS      reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_VAR        reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_VAL        reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    BLOCK_END       reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)
    KWRD_CASE       reduce using rule 150 (switch_block -> BLOCK_BEGIN BLOCK_END .)


state 255

    (159) switch_label -> KWRD_CASE . expression FUNTYPE
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 101
    inclusive_or_expression        shift and go to state 39
    literal                        shift and go to state 77
    and_expression                 shift and go to state 92
    relational_expression          shift and go to state 79
    cast_expression                shift and go to state 85
    conditional_or_expression      shift and go to state 59
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    assignment                     shift and go to state 127
    multiplicative_expression      shift and go to state 61
    method_invocation              shift and go to state 116
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 128
    expression                     shift and go to state 287
    conditional_and_expression     shift and go to state 65

state 256

    (152) switch_block -> BLOCK_BEGIN switch_labels . BLOCK_END
    (158) switch_labels -> switch_labels . switch_label
    (156) switch_block_statement -> switch_labels . block_statements
    (159) switch_label -> . KWRD_CASE expression FUNTYPE
    (94) block_statements -> . block_statement
    (95) block_statements -> . block_statements block_statement
    (96) block_statement -> . local_variable_declaration_statement
    (97) block_statement -> . statement
    (98) block_statement -> . class_declaration
    (99) block_statement -> . SingletonObject
    (100) block_statement -> . method_declaration
    (105) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (119) statement -> . normal_statement
    (120) statement -> . if_then_statement
    (121) statement -> . if_then_else_statement
    (122) statement -> . while_statement
    (123) statement -> . do_while_statement
    (124) statement -> . for_statement
    (169) class_declaration -> . class_header class_body
    (7) SingletonObject -> . ObjectDeclare block
    (177) method_declaration -> . method_header method_body
    (106) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (125) normal_statement -> . block
    (126) normal_statement -> . expression_statement
    (127) normal_statement -> . empty_statement
    (128) normal_statement -> . return_statement
    (129) normal_statement -> . switch_statement
    (133) if_then_statement -> . KWRD_IF LPAREN expression RPAREN block
    (134) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block
    (138) while_statement -> . KWRD_WHILE LPAREN expression RPAREN block
    (139) do_while_statement -> . KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END
    (140) for_statement -> . KWRD_FOR LPAREN for_logic RPAREN block
    (170) class_header -> . class_header_name class_header_extends_opt
    (8) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (9) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (178) method_header -> . method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (101) modifier_opts -> . modifier
    (102) modifier_opts -> . empty
    (89) block -> . start_scope block_statements_opt end_scope
    (130) expression_statement -> . statement_expression STATE_END
    (160) empty_statement -> . STATE_END
    (161) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (149) switch_statement -> . expression KWRD_MATCH switch_block
    (171) class_header_name -> . class_header_name1 func_args_start constructor_arguement_list_opt RPAREN
    (182) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (184) modifier -> . KWRD_PROTECTED
    (185) modifier -> . KWRD_PRIVATE
    (200) empty -> .
    (90) start_scope -> . BLOCK_BEGIN
    (131) statement_expression -> . assignment
    (132) statement_expression -> . method_invocation
    (10) expression -> . assignment_expression
    (172) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (76) array_access -> . name LBPAREN expression RBPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    BLOCK_END       shift and go to state 288
    KWRD_CASE       shift and go to state 255
    KWRD_IF         shift and go to state 63
    KWRD_WHILE      shift and go to state 52
    KWRD_DO         shift and go to state 47
    KWRD_FOR        shift and go to state 56
    KWRD_OBJECT     shift and go to state 4
    STATE_END       shift and go to state 53
    KWRD_RETURN     shift and go to state 50
    KWRD_PROTECTED  shift and go to state 11
    KWRD_PRIVATE    shift and go to state 15
    KWRD_DEF        reduce using rule 200 (empty -> .)
    KWRD_CLASS      reduce using rule 200 (empty -> .)
    KWRD_VAR        reduce using rule 200 (empty -> .)
    KWRD_VAL        reduce using rule 200 (empty -> .)
    BLOCK_BEGIN     shift and go to state 16
    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    expression_statement           shift and go to state 32
    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    normal_statement               shift and go to state 90
    ObjectDeclare                  shift and go to state 1
    class_header_name1             shift and go to state 2
    if_then_statement              shift and go to state 73
    array_access                   shift and go to state 34
    switch_statement               shift and go to state 57
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 39
    method_header_name             shift and go to state 49
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 70
    cast_expression                shift and go to state 85
    block_statement                shift and go to state 76
    return_statement               shift and go to state 94
    while_statement                shift and go to state 40
    and_expression                 shift and go to state 92
    statement                      shift and go to state 80
    literal                        shift and go to state 77
    statement_expression           shift and go to state 43
    method_invocation              shift and go to state 81
    simple_name                    shift and go to state 74
    conditional_or_expression      shift and go to state 59
    empty                          shift and go to state 5
    relational_expression          shift and go to state 79
    block_statements               shift and go to state 290
    for_statement                  shift and go to state 44
    local_variable_declaration_statement shift and go to state 45
    do_while_statement             shift and go to state 60
    int_float                      shift and go to state 46
    assignment                     shift and go to state 98
    multiplicative_expression      shift and go to state 61
    primary                        shift and go to state 72
    additive_expression            shift and go to state 58
    SingletonObject                shift and go to state 48
    start_scope                    shift and go to state 17
    switch_label                   shift and go to state 289
    class_header                   shift and go to state 9
    modifier_opts                  shift and go to state 100
    equality_expression            shift and go to state 86
    variable_literal               shift and go to state 64
    name                           shift and go to state 51
    unary_expression_not_plus_minus shift and go to state 55
    valid_variable                 shift and go to state 101
    method_header                  shift and go to state 87
    empty_statement                shift and go to state 88
    class_declaration              shift and go to state 102
    shift_expression               shift and go to state 62
    local_variable_declaration     shift and go to state 89
    modifier                       shift and go to state 14
    expression                     shift and go to state 67
    conditional_and_expression     shift and go to state 65
    block                          shift and go to state 68
    if_then_else_statement         shift and go to state 69

state 257

    (157) switch_labels -> switch_label .

    BLOCK_END       reduce using rule 157 (switch_labels -> switch_label .)
    KWRD_CASE       reduce using rule 157 (switch_labels -> switch_label .)
    KWRD_IF         reduce using rule 157 (switch_labels -> switch_label .)
    KWRD_WHILE      reduce using rule 157 (switch_labels -> switch_label .)
    KWRD_DO         reduce using rule 157 (switch_labels -> switch_label .)
    KWRD_FOR        reduce using rule 157 (switch_labels -> switch_label .)
    KWRD_OBJECT     reduce using rule 157 (switch_labels -> switch_label .)
    STATE_END       reduce using rule 157 (switch_labels -> switch_label .)
    KWRD_RETURN     reduce using rule 157 (switch_labels -> switch_label .)
    KWRD_PROTECTED  reduce using rule 157 (switch_labels -> switch_label .)
    KWRD_PRIVATE    reduce using rule 157 (switch_labels -> switch_label .)
    BLOCK_BEGIN     reduce using rule 157 (switch_labels -> switch_label .)
    IDENTIFIER      reduce using rule 157 (switch_labels -> switch_label .)
    PLUS            reduce using rule 157 (switch_labels -> switch_label .)
    MINUS           reduce using rule 157 (switch_labels -> switch_label .)
    TILDA           reduce using rule 157 (switch_labels -> switch_label .)
    NOT             reduce using rule 157 (switch_labels -> switch_label .)
    LPAREN          reduce using rule 157 (switch_labels -> switch_label .)
    CHARACTER       reduce using rule 157 (switch_labels -> switch_label .)
    STRING_CONST    reduce using rule 157 (switch_labels -> switch_label .)
    BOOL_CONSTT     reduce using rule 157 (switch_labels -> switch_label .)
    BOOL_CONSTF     reduce using rule 157 (switch_labels -> switch_label .)
    KWRD_NULL       reduce using rule 157 (switch_labels -> switch_label .)
    FLOAT_CONST     reduce using rule 157 (switch_labels -> switch_label .)
    INT_CONST       reduce using rule 157 (switch_labels -> switch_label .)
    KWRD_DEF        reduce using rule 157 (switch_labels -> switch_label .)
    KWRD_CLASS      reduce using rule 157 (switch_labels -> switch_label .)
    KWRD_VAR        reduce using rule 157 (switch_labels -> switch_label .)
    KWRD_VAL        reduce using rule 157 (switch_labels -> switch_label .)


state 258

    (151) switch_block -> BLOCK_BEGIN switch_block_statements . BLOCK_END
    (153) switch_block -> BLOCK_BEGIN switch_block_statements . switch_labels BLOCK_END
    (155) switch_block_statements -> switch_block_statements . switch_block_statement
    (157) switch_labels -> . switch_label
    (158) switch_labels -> . switch_labels switch_label
    (156) switch_block_statement -> . switch_labels block_statements
    (159) switch_label -> . KWRD_CASE expression FUNTYPE

    BLOCK_END       shift and go to state 291
    KWRD_CASE       shift and go to state 255

    switch_labels                  shift and go to state 292
    switch_label                   shift and go to state 257
    switch_block_statement         shift and go to state 293

state 259

    (154) switch_block_statements -> switch_block_statement .

    BLOCK_END       reduce using rule 154 (switch_block_statements -> switch_block_statement .)
    KWRD_CASE       reduce using rule 154 (switch_block_statements -> switch_block_statement .)


state 260

    (183) method_body -> BLOCK_BEGIN block_statements_opt end_scope .

    KWRD_IF         reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_WHILE      reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_DO         reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_FOR        reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_OBJECT     reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    STATE_END       reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_RETURN     reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_PROTECTED  reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_PRIVATE    reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    BLOCK_BEGIN     reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    IDENTIFIER      reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    PLUS            reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    MINUS           reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    TILDA           reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    NOT             reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    LPAREN          reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    CHARACTER       reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    STRING_CONST    reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    BOOL_CONSTT     reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    BOOL_CONSTF     reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_NULL       reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    FLOAT_CONST     reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    INT_CONST       reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_DEF        reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_CLASS      reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_VAR        reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_VAL        reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    BLOCK_END       reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)
    KWRD_CASE       reduce using rule 183 (method_body -> BLOCK_BEGIN block_statements_opt end_scope .)


state 261

    (64) cast_expression -> LPAREN primitive_type RPAREN unary_expression .

    TIMES           reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    DIVIDE          reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    REMAINDER       reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    PLUS            reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    MINUS           reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    LSHIFT          reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    RSHIFT          reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    GREATER         reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    LESS            reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    GEQ             reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    LEQ             reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    EQUAL           reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    NEQUAL          reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    AND_BITWISE     reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    XOR             reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    OR_BITWISE      reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    AND             reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    OR              reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    COMMA           reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    RPAREN          reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    STATE_END       reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    KWRD_MATCH      reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    RBPAREN         reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    KWRD_UNTIL      reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    KWRD_TO         reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    FUNTYPE         reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)
    KWRD_BY         reduce using rule 64 (cast_expression -> LPAREN primitive_type RPAREN unary_expression .)


state 262

    (112) variable_declaration_body -> variable_declarator ASSIGN . variable_declaration_initializer
    (107) variable_declaration_initializer -> . expression
    (108) variable_declaration_initializer -> . array_initializer
    (109) variable_declaration_initializer -> . class_initializer
    (10) expression -> . assignment_expression
    (197) array_initializer -> . KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN
    (198) array_initializer -> . KWRD_ARRAY LPAREN argument_list_opt RPAREN
    (199) class_initializer -> . KWRD_NEW name LPAREN argument_list_opt RPAREN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    KWRD_NEW        shift and go to state 296
    KWRD_ARRAY      shift and go to state 295
    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    variable_declaration_initializer shift and go to state 294
    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    and_expression                 shift and go to state 92
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 101
    inclusive_or_expression        shift and go to state 39
    literal                        shift and go to state 77
    relational_expression          shift and go to state 79
    cast_expression                shift and go to state 85
    conditional_or_expression      shift and go to state 59
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    assignment                     shift and go to state 127
    multiplicative_expression      shift and go to state 61
    additive_expression            shift and go to state 58
    method_invocation              shift and go to state 116
    class_initializer              shift and go to state 297
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    array_initializer              shift and go to state 298
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 128
    expression                     shift and go to state 299
    conditional_and_expression     shift and go to state 65

state 263

    (113) variable_declaration_body -> LPAREN variable_declarators . RPAREN ASSIGN LPAREN variable_arguement_list RPAREN
    (116) variable_declarators -> variable_declarators . COMMA variable_declarator

    RPAREN          shift and go to state 300
    COMMA           shift and go to state 242


state 264

    (114) variable_declaration_body -> IDENTIFIER ASSIGN . LPAREN func_arguement_list_opt RPAREN FUNTYPE expression

    LPAREN          shift and go to state 301


state 265

    (195) class_data_type -> name .
    (84) qualified_name -> name . DOT simple_name

    RBPAREN         reduce using rule 195 (class_data_type -> name .)
    COMMA           reduce using rule 195 (class_data_type -> name .)
    RPAREN          reduce using rule 195 (class_data_type -> name .)
    ASSIGN          reduce using rule 195 (class_data_type -> name .)
    DOT             shift and go to state 132


state 266

    (187) type -> reference_type .

    COMMA           reduce using rule 187 (type -> reference_type .)
    RPAREN          reduce using rule 187 (type -> reference_type .)
    ASSIGN          reduce using rule 187 (type -> reference_type .)
    RBPAREN         reduce using rule 187 (type -> reference_type .)


state 267

    (186) type -> primitive_type .

    COMMA           reduce using rule 186 (type -> primitive_type .)
    RPAREN          reduce using rule 186 (type -> primitive_type .)
    ASSIGN          reduce using rule 186 (type -> primitive_type .)
    RBPAREN         reduce using rule 186 (type -> primitive_type .)


state 268

    (193) reference_type -> class_data_type .

    RBPAREN         reduce using rule 193 (reference_type -> class_data_type .)
    COMMA           reduce using rule 193 (reference_type -> class_data_type .)
    RPAREN          reduce using rule 193 (reference_type -> class_data_type .)
    ASSIGN          reduce using rule 193 (reference_type -> class_data_type .)


state 269

    (196) array_data_type -> KWRD_ARRAY . LBPAREN type RBPAREN

    LBPAREN         shift and go to state 302


state 270

    (166) constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER COLON type .

    COMMA           reduce using rule 166 (constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER COLON type .)
    RPAREN          reduce using rule 166 (constructor_arguement_list_declarator -> declaration_keyword IDENTIFIER COLON type .)


state 271

    (194) reference_type -> array_data_type .

    RBPAREN         reduce using rule 194 (reference_type -> array_data_type .)
    COMMA           reduce using rule 194 (reference_type -> array_data_type .)
    RPAREN          reduce using rule 194 (reference_type -> array_data_type .)
    ASSIGN          reduce using rule 194 (reference_type -> array_data_type .)


state 272

    (175) class_header_extends -> KWRD_EXTNDS name LPAREN func_arguement_list_opt RPAREN .

    BLOCK_BEGIN     reduce using rule 175 (class_header_extends -> KWRD_EXTNDS name LPAREN func_arguement_list_opt RPAREN .)


state 273

    (139) do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression . RPAREN STATE_END

    RPAREN          shift and go to state 303


state 274

    (178) method_header -> method_header_name func_args_start func_arguement_list_opt RPAREN COLON . method_return_type ASSIGN
    (180) method_return_type -> . type
    (181) method_return_type -> . TYPE_VOID
    (186) type -> . primitive_type
    (187) type -> . reference_type
    (188) primitive_type -> . TYPE_INT
    (189) primitive_type -> . TYPE_FLOAT
    (190) primitive_type -> . TYPE_CHAR
    (191) primitive_type -> . TYPE_STRING
    (192) primitive_type -> . TYPE_BOOLEAN
    (193) reference_type -> . class_data_type
    (194) reference_type -> . array_data_type
    (195) class_data_type -> . name
    (196) array_data_type -> . KWRD_ARRAY LBPAREN type RBPAREN
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name

    TYPE_VOID       shift and go to state 304
    TYPE_INT        shift and go to state 160
    TYPE_FLOAT      shift and go to state 165
    TYPE_CHAR       shift and go to state 162
    TYPE_STRING     shift and go to state 161
    TYPE_BOOLEAN    shift and go to state 164
    KWRD_ARRAY      shift and go to state 269
    IDENTIFIER      shift and go to state 82

    name                           shift and go to state 265
    qualified_name                 shift and go to state 84
    method_return_type             shift and go to state 306
    reference_type                 shift and go to state 266
    primitive_type                 shift and go to state 267
    class_data_type                shift and go to state 268
    type                           shift and go to state 305
    array_data_type                shift and go to state 271
    simple_name                    shift and go to state 74

state 275

    (118) variable_declarator_id -> IDENTIFIER COLON type .

    COMMA           reduce using rule 118 (variable_declarator_id -> IDENTIFIER COLON type .)
    RPAREN          reduce using rule 118 (variable_declarator_id -> IDENTIFIER COLON type .)
    ASSIGN          reduce using rule 118 (variable_declarator_id -> IDENTIFIER COLON type .)


state 276

    (116) variable_declarators -> variable_declarators COMMA variable_declarator .

    COMMA           reduce using rule 116 (variable_declarators -> variable_declarators COMMA variable_declarator .)
    RPAREN          reduce using rule 116 (variable_declarators -> variable_declarators COMMA variable_declarator .)


state 277

    (80) argument_list -> argument_list COMMA expression .

    COMMA           reduce using rule 80 (argument_list -> argument_list COMMA expression .)
    RPAREN          reduce using rule 80 (argument_list -> argument_list COMMA expression .)


state 278

    (138) while_statement -> KWRD_WHILE LPAREN expression RPAREN block .

    KWRD_IF         reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    KWRD_WHILE      reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    KWRD_DO         reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    KWRD_FOR        reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    KWRD_OBJECT     reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    STATE_END       reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    KWRD_RETURN     reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    KWRD_PROTECTED  reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    KWRD_PRIVATE    reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    BLOCK_BEGIN     reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    IDENTIFIER      reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    PLUS            reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    MINUS           reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    TILDA           reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    NOT             reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    LPAREN          reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    CHARACTER       reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    STRING_CONST    reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    BOOL_CONSTT     reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    BOOL_CONSTF     reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    KWRD_NULL       reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    FLOAT_CONST     reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    INT_CONST       reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    KWRD_DEF        reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    KWRD_CLASS      reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    KWRD_VAR        reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    KWRD_VAL        reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    BLOCK_END       reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)
    KWRD_CASE       reduce using rule 138 (while_statement -> KWRD_WHILE LPAREN expression RPAREN block .)


state 279

    (147) for_step_opts -> KWRD_BY expression .

    STATE_END       reduce using rule 147 (for_step_opts -> KWRD_BY expression .)
    RPAREN          reduce using rule 147 (for_step_opts -> KWRD_BY expression .)


state 280

    (140) for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .

    KWRD_IF         reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    KWRD_WHILE      reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    KWRD_DO         reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    KWRD_FOR        reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    KWRD_OBJECT     reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    STATE_END       reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    KWRD_RETURN     reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    KWRD_PROTECTED  reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    KWRD_PRIVATE    reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    BLOCK_BEGIN     reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    IDENTIFIER      reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    PLUS            reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    MINUS           reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    TILDA           reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    NOT             reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    LPAREN          reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    CHARACTER       reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    STRING_CONST    reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    BOOL_CONSTT     reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    BOOL_CONSTF     reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    KWRD_NULL       reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    FLOAT_CONST     reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    INT_CONST       reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    KWRD_DEF        reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    KWRD_CLASS      reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    KWRD_VAR        reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    KWRD_VAL        reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    BLOCK_END       reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)
    KWRD_CASE       reduce using rule 140 (for_statement -> KWRD_FOR LPAREN for_logic RPAREN block .)


state 281

    (142) for_logic -> for_update STATE_END for_logic .

    RPAREN          reduce using rule 142 (for_logic -> for_update STATE_END for_logic .)


state 282

    (144) for_loop -> IDENTIFIER CHOOSE expression . for_untilTo expression
    (145) for_untilTo -> . KWRD_UNTIL
    (146) for_untilTo -> . KWRD_TO

    KWRD_UNTIL      shift and go to state 308
    KWRD_TO         shift and go to state 309

    for_untilTo                    shift and go to state 307

state 283

    (135) if_then_else_statement_precedence -> KWRD_IF . LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate

    LPAREN          shift and go to state 310


state 284

    (137) if_then_else_intermediate -> if_then_else_statement_precedence .

    KWRD_ELSE       reduce using rule 137 (if_then_else_intermediate -> if_then_else_statement_precedence .)


state 285

    (134) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate . KWRD_ELSE block

    KWRD_ELSE       shift and go to state 311


state 286

    (133) if_then_statement -> KWRD_IF LPAREN expression RPAREN block .
    (136) if_then_else_intermediate -> block .

    KWRD_IF         reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    KWRD_WHILE      reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    KWRD_DO         reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    KWRD_FOR        reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    KWRD_OBJECT     reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    STATE_END       reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    KWRD_RETURN     reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    KWRD_PROTECTED  reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    KWRD_PRIVATE    reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    BLOCK_BEGIN     reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    IDENTIFIER      reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    PLUS            reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    MINUS           reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    TILDA           reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    NOT             reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    LPAREN          reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    CHARACTER       reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    STRING_CONST    reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    BOOL_CONSTT     reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    BOOL_CONSTF     reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    KWRD_NULL       reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    FLOAT_CONST     reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    INT_CONST       reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    KWRD_DEF        reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    KWRD_CLASS      reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    KWRD_VAR        reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    KWRD_VAL        reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    BLOCK_END       reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    KWRD_CASE       reduce using rule 133 (if_then_statement -> KWRD_IF LPAREN expression RPAREN block .)
    KWRD_ELSE       reduce using rule 136 (if_then_else_intermediate -> block .)


state 287

    (159) switch_label -> KWRD_CASE expression . FUNTYPE

    FUNTYPE         shift and go to state 312


state 288

    (152) switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .

    KWRD_IF         reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_WHILE      reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_DO         reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_FOR        reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_OBJECT     reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    STATE_END       reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_RETURN     reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_PROTECTED  reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_PRIVATE    reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    IDENTIFIER      reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    PLUS            reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    MINUS           reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    TILDA           reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    NOT             reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    LPAREN          reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    CHARACTER       reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    STRING_CONST    reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    BOOL_CONSTT     reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    BOOL_CONSTF     reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_NULL       reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    FLOAT_CONST     reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    INT_CONST       reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_DEF        reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_CLASS      reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_VAR        reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_VAL        reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    BLOCK_END       reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)
    KWRD_CASE       reduce using rule 152 (switch_block -> BLOCK_BEGIN switch_labels BLOCK_END .)


state 289

    (158) switch_labels -> switch_labels switch_label .

    BLOCK_END       reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    KWRD_CASE       reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    KWRD_IF         reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    KWRD_WHILE      reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    KWRD_DO         reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    KWRD_FOR        reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    KWRD_OBJECT     reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    STATE_END       reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    KWRD_RETURN     reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    KWRD_PROTECTED  reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    KWRD_PRIVATE    reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    BLOCK_BEGIN     reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    IDENTIFIER      reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    PLUS            reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    MINUS           reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    TILDA           reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    NOT             reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    LPAREN          reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    CHARACTER       reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    STRING_CONST    reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    BOOL_CONSTT     reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    BOOL_CONSTF     reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    KWRD_NULL       reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    FLOAT_CONST     reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    INT_CONST       reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    KWRD_DEF        reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    KWRD_CLASS      reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    KWRD_VAR        reduce using rule 158 (switch_labels -> switch_labels switch_label .)
    KWRD_VAL        reduce using rule 158 (switch_labels -> switch_labels switch_label .)


state 290

    (156) switch_block_statement -> switch_labels block_statements .
    (95) block_statements -> block_statements . block_statement
    (96) block_statement -> . local_variable_declaration_statement
    (97) block_statement -> . statement
    (98) block_statement -> . class_declaration
    (99) block_statement -> . SingletonObject
    (100) block_statement -> . method_declaration
    (105) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (119) statement -> . normal_statement
    (120) statement -> . if_then_statement
    (121) statement -> . if_then_else_statement
    (122) statement -> . while_statement
    (123) statement -> . do_while_statement
    (124) statement -> . for_statement
    (169) class_declaration -> . class_header class_body
    (7) SingletonObject -> . ObjectDeclare block
    (177) method_declaration -> . method_header method_body
    (106) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (125) normal_statement -> . block
    (126) normal_statement -> . expression_statement
    (127) normal_statement -> . empty_statement
    (128) normal_statement -> . return_statement
    (129) normal_statement -> . switch_statement
    (133) if_then_statement -> . KWRD_IF LPAREN expression RPAREN block
    (134) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block
    (138) while_statement -> . KWRD_WHILE LPAREN expression RPAREN block
    (139) do_while_statement -> . KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END
    (140) for_statement -> . KWRD_FOR LPAREN for_logic RPAREN block
    (170) class_header -> . class_header_name class_header_extends_opt
    (8) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (9) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (178) method_header -> . method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (101) modifier_opts -> . modifier
    (102) modifier_opts -> . empty
    (89) block -> . start_scope block_statements_opt end_scope
    (130) expression_statement -> . statement_expression STATE_END
    (160) empty_statement -> . STATE_END
    (161) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (149) switch_statement -> . expression KWRD_MATCH switch_block
    (171) class_header_name -> . class_header_name1 func_args_start constructor_arguement_list_opt RPAREN
    (182) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (184) modifier -> . KWRD_PROTECTED
    (185) modifier -> . KWRD_PRIVATE
    (200) empty -> .
    (90) start_scope -> . BLOCK_BEGIN
    (131) statement_expression -> . assignment
    (132) statement_expression -> . method_invocation
    (10) expression -> . assignment_expression
    (172) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (76) array_access -> . name LBPAREN expression RBPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    BLOCK_END       reduce using rule 156 (switch_block_statement -> switch_labels block_statements .)
    KWRD_CASE       reduce using rule 156 (switch_block_statement -> switch_labels block_statements .)
    KWRD_IF         shift and go to state 63
    KWRD_WHILE      shift and go to state 52
    KWRD_DO         shift and go to state 47
    KWRD_FOR        shift and go to state 56
    KWRD_OBJECT     shift and go to state 4
    STATE_END       shift and go to state 53
    KWRD_RETURN     shift and go to state 50
    KWRD_PROTECTED  shift and go to state 11
    KWRD_PRIVATE    shift and go to state 15
    KWRD_DEF        reduce using rule 200 (empty -> .)
    KWRD_CLASS      reduce using rule 200 (empty -> .)
    KWRD_VAR        reduce using rule 200 (empty -> .)
    KWRD_VAL        reduce using rule 200 (empty -> .)
    BLOCK_BEGIN     shift and go to state 16
    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    expression_statement           shift and go to state 32
    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    normal_statement               shift and go to state 90
    ObjectDeclare                  shift and go to state 1
    class_header_name1             shift and go to state 2
    if_then_statement              shift and go to state 73
    array_access                   shift and go to state 34
    switch_statement               shift and go to state 57
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 39
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 70
    cast_expression                shift and go to state 85
    block_statement                shift and go to state 159
    return_statement               shift and go to state 94
    while_statement                shift and go to state 40
    and_expression                 shift and go to state 92
    statement                      shift and go to state 80
    literal                        shift and go to state 77
    statement_expression           shift and go to state 43
    method_invocation              shift and go to state 81
    simple_name                    shift and go to state 74
    conditional_or_expression      shift and go to state 59
    empty                          shift and go to state 5
    relational_expression          shift and go to state 79
    for_statement                  shift and go to state 44
    local_variable_declaration_statement shift and go to state 45
    do_while_statement             shift and go to state 60
    int_float                      shift and go to state 46
    assignment                     shift and go to state 98
    multiplicative_expression      shift and go to state 61
    primary                        shift and go to state 72
    additive_expression            shift and go to state 58
    SingletonObject                shift and go to state 48
    start_scope                    shift and go to state 17
    method_header_name             shift and go to state 49
    class_header                   shift and go to state 9
    modifier_opts                  shift and go to state 100
    equality_expression            shift and go to state 86
    variable_literal               shift and go to state 64
    name                           shift and go to state 51
    unary_expression_not_plus_minus shift and go to state 55
    valid_variable                 shift and go to state 101
    method_header                  shift and go to state 87
    empty_statement                shift and go to state 88
    class_declaration              shift and go to state 102
    shift_expression               shift and go to state 62
    local_variable_declaration     shift and go to state 89
    modifier                       shift and go to state 14
    expression                     shift and go to state 67
    conditional_and_expression     shift and go to state 65
    block                          shift and go to state 68
    if_then_else_statement         shift and go to state 69

state 291

    (151) switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .

    KWRD_IF         reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_WHILE      reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_DO         reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_FOR        reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_OBJECT     reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    STATE_END       reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_RETURN     reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_PROTECTED  reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_PRIVATE    reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    IDENTIFIER      reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    PLUS            reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    MINUS           reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    TILDA           reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    NOT             reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    LPAREN          reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    CHARACTER       reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    STRING_CONST    reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    BOOL_CONSTT     reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    BOOL_CONSTF     reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_NULL       reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    FLOAT_CONST     reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    INT_CONST       reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_DEF        reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_CLASS      reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_VAR        reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_VAL        reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    BLOCK_END       reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)
    KWRD_CASE       reduce using rule 151 (switch_block -> BLOCK_BEGIN switch_block_statements BLOCK_END .)


state 292

    (153) switch_block -> BLOCK_BEGIN switch_block_statements switch_labels . BLOCK_END
    (158) switch_labels -> switch_labels . switch_label
    (156) switch_block_statement -> switch_labels . block_statements
    (159) switch_label -> . KWRD_CASE expression FUNTYPE
    (94) block_statements -> . block_statement
    (95) block_statements -> . block_statements block_statement
    (96) block_statement -> . local_variable_declaration_statement
    (97) block_statement -> . statement
    (98) block_statement -> . class_declaration
    (99) block_statement -> . SingletonObject
    (100) block_statement -> . method_declaration
    (105) local_variable_declaration_statement -> . local_variable_declaration STATE_END
    (119) statement -> . normal_statement
    (120) statement -> . if_then_statement
    (121) statement -> . if_then_else_statement
    (122) statement -> . while_statement
    (123) statement -> . do_while_statement
    (124) statement -> . for_statement
    (169) class_declaration -> . class_header class_body
    (7) SingletonObject -> . ObjectDeclare block
    (177) method_declaration -> . method_header method_body
    (106) local_variable_declaration -> . modifier_opts declaration_keyword variable_declaration_body
    (125) normal_statement -> . block
    (126) normal_statement -> . expression_statement
    (127) normal_statement -> . empty_statement
    (128) normal_statement -> . return_statement
    (129) normal_statement -> . switch_statement
    (133) if_then_statement -> . KWRD_IF LPAREN expression RPAREN block
    (134) if_then_else_statement -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block
    (138) while_statement -> . KWRD_WHILE LPAREN expression RPAREN block
    (139) do_while_statement -> . KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END
    (140) for_statement -> . KWRD_FOR LPAREN for_logic RPAREN block
    (170) class_header -> . class_header_name class_header_extends_opt
    (8) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER
    (9) ObjectDeclare -> . KWRD_OBJECT IDENTIFIER KWRD_EXTNDS IDENTIFIER
    (178) method_header -> . method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN
    (101) modifier_opts -> . modifier
    (102) modifier_opts -> . empty
    (89) block -> . start_scope block_statements_opt end_scope
    (130) expression_statement -> . statement_expression STATE_END
    (160) empty_statement -> . STATE_END
    (161) return_statement -> . KWRD_RETURN expression_optional STATE_END
    (149) switch_statement -> . expression KWRD_MATCH switch_block
    (171) class_header_name -> . class_header_name1 func_args_start constructor_arguement_list_opt RPAREN
    (182) method_header_name -> . modifier_opts KWRD_DEF IDENTIFIER
    (184) modifier -> . KWRD_PROTECTED
    (185) modifier -> . KWRD_PRIVATE
    (200) empty -> .
    (90) start_scope -> . BLOCK_BEGIN
    (131) statement_expression -> . assignment
    (132) statement_expression -> . method_invocation
    (10) expression -> . assignment_expression
    (172) class_header_name1 -> . modifier_opts KWRD_CLASS name
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (76) array_access -> . name LBPAREN expression RBPAREN
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    BLOCK_END       shift and go to state 313
    KWRD_CASE       shift and go to state 255
    KWRD_IF         shift and go to state 63
    KWRD_WHILE      shift and go to state 52
    KWRD_DO         shift and go to state 47
    KWRD_FOR        shift and go to state 56
    KWRD_OBJECT     shift and go to state 4
    STATE_END       shift and go to state 53
    KWRD_RETURN     shift and go to state 50
    KWRD_PROTECTED  shift and go to state 11
    KWRD_PRIVATE    shift and go to state 15
    KWRD_DEF        reduce using rule 200 (empty -> .)
    KWRD_CLASS      reduce using rule 200 (empty -> .)
    KWRD_VAR        reduce using rule 200 (empty -> .)
    KWRD_VAL        reduce using rule 200 (empty -> .)
    BLOCK_BEGIN     shift and go to state 16
    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    expression_statement           shift and go to state 32
    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    normal_statement               shift and go to state 90
    ObjectDeclare                  shift and go to state 1
    class_header_name1             shift and go to state 2
    if_then_statement              shift and go to state 73
    array_access                   shift and go to state 34
    switch_statement               shift and go to state 57
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 39
    method_header_name             shift and go to state 49
    class_header_name              shift and go to state 3
    method_declaration             shift and go to state 70
    cast_expression                shift and go to state 85
    block_statement                shift and go to state 76
    return_statement               shift and go to state 94
    while_statement                shift and go to state 40
    and_expression                 shift and go to state 92
    statement                      shift and go to state 80
    literal                        shift and go to state 77
    statement_expression           shift and go to state 43
    method_invocation              shift and go to state 81
    simple_name                    shift and go to state 74
    conditional_or_expression      shift and go to state 59
    empty                          shift and go to state 5
    relational_expression          shift and go to state 79
    block_statements               shift and go to state 290
    for_statement                  shift and go to state 44
    local_variable_declaration_statement shift and go to state 45
    do_while_statement             shift and go to state 60
    int_float                      shift and go to state 46
    assignment                     shift and go to state 98
    multiplicative_expression      shift and go to state 61
    primary                        shift and go to state 72
    additive_expression            shift and go to state 58
    SingletonObject                shift and go to state 48
    start_scope                    shift and go to state 17
    switch_label                   shift and go to state 289
    class_header                   shift and go to state 9
    modifier_opts                  shift and go to state 100
    equality_expression            shift and go to state 86
    variable_literal               shift and go to state 64
    name                           shift and go to state 51
    unary_expression_not_plus_minus shift and go to state 55
    expression                     shift and go to state 67
    valid_variable                 shift and go to state 101
    method_header                  shift and go to state 87
    empty_statement                shift and go to state 88
    class_declaration              shift and go to state 102
    shift_expression               shift and go to state 62
    local_variable_declaration     shift and go to state 89
    modifier                       shift and go to state 14
    conditional_and_expression     shift and go to state 65
    block                          shift and go to state 68
    if_then_else_statement         shift and go to state 69

state 293

    (155) switch_block_statements -> switch_block_statements switch_block_statement .

    BLOCK_END       reduce using rule 155 (switch_block_statements -> switch_block_statements switch_block_statement .)
    KWRD_CASE       reduce using rule 155 (switch_block_statements -> switch_block_statements switch_block_statement .)


state 294

    (112) variable_declaration_body -> variable_declarator ASSIGN variable_declaration_initializer .

    STATE_END       reduce using rule 112 (variable_declaration_body -> variable_declarator ASSIGN variable_declaration_initializer .)


state 295

    (198) array_initializer -> KWRD_ARRAY . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 314


state 296

    (197) array_initializer -> KWRD_NEW . KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN
    (199) class_initializer -> KWRD_NEW . name LPAREN argument_list_opt RPAREN
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name

    KWRD_ARRAY      shift and go to state 316
    IDENTIFIER      shift and go to state 82

    simple_name                    shift and go to state 74
    name                           shift and go to state 315
    qualified_name                 shift and go to state 84

state 297

    (109) variable_declaration_initializer -> class_initializer .

    STATE_END       reduce using rule 109 (variable_declaration_initializer -> class_initializer .)
    RPAREN          reduce using rule 109 (variable_declaration_initializer -> class_initializer .)
    COMMA           reduce using rule 109 (variable_declaration_initializer -> class_initializer .)


state 298

    (108) variable_declaration_initializer -> array_initializer .

    STATE_END       reduce using rule 108 (variable_declaration_initializer -> array_initializer .)
    RPAREN          reduce using rule 108 (variable_declaration_initializer -> array_initializer .)
    COMMA           reduce using rule 108 (variable_declaration_initializer -> array_initializer .)


state 299

    (107) variable_declaration_initializer -> expression .

    STATE_END       reduce using rule 107 (variable_declaration_initializer -> expression .)
    RPAREN          reduce using rule 107 (variable_declaration_initializer -> expression .)
    COMMA           reduce using rule 107 (variable_declaration_initializer -> expression .)


state 300

    (113) variable_declaration_body -> LPAREN variable_declarators RPAREN . ASSIGN LPAREN variable_arguement_list RPAREN

    ASSIGN          shift and go to state 317


state 301

    (114) variable_declaration_body -> IDENTIFIER ASSIGN LPAREN . func_arguement_list_opt RPAREN FUNTYPE expression
    (167) func_arguement_list_opt -> . variable_declarators
    (168) func_arguement_list_opt -> . empty
    (115) variable_declarators -> . variable_declarator
    (116) variable_declarators -> . variable_declarators COMMA variable_declarator
    (200) empty -> .
    (117) variable_declarator -> . variable_declarator_id
    (118) variable_declarator_id -> . IDENTIFIER COLON type

    RPAREN          reduce using rule 200 (empty -> .)
    IDENTIFIER      shift and go to state 190

    func_arguement_list_opt        shift and go to state 318
    variable_declarators           shift and go to state 192
    variable_declarator            shift and go to state 193
    variable_declarator_id         shift and go to state 191
    empty                          shift and go to state 194

state 302

    (196) array_data_type -> KWRD_ARRAY LBPAREN . type RBPAREN
    (186) type -> . primitive_type
    (187) type -> . reference_type
    (188) primitive_type -> . TYPE_INT
    (189) primitive_type -> . TYPE_FLOAT
    (190) primitive_type -> . TYPE_CHAR
    (191) primitive_type -> . TYPE_STRING
    (192) primitive_type -> . TYPE_BOOLEAN
    (193) reference_type -> . class_data_type
    (194) reference_type -> . array_data_type
    (195) class_data_type -> . name
    (196) array_data_type -> . KWRD_ARRAY LBPAREN type RBPAREN
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name

    TYPE_INT        shift and go to state 160
    TYPE_FLOAT      shift and go to state 165
    TYPE_CHAR       shift and go to state 162
    TYPE_STRING     shift and go to state 161
    TYPE_BOOLEAN    shift and go to state 164
    KWRD_ARRAY      shift and go to state 269
    IDENTIFIER      shift and go to state 82

    name                           shift and go to state 265
    qualified_name                 shift and go to state 84
    reference_type                 shift and go to state 266
    primitive_type                 shift and go to state 267
    class_data_type                shift and go to state 268
    type                           shift and go to state 319
    array_data_type                shift and go to state 271
    simple_name                    shift and go to state 74

state 303

    (139) do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN . STATE_END

    STATE_END       shift and go to state 320


state 304

    (181) method_return_type -> TYPE_VOID .

    ASSIGN          reduce using rule 181 (method_return_type -> TYPE_VOID .)


state 305

    (180) method_return_type -> type .

    ASSIGN          reduce using rule 180 (method_return_type -> type .)


state 306

    (178) method_header -> method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type . ASSIGN

    ASSIGN          shift and go to state 321


state 307

    (144) for_loop -> IDENTIFIER CHOOSE expression for_untilTo . expression
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 101
    inclusive_or_expression        shift and go to state 39
    literal                        shift and go to state 77
    and_expression                 shift and go to state 92
    relational_expression          shift and go to state 79
    cast_expression                shift and go to state 85
    conditional_or_expression      shift and go to state 59
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    assignment                     shift and go to state 127
    multiplicative_expression      shift and go to state 61
    method_invocation              shift and go to state 116
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 128
    expression                     shift and go to state 322
    conditional_and_expression     shift and go to state 65

state 308

    (145) for_untilTo -> KWRD_UNTIL .

    IDENTIFIER      reduce using rule 145 (for_untilTo -> KWRD_UNTIL .)
    PLUS            reduce using rule 145 (for_untilTo -> KWRD_UNTIL .)
    MINUS           reduce using rule 145 (for_untilTo -> KWRD_UNTIL .)
    TILDA           reduce using rule 145 (for_untilTo -> KWRD_UNTIL .)
    NOT             reduce using rule 145 (for_untilTo -> KWRD_UNTIL .)
    LPAREN          reduce using rule 145 (for_untilTo -> KWRD_UNTIL .)
    CHARACTER       reduce using rule 145 (for_untilTo -> KWRD_UNTIL .)
    STRING_CONST    reduce using rule 145 (for_untilTo -> KWRD_UNTIL .)
    BOOL_CONSTT     reduce using rule 145 (for_untilTo -> KWRD_UNTIL .)
    BOOL_CONSTF     reduce using rule 145 (for_untilTo -> KWRD_UNTIL .)
    KWRD_NULL       reduce using rule 145 (for_untilTo -> KWRD_UNTIL .)
    FLOAT_CONST     reduce using rule 145 (for_untilTo -> KWRD_UNTIL .)
    INT_CONST       reduce using rule 145 (for_untilTo -> KWRD_UNTIL .)


state 309

    (146) for_untilTo -> KWRD_TO .

    IDENTIFIER      reduce using rule 146 (for_untilTo -> KWRD_TO .)
    PLUS            reduce using rule 146 (for_untilTo -> KWRD_TO .)
    MINUS           reduce using rule 146 (for_untilTo -> KWRD_TO .)
    TILDA           reduce using rule 146 (for_untilTo -> KWRD_TO .)
    NOT             reduce using rule 146 (for_untilTo -> KWRD_TO .)
    LPAREN          reduce using rule 146 (for_untilTo -> KWRD_TO .)
    CHARACTER       reduce using rule 146 (for_untilTo -> KWRD_TO .)
    STRING_CONST    reduce using rule 146 (for_untilTo -> KWRD_TO .)
    BOOL_CONSTT     reduce using rule 146 (for_untilTo -> KWRD_TO .)
    BOOL_CONSTF     reduce using rule 146 (for_untilTo -> KWRD_TO .)
    KWRD_NULL       reduce using rule 146 (for_untilTo -> KWRD_TO .)
    FLOAT_CONST     reduce using rule 146 (for_untilTo -> KWRD_TO .)
    INT_CONST       reduce using rule 146 (for_untilTo -> KWRD_TO .)


state 310

    (135) if_then_else_statement_precedence -> KWRD_IF LPAREN . expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 101
    inclusive_or_expression        shift and go to state 39
    literal                        shift and go to state 77
    and_expression                 shift and go to state 92
    relational_expression          shift and go to state 79
    cast_expression                shift and go to state 85
    conditional_or_expression      shift and go to state 59
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    assignment                     shift and go to state 127
    multiplicative_expression      shift and go to state 61
    method_invocation              shift and go to state 116
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 128
    expression                     shift and go to state 323
    conditional_and_expression     shift and go to state 65

state 311

    (134) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE . block
    (89) block -> . start_scope block_statements_opt end_scope
    (90) start_scope -> . BLOCK_BEGIN

    BLOCK_BEGIN     shift and go to state 16

    start_scope                    shift and go to state 17
    block                          shift and go to state 324

state 312

    (159) switch_label -> KWRD_CASE expression FUNTYPE .

    BLOCK_END       reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_CASE       reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_IF         reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_WHILE      reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_DO         reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_FOR        reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_OBJECT     reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    STATE_END       reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_RETURN     reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_PROTECTED  reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_PRIVATE    reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    BLOCK_BEGIN     reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    IDENTIFIER      reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    PLUS            reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    MINUS           reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    TILDA           reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    NOT             reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    LPAREN          reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    CHARACTER       reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    STRING_CONST    reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    BOOL_CONSTT     reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    BOOL_CONSTF     reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_NULL       reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    FLOAT_CONST     reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    INT_CONST       reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_DEF        reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_CLASS      reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_VAR        reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)
    KWRD_VAL        reduce using rule 159 (switch_label -> KWRD_CASE expression FUNTYPE .)


state 313

    (153) switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .

    KWRD_IF         reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_WHILE      reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_DO         reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_FOR        reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_OBJECT     reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    STATE_END       reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_RETURN     reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_PROTECTED  reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_PRIVATE    reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    BLOCK_BEGIN     reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    IDENTIFIER      reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    PLUS            reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    MINUS           reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    TILDA           reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    NOT             reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    LPAREN          reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    CHARACTER       reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    STRING_CONST    reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    BOOL_CONSTT     reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    BOOL_CONSTF     reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_NULL       reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    FLOAT_CONST     reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    INT_CONST       reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_DEF        reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_CLASS      reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_VAR        reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_VAL        reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    BLOCK_END       reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)
    KWRD_CASE       reduce using rule 153 (switch_block -> BLOCK_BEGIN switch_block_statements switch_labels BLOCK_END .)


state 314

    (198) array_initializer -> KWRD_ARRAY LPAREN . argument_list_opt RPAREN
    (77) argument_list_opt -> . argument_list
    (78) argument_list_opt -> . empty
    (79) argument_list -> . expression
    (80) argument_list -> . argument_list COMMA expression
    (200) empty -> .
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    RPAREN          reduce using rule 200 (empty -> .)
    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    and_expression                 shift and go to state 92
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    unary_expression               shift and go to state 54
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 101
    inclusive_or_expression        shift and go to state 39
    literal                        shift and go to state 77
    relational_expression          shift and go to state 79
    cast_expression                shift and go to state 85
    conditional_or_expression      shift and go to state 59
    empty                          shift and go to state 197
    argument_list                  shift and go to state 196
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    assignment                     shift and go to state 127
    multiplicative_expression      shift and go to state 61
    method_invocation              shift and go to state 116
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 128
    argument_list_opt              shift and go to state 325
    expression                     shift and go to state 199
    conditional_and_expression     shift and go to state 65

state 315

    (199) class_initializer -> KWRD_NEW name . LPAREN argument_list_opt RPAREN
    (84) qualified_name -> name . DOT simple_name

    LPAREN          shift and go to state 326
    DOT             shift and go to state 132


state 316

    (197) array_initializer -> KWRD_NEW KWRD_ARRAY . LBPAREN type RBPAREN LPAREN INT_CONST RPAREN

    LBPAREN         shift and go to state 327


state 317

    (113) variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN . LPAREN variable_arguement_list RPAREN

    LPAREN          shift and go to state 328


state 318

    (114) variable_declaration_body -> IDENTIFIER ASSIGN LPAREN func_arguement_list_opt . RPAREN FUNTYPE expression

    RPAREN          shift and go to state 329


state 319

    (196) array_data_type -> KWRD_ARRAY LBPAREN type . RBPAREN

    RBPAREN         shift and go to state 330


state 320

    (139) do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .

    KWRD_IF         reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_WHILE      reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_DO         reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_FOR        reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_OBJECT     reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    STATE_END       reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_RETURN     reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_PROTECTED  reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_PRIVATE    reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    BLOCK_BEGIN     reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    IDENTIFIER      reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    PLUS            reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    MINUS           reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    TILDA           reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    NOT             reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    LPAREN          reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    CHARACTER       reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    STRING_CONST    reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    BOOL_CONSTT     reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    BOOL_CONSTF     reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_NULL       reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    FLOAT_CONST     reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    INT_CONST       reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_DEF        reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_CLASS      reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_VAR        reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_VAL        reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    BLOCK_END       reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)
    KWRD_CASE       reduce using rule 139 (do_while_statement -> KWRD_DO block KWRD_WHILE LPAREN expression RPAREN STATE_END .)


state 321

    (178) method_header -> method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN .

    BLOCK_BEGIN     reduce using rule 178 (method_header -> method_header_name func_args_start func_arguement_list_opt RPAREN COLON method_return_type ASSIGN .)


state 322

    (144) for_loop -> IDENTIFIER CHOOSE expression for_untilTo expression .

    KWRD_BY         reduce using rule 144 (for_loop -> IDENTIFIER CHOOSE expression for_untilTo expression .)
    STATE_END       reduce using rule 144 (for_loop -> IDENTIFIER CHOOSE expression for_untilTo expression .)
    RPAREN          reduce using rule 144 (for_loop -> IDENTIFIER CHOOSE expression for_untilTo expression .)


state 323

    (135) if_then_else_statement_precedence -> KWRD_IF LPAREN expression . RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate

    RPAREN          shift and go to state 331


state 324

    (134) if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .

    KWRD_IF         reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    KWRD_WHILE      reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    KWRD_DO         reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    KWRD_FOR        reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    KWRD_OBJECT     reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    STATE_END       reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    KWRD_RETURN     reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    KWRD_PROTECTED  reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    KWRD_PRIVATE    reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    BLOCK_BEGIN     reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    IDENTIFIER      reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    PLUS            reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    MINUS           reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    TILDA           reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    NOT             reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    LPAREN          reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    CHARACTER       reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    STRING_CONST    reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    BOOL_CONSTT     reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    BOOL_CONSTF     reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    KWRD_NULL       reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    FLOAT_CONST     reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    INT_CONST       reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    KWRD_DEF        reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    KWRD_CLASS      reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    KWRD_VAR        reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    KWRD_VAL        reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    BLOCK_END       reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)
    KWRD_CASE       reduce using rule 134 (if_then_else_statement -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE block .)


state 325

    (198) array_initializer -> KWRD_ARRAY LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 332


state 326

    (199) class_initializer -> KWRD_NEW name LPAREN . argument_list_opt RPAREN
    (77) argument_list_opt -> . argument_list
    (78) argument_list_opt -> . empty
    (79) argument_list -> . expression
    (80) argument_list -> . argument_list COMMA expression
    (200) empty -> .
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    RPAREN          reduce using rule 200 (empty -> .)
    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    and_expression                 shift and go to state 92
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    unary_expression               shift and go to state 54
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 101
    inclusive_or_expression        shift and go to state 39
    literal                        shift and go to state 77
    relational_expression          shift and go to state 79
    cast_expression                shift and go to state 85
    conditional_or_expression      shift and go to state 59
    empty                          shift and go to state 197
    argument_list                  shift and go to state 196
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    assignment                     shift and go to state 127
    multiplicative_expression      shift and go to state 61
    method_invocation              shift and go to state 116
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 128
    argument_list_opt              shift and go to state 333
    expression                     shift and go to state 199
    conditional_and_expression     shift and go to state 65

state 327

    (197) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN . type RBPAREN LPAREN INT_CONST RPAREN
    (186) type -> . primitive_type
    (187) type -> . reference_type
    (188) primitive_type -> . TYPE_INT
    (189) primitive_type -> . TYPE_FLOAT
    (190) primitive_type -> . TYPE_CHAR
    (191) primitive_type -> . TYPE_STRING
    (192) primitive_type -> . TYPE_BOOLEAN
    (193) reference_type -> . class_data_type
    (194) reference_type -> . array_data_type
    (195) class_data_type -> . name
    (196) array_data_type -> . KWRD_ARRAY LBPAREN type RBPAREN
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name

    TYPE_INT        shift and go to state 160
    TYPE_FLOAT      shift and go to state 165
    TYPE_CHAR       shift and go to state 162
    TYPE_STRING     shift and go to state 161
    TYPE_BOOLEAN    shift and go to state 164
    KWRD_ARRAY      shift and go to state 269
    IDENTIFIER      shift and go to state 82

    name                           shift and go to state 265
    qualified_name                 shift and go to state 84
    reference_type                 shift and go to state 266
    primitive_type                 shift and go to state 267
    class_data_type                shift and go to state 268
    type                           shift and go to state 334
    array_data_type                shift and go to state 271
    simple_name                    shift and go to state 74

state 328

    (113) variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN . variable_arguement_list RPAREN
    (110) variable_arguement_list -> . variable_declaration_initializer
    (111) variable_arguement_list -> . variable_arguement_list COMMA variable_declaration_initializer
    (107) variable_declaration_initializer -> . expression
    (108) variable_declaration_initializer -> . array_initializer
    (109) variable_declaration_initializer -> . class_initializer
    (10) expression -> . assignment_expression
    (197) array_initializer -> . KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN
    (198) array_initializer -> . KWRD_ARRAY LPAREN argument_list_opt RPAREN
    (199) class_initializer -> . KWRD_NEW name LPAREN argument_list_opt RPAREN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    KWRD_NEW        shift and go to state 296
    KWRD_ARRAY      shift and go to state 295
    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    variable_declaration_initializer shift and go to state 335
    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    variable_arguement_list        shift and go to state 336
    array_access                   shift and go to state 34
    and_expression                 shift and go to state 92
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 101
    inclusive_or_expression        shift and go to state 39
    literal                        shift and go to state 77
    relational_expression          shift and go to state 79
    cast_expression                shift and go to state 85
    conditional_or_expression      shift and go to state 59
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    assignment                     shift and go to state 127
    multiplicative_expression      shift and go to state 61
    additive_expression            shift and go to state 58
    method_invocation              shift and go to state 116
    class_initializer              shift and go to state 297
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    array_initializer              shift and go to state 298
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 128
    expression                     shift and go to state 299
    conditional_and_expression     shift and go to state 65

state 329

    (114) variable_declaration_body -> IDENTIFIER ASSIGN LPAREN func_arguement_list_opt RPAREN . FUNTYPE expression

    FUNTYPE         shift and go to state 337


state 330

    (196) array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN .

    COMMA           reduce using rule 196 (array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN .)
    RPAREN          reduce using rule 196 (array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN .)
    ASSIGN          reduce using rule 196 (array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN .)
    RBPAREN         reduce using rule 196 (array_data_type -> KWRD_ARRAY LBPAREN type RBPAREN .)


state 331

    (135) if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN . if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
    (136) if_then_else_intermediate -> . block
    (137) if_then_else_intermediate -> . if_then_else_statement_precedence
    (89) block -> . start_scope block_statements_opt end_scope
    (135) if_then_else_statement_precedence -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
    (90) start_scope -> . BLOCK_BEGIN

    KWRD_IF         shift and go to state 283
    BLOCK_BEGIN     shift and go to state 16

    if_then_else_statement_precedence shift and go to state 284
    if_then_else_intermediate      shift and go to state 338
    start_scope                    shift and go to state 17
    block                          shift and go to state 339

state 332

    (198) array_initializer -> KWRD_ARRAY LPAREN argument_list_opt RPAREN .

    RPAREN          reduce using rule 198 (array_initializer -> KWRD_ARRAY LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 198 (array_initializer -> KWRD_ARRAY LPAREN argument_list_opt RPAREN .)
    STATE_END       reduce using rule 198 (array_initializer -> KWRD_ARRAY LPAREN argument_list_opt RPAREN .)


state 333

    (199) class_initializer -> KWRD_NEW name LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 340


state 334

    (197) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type . RBPAREN LPAREN INT_CONST RPAREN

    RBPAREN         shift and go to state 341


state 335

    (110) variable_arguement_list -> variable_declaration_initializer .

    RPAREN          reduce using rule 110 (variable_arguement_list -> variable_declaration_initializer .)
    COMMA           reduce using rule 110 (variable_arguement_list -> variable_declaration_initializer .)


state 336

    (113) variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list . RPAREN
    (111) variable_arguement_list -> variable_arguement_list . COMMA variable_declaration_initializer

    RPAREN          shift and go to state 342
    COMMA           shift and go to state 343


state 337

    (114) variable_declaration_body -> IDENTIFIER ASSIGN LPAREN func_arguement_list_opt RPAREN FUNTYPE . expression
    (10) expression -> . assignment_expression
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    additive_expression            shift and go to state 58
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 101
    inclusive_or_expression        shift and go to state 39
    literal                        shift and go to state 77
    and_expression                 shift and go to state 92
    relational_expression          shift and go to state 79
    cast_expression                shift and go to state 85
    conditional_or_expression      shift and go to state 59
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    assignment                     shift and go to state 127
    multiplicative_expression      shift and go to state 61
    method_invocation              shift and go to state 116
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 128
    expression                     shift and go to state 344
    conditional_and_expression     shift and go to state 65

state 338

    (135) if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate . KWRD_ELSE if_then_else_intermediate

    KWRD_ELSE       shift and go to state 345


state 339

    (136) if_then_else_intermediate -> block .

    KWRD_ELSE       reduce using rule 136 (if_then_else_intermediate -> block .)


state 340

    (199) class_initializer -> KWRD_NEW name LPAREN argument_list_opt RPAREN .

    RPAREN          reduce using rule 199 (class_initializer -> KWRD_NEW name LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 199 (class_initializer -> KWRD_NEW name LPAREN argument_list_opt RPAREN .)
    STATE_END       reduce using rule 199 (class_initializer -> KWRD_NEW name LPAREN argument_list_opt RPAREN .)


state 341

    (197) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN . LPAREN INT_CONST RPAREN

    LPAREN          shift and go to state 346


state 342

    (113) variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list RPAREN .

    STATE_END       reduce using rule 113 (variable_declaration_body -> LPAREN variable_declarators RPAREN ASSIGN LPAREN variable_arguement_list RPAREN .)


state 343

    (111) variable_arguement_list -> variable_arguement_list COMMA . variable_declaration_initializer
    (107) variable_declaration_initializer -> . expression
    (108) variable_declaration_initializer -> . array_initializer
    (109) variable_declaration_initializer -> . class_initializer
    (10) expression -> . assignment_expression
    (197) array_initializer -> . KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN
    (198) array_initializer -> . KWRD_ARRAY LPAREN argument_list_opt RPAREN
    (199) class_initializer -> . KWRD_NEW name LPAREN argument_list_opt RPAREN
    (13) assignment_expression -> . assignment
    (14) assignment_expression -> . conditional_or_expression
    (15) assignment -> . valid_variable assignment_operator assignment_expression
    (27) conditional_or_expression -> . conditional_and_expression
    (28) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (85) valid_variable -> . name
    (86) valid_variable -> . array_access
    (29) conditional_and_expression -> . inclusive_or_expression
    (30) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (81) name -> . simple_name
    (82) name -> . qualified_name
    (76) array_access -> . name LBPAREN expression RBPAREN
    (31) inclusive_or_expression -> . exclusive_or_expression
    (32) inclusive_or_expression -> . inclusive_or_expression OR_BITWISE exclusive_or_expression
    (83) simple_name -> . IDENTIFIER
    (84) qualified_name -> . name DOT simple_name
    (33) exclusive_or_expression -> . and_expression
    (34) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_BITWISE equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQUAL relational_expression
    (39) equality_expression -> . equality_expression NEQUAL relational_expression
    (40) relational_expression -> . shift_expression
    (41) relational_expression -> . relational_expression GREATER shift_expression
    (42) relational_expression -> . relational_expression LESS shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (44) relational_expression -> . relational_expression LEQ shift_expression
    (45) shift_expression -> . additive_expression
    (46) shift_expression -> . shift_expression LSHIFT additive_expression
    (47) shift_expression -> . shift_expression RSHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression PLUS multiplicative_expression
    (50) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . unary_expression
    (52) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (54) multiplicative_expression -> . multiplicative_expression REMAINDER unary_expression
    (55) unary_expression -> . PLUS unary_expression
    (56) unary_expression -> . MINUS unary_expression
    (57) unary_expression -> . unary_expression_not_plus_minus
    (58) unary_expression_not_plus_minus -> . base_variable_set
    (59) unary_expression_not_plus_minus -> . TILDA unary_expression
    (60) unary_expression_not_plus_minus -> . NOT unary_expression
    (61) unary_expression_not_plus_minus -> . cast_expression
    (62) base_variable_set -> . variable_literal
    (63) base_variable_set -> . LPAREN expression RPAREN
    (64) cast_expression -> . LPAREN primitive_type RPAREN unary_expression
    (87) variable_literal -> . valid_variable
    (88) variable_literal -> . primary
    (65) primary -> . literal
    (66) primary -> . method_invocation
    (67) literal -> . int_float
    (68) literal -> . CHARACTER
    (69) literal -> . STRING_CONST
    (70) literal -> . BOOL_CONSTT
    (71) literal -> . BOOL_CONSTF
    (72) literal -> . KWRD_NULL
    (75) method_invocation -> . name LPAREN argument_list_opt RPAREN
    (73) int_float -> . FLOAT_CONST
    (74) int_float -> . INT_CONST

    KWRD_NEW        shift and go to state 296
    KWRD_ARRAY      shift and go to state 295
    IDENTIFIER      shift and go to state 82
    PLUS            shift and go to state 42
    MINUS           shift and go to state 35
    TILDA           shift and go to state 78
    NOT             shift and go to state 66
    LPAREN          shift and go to state 99
    CHARACTER       shift and go to state 91
    STRING_CONST    shift and go to state 36
    BOOL_CONSTT     shift and go to state 41
    BOOL_CONSTF     shift and go to state 37
    KWRD_NULL       shift and go to state 96
    FLOAT_CONST     shift and go to state 33
    INT_CONST       shift and go to state 75

    variable_declaration_initializer shift and go to state 347
    unary_expression               shift and go to state 54
    exclusive_or_expression        shift and go to state 71
    primary                        shift and go to state 72
    unary_expression_not_plus_minus shift and go to state 55
    array_access                   shift and go to state 34
    and_expression                 shift and go to state 92
    simple_name                    shift and go to state 74
    base_variable_set              shift and go to state 93
    valid_variable                 shift and go to state 101
    inclusive_or_expression        shift and go to state 39
    literal                        shift and go to state 77
    relational_expression          shift and go to state 79
    cast_expression                shift and go to state 85
    conditional_or_expression      shift and go to state 59
    assignment_expression          shift and go to state 97
    qualified_name                 shift and go to state 84
    assignment                     shift and go to state 127
    multiplicative_expression      shift and go to state 61
    additive_expression            shift and go to state 58
    method_invocation              shift and go to state 116
    class_initializer              shift and go to state 297
    shift_expression               shift and go to state 62
    equality_expression            shift and go to state 86
    array_initializer              shift and go to state 298
    int_float                      shift and go to state 46
    variable_literal               shift and go to state 64
    name                           shift and go to state 128
    expression                     shift and go to state 299
    conditional_and_expression     shift and go to state 65

state 344

    (114) variable_declaration_body -> IDENTIFIER ASSIGN LPAREN func_arguement_list_opt RPAREN FUNTYPE expression .

    STATE_END       reduce using rule 114 (variable_declaration_body -> IDENTIFIER ASSIGN LPAREN func_arguement_list_opt RPAREN FUNTYPE expression .)


state 345

    (135) if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE . if_then_else_intermediate
    (136) if_then_else_intermediate -> . block
    (137) if_then_else_intermediate -> . if_then_else_statement_precedence
    (89) block -> . start_scope block_statements_opt end_scope
    (135) if_then_else_statement_precedence -> . KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate
    (90) start_scope -> . BLOCK_BEGIN

    KWRD_IF         shift and go to state 283
    BLOCK_BEGIN     shift and go to state 16

    if_then_else_statement_precedence shift and go to state 284
    if_then_else_intermediate      shift and go to state 348
    start_scope                    shift and go to state 17
    block                          shift and go to state 339

state 346

    (197) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN . INT_CONST RPAREN

    INT_CONST       shift and go to state 349


state 347

    (111) variable_arguement_list -> variable_arguement_list COMMA variable_declaration_initializer .

    RPAREN          reduce using rule 111 (variable_arguement_list -> variable_arguement_list COMMA variable_declaration_initializer .)
    COMMA           reduce using rule 111 (variable_arguement_list -> variable_arguement_list COMMA variable_declaration_initializer .)


state 348

    (135) if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate .

    KWRD_ELSE       reduce using rule 135 (if_then_else_statement_precedence -> KWRD_IF LPAREN expression RPAREN if_then_else_intermediate KWRD_ELSE if_then_else_intermediate .)


state 349

    (197) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST . RPAREN

    RPAREN          shift and go to state 350


state 350

    (197) array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN .

    RPAREN          reduce using rule 197 (array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN .)
    COMMA           reduce using rule 197 (array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN .)
    STATE_END       reduce using rule 197 (array_initializer -> KWRD_NEW KWRD_ARRAY LBPAREN type RBPAREN LPAREN INT_CONST RPAREN .)

